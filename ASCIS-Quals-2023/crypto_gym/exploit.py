import math

m = 434132355696951526293636047629996923319432623081714412231661206335691555431447474875474503610885728097850181941881643264224509763055900755011461375239360982557157928595253346205671729794303283466114114835990448519184202111639646367823992462339365870984158361888864319114290645922529562762785766871909564882528898351116347494091807193907084867245234365339539675772315007437922391992960664755322794569161774775579789370766432481041151481995502590715115228093141883308076788642654437308967717606245317646021759319120842973846442381510255047153005838063016531415441085159053020177386376235575942000340883644893415826955083046190156713030135563444419655113562304751048609387532295325104039451142505356162942211376218088195055377995119808604812416721950617186218108941872149889798729973460873263543582965484501564203327274288932212252317669340542228195545443072184882001392434320219945588705304712498136978313742577241001402225695991173335844752581409003632102711419212307369794330582373166210035154625910607926711288463814266893775418963530970363809731935231538782865709764923158307790113543533753506165427337844434374485773170513484889725274491370376004216803137624192550615361272475167039050829296719586930216022428817799910811819409310551364210481490481125694100600664675676877002825676167426777312809779137608085927810911511618510953758981388792317910729290015696791961776525579506617801134005470103332020378003227301204974399070765282652932023534019904956464278722192357755971718300647162468952170834260417572534066108139196392289846326767898109602337881833426229526418753312615800667101252447284688203623317154948182198235468306146633522375457956913715348270580316298505566603913568024381930429377899235697079402677490611153786235174256425516013914090501572190376056416183969918624846166122719007745226696058340248915098247720158033772364050235121698675720465185980262389080305682551410445072982177
p = 9691170214881514721
n = 0
a7 = 9721472693440097649912818434242780940126751454285516204210337057540158411361220060542216047
a6 = 8908640770699212336719110734592111356299660375515448149203856607564051284350796834882115592
a5 = 7515913447622312388637521417080567535814252138999377446083301815439057142370025705610225804
a4 = 12520302271128772311400718683960721601041296326586557189140914603785525433138060626928895415
a3 = 12134717473746074941313544632244692823500568753452788352354554188834513257158907221906156243
a2 = 8312393282062003031523026880888661831281446225462597955029770752236853576029346094753169822
a1 = 10965011283505274667491448133299182123473536674617049364422306248420561875414666845282289105
a0 = m

def poly(x):
    return a7 * (x**7) + a6 * (x**6) + a5 * (x**5) + a4 * (x**4) + a3 * (x**3) + a2 * (x**2) + a1 * x + a0 - p ** 100

low = 10**90
high = 10**91
key = (low + high) // 2
count = 0

while count < 10000:
    if poly(key) < 0:
        low = key
        key = (low + high) // 2
    elif poly(key) > 0:
        high = key
        key = (low + high) // 2
    else:
        print(key)
        break
    count += 1

print(key)
print(poly(key))
print(key.to_bytes((key.bit_length() + 7) // 8, 'big'))

