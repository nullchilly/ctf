<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" docName="draft-ietf-httpbis-header-structure-19" indexInclude="true" ipr="trust200902" number="8941" prepTime="2021-02-08T15:01:41" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-httpbis-header-structure-19" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8941" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title>Structured Field Values for HTTP</title>
    <seriesInfo name="RFC" value="8941" stream="IETF"/>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization showOnFrontPage="true">Fastly</organization>
      <address>
        <postal>
          <city>Prahran</city>
          <region>VIC</region>
          <country>Australia</country>
        </postal>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>
    <author initials="P-H." surname="Kamp" fullname="Poul-Henning Kamp">
      <organization showOnFrontPage="true">The Varnish Cache Project</organization>
      <address>
        <email>phk@varnish-cache.org</email>
      </address>
    </author>
    <date month="02" year="2021"/>
    <area>Applications and Real-Time</area>
    <workgroup>HTTP</workgroup>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document describes a set of data types and associated algorithms
      that are intended to make it easier and safer to define and handle HTTP
      header and trailer fields, known as "Structured Fields", "Structured
      Headers", or "Structured Trailers". It is intended for use by
      specifications of new HTTP fields that wish to use a common syntax that
      is more restrictive than traditional HTTP field values.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8941" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2021 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-intentionally-strict-proces">Intentionally Strict Processing</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notational-conventions">Notational Conventions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-defining-new-structured-fie">Defining New Structured Fields</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-structured-data-types">Structured Data Types</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-lists">Lists</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.1.2">
                  <li pn="section-toc.1-1.3.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.3.2.1.2.1.1"><xref derivedContent="3.1.1" format="counter" sectionFormat="of" target="section-3.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-inner-lists">Inner Lists</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.3.2.1.2.2.1"><xref derivedContent="3.1.2" format="counter" sectionFormat="of" target="section-3.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parameters">Parameters</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dictionaries">Dictionaries</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-items">Items</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.3.2">
                  <li pn="section-toc.1-1.3.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.1.1"><xref derivedContent="3.3.1" format="counter" sectionFormat="of" target="section-3.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-integers">Integers</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.2.1"><xref derivedContent="3.3.2" format="counter" sectionFormat="of" target="section-3.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-decimals">Decimals</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.3">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.3.1"><xref derivedContent="3.3.3" format="counter" sectionFormat="of" target="section-3.3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-strings">Strings</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.4">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.4.1"><xref derivedContent="3.3.4" format="counter" sectionFormat="of" target="section-3.3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tokens">Tokens</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.5">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.5.1"><xref derivedContent="3.3.5" format="counter" sectionFormat="of" target="section-3.3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-byte-sequences">Byte Sequences</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.6">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.6.1"><xref derivedContent="3.3.6" format="counter" sectionFormat="of" target="section-3.3.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-booleans">Booleans</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-working-with-structured-fie">Working with Structured Fields in HTTP</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-structured-fiel">Serializing Structured Fields</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.1.2">
                  <li pn="section-toc.1-1.4.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.1.1"><xref derivedContent="4.1.1" format="counter" sectionFormat="of" target="section-4.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-list">Serializing a List</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.2.1"><xref derivedContent="4.1.2" format="counter" sectionFormat="of" target="section-4.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-dictionary">Serializing a Dictionary</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.3.1"><xref derivedContent="4.1.3" format="counter" sectionFormat="of" target="section-4.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-an-item">Serializing an Item</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.4">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.4.1"><xref derivedContent="4.1.4" format="counter" sectionFormat="of" target="section-4.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-an-integer">Serializing an Integer</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.5">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.5.1"><xref derivedContent="4.1.5" format="counter" sectionFormat="of" target="section-4.1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-decimal">Serializing a Decimal</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.6">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.6.1"><xref derivedContent="4.1.6" format="counter" sectionFormat="of" target="section-4.1.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-string">Serializing a String</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.7">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.7.1"><xref derivedContent="4.1.7" format="counter" sectionFormat="of" target="section-4.1.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-token">Serializing a Token</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.8">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.8.1"><xref derivedContent="4.1.8" format="counter" sectionFormat="of" target="section-4.1.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-byte-sequence">Serializing a Byte Sequence</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.9">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.9.1"><xref derivedContent="4.1.9" format="counter" sectionFormat="of" target="section-4.1.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializing-a-boolean">Serializing a Boolean</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-structured-fields">Parsing Structured Fields</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.2.2">
                  <li pn="section-toc.1-1.4.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.1.1"><xref derivedContent="4.2.1" format="counter" sectionFormat="of" target="section-4.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-a-list">Parsing a List</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.2.1"><xref derivedContent="4.2.2" format="counter" sectionFormat="of" target="section-4.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-a-dictionary">Parsing a Dictionary</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.3.1"><xref derivedContent="4.2.3" format="counter" sectionFormat="of" target="section-4.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-an-item">Parsing an Item</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.4">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.4.1"><xref derivedContent="4.2.4" format="counter" sectionFormat="of" target="section-4.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-an-integer-or-decim">Parsing an Integer or Decimal</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.5">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.5.1"><xref derivedContent="4.2.5" format="counter" sectionFormat="of" target="section-4.2.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-a-string">Parsing a String</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.6">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.6.1"><xref derivedContent="4.2.6" format="counter" sectionFormat="of" target="section-4.2.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-a-token">Parsing a Token</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.7">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.7.1"><xref derivedContent="4.2.7" format="counter" sectionFormat="of" target="section-4.2.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-a-byte-sequence">Parsing a Byte Sequence</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.8">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.8.1"><xref derivedContent="4.2.8" format="counter" sectionFormat="of" target="section-4.2.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-a-boolean">Parsing a Boolean</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-frequently-asked-questions">Frequently Asked Questions</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2">
              <li pn="section-toc.1-1.8.2.1">
                <t indent="0" pn="section-toc.1-1.8.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-why-not-json">Why Not JSON?</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-implementation-notes">Implementation Notes</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.d"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">Specifying the syntax of new HTTP header (and trailer) fields is an
      onerous task; even with the guidance in <xref target="RFC7231" section="8.3.1" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc7231#section-8.3.1" derivedContent="RFC7231"/>, there are many decisions -- and 
      pitfalls -- for a prospective HTTP field author.</t>
      <t indent="0" pn="section-1-2">Once a field is defined, bespoke parsers and serializers often need
      to be written, because each field value has a slightly different handling
      of what looks like common syntax.</t>
      <t indent="0" pn="section-1-3">This document introduces a set of common data structures for use in
      definitions of new HTTP field values to address these problems. In
      particular, it defines a generic, abstract model for them, along with a
      concrete serialization for expressing that model in HTTP <xref target="RFC7230" format="default" sectionFormat="of" derivedContent="RFC7230"/> header and trailer fields.</t>
      <t indent="0" pn="section-1-4">An HTTP field that is defined as a "Structured Header" or "Structured
      Trailer" (if the field can be either, it is a "Structured Field") uses
      the types defined in this specification to define its syntax and basic
      handling rules, thereby simplifying both its definition by specification
      writers and handling by implementations.</t>
      <t indent="0" pn="section-1-5">Additionally, future versions of HTTP can define alternative
      serializations of the abstract model of these structures, allowing
      fields that use that model to be transmitted more efficiently without
      being redefined.</t>
      <t indent="0" pn="section-1-6">Note that it is not a goal of this document to redefine the syntax of
      existing HTTP fields; the mechanisms described herein are only intended
      to be used with fields that explicitly opt into them.</t>
      <t indent="0" pn="section-1-7"><xref target="specify" format="default" sectionFormat="of" derivedContent="Section 2"/> describes how to specify a
      Structured Field.</t>
      <t indent="0" pn="section-1-8"><xref target="types" format="default" sectionFormat="of" derivedContent="Section 3"/> defines a number of abstract
      data types that can be used in Structured Fields.</t>
      <t indent="0" pn="section-1-9">Those abstract types can be serialized into and parsed from HTTP
      field values using the algorithms described in <xref target="text" format="default" sectionFormat="of" derivedContent="Section 4"/>.</t>
      <section anchor="strict" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-intentionally-strict-proces">Intentionally Strict Processing</name>
        <t indent="0" pn="section-1.1-1">This specification intentionally defines strict parsing and
	serialization behaviors using step-by-step algorithms; the only error
	handling defined is to fail the operation altogether.</t>
        <t indent="0" pn="section-1.1-2">It is designed to encourage faithful implementation and 
	good interoperability. Therefore, an implementation that tried to be
	helpful by being more tolerant of input would make interoperability
	worse, since that would create pressure on other implementations to
	implement similar (but likely subtly different) workarounds.</t>
        <t indent="0" pn="section-1.1-3">In other words, strict processing is an intentional feature of this
	specification; it allows non-conformant input to be discovered and
	corrected by the producer early and avoids both interoperability and
	security issues that might otherwise result.</t>
        <t indent="0" pn="section-1.1-4">Note that as a result of this strictness, if a field is appended to
	by multiple parties (e.g., intermediaries or different components in
	the sender), an error in one party's value is likely to cause the
	entire field value to fail parsing.</t>
      </section>
      <section anchor="notational-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-notational-conventions">Notational Conventions</name>
        <t indent="0" pn="section-1.2-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>", 
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as 
    described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
        <t indent="0" pn="section-1.2-2">This document uses algorithms to specify parsing and serialization
	behaviors and the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/> to illustrate expected syntax in
	HTTP header fields. In doing so, it uses the VCHAR, SP, DIGIT, ALPHA,
	and DQUOTE rules from <xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/>. It
	also includes the tchar and OWS rules from <xref target="RFC7230" format="default" sectionFormat="of" derivedContent="RFC7230"/>.</t>
        <t indent="0" pn="section-1.2-3">When parsing from HTTP fields, implementations <bcp14>MUST</bcp14> have behavior
	that is indistinguishable from following the algorithms. If there is
	disagreement between the parsing algorithms and ABNF, the specified
	algorithms take precedence.</t>
        <t indent="0" pn="section-1.2-4">For serialization to HTTP fields, the ABNF illustrates their
	expected wire representations, and the algorithms define the
	recommended way to produce them. Implementations <bcp14>MAY</bcp14> vary from the
	specified behavior so long as the output is still correctly handled by
	the parsing algorithm described in <xref target="text-parse" format="default" sectionFormat="of" derivedContent="Section 4.2"/>.</t>
      </section>
    </section>
    <section anchor="specify" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-defining-new-structured-fie">Defining New Structured Fields</name>
      <t indent="0" pn="section-2-1">To specify an HTTP field as a Structured Field, its authors need to:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2-2">
        <li pn="section-2-2.1">Normatively reference this specification. Recipients and
	generators of the field need to know that the requirements of this
	document are in effect.</li>
        <li pn="section-2-2.2">Identify whether the field is a Structured Header (i.e., it can
	only be used in the header section -- the common case), a Structured
	Trailer (only in the trailer section), or a Structured Field
	(both).</li>
        <li pn="section-2-2.3">Specify the type of the field value; either List (<xref target="list" format="default" sectionFormat="of" derivedContent="Section 3.1"/>), Dictionary (<xref target="dictionary" format="default" sectionFormat="of" derivedContent="Section 3.2"/>), or Item (<xref target="item" format="default" sectionFormat="of" derivedContent="Section 3.3"/>).</li>
        <li pn="section-2-2.4">Define the semantics of the field value.</li>
        <li pn="section-2-2.5">Specify any additional constraints upon the field value, as well
	as the consequences when those constraints are violated.</li>
      </ul>
      <t indent="0" pn="section-2-3">Typically, this means that a field definition will specify the
      top-level type -- List, Dictionary, or Item -- and then define its
      allowable types and constraints upon them. For example, a header
      defined as a List might have all Integer members, or a mix of types; a
      header defined as an Item might allow only Strings, and additionally
      only strings beginning with the letter "Q", or strings in
      lowercase. Likewise, Inner Lists (<xref target="inner-list" format="default" sectionFormat="of" derivedContent="Section 3.1.1"/>) are only valid when a field definition explicitly
      allows them.</t>
      <t indent="0" pn="section-2-4">When parsing fails, the entire field is ignored (see <xref target="text-parse" format="default" sectionFormat="of" derivedContent="Section 4.2"/>); in most situations, violating
      field-specific constraints should have the same effect. Thus, if a
      header is defined as an Item and required to be an Integer, but a String
      is received, the field will by default be ignored. If the field requires
      different error handling, this should be explicitly specified.</t>
      <t indent="0" pn="section-2-5">Both Items and Inner Lists allow parameters as an extensibility
      mechanism; this means that values can later be extended to accommodate
      more information, if need be. To preserve forward compatibility, field
      specifications are discouraged from defining the presence of an
      unrecognized parameter as an error condition.</t>
      <t indent="0" pn="section-2-6">To further assure that this extensibility is available in the future,
      and to encourage consumers to use a complete parser implementation, a
      field definition can specify that "grease" parameters be added by
      senders. A specification could stipulate that all parameters that fit a
      defined pattern are reserved for this use and then encourage them to be
      sent on some portion of requests. This helps to discourage recipients
      from writing a parser that does not account for Parameters.</t>
      <t indent="0" pn="section-2-7">Specifications that use Dictionaries can also allow for forward
      compatibility by requiring that the presence of -- as well as value and
      type associated with -- unknown members be ignored. Subsequent specifications
      can then add additional members, specifying constraints on them as
      appropriate.</t>
      <t indent="0" pn="section-2-8">An extension to a Structured Field can then require that an entire
      field value be ignored by a recipient that understands the extension if
      constraints on the value it defines are not met.</t>
      <t indent="0" pn="section-2-9">A field definition cannot relax the requirements of this
      specification because doing so would preclude handling by generic
      software; they can only add additional constraints (for example, on the
      numeric range of Integers and Decimals, the format of Strings and
      Tokens, the types allowed in a Dictionary's values, or the number of
      Items in a List). Likewise, field definitions can only use this
      specification for the entire field value, not a portion thereof.</t>
      <t indent="0" pn="section-2-10">This specification defines minimums for the length or number of
      various structures supported by implementations. It does not specify
      maximum sizes in most cases, but authors should be aware that HTTP
      implementations do impose various limits on the size of individual
      fields, the total number of fields, and/or the size of the entire header
      or trailer section.</t>
      <t indent="0" pn="section-2-11">Specifications can refer to a field name as a "structured header
      name", "structured trailer name", or "structured field name" as
      appropriate. Likewise, they can refer its field value as a "structured
      header value", "structured trailer value", or "structured field value" as
      necessary. 
Field definitions are encouraged to use the ABNF rules
      beginning with "sf-" defined in this specification; other rules in this
      specification are not intended to be used in field definitions.</t>
      <t indent="0" pn="section-2-12">For example, a fictitious Foo-Example header field might be specified
      as:</t>
      <blockquote pn="section-2-13">
        <t indent="0" pn="section-2-13.1">42. Foo-Example Header</t>
        <t indent="0" pn="section-2-13.2">The Foo-Example HTTP header field conveys information about how
much Foo the message has.</t>
        <t indent="0" pn="section-2-13.3">Foo-Example is an Item Structured Header [RFC8941]. Its value MUST be
an Integer (Section 3.3.1 of [RFC8941]). Its ABNF is:</t>
        <artwork align="left" pn="section-2-13.4">
   Foo-Example = sf-integer
</artwork>
        <t indent="0" pn="section-2-13.5">Its value indicates the amount of Foo in the message, and it MUST
be between 0 and 10, inclusive; other values MUST cause
the entire header field to be ignored.</t>
        <t indent="0" pn="section-2-13.6">The following parameter is defined:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2-13.7">
          <li pn="section-2-13.7.1">A parameter whose key is "foourl", and whose value is a String
  (Section 3.3.3 of [RFC8941]), conveying the Foo URL
  for the message. See below for processing requirements.</li>
        </ul>
        <t indent="0" pn="section-2-13.8">"foourl" contains a URI-reference (Section 4.1 of [RFC3986]). If
its value is not a valid URI-reference, the entire header field
MUST be ignored. If its value is a relative reference (Section 4.2
of [RFC3986]), it MUST be resolved (Section 5 of [RFC3986]) before
being used.</t>
        <t indent="0" pn="section-2-13.9">For example:</t>
        <artwork align="left" pn="section-2-13.10">
   Foo-Example: 2; foourl="https://foo.example.com/"
</artwork>
      </blockquote>
    </section>
    <section anchor="types" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-structured-data-types">Structured Data Types</name>
      <t indent="0" pn="section-3-1">This section defines the abstract types for Structured Fields. The
      ABNF provided represents the on-wire format in HTTP field values.</t>
      <t indent="0" pn="section-3-2">In summary:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3-3">
        <li pn="section-3-3.1">There are three top-level types that an HTTP field can be defined
	as: Lists, Dictionaries, and Items.</li>
        <li pn="section-3-3.2">Lists and Dictionaries are containers; their members can be Items
	or Inner Lists (which are themselves arrays of Items).</li>
        <li pn="section-3-3.3">Both Items and Inner Lists can be Parameterized with key/value pairs.</li>
      </ul>
      <section anchor="list" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-lists">Lists</name>
        <t indent="0" pn="section-3.1-1">Lists are arrays of zero or more members, each of which can be an
	Item (<xref target="item" format="default" sectionFormat="of" derivedContent="Section 3.3"/>) or an Inner List (<xref target="inner-list" format="default" sectionFormat="of" derivedContent="Section 3.1.1"/>), both of which can be
	Parameterized (<xref target="param" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>).</t>
        <t indent="0" pn="section-3.1-2">The ABNF for Lists in HTTP fields is:</t>
        <sourcecode type="abnf" markers="false" pn="section-3.1-3">
sf-list       = list-member *( OWS "," OWS list-member )
list-member   = sf-item / inner-list
</sourcecode>
        <t indent="0" pn="section-3.1-4">Each member is separated by a comma and optional whitespace. For
	example, a field whose value is defined as a List of Tokens could
	look like:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.1-5">
Example-List: sugar, tea, rum
</sourcecode>
        <t indent="0" pn="section-3.1-6">An empty List is denoted by not serializing the field at all. This
	implies that fields defined as Lists have a default empty value.</t>
        <t indent="0" pn="section-3.1-7">Note that Lists can have their members split across multiple lines
	of the same header or trailer section, as per <xref target="RFC7230" section="3.2.2" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc7230#section-3.2.2" derivedContent="RFC7230"/>; for example, the following are 
	equivalent:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.1-8">
Example-List: sugar, tea, rum
</sourcecode>
        <t indent="0" pn="section-3.1-9">and</t>
        <sourcecode type="http-message" markers="false" pn="section-3.1-10">
Example-List: sugar, tea
Example-List: rum
</sourcecode>
        <t indent="0" pn="section-3.1-11">However, individual members of a List cannot be safely split
	between lines; see <xref target="text-parse" format="default" sectionFormat="of" derivedContent="Section 4.2"/>
	for details.</t>
        <t indent="0" pn="section-3.1-12">Parsers <bcp14>MUST</bcp14> support Lists containing at least 1024 members. Field
	specifications can constrain the types and cardinality of individual
	List values as they require.</t>
        <section anchor="inner-list" numbered="true" removeInRFC="false" toc="include" pn="section-3.1.1">
          <name slugifiedName="name-inner-lists">Inner Lists</name>
          <t indent="0" pn="section-3.1.1-1">An Inner List is an array of zero or more Items (<xref target="item" format="default" sectionFormat="of" derivedContent="Section 3.3"/>). Both the individual Items and the
	  Inner List itself can be Parameterized (<xref target="param" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>).</t>
          <t indent="0" pn="section-3.1.1-2">The ABNF for Inner Lists is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.1.1-3">
inner-list    = "(" *SP [ sf-item *( 1*SP sf-item ) *SP ] ")"
                parameters
</sourcecode>
          <t indent="0" pn="section-3.1.1-4">Inner Lists are denoted by surrounding parenthesis, and
	  their values are delimited by one or more spaces. A field whose value is
	  defined as a List of Inner Lists of Strings could look like:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.1.1-5">
Example-List: ("foo" "bar"), ("baz"), ("bat" "one"), ()
</sourcecode>
          <t indent="0" pn="section-3.1.1-6">Note that the last member in this example is an empty Inner List.</t>
          <t indent="0" pn="section-3.1.1-7">A header field whose value is defined as a List of Inner Lists
	  with Parameters at both levels could look like:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.1.1-8">
Example-List: ("foo"; a=1;b=2);lvl=5, ("bar" "baz");lvl=1
</sourcecode>
          <t indent="0" pn="section-3.1.1-9">Parsers <bcp14>MUST</bcp14> support Inner Lists containing at least 256
	  members. Field specifications can constrain the types and
	  cardinality of individual Inner List members as they require.</t>
        </section>
        <section anchor="param" numbered="true" removeInRFC="false" toc="include" pn="section-3.1.2">
          <name slugifiedName="name-parameters">Parameters</name>
          <t indent="0" pn="section-3.1.2-1">Parameters are an ordered map of key-value pairs that are
	  associated with an Item (<xref target="item" format="default" sectionFormat="of" derivedContent="Section 3.3"/>) or
	  Inner List (<xref target="inner-list" format="default" sectionFormat="of" derivedContent="Section 3.1.1"/>).
          The keys
	  are unique within the scope of the Parameters they occur within, and
	  the values are bare items (i.e., they themselves cannot be
	  parameterized; see <xref target="item" format="default" sectionFormat="of" derivedContent="Section 3.3"/>).</t>
          <t indent="0" pn="section-3.1.2-2">Implementations <bcp14>MUST</bcp14> provide access to Parameters both by index and
   by key.  Specifications <bcp14>MAY</bcp14> use either means of accessing them.</t>
          <t indent="0" pn="section-3.1.2-3">The ABNF for Parameters is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.1.2-4">
parameters    = *( ";" *SP parameter )
parameter     = param-key [ "=" param-value ]
param-key     = key
key           = ( lcalpha / "*" )
                *( lcalpha / DIGIT / "_" / "-" / "." / "*" )
lcalpha       = %x61-7A ; a-z
param-value   = bare-item
</sourcecode>
          <t indent="0" pn="section-3.1.2-5">Note that parameters are ordered as serialized, and parameter
	  keys cannot contain uppercase letters. A parameter is separated from
	  its Item or Inner List and other parameters by a semicolon. For
	  example:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.1.2-6">
Example-List: abc;a=1;b=2; cde_456, (ghi;jk=4 l);q="9";r=w
</sourcecode>
          <t indent="0" pn="section-3.1.2-7">Parameters whose value is Boolean (see <xref target="boolean" format="default" sectionFormat="of" derivedContent="Section 3.3.6"/>) true <bcp14>MUST</bcp14> omit that value when serialized. For
	  example, the "a" parameter here is true, while the "b" parameter is
	  false:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.1.2-8">
Example-Integer: 1; a; b=?0
</sourcecode>
          <t indent="0" pn="section-3.1.2-9">Note that this requirement is only on serialization; parsers are
	  still required to correctly handle the true value when it appears in
	  a parameter.</t>
          <t indent="0" pn="section-3.1.2-10">Parsers <bcp14>MUST</bcp14> support at least 256 parameters on an Item or Inner
	  List, and support parameter keys with at least 64 characters. Field
	  specifications can constrain the order of individual parameters, as
	  well as their values' types as required.</t>
        </section>
      </section>
      <section anchor="dictionary" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-dictionaries">Dictionaries</name>
        <t indent="0" pn="section-3.2-1">Dictionaries are ordered maps of key-value pairs, where the keys
	are short textual strings and the values are Items (<xref target="item" format="default" sectionFormat="of" derivedContent="Section 3.3"/>) or arrays of Items, both of which
	can be Parameterized (<xref target="param" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>). There
	can be zero or more members, and their keys are unique in the scope
	of the Dictionary they occur within.</t>
        <t indent="0" pn="section-3.2-2">Implementations <bcp14>MUST</bcp14> provide access to Dictionaries both by index
	and by key. Specifications <bcp14>MAY</bcp14> use either means of accessing the
	members.</t>
        <t indent="0" pn="section-3.2-3">The ABNF for Dictionaries is:</t>
        <sourcecode type="abnf" markers="false" pn="section-3.2-4">
sf-dictionary  = dict-member *( OWS "," OWS dict-member )
dict-member    = member-key ( parameters / ( "=" member-value ))
member-key     = key
member-value   = sf-item / inner-list
</sourcecode>
        <t indent="0" pn="section-3.2-5">Members are ordered as serialized and separated by a comma with
	optional whitespace. Member keys cannot contain uppercase
	characters. Keys and values are separated by "=" (without
	whitespace). For example:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.2-6">
Example-Dict: en="Applepie", da=:w4ZibGV0w6ZydGU=:
</sourcecode>
        <t indent="0" pn="section-3.2-7">Note that in this example, the final "=" is due to the inclusion of
	a Byte Sequence; see <xref target="binary" format="default" sectionFormat="of" derivedContent="Section 3.3.5"/>.</t>
        <t indent="0" pn="section-3.2-8">Members whose value is Boolean (see <xref target="boolean" format="default" sectionFormat="of" derivedContent="Section 3.3.6"/>) true <bcp14>MUST</bcp14> omit that value when serialized. For
	example, here both "b" and "c" are true:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.2-9">
Example-Dict: a=?0, b, c; foo=bar
</sourcecode>
        <t indent="0" pn="section-3.2-10">Note that this requirement is only on serialization; parsers are
	still required to correctly handle the true Boolean value when it
	appears in Dictionary values.</t>
        <t indent="0" pn="section-3.2-11">A Dictionary with a member whose value is an Inner List of Tokens:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.2-12">
Example-Dict: rating=1.5, feelings=(joy sadness)
</sourcecode>
        <t indent="0" pn="section-3.2-13">A Dictionary with a mix of Items and Inner Lists, some with parameters:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.2-14">
Example-Dict: a=(1 2), b=3, c=4;aa=bb, d=(5 6);valid
</sourcecode>
        <t indent="0" pn="section-3.2-15">As with Lists, an empty Dictionary is represented by omitting the
	entire field. This implies that fields defined as Dictionaries have a
	default empty value.</t>
        <t indent="0" pn="section-3.2-16">Typically, a field specification will define the semantics of
	Dictionaries by specifying the allowed type(s) for individual members
	by their keys, as well as whether their presence is required or
	optional. Recipients <bcp14>MUST</bcp14> ignore members whose keys that are undefined or unknown,
	unless the field's specification specifically disallows them.</t>
        <t indent="0" pn="section-3.2-17">Note that Dictionaries can have their members split across multiple
	lines of the same header or trailer section; for example, the following
	are equivalent:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.2-18">
Example-Dict: foo=1, bar=2
</sourcecode>
        <t indent="0" pn="section-3.2-19">and</t>
        <sourcecode type="http-message" markers="false" pn="section-3.2-20">
Example-Dict: foo=1
Example-Dict: bar=2
</sourcecode>
        <t indent="0" pn="section-3.2-21">However, individual members of a Dictionary cannot be safely split
	between lines; see <xref target="text-parse" format="default" sectionFormat="of" derivedContent="Section 4.2"/> for
	details.</t>
        <t indent="0" pn="section-3.2-22">Parsers <bcp14>MUST</bcp14> support Dictionaries containing at least 1024
	key/value pairs and keys with at least 64 characters. Field
	specifications can constrain the order of individual Dictionary
	members, as well as their values' types as required.</t>
      </section>
      <section anchor="item" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-items">Items</name>
        <t indent="0" pn="section-3.3-1">An Item can be an Integer (<xref target="integer" format="default" sectionFormat="of" derivedContent="Section 3.3.1"/>), a Decimal (<xref target="decimal" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>), a String (<xref target="string" format="default" sectionFormat="of" derivedContent="Section 3.3.3"/>), a Token (<xref target="token" format="default" sectionFormat="of" derivedContent="Section 3.3.4"/>),
	a Byte Sequence (<xref target="binary" format="default" sectionFormat="of" derivedContent="Section 3.3.5"/>), or a Boolean
	(<xref target="boolean" format="default" sectionFormat="of" derivedContent="Section 3.3.6"/>). It can have associated
	parameters (<xref target="param" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>).</t>
        <t indent="0" pn="section-3.3-2">The ABNF for Items is:</t>
        <sourcecode type="abnf" markers="false" pn="section-3.3-3">
sf-item   = bare-item parameters
bare-item = sf-integer / sf-decimal / sf-string / sf-token
            / sf-binary / sf-boolean
</sourcecode>
        <t indent="0" pn="section-3.3-4">For example, a header field that is defined to be an Item that is
	an Integer might look like:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.3-5">
Example-Integer: 5
</sourcecode>
        <t indent="0" pn="section-3.3-6">or with parameters:</t>
        <sourcecode type="http-message" markers="false" pn="section-3.3-7">
Example-Integer: 5; foo=bar
</sourcecode>
        <section anchor="integer" numbered="true" removeInRFC="false" toc="include" pn="section-3.3.1">
          <name slugifiedName="name-integers">Integers</name>
          <t indent="0" pn="section-3.3.1-1">Integers have a range of -999,999,999,999,999 to
	  999,999,999,999,999 inclusive (i.e., up to fifteen digits, signed),
	  for IEEE 754 compatibility <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/>.</t>
          <t indent="0" pn="section-3.3.1-2">The ABNF for Integers is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.3.1-3">
sf-integer = ["-"] 1*15DIGIT
</sourcecode>
          <t indent="0" pn="section-3.3.1-4">For example:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.3.1-5">
Example-Integer: 42
</sourcecode>
          <t indent="0" pn="section-3.3.1-6">Integers larger than 15 digits can be supported in a variety of
	  ways; for example, by using a String (<xref target="string" format="default" sectionFormat="of" derivedContent="Section 3.3.3"/>), a Byte Sequence (<xref target="binary" format="default" sectionFormat="of" derivedContent="Section 3.3.5"/>), or a parameter on an Integer that acts as a
	  scaling factor.</t>
          <t indent="0" pn="section-3.3.1-7">While it is possible to serialize Integers with leading zeros
	  (e.g., "0002", "-01") and signed zero ("-0"), these distinctions may
	  not be preserved by implementations.</t>
          <t indent="0" pn="section-3.3.1-8">Note that commas in Integers are used in this section's prose
	  only for readability; they are not valid in the wire format.</t>
        </section>
        <section anchor="decimal" numbered="true" removeInRFC="false" toc="include" pn="section-3.3.2">
          <name slugifiedName="name-decimals">Decimals</name>
          <t indent="0" pn="section-3.3.2-1">Decimals are numbers with an integer and a fractional
	  component. The integer component has at most 12 digits; the
	  fractional component has at most three digits.</t>
          <t indent="0" pn="section-3.3.2-2">The ABNF for decimals is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.3.2-3">
sf-decimal  = ["-"] 1*12DIGIT "." 1*3DIGIT
</sourcecode>
          <t indent="0" pn="section-3.3.2-4">For example, a header whose value is defined as a Decimal could
	  look like:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.3.2-5">
Example-Decimal: 4.5
</sourcecode>
          <t indent="0" pn="section-3.3.2-6">While it is possible to serialize Decimals with leading zeros
	  (e.g., "0002.5", "-01.334"), trailing zeros (e.g., "5.230",
	  "-0.40"), and signed zero (e.g., "-0.0"), these distinctions may not
	  be preserved by implementations.</t>
          <t indent="0" pn="section-3.3.2-7">Note that the serialization algorithm (<xref target="ser-decimal" format="default" sectionFormat="of" derivedContent="Section 4.1.5"/>) rounds input with more than three digits of
	  precision in the fractional component. If an alternative rounding
	  strategy is desired, this should be specified by the header
	  definition to occur before serialization.</t>
        </section>
        <section anchor="string" numbered="true" removeInRFC="false" toc="include" pn="section-3.3.3">
          <name slugifiedName="name-strings">Strings</name>
          <t indent="0" pn="section-3.3.3-1">Strings are zero or more printable ASCII <xref target="RFC0020" format="default" sectionFormat="of" derivedContent="RFC0020"/> characters (i.e., the range %x20 to %x7E). Note
	  that this excludes tabs, newlines, carriage returns, etc.</t>
          <t indent="0" pn="section-3.3.3-2">The ABNF for Strings is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.3.3-3">
sf-string = DQUOTE *chr DQUOTE
chr       = unescaped / escaped
unescaped = %x20-21 / %x23-5B / %x5D-7E
escaped   = "\" ( DQUOTE / "\" )
</sourcecode>
          <t indent="0" pn="section-3.3.3-4">Strings are delimited with double quotes, using a backslash ("\")
	  to escape double quotes and backslashes. For example:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.3.3-5">
Example-String: "hello world"
</sourcecode>
          <t indent="0" pn="section-3.3.3-6">Note that Strings only use DQUOTE as a delimiter; single quotes
	  do not delimit Strings. Furthermore, only DQUOTE and "\" can be
	  escaped; other characters after "\" <bcp14>MUST</bcp14> cause parsing to fail.</t>
          <t indent="0" pn="section-3.3.3-7">Unicode is not directly supported in Strings, because it causes a
	  number of interoperability issues, and -- with few exceptions -- field
	  values do not require it.</t>
          <t indent="0" pn="section-3.3.3-8">When it is necessary for a field value to convey non-ASCII
	  content, a Byte Sequence (<xref target="binary" format="default" sectionFormat="of" derivedContent="Section 3.3.5"/>)
	  can be specified, along with a character encoding (preferably UTF-8 <xref target="STD63" format="default" sectionFormat="of" derivedContent="STD63"/>).</t>
          <t indent="0" pn="section-3.3.3-9">Parsers <bcp14>MUST</bcp14> support Strings (after any decoding) with at least
	  1024 characters.</t>
        </section>
        <section anchor="token" numbered="true" removeInRFC="false" toc="include" pn="section-3.3.4">
          <name slugifiedName="name-tokens">Tokens</name>
          <t indent="0" pn="section-3.3.4-1">Tokens are short textual words; their abstract model is identical
	  to their expression in the HTTP field value serialization.</t>
          <t indent="0" pn="section-3.3.4-2">The ABNF for Tokens is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.3.4-3">
sf-token = ( ALPHA / "*" ) *( tchar / ":" / "/" )
</sourcecode>
          <t indent="0" pn="section-3.3.4-4">For example:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.3.4-5">
Example-Token: foo123/456
</sourcecode>
          <t indent="0" pn="section-3.3.4-6">Parsers <bcp14>MUST</bcp14> support Tokens with at least 512 characters.</t>
          <t indent="0" pn="section-3.3.4-7">Note that Token allows the same characters as the "token" ABNF
	  rule defined in <xref target="RFC7230" format="default" sectionFormat="of" derivedContent="RFC7230"/>, with the
	  exceptions that the first character is required to be either ALPHA
	  or "*", and ":" and "/" are also allowed in subsequent
	  characters.</t>
        </section>
        <section anchor="binary" numbered="true" removeInRFC="false" toc="include" pn="section-3.3.5">
          <name slugifiedName="name-byte-sequences">Byte Sequences</name>
          <t indent="0" pn="section-3.3.5-1">Byte Sequences can be conveyed in Structured Fields.</t>
          <t indent="0" pn="section-3.3.5-2">The ABNF for a Byte Sequence is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.3.5-3">
sf-binary = ":" *(base64) ":"
base64    = ALPHA / DIGIT / "+" / "/" / "="
</sourcecode>
          <t indent="0" pn="section-3.3.5-4">A Byte Sequence is delimited with colons and encoded using base64
	  (<xref target="RFC4648" sectionFormat="comma" section="4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-4" derivedContent="RFC4648"/>). For
	  example:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.3.5-5">
Example-ByteSequence: :cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg==:
</sourcecode>
          <t indent="0" pn="section-3.3.5-6">Parsers <bcp14>MUST</bcp14> support Byte Sequences with at least 16384 octets
	  after decoding.</t>
        </section>
        <section anchor="boolean" numbered="true" removeInRFC="false" toc="include" pn="section-3.3.6">
          <name slugifiedName="name-booleans">Booleans</name>
          <t indent="0" pn="section-3.3.6-1">Boolean values can be conveyed in Structured Fields.</t>
          <t indent="0" pn="section-3.3.6-2">The ABNF for a Boolean is:</t>
          <sourcecode type="abnf" markers="false" pn="section-3.3.6-3">
sf-boolean = "?" boolean
boolean    = "0" / "1"
</sourcecode>
          <t indent="0" pn="section-3.3.6-4">A Boolean is indicated with a leading "?" character followed by a
	  "1" for a true value or "0" for false. For example:</t>
          <sourcecode type="http-message" markers="false" pn="section-3.3.6-5">
Example-Boolean: ?1
</sourcecode>
          <t indent="0" pn="section-3.3.6-6">Note that in Dictionary (<xref target="dictionary" format="default" sectionFormat="of" derivedContent="Section 3.2"/>) and Parameter (<xref target="param" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>) values, Boolean true is indicated by omitting
	  the value.</t>
        </section>
      </section>
    </section>
    <section anchor="text" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-working-with-structured-fie">Working with Structured Fields in HTTP</name>
      <t indent="0" pn="section-4-1">This section defines how to serialize and parse Structured Fields in
      textual HTTP field values and other encodings compatible with them
      (e.g., in HTTP/2 <xref target="RFC7540" format="default" sectionFormat="of" derivedContent="RFC7540"/> before
      compression with HPACK <xref target="RFC7541" format="default" sectionFormat="of" derivedContent="RFC7541"/>).</t>
      <section anchor="text-serialize" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-serializing-structured-fiel">Serializing Structured Fields</name>
        <t indent="0" pn="section-4.1-1">Given a structure defined in this specification, return an ASCII
	string suitable for use in an HTTP field value.</t>
        <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1-2">
          <li pn="section-4.1-2.1" derivedCounter="1.">If the structure is a Dictionary or List and its value is empty
	  (i.e., it has no members), do not serialize the field at all (i.e.,
	  omit both the field-name and field-value).</li>
          <li pn="section-4.1-2.2" derivedCounter="2.">If the structure is a List, let output_string be the result of
	  running Serializing a List (<xref target="ser-list" format="default" sectionFormat="of" derivedContent="Section 4.1.1"/>) with the structure.</li>
          <li pn="section-4.1-2.3" derivedCounter="3.">Else, if the structure is a Dictionary, let output_string be the
	  result of running Serializing a Dictionary (<xref target="ser-dictionary" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>) with the structure.</li>
          <li pn="section-4.1-2.4" derivedCounter="4.">Else, if the structure is an Item, let output_string be the
	  result of running Serializing an Item (<xref target="ser-item" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) with the structure.</li>
          <li pn="section-4.1-2.5" derivedCounter="5.">Else, fail serialization.</li>
          <li pn="section-4.1-2.6" derivedCounter="6.">Return output_string converted into an array of bytes, using
	  ASCII encoding <xref target="RFC0020" format="default" sectionFormat="of" derivedContent="RFC0020"/>.</li>
        </ol>
        <section anchor="ser-list" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.1">
          <name slugifiedName="name-serializing-a-list">Serializing a List</name>
          <t indent="0" pn="section-4.1.1-1">Given an array of (member_value, parameters) tuples as
	  input_list, return an ASCII string suitable for use in an HTTP field
	  value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1-2">
            <li pn="section-4.1.1-2.1" derivedCounter="1.">Let output be an empty string.</li>
            <li pn="section-4.1.1-2.2" derivedCounter="2.">
              <t indent="0" pn="section-4.1.1-2.2.1">For each (member_value, parameters) of input_list:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1-2.2.2">
                <li pn="section-4.1.1-2.2.2.1" derivedCounter="1.">If member_value is an array, append the result of running
		Serializing an Inner List (<xref target="ser-innerlist" format="default" sectionFormat="of" derivedContent="Section 4.1.1.1"/>) with (member_value, parameters) to
		output.</li>
                <li pn="section-4.1.1-2.2.2.2" derivedCounter="2.">Otherwise, append the result of running Serializing an
		Item (<xref target="ser-item" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) with
		(member_value, parameters) to output.</li>
                <li pn="section-4.1.1-2.2.2.3" derivedCounter="3.">
                  <t indent="0" pn="section-4.1.1-2.2.2.3.1">If more member_values remain in input_list:
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1-2.2.2.3.2">
                    <li pn="section-4.1.1-2.2.2.3.2.1" derivedCounter="1.">Append "," to output.</li>
                    <li pn="section-4.1.1-2.2.2.3.2.2" derivedCounter="2.">Append a single SP to output.</li>
                  </ol>
                </li>
              </ol>
            </li>
            <li pn="section-4.1.1-2.3" derivedCounter="3.">Return output.</li>
          </ol>
          <section anchor="ser-innerlist" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1.1">
            <name slugifiedName="name-serializing-an-inner-list">Serializing an Inner List</name>
            <t indent="0" pn="section-4.1.1.1-1">Given an array of (member_value, parameters) tuples as
	    inner_list, and parameters as list_parameters, return an ASCII
	    string suitable for use in an HTTP field value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1.1-2">
              <li pn="section-4.1.1.1-2.1" derivedCounter="1.">Let output be the string "(".</li>
              <li pn="section-4.1.1.1-2.2" derivedCounter="2.">
                <t indent="0" pn="section-4.1.1.1-2.2.1">For each (member_value, parameters) of inner_list:
                </t>
                <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1.1-2.2.2">
                  <li pn="section-4.1.1.1-2.2.2.1" derivedCounter="1.">Append the result of running Serializing an Item (<xref target="ser-item" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) with (member_value,
		  parameters) to output.</li>
                  <li pn="section-4.1.1.1-2.2.2.2" derivedCounter="2.">If more values remain in inner_list, append a single SP to output.</li>
                </ol>
              </li>
              <li pn="section-4.1.1.1-2.3" derivedCounter="3.">Append ")" to output.</li>
              <li pn="section-4.1.1.1-2.4" derivedCounter="4.">Append the result of running Serializing Parameters (<xref target="ser-params" format="default" sectionFormat="of" derivedContent="Section 4.1.1.2"/>) with list_parameters to
	      output.</li>
              <li pn="section-4.1.1.1-2.5" derivedCounter="5.">Return output.</li>
            </ol>
          </section>
          <section anchor="ser-params" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1.2">
            <name slugifiedName="name-serializing-parameters">Serializing Parameters</name>
            <t indent="0" pn="section-4.1.1.2-1">Given an ordered Dictionary as input_parameters (each member
	    having a param_key and a param_value), return an ASCII string
	    suitable for use in an HTTP field value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1.2-2">
              <li pn="section-4.1.1.2-2.1" derivedCounter="1.">Let output be an empty string.</li>
              <li pn="section-4.1.1.2-2.2" derivedCounter="2.">
                <t indent="0" pn="section-4.1.1.2-2.2.1">For each param_key with a value of param_value in input_parameters:
                </t>
                <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1.2-2.2.2">
                  <li pn="section-4.1.1.2-2.2.2.1" derivedCounter="1.">Append ";" to output.</li>
                  <li pn="section-4.1.1.2-2.2.2.2" derivedCounter="2.">Append the result of running Serializing a Key (<xref target="ser-key" format="default" sectionFormat="of" derivedContent="Section 4.1.1.3"/>) with param_key to
		  output.</li>
                  <li pn="section-4.1.1.2-2.2.2.3" derivedCounter="3.">
                    <t indent="0" pn="section-4.1.1.2-2.2.2.3.1">If param_value is not Boolean true:
                    </t>
                    <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1.2-2.2.2.3.2">
                      <li pn="section-4.1.1.2-2.2.2.3.2.1" derivedCounter="1.">Append "=" to output.</li>
                      <li pn="section-4.1.1.2-2.2.2.3.2.2" derivedCounter="2.">Append the result of running Serializing a bare Item
		      (<xref target="ser-bare-item" format="default" sectionFormat="of" derivedContent="Section 4.1.3.1"/>) with
		      param_value to output.</li>
                    </ol>
                  </li>
                </ol>
              </li>
              <li pn="section-4.1.1.2-2.3" derivedCounter="3.">Return output.</li>
            </ol>
          </section>
          <section anchor="ser-key" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1.3">
            <name slugifiedName="name-serializing-a-key">Serializing a Key</name>
            <t indent="0" pn="section-4.1.1.3-1">Given a key as input_key, return an ASCII string suitable for
	    use in an HTTP field value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.1.3-2">
              <li pn="section-4.1.1.3-2.1" derivedCounter="1.">Convert input_key into a sequence of ASCII characters; if
	      conversion fails, fail serialization.</li>
              <li pn="section-4.1.1.3-2.2" derivedCounter="2.">If input_key contains characters not in lcalpha, DIGIT, "_",
	      "-", ".", or "*", fail serialization.</li>
              <li pn="section-4.1.1.3-2.3" derivedCounter="3.">If the first character of input_key is not lcalpha or "*",
	      fail serialization.</li>
              <li pn="section-4.1.1.3-2.4" derivedCounter="4.">Let output be an empty string.</li>
              <li pn="section-4.1.1.3-2.5" derivedCounter="5.">Append input_key to output.</li>
              <li pn="section-4.1.1.3-2.6" derivedCounter="6.">Return output.</li>
            </ol>
          </section>
        </section>
        <section anchor="ser-dictionary" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.2">
          <name slugifiedName="name-serializing-a-dictionary">Serializing a Dictionary</name>
          <t indent="0" pn="section-4.1.2-1">Given an ordered Dictionary as input_dictionary (each member
	  having a member_key and a tuple value of (member_value,
	  parameters)), return an ASCII string suitable for use in an HTTP
	  field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.2-2">
            <li pn="section-4.1.2-2.1" derivedCounter="1.">Let output be an empty string.</li>
            <li pn="section-4.1.2-2.2" derivedCounter="2.">
              <t indent="0" pn="section-4.1.2-2.2.1">For each member_key with a value of (member_value, parameters) in input_dictionary:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.2-2.2.2">
                <li pn="section-4.1.2-2.2.2.1" derivedCounter="1.">Append the result of running Serializing a Key (<xref target="ser-key" format="default" sectionFormat="of" derivedContent="Section 4.1.1.3"/>) with member's member_key
		to output.</li>
                <li pn="section-4.1.2-2.2.2.2" derivedCounter="2.">
                  <t indent="0" pn="section-4.1.2-2.2.2.2.1">If member_value is Boolean true:
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.2-2.2.2.2.2">
                    <li pn="section-4.1.2-2.2.2.2.2.1" derivedCounter="1.">Append the result of running Serializing Parameters
		    (<xref target="ser-params" format="default" sectionFormat="of" derivedContent="Section 4.1.1.2"/>) with
		    parameters to output.</li>
                  </ol>
                </li>
                <li pn="section-4.1.2-2.2.2.3" derivedCounter="3.">
                  <t indent="0" pn="section-4.1.2-2.2.2.3.1">Otherwise:
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.2-2.2.2.3.2">
                    <li pn="section-4.1.2-2.2.2.3.2.1" derivedCounter="1.">Append "=" to output.</li>
                    <li pn="section-4.1.2-2.2.2.3.2.2" derivedCounter="2.">If member_value is an array, append the result of
		    running Serializing an Inner List (<xref target="ser-innerlist" format="default" sectionFormat="of" derivedContent="Section 4.1.1.1"/>) with
		    (member_value, parameters) to output.</li>
                    <li pn="section-4.1.2-2.2.2.3.2.3" derivedCounter="3.">Otherwise, append the result of running Serializing an
		    Item (<xref target="ser-item" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) with
		    (member_value, parameters) to output.</li>
                  </ol>
                </li>
                <li pn="section-4.1.2-2.2.2.4" derivedCounter="4.">
                  <t indent="0" pn="section-4.1.2-2.2.2.4.1">If more members remain in input_dictionary:
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.2-2.2.2.4.2">
                    <li pn="section-4.1.2-2.2.2.4.2.1" derivedCounter="1.">Append "," to output.</li>
                    <li pn="section-4.1.2-2.2.2.4.2.2" derivedCounter="2.">Append a single SP to output.</li>
                  </ol>
                </li>
              </ol>
            </li>
            <li pn="section-4.1.2-2.3" derivedCounter="3.">Return output.</li>
          </ol>
        </section>
        <section anchor="ser-item" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.3">
          <name slugifiedName="name-serializing-an-item">Serializing an Item</name>
          <t indent="0" pn="section-4.1.3-1">Given an Item as bare_item and Parameters as item_parameters,
	  return an ASCII string suitable for use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.3-2">
            <li pn="section-4.1.3-2.1" derivedCounter="1.">Let output be an empty string.</li>
            <li pn="section-4.1.3-2.2" derivedCounter="2.">Append the result of running Serializing a Bare Item (<xref target="ser-bare-item" format="default" sectionFormat="of" derivedContent="Section 4.1.3.1"/>) with bare_item to
	    output.</li>
            <li pn="section-4.1.3-2.3" derivedCounter="3.">Append the result of running Serializing Parameters (<xref target="ser-params" format="default" sectionFormat="of" derivedContent="Section 4.1.1.2"/>) with item_parameters to
	    output.</li>
            <li pn="section-4.1.3-2.4" derivedCounter="4.">Return output.</li>
          </ol>
          <section anchor="ser-bare-item" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.3.1">
            <name slugifiedName="name-serializing-a-bare-item">Serializing a Bare Item</name>
            <t indent="0" pn="section-4.1.3.1-1">Given an Item as input_item, return an ASCII string suitable
	    for use in an HTTP field value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.3.1-2">
              <li pn="section-4.1.3.1-2.1" derivedCounter="1.">If input_item is an Integer, return the result of running
	      Serializing an Integer (<xref target="ser-integer" format="default" sectionFormat="of" derivedContent="Section 4.1.4"/>) with input_item.</li>
              <li pn="section-4.1.3.1-2.2" derivedCounter="2.">If input_item is a Decimal, return the result of running
	      Serializing a Decimal (<xref target="ser-decimal" format="default" sectionFormat="of" derivedContent="Section 4.1.5"/>) with input_item.</li>
              <li pn="section-4.1.3.1-2.3" derivedCounter="3.">If input_item is a String, return the result of running
	      Serializing a String (<xref target="ser-string" format="default" sectionFormat="of" derivedContent="Section 4.1.6"/>) with input_item.</li>
              <li pn="section-4.1.3.1-2.4" derivedCounter="4.">If input_item is a Token, return the result of running
	      Serializing a Token (<xref target="ser-token" format="default" sectionFormat="of" derivedContent="Section 4.1.7"/>) with input_item.</li>
              <li pn="section-4.1.3.1-2.5" derivedCounter="5.">If input_item is a Byte Sequence, return the result of
	      running Serializing a Byte Sequence (<xref target="ser-binary" format="default" sectionFormat="of" derivedContent="Section 4.1.8"/>) with input_item.</li>
              <li pn="section-4.1.3.1-2.6" derivedCounter="6.">If input_item is a Boolean, return the result of running
	      Serializing a Boolean (<xref target="ser-boolean" format="default" sectionFormat="of" derivedContent="Section 4.1.9"/>) with
	      input_item.</li>
              <li pn="section-4.1.3.1-2.7" derivedCounter="7.">Otherwise, fail serialization.</li>
            </ol>
          </section>
        </section>
        <section anchor="ser-integer" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.4">
          <name slugifiedName="name-serializing-an-integer">Serializing an Integer</name>
          <t indent="0" pn="section-4.1.4-1">Given an Integer as input_integer, return an ASCII string
	  suitable for use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.4-2">
            <li pn="section-4.1.4-2.1" derivedCounter="1.">If input_integer is not an integer in the range of
	    -999,999,999,999,999 to 999,999,999,999,999 inclusive, fail
	    serialization.</li>
            <li pn="section-4.1.4-2.2" derivedCounter="2.">Let output be an empty string.</li>
            <li pn="section-4.1.4-2.3" derivedCounter="3.">If input_integer is less than (but not equal to) 0, append "-"
	    to output.</li>
            <li pn="section-4.1.4-2.4" derivedCounter="4.">Append input_integer's numeric value represented in base 10
	    using only decimal digits to output.</li>
            <li pn="section-4.1.4-2.5" derivedCounter="5.">Return output.</li>
          </ol>
        </section>
        <section anchor="ser-decimal" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.5">
          <name slugifiedName="name-serializing-a-decimal">Serializing a Decimal</name>
          <t indent="0" pn="section-4.1.5-1">Given a decimal number as input_decimal, return an ASCII string
	  suitable for use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.5-2">
            <li pn="section-4.1.5-2.1" derivedCounter="1.">If input_decimal is not a decimal number, fail serialization.</li>
            <li pn="section-4.1.5-2.2" derivedCounter="2.">If input_decimal has more than three significant digits to the
	    right of the decimal point, round it to three decimal places,
	    rounding the final digit to the nearest value, or to the even
	    value if it is equidistant.</li>
            <li pn="section-4.1.5-2.3" derivedCounter="3.">If input_decimal has more than 12 significant digits to the
	    left of the decimal point after rounding, fail serialization.</li>
            <li pn="section-4.1.5-2.4" derivedCounter="4.">Let output be an empty string.</li>
            <li pn="section-4.1.5-2.5" derivedCounter="5.">If input_decimal is less than (but not equal to) 0, append "-"
	    to output.</li>
            <li pn="section-4.1.5-2.6" derivedCounter="6.">Append input_decimal's integer component represented in base
	    10 (using only decimal digits) to output; if it is zero, append
	    "0".</li>
            <li pn="section-4.1.5-2.7" derivedCounter="7.">Append "." to output.</li>
            <li pn="section-4.1.5-2.8" derivedCounter="8.">If input_decimal's fractional component is zero, append "0" to
	    output.</li>
            <li pn="section-4.1.5-2.9" derivedCounter="9.">Otherwise, append the significant digits of input_decimal's
	    fractional component represented in base 10 (using only decimal
	    digits) to output.</li>
            <li pn="section-4.1.5-2.10" derivedCounter="10.">Return output.</li>
          </ol>
        </section>
        <section anchor="ser-string" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.6">
          <name slugifiedName="name-serializing-a-string">Serializing a String</name>
          <t indent="0" pn="section-4.1.6-1">Given a String as input_string, return an ASCII string suitable
	  for use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.6-2">
            <li pn="section-4.1.6-2.1" derivedCounter="1.">Convert input_string into a sequence of ASCII characters; if
	    conversion fails, fail serialization.</li>
            <li pn="section-4.1.6-2.2" derivedCounter="2.">If input_string contains characters in the range %x00-1f or
	    %x7f-ff (i.e., not in VCHAR or SP), fail serialization.</li>
            <li pn="section-4.1.6-2.3" derivedCounter="3.">Let output be the string DQUOTE.</li>
            <li pn="section-4.1.6-2.4" derivedCounter="4.">
              <t indent="0" pn="section-4.1.6-2.4.1">For each character char in input_string:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.6-2.4.2">
                <li pn="section-4.1.6-2.4.2.1" derivedCounter="1.">
                  <t indent="0" pn="section-4.1.6-2.4.2.1.1">If char is "\" or DQUOTE:
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.6-2.4.2.1.2">
                    <li pn="section-4.1.6-2.4.2.1.2.1" derivedCounter="1.">Append "\" to output.</li>
                  </ol>
                </li>
                <li pn="section-4.1.6-2.4.2.2" derivedCounter="2.">Append char to output.</li>
              </ol>
            </li>
            <li pn="section-4.1.6-2.5" derivedCounter="5.">Append DQUOTE to output.</li>
            <li pn="section-4.1.6-2.6" derivedCounter="6.">Return output.</li>
          </ol>
        </section>
        <section anchor="ser-token" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.7">
          <name slugifiedName="name-serializing-a-token">Serializing a Token</name>
          <t indent="0" pn="section-4.1.7-1">Given a Token as input_token, return an ASCII string suitable for
	  use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.7-2">
            <li pn="section-4.1.7-2.1" derivedCounter="1.">Convert input_token into a sequence of ASCII characters; if
	    conversion fails, fail serialization.</li>
            <li pn="section-4.1.7-2.2" derivedCounter="2.">If the first character of input_token is not ALPHA or "*", or
	    the remaining portion contains a character not in tchar, ":", or
	    "/", fail serialization.</li>
            <li pn="section-4.1.7-2.3" derivedCounter="3.">Let output be an empty string.</li>
            <li pn="section-4.1.7-2.4" derivedCounter="4.">Append input_token to output.</li>
            <li pn="section-4.1.7-2.5" derivedCounter="5.">Return output.</li>
          </ol>
        </section>
        <section anchor="ser-binary" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.8">
          <name slugifiedName="name-serializing-a-byte-sequence">Serializing a Byte Sequence</name>
          <t indent="0" pn="section-4.1.8-1">Given a Byte Sequence as input_bytes, return an ASCII string
	  suitable for use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.8-2">
            <li pn="section-4.1.8-2.1" derivedCounter="1.">If input_bytes is not a sequence of bytes, fail serialization.</li>
            <li pn="section-4.1.8-2.2" derivedCounter="2.">Let output be an empty string.</li>
            <li pn="section-4.1.8-2.3" derivedCounter="3.">Append ":" to output.</li>
            <li pn="section-4.1.8-2.4" derivedCounter="4.">Append the result of base64-encoding input_bytes as per <xref target="RFC4648" sectionFormat="comma" section="4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-4" derivedContent="RFC4648"/>, taking account of
	    the requirements below.</li>
            <li pn="section-4.1.8-2.5" derivedCounter="5.">Append ":" to output.</li>
            <li pn="section-4.1.8-2.6" derivedCounter="6.">Return output.</li>
          </ol>
          <t indent="0" pn="section-4.1.8-3">The encoded data is required to be padded with "=", as per <xref target="RFC4648" sectionFormat="comma" section="3.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-3.2" derivedContent="RFC4648"/>.</t>
          <t indent="0" pn="section-4.1.8-4">Likewise, encoded data <bcp14>SHOULD</bcp14> have pad bits set to zero, as per
	  <xref target="RFC4648" sectionFormat="comma" section="3.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-3.5" derivedContent="RFC4648"/>, unless it is
	  not possible to do so due to implementation constraints.</t>
        </section>
        <section anchor="ser-boolean" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.9">
          <name slugifiedName="name-serializing-a-boolean">Serializing a Boolean</name>
          <t indent="0" pn="section-4.1.9-1">Given a Boolean as input_boolean, return an ASCII string suitable
	  for use in an HTTP field value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.1.9-2">
            <li pn="section-4.1.9-2.1" derivedCounter="1.">If input_boolean is not a boolean, fail serialization.</li>
            <li pn="section-4.1.9-2.2" derivedCounter="2.">Let output be an empty string.</li>
            <li pn="section-4.1.9-2.3" derivedCounter="3.">Append "?" to output.</li>
            <li pn="section-4.1.9-2.4" derivedCounter="4.">If input_boolean is true, append "1" to output.</li>
            <li pn="section-4.1.9-2.5" derivedCounter="5.">If input_boolean is false, append "0" to output.</li>
            <li pn="section-4.1.9-2.6" derivedCounter="6.">Return output.</li>
          </ol>
        </section>
      </section>
      <section anchor="text-parse" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-parsing-structured-fields">Parsing Structured Fields</name>
        <t indent="0" pn="section-4.2-1">When a receiving implementation parses HTTP fields that are known
	to be Structured Fields, it is important that care be taken, as there
	are a number of edge cases that can cause interoperability or even
	security problems. This section specifies the algorithm for doing
	so.</t>
        <t indent="0" pn="section-4.2-2">Given an array of bytes as input_bytes that represent the chosen
	field's field-value (which is empty if that field is not present) and
	field_type (one of "dictionary", "list", or "item"), return the parsed
	header value.</t>
        <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2-3">
          <li pn="section-4.2-3.1" derivedCounter="1.">Convert input_bytes into an ASCII string input_string; if
	  conversion fails, fail parsing.</li>
          <li pn="section-4.2-3.2" derivedCounter="2.">Discard any leading SP characters from input_string.</li>
          <li pn="section-4.2-3.3" derivedCounter="3.">If field_type is "list", let output be the result of running
	  Parsing a List (<xref target="parse-list" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>) with
	  input_string.</li>
          <li pn="section-4.2-3.4" derivedCounter="4.">If field_type is "dictionary", let output be the result of
	  running Parsing a Dictionary (<xref target="parse-dictionary" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>) with input_string.</li>
          <li pn="section-4.2-3.5" derivedCounter="5.">If field_type is "item", let output be the result of running
	  Parsing an Item (<xref target="parse-item" format="default" sectionFormat="of" derivedContent="Section 4.2.3"/>) with
	  input_string.</li>
          <li pn="section-4.2-3.6" derivedCounter="6.">Discard any leading SP characters from input_string.</li>
          <li pn="section-4.2-3.7" derivedCounter="7.">If input_string is not empty, fail parsing.</li>
          <li pn="section-4.2-3.8" derivedCounter="8.">Otherwise, return output.</li>
        </ol>
        <t indent="0" pn="section-4.2-4">When generating input_bytes, parsers <bcp14>MUST</bcp14> combine all field lines
	in the same section (header or trailer) that case-insensitively match
	the field name into one comma-separated field-value, as per <xref target="RFC7230" sectionFormat="comma" section="3.2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7230#section-3.2.2" derivedContent="RFC7230"/>; this assures that
	the entire field value is processed correctly.</t>
        <t indent="0" pn="section-4.2-5">For Lists and Dictionaries, this has the effect of correctly
	concatenating all of the field's lines, as long as individual members
	of the top-level data structure are not split across multiple header
	instances. The parsing algorithms for both types allow tab characters,
	since these might be used to combine field lines by some
	implementations.</t>
        <t indent="0" pn="section-4.2-6">Strings split across multiple field lines will have unpredictable
	results, because one or more commas (with optional whitespace)
	will become part of the string output by the parser. Since
	concatenation might be done by an upstream intermediary, the results
	are not under the control of the serializer or the parser, even when
	they are both under the control of the same party.</t>
        <t indent="0" pn="section-4.2-7">Tokens, Integers, Decimals, and Byte Sequences cannot be split
	across multiple field lines because the inserted commas will cause
	parsing to fail.</t>
        <t indent="0" pn="section-4.2-8">Parsers <bcp14>MAY</bcp14> fail when processing a field value spread across
	multiple field lines, when one of those lines does not parse as that
	field. For example, a parsing handling an Example-String field that's
	defined as an sf-string is allowed to fail when processing this field
	section:</t>
        <sourcecode type="http-message" markers="false" pn="section-4.2-9">
Example-String: "foo
Example-String: bar"
</sourcecode>
        <t indent="0" pn="section-4.2-10">If parsing fails -- including when calling another algorithm -- the
	entire field value <bcp14>MUST</bcp14> be ignored (i.e., treated as if the field were
	not present in the section). This is intentionally strict, to improve
	interoperability and safety, and specifications referencing this
	document are not allowed to loosen this requirement.</t>
        <t indent="0" pn="section-4.2-11">Note that this requirement does not apply to an implementation that
	is not parsing the field; for example, an intermediary is not required
	to strip a failing field from a message before forwarding it.</t>
        <section anchor="parse-list" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.1">
          <name slugifiedName="name-parsing-a-list">Parsing a List</name>
          <t indent="0" pn="section-4.2.1-1">Given an ASCII string as input_string, return an array of
	  (item_or_inner_list, parameters) tuples. input_string is modified to
	  remove the parsed value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.1-2">
            <li pn="section-4.2.1-2.1" derivedCounter="1.">Let members be an empty array.</li>
            <li pn="section-4.2.1-2.2" derivedCounter="2.">
              <t indent="0" pn="section-4.2.1-2.2.1">While input_string is not empty:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.1-2.2.2">
                <li pn="section-4.2.1-2.2.2.1" derivedCounter="1.">Append the result of running Parsing an Item or Inner List
		(<xref target="parse-item-or-list" format="default" sectionFormat="of" derivedContent="Section 4.2.1.1"/>) with
		input_string to members.</li>
                <li pn="section-4.2.1-2.2.2.2" derivedCounter="2.">Discard any leading OWS characters from input_string.</li>
                <li pn="section-4.2.1-2.2.2.3" derivedCounter="3.">If input_string is empty, return members.</li>
                <li pn="section-4.2.1-2.2.2.4" derivedCounter="4.">Consume the first character of input_string; if it is not
		",", fail parsing.</li>
                <li pn="section-4.2.1-2.2.2.5" derivedCounter="5.">Discard any leading OWS characters from input_string.</li>
                <li pn="section-4.2.1-2.2.2.6" derivedCounter="6.">If input_string is empty, there is a trailing comma; fail parsing.</li>
              </ol>
            </li>
            <li pn="section-4.2.1-2.3" derivedCounter="3.">No structured data has been found; return members (which is empty).</li>
          </ol>
          <section anchor="parse-item-or-list" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.2.1.1">
            <name slugifiedName="name-parsing-an-item-or-inner-li">Parsing an Item or Inner List</name>
            <t indent="0" pn="section-4.2.1.1-1">Given an ASCII string as input_string, return the tuple
	    (item_or_inner_list, parameters), where item_or_inner_list can be
	    either a single bare item or an array of (bare_item, parameters)
	    tuples. input_string is modified to remove the parsed value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.1.1-2">
              <li pn="section-4.2.1.1-2.1" derivedCounter="1.">If the first character of input_string is "(", return the
	      result of running Parsing an Inner List (<xref target="parse-innerlist" format="default" sectionFormat="of" derivedContent="Section 4.2.1.2"/>) with
	      input_string.</li>
              <li pn="section-4.2.1.1-2.2" derivedCounter="2.">Return the result of running Parsing an Item (<xref target="parse-item" format="default" sectionFormat="of" derivedContent="Section 4.2.3"/>) with input_string.</li>
            </ol>
          </section>
          <section anchor="parse-innerlist" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.2.1.2">
            <name slugifiedName="name-parsing-an-inner-list">Parsing an Inner List</name>
            <t indent="0" pn="section-4.2.1.2-1">Given an ASCII string as input_string, return the tuple
	    (inner_list, parameters), where inner_list is an array of
	    (bare_item, parameters) tuples. input_string is modified to remove
	    the parsed value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.1.2-2">
              <li pn="section-4.2.1.2-2.1" derivedCounter="1.">Consume the first character of input_string; if it is not
	      "(", fail parsing.</li>
              <li pn="section-4.2.1.2-2.2" derivedCounter="2.">Let inner_list be an empty array.</li>
              <li pn="section-4.2.1.2-2.3" derivedCounter="3.">
                <t indent="0" pn="section-4.2.1.2-2.3.1">While input_string is not empty:
                </t>
                <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.1.2-2.3.2">
                  <li pn="section-4.2.1.2-2.3.2.1" derivedCounter="1.">Discard any leading SP characters from input_string.</li>
                  <li pn="section-4.2.1.2-2.3.2.2" derivedCounter="2.">
                    <t indent="0" pn="section-4.2.1.2-2.3.2.2.1">If the first character of input_string is ")":
                    </t>
                    <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.1.2-2.3.2.2.2">
                      <li pn="section-4.2.1.2-2.3.2.2.2.1" derivedCounter="1.">Consume the first character of input_string.</li>
                      <li pn="section-4.2.1.2-2.3.2.2.2.2" derivedCounter="2.">Let parameters be the result of running Parsing
		      Parameters (<xref target="parse-param" format="default" sectionFormat="of" derivedContent="Section 4.2.3.2"/>) with input_string.</li>
                      <li pn="section-4.2.1.2-2.3.2.2.2.3" derivedCounter="3.">Return the tuple (inner_list, parameters).</li>
                    </ol>
                  </li>
                  <li pn="section-4.2.1.2-2.3.2.3" derivedCounter="3.">Let item be the result of running Parsing an Item (<xref target="parse-item" format="default" sectionFormat="of" derivedContent="Section 4.2.3"/>) with
		  input_string.</li>
                  <li pn="section-4.2.1.2-2.3.2.4" derivedCounter="4.">Append item to inner_list.</li>
                  <li pn="section-4.2.1.2-2.3.2.5" derivedCounter="5.">If the first character of input_string is not SP or ")",
		  fail parsing.</li>
                </ol>
              </li>
              <li pn="section-4.2.1.2-2.4" derivedCounter="4.">The end of the Inner List was not found; fail parsing.</li>
            </ol>
          </section>
        </section>
        <section anchor="parse-dictionary" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.2">
          <name slugifiedName="name-parsing-a-dictionary">Parsing a Dictionary</name>
          <t indent="0" pn="section-4.2.2-1">Given an ASCII string as input_string, return an ordered map
	  whose values are (item_or_inner_list, parameters)
	  tuples. input_string is modified to remove the parsed value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.2-2">
            <li pn="section-4.2.2-2.1" derivedCounter="1.">Let dictionary be an empty, ordered map.</li>
            <li pn="section-4.2.2-2.2" derivedCounter="2.">
              <t indent="0" pn="section-4.2.2-2.2.1">While input_string is not empty:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.2-2.2.2">
                <li pn="section-4.2.2-2.2.2.1" derivedCounter="1.">Let this_key be the result of running Parsing a Key (<xref target="parse-key" format="default" sectionFormat="of" derivedContent="Section 4.2.3.3"/>) with input_string.</li>
                <li pn="section-4.2.2-2.2.2.2" derivedCounter="2.">
                  <t indent="0" pn="section-4.2.2-2.2.2.2.1">If the first character of input_string is "=":
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.2-2.2.2.2.2">
                    <li pn="section-4.2.2-2.2.2.2.2.1" derivedCounter="1.">Consume the first character of input_string.</li>
                    <li pn="section-4.2.2-2.2.2.2.2.2" derivedCounter="2.">Let member be the result of running Parsing an Item or
		    Inner List (<xref target="parse-item-or-list" format="default" sectionFormat="of" derivedContent="Section 4.2.1.1"/>) with input_string.</li>
                  </ol>
                </li>
                <li pn="section-4.2.2-2.2.2.3" derivedCounter="3.">
                  <t indent="0" pn="section-4.2.2-2.2.2.3.1">Otherwise:
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.2-2.2.2.3.2">
                    <li pn="section-4.2.2-2.2.2.3.2.1" derivedCounter="1.">Let value be Boolean true.</li>
                    <li pn="section-4.2.2-2.2.2.3.2.2" derivedCounter="2.">Let parameters be the result of running Parsing
		    Parameters (<xref target="parse-param" format="default" sectionFormat="of" derivedContent="Section 4.2.3.2"/>)
		    with input_string.</li>
                    <li pn="section-4.2.2-2.2.2.3.2.3" derivedCounter="3.">Let member be the tuple (value, parameters).</li>
                  </ol>
                </li>
                <li pn="section-4.2.2-2.2.2.4" derivedCounter="4.">If dictionary already contains a key this_key (comparing character for character),  overwrite its value with member.</li>
                <li pn="section-4.2.2-2.2.2.5" derivedCounter="5.">Otherwise, append key this_key with value member to dictionary.</li>
                <li pn="section-4.2.2-2.2.2.6" derivedCounter="6.">Discard any leading OWS characters from input_string.</li>
                <li pn="section-4.2.2-2.2.2.7" derivedCounter="7.">If input_string is empty, return dictionary.</li>
                <li pn="section-4.2.2-2.2.2.8" derivedCounter="8.">Consume the first character of input_string; if it is not
		",", fail parsing.</li>
                <li pn="section-4.2.2-2.2.2.9" derivedCounter="9.">Discard any leading OWS characters from input_string.</li>
                <li pn="section-4.2.2-2.2.2.10" derivedCounter="10.">If input_string is empty, there is a trailing comma; fail parsing.</li>
              </ol>
            </li>
            <li pn="section-4.2.2-2.3" derivedCounter="3.">No structured data has been found; return dictionary (which is empty).</li>
          </ol>
          <t indent="0" pn="section-4.2.2-3">Note that when duplicate Dictionary keys are encountered, all but 
         the last instance are ignored.</t>
        </section>
        <section anchor="parse-item" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.3">
          <name slugifiedName="name-parsing-an-item">Parsing an Item</name>
          <t indent="0" pn="section-4.2.3-1">Given an ASCII string as input_string, return a (bare_item,
	  parameters) tuple. input_string is modified to remove the parsed
	  value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3-2">
            <li pn="section-4.2.3-2.1" derivedCounter="1.">Let bare_item be the result of running Parsing a Bare Item
	    (<xref target="parse-bare-item" format="default" sectionFormat="of" derivedContent="Section 4.2.3.1"/>) with
	    input_string.</li>
            <li pn="section-4.2.3-2.2" derivedCounter="2.">Let parameters be the result of running Parsing Parameters
	    (<xref target="parse-param" format="default" sectionFormat="of" derivedContent="Section 4.2.3.2"/>) with
	    input_string.</li>
            <li pn="section-4.2.3-2.3" derivedCounter="3.">Return the tuple (bare_item, parameters).</li>
          </ol>
          <section anchor="parse-bare-item" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.2.3.1">
            <name slugifiedName="name-parsing-a-bare-item">Parsing a Bare Item</name>
            <t indent="0" pn="section-4.2.3.1-1">Given an ASCII string as input_string, return a bare
	    Item. input_string is modified to remove the parsed value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3.1-2">
              <li pn="section-4.2.3.1-2.1" derivedCounter="1.">If the first character of input_string is a "-" or a DIGIT,
	      return the result of running Parsing an Integer or Decimal
	      (<xref target="parse-number" format="default" sectionFormat="of" derivedContent="Section 4.2.4"/>) with
	      input_string.</li>
              <li pn="section-4.2.3.1-2.2" derivedCounter="2.">If the first character of input_string is a DQUOTE, return
	      the result of running Parsing a String (<xref target="parse-string" format="default" sectionFormat="of" derivedContent="Section 4.2.5"/>) with
	      input_string.</li>
              <li pn="section-4.2.3.1-2.3" derivedCounter="3.">If the first character of input_string is an ALPHA or "*",
	      return the result of running Parsing a Token (<xref target="parse-token" format="default" sectionFormat="of" derivedContent="Section 4.2.6"/>) with input_string.</li>
              <li pn="section-4.2.3.1-2.4" derivedCounter="4.">If the first character of input_string is ":", return the
	      result of running Parsing a Byte Sequence (<xref target="parse-binary" format="default" sectionFormat="of" derivedContent="Section 4.2.7"/>) with
	      input_string.</li>
              <li pn="section-4.2.3.1-2.5" derivedCounter="5.">If the first character of input_string is "?", return the
	      result of running Parsing a Boolean (<xref target="parse-boolean" format="default" sectionFormat="of" derivedContent="Section 4.2.8"/>) with
	      input_string.</li>
              <li pn="section-4.2.3.1-2.6" derivedCounter="6.">Otherwise, the item type is unrecognized; fail parsing.</li>
            </ol>
          </section>
          <section anchor="parse-param" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.2.3.2">
            <name slugifiedName="name-parsing-parameters">Parsing Parameters</name>
            <t indent="0" pn="section-4.2.3.2-1">Given an ASCII string as input_string, return an ordered map
	    whose values are bare Items. input_string is modified to remove
	    the parsed value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3.2-2">
              <li pn="section-4.2.3.2-2.1" derivedCounter="1.">Let parameters be an empty, ordered map.</li>
              <li pn="section-4.2.3.2-2.2" derivedCounter="2.">
                <t indent="0" pn="section-4.2.3.2-2.2.1">While input_string is not empty:
                </t>
                <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3.2-2.2.2">
                  <li pn="section-4.2.3.2-2.2.2.1" derivedCounter="1.">If the first character of input_string is not ";", exit the loop.</li>
                  <li pn="section-4.2.3.2-2.2.2.2" derivedCounter="2.">Consume the ";" character from the beginning of input_string.</li>
                  <li pn="section-4.2.3.2-2.2.2.3" derivedCounter="3.">Discard any leading SP characters from input_string.</li>
                  <li pn="section-4.2.3.2-2.2.2.4" derivedCounter="4.">Let param_key be the result of running Parsing a Key
		  (<xref target="parse-key" format="default" sectionFormat="of" derivedContent="Section 4.2.3.3"/>) with
		  input_string.</li>
                  <li pn="section-4.2.3.2-2.2.2.5" derivedCounter="5.">Let param_value be Boolean true.</li>
                  <li pn="section-4.2.3.2-2.2.2.6" derivedCounter="6.">
                    <t indent="0" pn="section-4.2.3.2-2.2.2.6.1">If the first character of input_string is "=":
                    </t>
                    <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3.2-2.2.2.6.2">
                      <li pn="section-4.2.3.2-2.2.2.6.2.1" derivedCounter="1.">Consume the "=" character at the beginning of input_string.</li>
                      <li pn="section-4.2.3.2-2.2.2.6.2.2" derivedCounter="2.">Let param_value be the result of running Parsing a
		      Bare Item (<xref target="parse-bare-item" format="default" sectionFormat="of" derivedContent="Section 4.2.3.1"/>) with input_string.</li>
                    </ol>
                  </li>
                  <li pn="section-4.2.3.2-2.2.2.7" derivedCounter="7.">If parameters already contains a key param_key (comparing character for character), overwrite its value with param_value.</li>
                  <li pn="section-4.2.3.2-2.2.2.8" derivedCounter="8.">Otherwise, append key param_key with value param_value to parameters.</li>
                </ol>
              </li>
              <li pn="section-4.2.3.2-2.3" derivedCounter="3.">Return parameters.</li>
            </ol>
            <t indent="0" pn="section-4.2.3.2-3">Note that when duplicate parameter keys are encountered, 
            all but the last instance are ignored.</t>
          </section>
          <section anchor="parse-key" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.2.3.3">
            <name slugifiedName="name-parsing-a-key">Parsing a Key</name>
            <t indent="0" pn="section-4.2.3.3-1">Given an ASCII string as input_string, return a
	    key. input_string is modified to remove the parsed value.</t>
            <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3.3-2">
              <li pn="section-4.2.3.3-2.1" derivedCounter="1.">If the first character of input_string is not lcalpha or
	      "*", fail parsing.</li>
              <li pn="section-4.2.3.3-2.2" derivedCounter="2.">Let output_string be an empty string.</li>
              <li pn="section-4.2.3.3-2.3" derivedCounter="3.">
                <t indent="0" pn="section-4.2.3.3-2.3.1">While input_string is not empty:
                </t>
                <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.3.3-2.3.2">
                  <li pn="section-4.2.3.3-2.3.2.1" derivedCounter="1.">If the first character of input_string is not one of
		  lcalpha, DIGIT, "_", "-", ".", or "*", return
		  output_string.</li>
                  <li pn="section-4.2.3.3-2.3.2.2" derivedCounter="2.">Let char be the result of consuming the first character of input_string.</li>
                  <li pn="section-4.2.3.3-2.3.2.3" derivedCounter="3.">Append char to output_string.</li>
                </ol>
              </li>
              <li pn="section-4.2.3.3-2.4" derivedCounter="4.">Return output_string.</li>
            </ol>
          </section>
        </section>
        <section anchor="parse-number" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.4">
          <name slugifiedName="name-parsing-an-integer-or-decim">Parsing an Integer or Decimal</name>
          <t indent="0" pn="section-4.2.4-1">Given an ASCII string as input_string, return an Integer or
	  Decimal. input_string is modified to remove the parsed value.</t>
          <t indent="0" pn="section-4.2.4-2">NOTE: This algorithm parses both Integers (<xref target="integer" format="default" sectionFormat="of" derivedContent="Section 3.3.1"/>) and Decimals (<xref target="decimal" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>), and returns the corresponding structure.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.4-3">
            <li pn="section-4.2.4-3.1" derivedCounter="1.">Let type be "integer".</li>
            <li pn="section-4.2.4-3.2" derivedCounter="2.">Let sign be 1.</li>
            <li pn="section-4.2.4-3.3" derivedCounter="3.">Let input_number be an empty string.</li>
            <li pn="section-4.2.4-3.4" derivedCounter="4.">If the first character of input_string is "-", consume it and
	    set sign to -1.</li>
            <li pn="section-4.2.4-3.5" derivedCounter="5.">If input_string is empty, there is an empty integer; fail
	    parsing.</li>
            <li pn="section-4.2.4-3.6" derivedCounter="6.">If the first character of input_string is not a DIGIT, fail
	    parsing.</li>
            <li pn="section-4.2.4-3.7" derivedCounter="7.">
              <t indent="0" pn="section-4.2.4-3.7.1">While input_string is not empty:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.4-3.7.2">
                <li pn="section-4.2.4-3.7.2.1" derivedCounter="1.">Let char be the result of consuming the first character of
		input_string.</li>
                <li pn="section-4.2.4-3.7.2.2" derivedCounter="2.">If char is a DIGIT, append it to input_number.</li>
                <li pn="section-4.2.4-3.7.2.3" derivedCounter="3.">
                  <t indent="0" pn="section-4.2.4-3.7.2.3.1">Else, if type is "integer" and char is ".":
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.4-3.7.2.3.2">
                    <li pn="section-4.2.4-3.7.2.3.2.1" derivedCounter="1.">If input_number contains more than 12 characters, fail parsing.</li>
                    <li pn="section-4.2.4-3.7.2.3.2.2" derivedCounter="2.">Otherwise, append char to input_number and set type to "decimal".</li>
                  </ol>
                </li>
                <li pn="section-4.2.4-3.7.2.4" derivedCounter="4.">Otherwise, prepend char to input_string, and exit the loop.</li>
                <li pn="section-4.2.4-3.7.2.5" derivedCounter="5.">If type is "integer" and input_number contains more than
		15 characters, fail parsing.</li>
                <li pn="section-4.2.4-3.7.2.6" derivedCounter="6.">If type is "decimal" and input_number contains more than
		16 characters, fail parsing.</li>
              </ol>
            </li>
            <li pn="section-4.2.4-3.8" derivedCounter="8.">
              <t indent="0" pn="section-4.2.4-3.8.1">If type is "integer":
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.4-3.8.2">
                <li pn="section-4.2.4-3.8.2.1" derivedCounter="1.">Parse input_number as an integer and let output_number be
		the product of the result and sign.</li>
              </ol>
            </li>
            <li pn="section-4.2.4-3.9" derivedCounter="9.">
              <t indent="0" pn="section-4.2.4-3.9.1">Otherwise:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.4-3.9.2">
                <li pn="section-4.2.4-3.9.2.1" derivedCounter="1.">If the final character of input_number is ".", fail parsing.</li>
                <li pn="section-4.2.4-3.9.2.2" derivedCounter="2.">If the number of characters after "." in input_number is
		greater than three, fail parsing.</li>
                <li pn="section-4.2.4-3.9.2.3" derivedCounter="3.">Parse input_number as a decimal number and let
		output_number be the product of the result and sign.</li>
              </ol>
            </li>
            <li pn="section-4.2.4-3.10" derivedCounter="10.">Return output_number.</li>
          </ol>
        </section>
        <section anchor="parse-string" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.5">
          <name slugifiedName="name-parsing-a-string">Parsing a String</name>
          <t indent="0" pn="section-4.2.5-1">Given an ASCII string as input_string, return an unquoted
	  String. input_string is modified to remove the parsed value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.5-2">
            <li pn="section-4.2.5-2.1" derivedCounter="1.">Let output_string be an empty string.</li>
            <li pn="section-4.2.5-2.2" derivedCounter="2.">If the first character of input_string is not DQUOTE, fail parsing.</li>
            <li pn="section-4.2.5-2.3" derivedCounter="3.">Discard the first character of input_string.</li>
            <li pn="section-4.2.5-2.4" derivedCounter="4.">
              <t indent="0" pn="section-4.2.5-2.4.1">While input_string is not empty:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.5-2.4.2">
                <li pn="section-4.2.5-2.4.2.1" derivedCounter="1.">Let char be the result of consuming the first character of input_string.</li>
                <li pn="section-4.2.5-2.4.2.2" derivedCounter="2.">
                  <t indent="0" pn="section-4.2.5-2.4.2.2.1">If char is a backslash ("\"):
                  </t>
                  <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.5-2.4.2.2.2">
                    <li pn="section-4.2.5-2.4.2.2.2.1" derivedCounter="1.">If input_string is now empty, fail parsing.</li>
                    <li pn="section-4.2.5-2.4.2.2.2.2" derivedCounter="2.">Let next_char be the result of consuming the first
		    character of input_string.</li>
                    <li pn="section-4.2.5-2.4.2.2.2.3" derivedCounter="3.">If next_char is not DQUOTE or "\", fail parsing.</li>
                    <li pn="section-4.2.5-2.4.2.2.2.4" derivedCounter="4.">Append next_char to output_string.</li>
                  </ol>
                </li>
                <li pn="section-4.2.5-2.4.2.3" derivedCounter="3.">Else, if char is DQUOTE, return output_string.</li>
                <li pn="section-4.2.5-2.4.2.4" derivedCounter="4.">Else, if char is in the range %x00-1f or %x7f-ff (i.e., it is
		not in VCHAR or SP), fail parsing.</li>
                <li pn="section-4.2.5-2.4.2.5" derivedCounter="5.">Else, append char to output_string.</li>
              </ol>
            </li>
            <li pn="section-4.2.5-2.5" derivedCounter="5.">Reached the end of input_string without finding a closing
	    DQUOTE; fail parsing.</li>
          </ol>
        </section>
        <section anchor="parse-token" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.6">
          <name slugifiedName="name-parsing-a-token">Parsing a Token</name>
          <t indent="0" pn="section-4.2.6-1">Given an ASCII string as input_string, return a
	  Token. input_string is modified to remove the parsed value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.6-2">
            <li pn="section-4.2.6-2.1" derivedCounter="1.">If the first character of input_string is not ALPHA or "*",
	    fail parsing.</li>
            <li pn="section-4.2.6-2.2" derivedCounter="2.">Let output_string be an empty string.</li>
            <li pn="section-4.2.6-2.3" derivedCounter="3.">
              <t indent="0" pn="section-4.2.6-2.3.1">While input_string is not empty:
              </t>
              <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.6-2.3.2">
                <li pn="section-4.2.6-2.3.2.1" derivedCounter="1.">If the first character of input_string is not in tchar,
		":", or "/", return output_string.</li>
                <li pn="section-4.2.6-2.3.2.2" derivedCounter="2.">Let char be the result of consuming the first character of
		input_string.</li>
                <li pn="section-4.2.6-2.3.2.3" derivedCounter="3.">Append char to output_string.</li>
              </ol>
            </li>
            <li pn="section-4.2.6-2.4" derivedCounter="4.">Return output_string.</li>
          </ol>
        </section>
        <section anchor="parse-binary" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.7">
          <name slugifiedName="name-parsing-a-byte-sequence">Parsing a Byte Sequence</name>
          <t indent="0" pn="section-4.2.7-1">Given an ASCII string as input_string, return a Byte
	  Sequence. input_string is modified to remove the parsed value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.7-2">
            <li pn="section-4.2.7-2.1" derivedCounter="1.">If the first character of input_string is not ":", fail parsing.</li>
            <li pn="section-4.2.7-2.2" derivedCounter="2.">Discard the first character of input_string.</li>
            <li pn="section-4.2.7-2.3" derivedCounter="3.">If there is not a ":" character before the end of input_string, fail parsing.</li>
            <li pn="section-4.2.7-2.4" derivedCounter="4.">Let b64_content be the result of consuming content of
	    input_string up to but not including the first instance of the
	    character ":".</li>
            <li pn="section-4.2.7-2.5" derivedCounter="5.">Consume the ":" character at the beginning of input_string.</li>
            <li pn="section-4.2.7-2.6" derivedCounter="6.">If b64_content contains a character not included in ALPHA,
	    DIGIT, "+", "/", and "=", fail parsing.</li>
            <li pn="section-4.2.7-2.7" derivedCounter="7.">Let binary_content be the result of base64-decoding <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648"/> b64_content, synthesizing
	    padding if necessary (note the requirements about recipient
	    behavior below). If base64 decoding fails, parsing fails.</li>
            <li pn="section-4.2.7-2.8" derivedCounter="8.">Return binary_content.</li>
          </ol>
          <t indent="0" pn="section-4.2.7-3">Because some implementations of base64 do not allow rejection of
	  encoded data that is not properly "=" padded (see <xref target="RFC4648" sectionFormat="comma" section="3.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-3.2" derivedContent="RFC4648"/>), parsers <bcp14>SHOULD NOT</bcp14> fail when "=" padding is not present, unless they cannot be
	  configured to do so.</t>
          <t indent="0" pn="section-4.2.7-4">Because some implementations of base64 do not allow rejection of
	  encoded data that has non-zero pad bits (see <xref target="RFC4648" sectionFormat="comma" section="3.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-3.5" derivedContent="RFC4648"/>), parsers <bcp14>SHOULD NOT</bcp14> fail when
	  non-zero pad bits are present, unless they cannot be configured to
	  do so.</t>
          <t indent="0" pn="section-4.2.7-5">This specification does not relax the requirements in <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648"/>, Sections <xref target="RFC4648" sectionFormat="bare" section="3.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-3.1" derivedContent="RFC4648"/> and <xref target="RFC4648" sectionFormat="bare" section="3.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-3.3" derivedContent="RFC4648"/>; therefore,
	  parsers <bcp14>MUST</bcp14> fail on characters outside the base64 alphabet and on line
	  feeds in encoded data.</t>
        </section>
        <section anchor="parse-boolean" numbered="true" removeInRFC="false" toc="include" pn="section-4.2.8">
          <name slugifiedName="name-parsing-a-boolean">Parsing a Boolean</name>
          <t indent="0" pn="section-4.2.8-1">Given an ASCII string as input_string, return a
	  Boolean. input_string is modified to remove the parsed value.</t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.2.8-2">
            <li pn="section-4.2.8-2.1" derivedCounter="1.">If the first character of input_string is not "?", fail parsing.</li>
            <li pn="section-4.2.8-2.2" derivedCounter="2.">Discard the first character of input_string.</li>
            <li pn="section-4.2.8-2.3" derivedCounter="3.">If the first character of input_string matches "1", discard
	    the first character, and return true.</li>
            <li pn="section-4.2.8-2.4" derivedCounter="4.">If the first character of input_string matches "0", discard
	    the first character, and return false.</li>
            <li pn="section-4.2.8-2.5" derivedCounter="5.">No value has matched; fail parsing.</li>
          </ol>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-5-1">This document has no IANA actions.</t>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-6-1">The size of most types defined by Structured Fields is not limited;
      as a result, extremely large fields could be an attack vector (e.g., for
      resource consumption). Most HTTP implementations limit the sizes of
      individual fields as well as the overall header or trailer section size
      to mitigate such attacks.</t>
      <t indent="0" pn="section-6-2">It is possible for parties with the ability to inject new HTTP fields
      to change the meaning of a Structured Field. In some circumstances, this
      will cause parsing to fail, but it is not possible to reliably fail in
      all such circumstances.</t>
    </section>
  </middle>
  <back>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC0020" target="https://www.rfc-editor.org/info/rfc20" quoteTitle="true" derivedAnchor="RFC0020">
          <front>
            <title>ASCII format for network interchange</title>
            <author initials="V.G." surname="Cerf" fullname="V.G. Cerf">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1969" month="October"/>
          </front>
          <seriesInfo name="STD" value="80"/>
          <seriesInfo name="RFC" value="20"/>
          <seriesInfo name="DOI" value="10.17487/RFC0020"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC4648" target="https://www.rfc-editor.org/info/rfc4648" quoteTitle="true" derivedAnchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author initials="S." surname="Josefsson" fullname="S. Josefsson">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="October"/>
            <abstract>
              <t indent="0">This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" quoteTitle="true" derivedAnchor="RFC5234">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Overell" fullname="P. Overell">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2008" month="January"/>
            <abstract>
              <t indent="0">Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="68"/>
          <seriesInfo name="RFC" value="5234"/>
          <seriesInfo name="DOI" value="10.17487/RFC5234"/>
        </reference>
        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230" quoteTitle="true" derivedAnchor="RFC7230">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t indent="0">The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7230"/>
          <seriesInfo name="DOI" value="10.17487/RFC7230"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="IEEE754" target="https://ieeexplore.ieee.org/document/8766229" quoteTitle="true" derivedAnchor="IEEE754">
          <front>
            <title>IEEE Standard for Floating-Point Arithmetic</title>
            <seriesInfo name="DOI" value="10.1109/IEEESTD.2019.8766229"/>
            <seriesInfo name="IEEE" value="754-2019"/>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2019" month="July"/>
          </front>
        </reference>
        <reference anchor="RFC7231" target="https://www.rfc-editor.org/info/rfc7231" quoteTitle="true" derivedAnchor="RFC7231">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t indent="0">The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7231"/>
          <seriesInfo name="DOI" value="10.17487/RFC7231"/>
        </reference>
        <reference anchor="RFC7493" target="https://www.rfc-editor.org/info/rfc7493" quoteTitle="true" derivedAnchor="RFC7493">
          <front>
            <title>The I-JSON Message Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="March"/>
            <abstract>
              <t indent="0">I-JSON (short for "Internet JSON") is a restricted profile of JSON designed to maximize interoperability and increase confidence that software can process it successfully with predictable results.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7493"/>
          <seriesInfo name="DOI" value="10.17487/RFC7493"/>
        </reference>
        <reference anchor="RFC7540" target="https://www.rfc-editor.org/info/rfc7540" quoteTitle="true" derivedAnchor="RFC7540">
          <front>
            <title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
            <author initials="M." surname="Belshe" fullname="M. Belshe">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Peon" fullname="R. Peon">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Thomson" fullname="M. Thomson" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t indent="0">This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t>
              <t indent="0">This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7540"/>
          <seriesInfo name="DOI" value="10.17487/RFC7540"/>
        </reference>
        <reference anchor="RFC7541" target="https://www.rfc-editor.org/info/rfc7541" quoteTitle="true" derivedAnchor="RFC7541">
          <front>
            <title>HPACK: Header Compression for HTTP/2</title>
            <author initials="R." surname="Peon" fullname="R. Peon">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Ruellan" fullname="H. Ruellan">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t indent="0">This specification defines HPACK, a compression format for efficiently representing HTTP header fields, to be used in HTTP/2.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7541"/>
          <seriesInfo name="DOI" value="10.17487/RFC7541"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t indent="0">JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t indent="0">This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="STD63" target="https://www.rfc-editor.org/info/std63" quoteTitle="true" derivedAnchor="STD63">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <author initials="F." surname="Yergeau" fullname="F. Yergeau">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2003" month="November"/>
          </front>
          <seriesInfo name="STD" value="63"/>
          <seriesInfo name="RFC" value="3629"/>
        </reference>
      </references>
    </references>
    <section anchor="faq" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-frequently-asked-questions">Frequently Asked Questions</name>
      <section anchor="why-not-json" numbered="true" removeInRFC="false" toc="include" pn="section-a.1">
        <name slugifiedName="name-why-not-json">Why Not JSON?</name>
        <t indent="0" pn="section-a.1-1">Earlier proposals for Structured Fields were based upon JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>. However, constraining its use to
	make it suitable for HTTP header fields required senders and
	recipients to implement specific additional handling.</t>
        <t indent="0" pn="section-a.1-2">For example, JSON has specification issues around large numbers and
	objects with duplicate members. Although advice for avoiding these
	issues is available (e.g., <xref target="RFC7493" format="default" sectionFormat="of" derivedContent="RFC7493"/>),
	it cannot be relied upon.</t>
        <t indent="0" pn="section-a.1-3">Likewise, JSON strings are by default Unicode strings, which have a
	number of potential interoperability issues (e.g., in
	comparison). Although implementers can be advised to avoid non-ASCII
	content where unnecessary, this is difficult to enforce.</t>
        <t indent="0" pn="section-a.1-4">Another example is JSON's ability to nest content to arbitrary
	depths. Since the resulting memory commitment might be unsuitable
	(e.g., in embedded and other limited server deployments), it's
	necessary to limit it in some fashion; however, existing JSON
	implementations have no such limits, and even if a limit is specified,
	it's likely that some field definition will find a need to violate
	it.</t>
        <t indent="0" pn="section-a.1-5">Because of JSON's broad adoption and implementation, it is
	difficult to impose such additional constraints across all
	implementations; some deployments would fail to enforce them, thereby
	harming interoperability. In short, if it looks like JSON, people will
	be tempted to use a JSON parser/serializer on field values.</t>
        <t indent="0" pn="section-a.1-6">Since a major goal for Structured Fields is to improve
	interoperability and simplify implementation, these concerns led to a
	format that requires a dedicated parser and serializer.</t>
        <t indent="0" pn="section-a.1-7">Additionally, there were widely shared feelings that JSON doesn't
	"look right" in HTTP fields.</t>
      </section>
    </section>
    <section anchor="implementation-notes" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-implementation-notes">Implementation Notes</name>
      <t indent="0" pn="section-appendix.b-1">A generic implementation of this specification should expose the
      top-level serialize (<xref target="text-serialize" format="default" sectionFormat="of" derivedContent="Section 4.1"/>)
      and parse (<xref target="text-parse" format="default" sectionFormat="of" derivedContent="Section 4.2"/>) functions. They
      need not be functions; for example, it could be implemented as an
      object, with methods for each of the different top-level types.</t>
      <t indent="0" pn="section-appendix.b-2">For interoperability, it's important that generic implementations be
      complete and follow the algorithms closely; see <xref target="strict" format="default" sectionFormat="of" derivedContent="Section 1.1"/>. To aid this, a common test suite is being maintained
      by the community at <eref brackets="angle" target="https://github.com/httpwg/structured-field-tests"/>.</t>
      <t indent="0" pn="section-appendix.b-3">Implementers should note that Dictionaries and Parameters are
      order-preserving maps. Some fields may not convey meaning in the
      ordering of these data types, but it should still be exposed so 
      that it will be available to applications that need to use it.</t>
      <t indent="0" pn="section-appendix.b-4">Likewise, implementations should note that it's important to preserve
      the distinction between Tokens and Strings. While most programming
      languages have native types that map to the other types well, it may be
      necessary to create a wrapper "token" object or use a parameter on
      functions to assure that these types remain separate.</t>
      <t indent="0" pn="section-appendix.b-5">The serialization algorithm is defined in a way that it is not
      strictly limited to the data types defined in <xref target="types" format="default" sectionFormat="of" derivedContent="Section 3"/> in every case. For example, Decimals are designed to
      take broader input and round to allowed values.</t>
      <t indent="0" pn="section-appendix.b-6">Implementations are allowed to limit the size of different
      structures, subject to the minimums defined for each type. When a
      structure exceeds an implementation limit, that structure fails parsing
      or serialization.</t>
    </section>
    <section numbered="false" anchor="acknowledgements" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.c-1">Many thanks to <contact fullname="Matthew Kerwin"/> for his detailed feedback and careful
      consideration during the development of this specification.</t>
      <t indent="0" pn="section-appendix.c-2">Thanks also to <contact fullname="Ian Clelland"/>, <contact fullname="Roy Fielding"/>, <contact fullname="Anne van Kesteren"/>,
      <contact fullname="Kazuho Oku"/>, <contact fullname="Evert Pot"/>,
      <contact fullname="Julian Reschke"/>, <contact fullname="Martin       Thomson"/>, <contact fullname="Mike West"/>, and <contact fullname="Jeffrey Yasskin"/> for their contributions.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
        <organization showOnFrontPage="true">Fastly</organization>
        <address>
          <postal>
            <city>Prahran</city>
            <region>VIC</region>
            <country>Australia</country>
          </postal>
          <email>mnot@mnot.net</email>
          <uri>https://www.mnot.net/</uri>
        </address>
      </author>
      <author initials="P-H." surname="Kamp" fullname="Poul-Henning Kamp">
        <organization showOnFrontPage="true">The Varnish Cache Project</organization>
        <address>
          <email>phk@varnish-cache.org</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
