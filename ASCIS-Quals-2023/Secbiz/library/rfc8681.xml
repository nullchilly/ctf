<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" docName="draft-ietf-tsvwg-rlc-fec-scheme-16" indexInclude="true" ipr="trust200902" number="8681" prepTime="2020-01-14T14:58:33" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-tsvwg-rlc-fec-scheme-16" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8681" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="RLC FEC Scheme">Sliding Window Random Linear Code (RLC) Forward Erasure Correction (FEC) Schemes for FECFRAME</title>
    <seriesInfo name="RFC" value="8681" stream="IETF"/>
    <author fullname="Vincent Roca" initials="V" surname="Roca">
      <organization showOnFrontPage="true">INRIA</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <extaddr>Univ. Grenoble Alpes</extaddr>
          <country>France</country>
        </postal>
        <email>vincent.roca@inria.fr</email>
      </address>
    </author>
    <author fullname="Belkacem Teibi" initials="B" surname="Teibi">
      <organization showOnFrontPage="true">INRIA</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <extaddr>Univ. Grenoble Alpes</extaddr>
          <country>France</country>
        </postal>
        <email>belkacem.teibi@gmail.com</email>
      </address>
    </author>
    <date month="01" year="2020"/>
    <workgroup>TSVWG</workgroup>
    <keyword>RLC</keyword>
    <keyword>FEC</keyword>
    <keyword>FECFRAME</keyword>
    <keyword>packet loss recovery</keyword>
    <keyword>reliability</keyword>
    <abstract pn="section-abstract">
      <t pn="section-abstract-1">
This document describes two fully specified Forward Erasure Correction (FEC) Schemes for Sliding Window Random Linear Codes (RLC), one for RLC over the Galois Field (a.k.a., Finite Field) GF(2), a second one for RLC over the Galois Field GF(2<sup>8</sup>), each time with the possibility of controlling the code density.
They can protect arbitrary media streams along the lines defined by FECFRAME extended to Sliding Window FEC Codes.
These Sliding Window FEC Codes rely on an encoding window that slides over the source symbols, generating new repair symbols whenever needed.
Compared to block FEC codes, these Sliding Window FEC Codes offer key advantages with real-time flows in terms of reduced FEC-related latency while often providing improved packet erasure recovery capabilities.
</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8681" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t pn="section-boilerplate.2-1">
            Copyright (c) 2020 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-limits-of-block-codes-with-">Limits of Block Codes with Real-Time Flows</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-lower-latency-and-better-pr">Lower Latency and Better Protection of Real-Time Flows with the Sliding Window RLC Codes</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.3">
                <t keepWithNext="true" pn="section-toc.1-1.1.2.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-small-transmission-overhead">Small Transmission Overheads with the Sliding Window RLC FEC Scheme</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.4">
                <t keepWithNext="true" pn="section-toc.1-1.1.2.4.1"><xref derivedContent="1.4" format="counter" sectionFormat="of" target="section-1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-document-organization">Document Organization</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-definitions-and-abbreviatio">Definitions and Abbreviations</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-common-procedures">Common Procedures</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-codec-parameters">Codec Parameters</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-adu-adui-and-source-symbols">ADU, ADUI, and Source Symbols Mappings</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding-window-management">Encoding Window Management</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.4">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.4.1"><xref derivedContent="3.4" format="counter" sectionFormat="of" target="section-3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-source-symbol-identificatio">Source Symbol Identification</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.5">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.5.1"><xref derivedContent="3.5" format="counter" sectionFormat="of" target="section-3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-pseudorandom-number-generat">Pseudorandom Number Generator (PRNG)</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.6">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.6.1"><xref derivedContent="3.6" format="counter" sectionFormat="of" target="section-3.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-coding-coefficients-generat">Coding Coefficients Generation Function</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.7">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.7.1"><xref derivedContent="3.7" format="counter" sectionFormat="of" target="section-3.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-finite-field-operations">Finite Field Operations</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.7.2">
                  <li pn="section-toc.1-1.3.2.7.2.1">
                    <t keepWithNext="true" pn="section-toc.1-1.3.2.7.2.1.1"><xref derivedContent="3.7.1" format="counter" sectionFormat="of" target="section-3.7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-finite-field-definitions">Finite Field Definitions</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.7.2.2">
                    <t keepWithNext="true" pn="section-toc.1-1.3.2.7.2.2.1"><xref derivedContent="3.7.2" format="counter" sectionFormat="of" target="section-3.7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-linear-combination-of-sourc">Linear Combination of Source Symbol Computation</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sliding-window-rlc-fec-sche">Sliding Window RLC FEC Scheme over GF(2<sup>8</sup>) for Arbitrary Packet Flows</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-formats-and-codes">Formats and Codes</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.1.2">
                  <li pn="section-toc.1-1.4.2.1.2.1">
                    <t keepWithNext="true" pn="section-toc.1-1.4.2.1.2.1.1"><xref derivedContent="4.1.1" format="counter" sectionFormat="of" target="section-4.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-fec-framework-configuration">FEC Framework Configuration Information</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.2">
                    <t keepWithNext="true" pn="section-toc.1-1.4.2.1.2.2.1"><xref derivedContent="4.1.2" format="counter" sectionFormat="of" target="section-4.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-explicit-source-fec-payload">Explicit Source FEC Payload ID</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.3">
                    <t keepWithNext="true" pn="section-toc.1-1.4.2.1.2.3.1"><xref derivedContent="4.1.3" format="counter" sectionFormat="of" target="section-4.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-repair-fec-payload-id">Repair FEC Payload ID</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-procedures">Procedures</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sliding-window-rlc-fec-schem">Sliding Window RLC FEC Scheme over GF(2) for Arbitrary Packet Flows</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-formats-and-codes-2">Formats and Codes</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2.1.2">
                  <li pn="section-toc.1-1.5.2.1.2.1">
                    <t keepWithNext="true" pn="section-toc.1-1.5.2.1.2.1.1"><xref derivedContent="5.1.1" format="counter" sectionFormat="of" target="section-5.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-fec-framework-configuration-">FEC Framework Configuration Information</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.1.2.2">
                    <t keepWithNext="true" pn="section-toc.1-1.5.2.1.2.2.1"><xref derivedContent="5.1.2" format="counter" sectionFormat="of" target="section-5.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-explicit-source-fec-payload-">Explicit Source FEC Payload ID</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.1.2.3">
                    <t keepWithNext="true" pn="section-toc.1-1.5.2.1.2.3.1"><xref derivedContent="5.1.3" format="counter" sectionFormat="of" target="section-5.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-repair-fec-payload-id-2">Repair FEC Payload ID</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-procedures-2">Procedures</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-fec-code-specification">FEC Code Specification</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding-side">Encoding Side</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-decoding-side">Decoding Side</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-attacks-against-the-data-fl">Attacks Against the Data Flow</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2.1.2">
                  <li pn="section-toc.1-1.7.2.1.2.1">
                    <t keepWithNext="true" pn="section-toc.1-1.7.2.1.2.1.1"><xref derivedContent="7.1.1" format="counter" sectionFormat="of" target="section-7.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-access-to-confidential-cont">Access to Confidential Content</xref></t>
                  </li>
                  <li pn="section-toc.1-1.7.2.1.2.2">
                    <t keepWithNext="true" pn="section-toc.1-1.7.2.1.2.2.1"><xref derivedContent="7.1.2" format="counter" sectionFormat="of" target="section-7.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-content-corruption">Content Corruption</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-attacks-against-the-fec-par">Attacks Against the FEC Parameters</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.3">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.3.1"><xref derivedContent="7.3" format="counter" sectionFormat="of" target="section-7.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-when-several-source-flows-a">When Several Source Flows are to be Protected Together</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.4">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.4.1"><xref derivedContent="7.4" format="counter" sectionFormat="of" target="section-7.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-baseline-secure-fec-framewo">Baseline Secure FEC Framework Operation</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.5">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.5.1"><xref derivedContent="7.5" format="counter" sectionFormat="of" target="section-7.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-additional-security-conside">Additional Security Considerations for Numerical Computations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t keepWithNext="true" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-operations-and-management-c">Operations and Management Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2">
              <li pn="section-toc.1-1.8.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.8.2.1.1"><xref derivedContent="8.1" format="counter" sectionFormat="of" target="section-8.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-operational-recommendations">Operational Recommendations: Finite Field GF(2) Versus GF(2<sup>8</sup>)</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.8.2.2.1"><xref derivedContent="8.2" format="counter" sectionFormat="of" target="section-8.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-operational-recommendations-">Operational Recommendations: Coding Coefficients Density Threshold</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.9">
            <t keepWithNext="true" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t keepWithNext="true" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t keepWithNext="true" pn="section-toc.1-1.11.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tinymt32-validation-criteri">TinyMT32 Validation Criteria (Normative)</xref></t>
          </li>
          <li pn="section-toc.1-1.12">
            <t keepWithNext="true" pn="section-toc.1-1.12.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-assessing-the-prng-adequacy">Assessing the PRNG Adequacy (Informational)</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t keepWithNext="true" pn="section-toc.1-1.13.1"><xref derivedContent="Appendix C" format="default" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-possible-parameter-derivati">Possible Parameter Derivation (Informational)</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.13.2">
              <li pn="section-toc.1-1.13.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.13.2.1.1"><xref derivedContent="C.1" format="counter" sectionFormat="of" target="section-c.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-case-of-a-cbr-real-time-flo">Case of a CBR Real-Time Flow</xref></t>
              </li>
              <li pn="section-toc.1-1.13.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.13.2.2.1"><xref derivedContent="C.2" format="counter" sectionFormat="of" target="section-c.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-other-types-of-real-time-fl">Other Types of Real-Time Flow</xref></t>
              </li>
              <li pn="section-toc.1-1.13.2.3">
                <t keepWithNext="true" pn="section-toc.1-1.13.2.3.1"><xref derivedContent="C.3" format="counter" sectionFormat="of" target="section-c.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-case-of-a-non-real-time-flo">Case of a Non-Real-Time Flow</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.14">
            <t keepWithNext="true" pn="section-toc.1-1.14.1"><xref derivedContent="Appendix D" format="default" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-decoding-beyond-maximum-lat">Decoding Beyond Maximum Latency Optimization (Informational)</xref></t>
          </li>
          <li pn="section-toc.1-1.15">
            <t keepWithNext="true" pn="section-toc.1-1.15.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.e"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgments">Acknowledgments</xref></t>
          </li>
          <li pn="section-toc.1-1.16">
            <t keepWithNext="true" pn="section-toc.1-1.16.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.f"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t pn="section-1-1">
Application-Level Forward Erasure Correction (AL-FEC) codes, or simply FEC codes, are a key element of communication systems.
They are used to recover from packet losses (or erasures) during content delivery sessions to a potentially large number of receivers (multicast/broadcast transmissions).
This is the case with the File Delivery over Unidirectional Transport
(FLUTE)/Asynchronous Layered Coding (ALC) protocol <xref target="RFC6726" format="default" sectionFormat="of" derivedContent="RFC6726"/> when used for reliable file transfers over lossy networks, and the FECFRAME protocol <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> when used for reliable continuous media transfers over lossy networks.
</t>
      <t pn="section-1-2">
The present document only focuses on the FECFRAME protocol, which is used in multicast/broadcast delivery mode, particularly for content that features stringent real-time constraints: each source packet has a maximum validity period after which it will not be considered by the destination application.
</t>
      <section anchor="intro_block_codes" numbered="true" toc="include" removeInRFC="false" pn="section-1.1">
        <name slugifiedName="name-limits-of-block-codes-with-">Limits of Block Codes with Real-Time Flows</name>
        <t pn="section-1.1-1">
With FECFRAME, there is a single FEC encoding point (either an end host/server
(source) or a middlebox) and a single FEC decoding point per receiver (either
an end host (receiver) or middlebox).
In this context, currently standardized AL-FEC codes for FECFRAME like Reed-Solomon <xref target="RFC6865" format="default" sectionFormat="of" derivedContent="RFC6865"/>, LDPC-Staircase <xref target="RFC6816" format="default" sectionFormat="of" derivedContent="RFC6816"/>, or Raptor/RaptorQ <xref target="RFC6681" format="default" sectionFormat="of" derivedContent="RFC6681"/>, are all linear block codes: they require the data flow to be segmented into blocks of a predefined maximum size.
</t>
        <t pn="section-1.1-2">
To define this block size, it is required to find an appropriate balance between robustness and decoding latency: the larger the block size, the higher the robustness (e.g., in case of long packet erasure bursts), but also the higher the maximum decoding latency (i.e., the maximum time required to recover a lost (erased) packet thanks to FEC protection).
Therefore, with a multicast/broadcast session where different receivers experience different packet loss rates, the block size should be chosen by considering the worst communication conditions one wants to support, but without exceeding the desired maximum decoding latency.
This choice then impacts the FEC-related latency of all receivers, even those experiencing a good communication quality, since no FEC encoding can happen until all the source data of the block is available at the sender, which directly depends on the block size.
</t>
      </section>
      <section anchor="intro_conv_codes" numbered="true" toc="include" removeInRFC="false" pn="section-1.2">
        <name slugifiedName="name-lower-latency-and-better-pr">Lower Latency and Better Protection of Real-Time Flows with the Sliding Window RLC Codes</name>
        <t pn="section-1.2-1">
This document introduces two fully specified FEC schemes that do not follow the block code approach: the Sliding Window Random Linear Codes (RLC) over either Galois Fields (a.k.a., Finite Fields) GF(2) (the "binary case") or GF(2<sup>8</sup>), each time with the possibility of controlling the code density.
These FEC schemes are used to protect arbitrary media streams along the lines defined by FECFRAME extended to Sliding Window FEC Codes <xref target="RFC8680" format="default" sectionFormat="of" derivedContent="RFC8680"/>.
These FEC schemes and, more generally, Sliding Window FEC Codes are recommended, for instance, with media that feature real-time constraints sent within a multicast/broadcast session <xref target="Roca17" format="default" sectionFormat="of" derivedContent="Roca17"/>.
</t>
        <t pn="section-1.2-2">
The RLC codes belong to the broad class of Sliding Window AL-FEC Codes (a.k.a., convolutional codes) <xref target="RFC8406" format="default" sectionFormat="of" derivedContent="RFC8406"/>.
The encoding process is based on an encoding window that slides over the set of source packets (in fact source symbols as we will see in <xref target="CommonProc_adui_creation" format="default" sectionFormat="of" derivedContent="Section 3.2"/>), this window being either of fixed size or variable size (a.k.a., an elastic window).
Repair symbols are generated on-the-fly, by computing a random linear combination of the source symbols present in the current encoding window, and passed to the transport layer.
</t>
        <t pn="section-1.2-3">
At the receiver, a linear system is managed from the set of received source and repair packets.
New variables (representing source symbols) and equations (representing the linear combination carried by each repair symbol received) are added upon receiving new packets.
Variables and the equations they are involved in are removed when they are too old with respect to their validity period (real-time constraints).
Lost source symbols are then recovered thanks to this linear system whenever its rank permits to solve it (at least partially).
</t>
        <t pn="section-1.2-4">
The protection of any multicast/broadcast session needs to be dimensioned by considering the worst communication conditions one wants to support.
This is also true with RLC (more generally, any sliding window) code.
However, the receivers experiencing a good to medium communication quality will observe a reduced FEC-related latency compared to block codes <xref target="Roca17" format="default" sectionFormat="of" derivedContent="Roca17"/> since an isolated lost source packet is quickly recovered with the following repair packet.
On the opposite, with a block code, recovering an isolated lost source packet always requires waiting for the first repair packet to arrive after the end of the block.
Additionally, under certain situations (e.g., with a limited FEC-related latency budget and with constant bitrate transmissions after FECFRAME encoding), Sliding Window Codes can more efficiently achieve a target transmission quality (e.g., measured by the residual loss after FEC decoding) by sending fewer repair packets (i.e., higher code rate) than block codes.
</t>
      </section>
      <section anchor="intro_low_tx_overhead" numbered="true" toc="include" removeInRFC="false" pn="section-1.3">
        <name slugifiedName="name-small-transmission-overhead">Small Transmission Overheads with the Sliding Window RLC FEC Scheme</name>
        <t pn="section-1.3-1">
The Sliding Window RLC FEC scheme is designed to limit the packet header overhead.
The main requirement is that each repair packet header must enable a receiver to reconstruct the set of source symbols plus the associated coefficients used during the encoding process.
In order to minimize packet overhead, the set of source symbols in the encoding window as well as the set of coefficients over GF(2<sup>m</sup>) (where m is 1 or 8, depending on the FEC scheme) used in the linear combination are not individually listed in the repair packet header.
Instead, each FEC Repair Packet header contains:
</t>
        <ul spacing="normal" bare="false" empty="false" pn="section-1.3-2">
          <li pn="section-1.3-2.1">the Encoding Symbol Identifier (ESI) of the first source symbol in the encoding window as well as the number of symbols (since this number may vary with a variable size, elastic window).
	These two pieces of information enable each receiver to reconstruct the set of source symbols considered during encoding, the only constraint being that there cannot be any gap;</li>
          <li pn="section-1.3-2.2">the seed and density threshold parameters used by a coding coefficients generation function (<xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>).
	These two pieces of information enable each receiver to generate the same set of coding coefficients over GF(2<sup>m</sup>) as the sender;</li>
        </ul>
        <t pn="section-1.3-3">
Therefore, no matter the number of source symbols present in the encoding window, each FEC Repair Packet features a fixed 64-bit long header, called Repair FEC Payload ID (<xref target="fig_repair_fpi" format="default" sectionFormat="of" derivedContent="Figure 8"/>).
Similarly, each FEC Source Packet features a fixed 32-bit long trailer, called Explicit Source FEC Payload ID (<xref target="fig_src_fpi" format="default" sectionFormat="of" derivedContent="Figure 6"/>), that contains the ESI of the first source symbol (<xref target="CommonProc_adui_creation" format="default" sectionFormat="of" derivedContent="Section 3.2"/>).
</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-1.4">
        <name slugifiedName="name-document-organization">Document Organization</name>
        <t pn="section-1.4-1">
This fully-specified FEC scheme follows the structure required by <xref target="RFC6363" format="default" sectionFormat="comma" section="5.6" derivedLink="https://rfc-editor.org/rfc/rfc6363#section-5.6" derivedContent="RFC6363"/> ("FEC Scheme Requirements"), namely:
</t>
        <ol type="1" start="3" spacing="normal" pn="section-1.4-2">
          <li pn="section-1.4-2.1" derivedCounter="3.">Procedures:
	This section describes procedures specific to this FEC scheme, namely: RLC parameters derivation, ADUI and source symbols mapping, pseudorandom number generator, and coding coefficients generation function;</li>
          <li pn="section-1.4-2.2" derivedCounter="4.">Formats and Codes:
	This section defines the Source FEC Payload ID and Repair FEC Payload ID formats, carrying the signaling information associated to each source or repair symbol.
	It also defines the FEC Framework Configuration Information (FFCI) carrying signaling information for the session;</li>
          <li pn="section-1.4-2.3" derivedCounter="5.">FEC Code Specification:
	Finally this section provides the code specification.</li>
        </ol>
      </section>
    </section>
    <section anchor="definitionsAndAbbreviations" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-definitions-and-abbreviatio">Definitions and Abbreviations</name>
      <t pn="section-2-1">
The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.
</t>
      <t pn="section-2-2">This document uses the following definitions and abbreviations: </t>
      <dl newline="false" spacing="normal" pn="section-2-3">
        <dt pn="section-2-3.1">a<sup>b</sup></dt>
        <dd pn="section-2-3.2">		a to the power of b</dd>
        <dt pn="section-2-3.3">GF(q)</dt>
        <dd pn="section-2-3.4">		denotes a finite field (also known as the Galois Field) with q elements.
				We assume that q = 2<sup>m</sup> in this document</dd>
        <dt pn="section-2-3.5">m</dt>
        <dd pn="section-2-3.6">		defines the length of the elements in the finite field, in bits.
				In this document, m is equal to 1 or 8</dd>
        <dt pn="section-2-3.7">ADU:</dt>
        <dd pn="section-2-3.8">		Application Data Unit</dd>
        <dt pn="section-2-3.9">ADUI:</dt>
        <dd pn="section-2-3.10">		Application Data Unit Information (includes the F, L and padding fields in addition to the ADU)</dd>
        <dt pn="section-2-3.11">E:</dt>
        <dd pn="section-2-3.12">		size of an encoding symbol (i.e., source or repair symbol), assumed fixed (in bytes)</dd>
        <dt pn="section-2-3.13">br_in:</dt>
        <dd pn="section-2-3.14">		transmission bitrate at the input of the FECFRAME sender, assumed fixed (in bits/s)</dd>
        <dt pn="section-2-3.15">br_out:</dt>
        <dd pn="section-2-3.16">		transmission bitrate at the output of the FECFRAME sender, assumed fixed (in bits/s)</dd>
        <dt pn="section-2-3.17">max_lat:</dt>
        <dd pn="section-2-3.18"> 	maximum FEC-related latency within FECFRAME (a decimal number expressed in seconds)</dd>
        <dt pn="section-2-3.19">cr:</dt>
        <dd pn="section-2-3.20">		RLC coding rate, ratio between the total number of source symbols and the total number of source plus repair symbols</dd>
        <dt pn="section-2-3.21">ew_size:</dt>
        <dd pn="section-2-3.22">		encoding window current size at a sender (in symbols)</dd>
        <dt pn="section-2-3.23">ew_max_size:</dt>
        <dd pn="section-2-3.24">	encoding window maximum size at a sender (in symbols)</dd>
        <dt pn="section-2-3.25">dw_max_size:</dt>
        <dd pn="section-2-3.26">	decoding window maximum size at a receiver (in symbols)</dd>
        <dt pn="section-2-3.27">ls_max_size:</dt>
        <dd pn="section-2-3.28">	linear system maximum size (or width) at a receiver (in symbols)</dd>
        <dt pn="section-2-3.29">WSR:</dt>
        <dd pn="section-2-3.30">		window size ratio parameter used to derive ew_max_size (encoder) and ls_max_size (decoder).</dd>
        <dt pn="section-2-3.31">PRNG:</dt>
        <dd pn="section-2-3.32">		pseudorandom number generator</dd>
        <dt pn="section-2-3.33">TinyMT32:</dt>
        <dd pn="section-2-3.34">	PRNG used in this specification.</dd>
        <dt pn="section-2-3.35">DT:</dt>
        <dd pn="section-2-3.36">		coding coefficients density threshold, an integer between 0 and 15 (inclusive) the controls
				the fraction of coefficients that are nonzero</dd>
      </dl>
    </section>
    <section anchor="CommonProcedures" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-common-procedures">Common Procedures</name>
      <t pn="section-3-1">
This section introduces the procedures that are used by these FEC schemes.
</t>
      <section anchor="CommonProc_rlcParameters" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-codec-parameters">Codec Parameters</name>
        <t pn="section-3.1-1">
A codec implementing the Sliding Window RLC FEC scheme relies on several parameters:
</t>
        <dl newline="true" spacing="normal" pn="section-3.1-2">
          <dt pn="section-3.1-2.1">Maximum FEC-related latency budget, max_lat (a decimal number expressed in seconds) with real-time flows:</dt>
          <dd pn="section-3.1-2.2">
		a source ADU flow can have real-time constraints, and therefore any FECFRAME related operation should take place within the validity
		period of each ADU (<xref target="decodingBeyondMaxLatency" format="default" sectionFormat="of" derivedContent="Appendix D"/> describes an exception to this rule).
		When there are multiple flows with different real-time
		constraints, we consider the most stringent constraints (see
		item 6 in <xref target="RFC6363" format="default" sectionFormat="of" section="10.2" derivedLink="https://rfc-editor.org/rfc/rfc6363#section-10.2" derivedContent="RFC6363"/>,
		for recommendations when several flows are globally protected).
		The maximum FEC-related latency budget, max_lat, accounts for all sources of latency added by FEC encoding (at a sender) and FEC decoding (at a receiver).
		Other sources of latency (e.g., added by network communications) are out of scope and must be considered separately (said differently, they have already been deducted from max_lat).
		max_lat can be regarded as the latency budget permitted for all FEC-related operations.
		This is an input parameter that enables a FECFRAME sender to derive other internal parameters (see <xref target="possible_param_derivation" format="default" sectionFormat="of" derivedContent="Appendix C"/>);
		</dd>
          <dt pn="section-3.1-2.3">Encoding window current (resp. maximum) size, ew_size (resp. ew_max_size) (in symbols):</dt>
          <dd pn="section-3.1-2.4">
            <t pn="section-3.1-2.4.1">
		at a FECFRAME sender, during FEC encoding, a repair symbol is computed as a linear combination of the ew_size source symbols present in the encoding window.
		The ew_max_size is the maximum size of this window, while ew_size is the current size.
		For example, in the common case at session start, upon receiving new source ADUs, the ew_size progressively increases until it reaches its maximum value, ew_max_size.
		We have:
            </t>
            <ul spacing="normal" empty="true" bare="false" pn="section-3.1-2.4.2">
              <li pn="section-3.1-2.4.2.1"> 0 &lt; ew_size &lt;= ew_max_size </li>
            </ul>
          </dd>
          <dt pn="section-3.1-2.5">Decoding window maximum size, dw_max_size (in symbols):</dt>
          <dd pn="section-3.1-2.6">
		at a FECFRAME receiver, dw_max_size is the maximum number of received or lost source symbols that are still within their latency budget;
		</dd>
          <dt pn="section-3.1-2.7">Linear system maximum size, ls_max_size (in symbols):</dt>
          <dd pn="section-3.1-2.8">
		at a FECFRAME receiver, the linear system maximum size, ls_max_size, is the maximum number of received or lost source symbols in the linear system (i.e., the variables).
		It <bcp14>SHOULD NOT</bcp14> be smaller than dw_max_size since it would mean that, even after receiving a sufficient number of FEC Repair Packets, a lost ADU may not be recovered just because the associated source symbols have been prematurely removed from the linear system, which is usually counter-productive.
		On the opposite, the linear system <bcp14>MAY</bcp14> grow beyond the dw_max_size  (<xref target="decodingBeyondMaxLatency" format="default" sectionFormat="of" derivedContent="Appendix D"/>);
		</dd>
          <dt pn="section-3.1-2.9">Symbol size, E (in bytes):</dt>
          <dd pn="section-3.1-2.10">
		the E parameter determines the source and repair symbol sizes (necessarily equal).
		This is an input parameter that enables a FECFRAME sender to derive other internal parameters, as explained below.
		An implementation at a sender <bcp14>MUST</bcp14> fix the E parameter and <bcp14>MUST</bcp14> communicate it as part of the FEC Scheme-Specific Information (<xref target="ArbitraryFlows_fssi" format="default" sectionFormat="of" derivedContent="Section 4.1.1.2"/>).
		</dd>
          <dt pn="section-3.1-2.11">Code rate, cr:</dt>
          <dd pn="section-3.1-2.12">
  The code rate parameter determines the amount of redundancy added to the flow.
  More precisely the cr is the ratio between the total number of source symbols and the total number of source plus repair symbols and by definition: 0 &lt; cr &lt;= 1.
  This is an input parameter that enables a FECFRAME sender to derive other internal parameters, as explained below.
  However, there is no need to communicate the cr parameter per see (it's not required to process a repair symbol at a receiver).
  This code rate parameter can be static.
  However, in specific use-cases (e.g., with unicast transmissions in presence of a feedback mechanism that estimates the communication quality, out of scope of FECFRAME), the code rate may be adjusted dynamically.
  </dd>
        </dl>
        <t pn="section-3.1-3">
<xref target="possible_param_derivation" format="default" sectionFormat="of" derivedContent="Appendix C"/> proposes non-normative techniques to derive those parameters, depending on the use-case specificities.
</t>
      </section>
      <section anchor="CommonProc_adui_creation" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-adu-adui-and-source-symbols">ADU, ADUI, and Source Symbols Mappings</name>
        <t pn="section-3.2-1">
At a sender, an ADU coming from the application is not directly mapped to source symbols.
When multiple source flows (e.g., media streams) are mapped onto the same FECFRAME instance, each flow is assigned its own Flow ID value (see below).
This Flow ID is then prepended to each ADU before FEC encoding.
This way, FEC decoding at a receiver also recovers this Flow ID and the recovered ADU can be assigned to the right source flow
(note that the 5-tuple used to identify the right source flow of a received ADU is absent with a recovered ADU since it is not FEC protected).
</t>
        <t pn="section-3.2-2">
Additionally, since ADUs are of variable size, padding is needed so that each ADU (with its flow identifier) contribute
to an integral number of source symbols.
This requires adding the original ADU length to each ADU before doing FEC encoding.
Because of these requirements, an intermediate format, the ADUI, or ADU Information, is considered <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>.
</t>
        <t pn="section-3.2-3">
For each incoming ADU, an ADUI <bcp14>MUST</bcp14> be created as follows.
First of all, 3 bytes are prepended (<xref target="fig_adui_creation" format="default" sectionFormat="of" derivedContent="Figure 1"/>):
</t>
        <dl newline="false" spacing="normal" pn="section-3.2-4">
          <dt pn="section-3.2-4.1">Flow ID (F) (8-bit field):</dt>
          <dd pn="section-3.2-4.2">
	this unsigned byte contains the integer identifier associated to the source ADU flow to which this ADU belongs.
	It is assumed that a single byte is sufficient, which implies that no more than 256 flows will be protected by
	a single FECFRAME session instance.</dd>
          <dt pn="section-3.2-4.3">Length (L) (16-bit field):</dt>
          <dd pn="section-3.2-4.4">
	this unsigned integer contains the length of this ADU, in network byte order (i.e., big endian).
	This length is for the ADU itself and does not include the F, L, or Pad fields.
	</dd>
        </dl>
        <t pn="section-3.2-5">
Then, zero padding is added to the ADU if needed:
</t>
        <dl newline="false" spacing="normal" pn="section-3.2-6">
          <dt pn="section-3.2-6.1">Padding (Pad) (variable size field):</dt>
          <dd pn="section-3.2-6.2">
	this field contains zero padding to  align the F, L, ADU and padding 
	up to a size that is multiple of E bytes (i.e., the source and repair symbol length).
	</dd>
        </dl>
        <t pn="section-3.2-7">
The data unit resulting from the ADU and the F, L, and Pad fields is called ADUI.
Since ADUs can have different sizes, this is also the case for ADUIs.
However, an ADUI always contributes to an integral number of source symbols.
</t>
        <figure anchor="fig_adui_creation" align="left" suppress-title="false" pn="figure-1">
          <name slugifiedName="name-adui-creation-example-resul">ADUI Creation Example, Resulting in Three Source Symbols</name>
          <artwork name="" type="" align="left" alt="" pn="section-3.2-8.1">
   symbol length, E              E                     E
&lt; ------------------ &gt;&lt; ------------------ &gt;&lt; ------------------ &gt;
+-+--+---------------------------------------------+-------------+
|F| L|                     ADU                     |     Pad     |
+-+--+---------------------------------------------+-------------+
</artwork>
        </figure>
        <t pn="section-3.2-9">
Note that neither the initial 3 bytes nor the optional padding are sent over the network.
However, they are considered during FEC encoding, and a receiver that lost a certain FEC Source Packet (e.g., the UDP datagram
containing this FEC Source Packet when UDP is used as the transport protocol) will be able to recover the ADUI if FEC decoding succeeds.
Thanks to the initial 3 bytes, this receiver will get rid of the padding (if any) and identify the corresponding ADU flow.
</t>
      </section>
      <section anchor="encodingWindowManagement" numbered="true" toc="include" removeInRFC="false" pn="section-3.3">
        <name slugifiedName="name-encoding-window-management">Encoding Window Management</name>
        <t pn="section-3.3-1">
Source symbols and the corresponding ADUs are removed from the encoding window:
</t>
        <ul spacing="normal" bare="false" empty="false" pn="section-3.3-2">
          <li pn="section-3.3-2.1"> when the sliding encoding window has reached its maximum size, ew_max_size.
 In that case the oldest symbol <bcp14>MUST</bcp14> be removed before adding a new symbol, so that the current encoding window size always
 remains inferior or equal to the maximum size: ew_size &lt;= ew_max_size;</li>
          <li pn="section-3.3-2.2"> when an ADU has reached its maximum validity duration in case of a real-time flow.
	When this happens, all source symbols corresponding to the ADUI that expired <bcp14>SHOULD</bcp14> be removed from the encoding window; </li>
        </ul>
        <t pn="section-3.3-3">
Source symbols are added to the sliding encoding window each time a new ADU arrives, once the ADU-to-source symbols mapping has been performed
(<xref target="CommonProc_adui_creation" format="default" sectionFormat="of" derivedContent="Section 3.2"/>).
The current size of the encoding window, ew_size, is updated after adding new source symbols.
This process may require to remove old source symbols so that: ew_size &lt;= ew_max_size.
</t>
        <t pn="section-3.3-4">
Note that a FEC codec may feature practical limits in the number of source symbols in the encoding window (e.g., for computational complexity reasons).
This factor may further limit the ew_max_size value, in addition to the maximum FEC-related latency budget (<xref target="CommonProc_rlcParameters" format="default" sectionFormat="of" derivedContent="Section 3.1"/>).
</t>
      </section>
      <section anchor="CommonProc_esi" numbered="true" toc="include" removeInRFC="false" pn="section-3.4">
        <name slugifiedName="name-source-symbol-identificatio">Source Symbol Identification</name>
        <t pn="section-3.4-1">
Each source symbol is identified by an Encoding Symbol ID (ESI), an unsigned integer.
The ESI of source symbols <bcp14>MUST</bcp14> start with value 0 for the first source symbol and <bcp14>MUST</bcp14> be managed sequentially.
Wrapping to zero happens after reaching the maximum value made possible by the ESI field size
(this maximum value is FEC scheme dependent, for instance, 2<sup>32</sup>-1 with FEC schemes 9 and 10).
</t>
        <t pn="section-3.4-2">
No such consideration applies to repair symbols.
</t>
      </section>
      <section anchor="CommonProc_prng" numbered="true" toc="include" removeInRFC="false" pn="section-3.5">
        <name slugifiedName="name-pseudorandom-number-generat">Pseudorandom Number Generator (PRNG)</name>
        <t pn="section-3.5-1">
In order to compute coding coefficients (see <xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>), the RLC FEC schemes rely on the TinyMT32 PRNG defined in <xref target="RFC8682" format="default" sectionFormat="of" derivedContent="RFC8682"/> with two additional functions defined in this section.
</t>
        <t pn="section-3.5-2">
This PRNG <bcp14>MUST</bcp14> first be initialized with a 32-bit unsigned integer, used as a seed, with:
</t>
        <sourcecode type="c" markers="false" pn="section-3.5-3">
   void   tinymt32_init (tinymt32_t * s, uint32_t seed);
</sourcecode>
        <t pn="section-3.5-4">
With the FEC schemes defined in this document, the seed is in practice restricted to a value between 0 and 0xFFFF inclusive (note that this PRNG accepts a seed value equal to 0),
since this is the Repair_Key 16-bit field value of the Repair FEC Payload ID (<xref target="ArbitraryFlows_repair_fpi" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>).
In practice, how to manage the seed and Repair_Key values (both are equal) is left to the implementer, using a monotonically increasing counter being one possibility (<xref target="ArbitraryFlows_FECCodeSpecification_encoding" format="default" sectionFormat="of" derivedContent="Section 6.1"/>).
In addition to the seed, this function takes as parameter a pointer to an instance of a tinymt32_t structure that is used to keep the internal state of the PRNG.
</t>
        <t pn="section-3.5-5">
Then, each time a new pseudorandom integer between 0 and 15 inclusive (4-bit pseudorandom integer) is needed, the following function is used:
</t>
        <sourcecode type="c" markers="false" pn="section-3.5-6">
   uint32_t   tinymt32_rand16 (tinymt32_t * s);
</sourcecode>
        <t pn="section-3.5-7">
This function takes as parameter a pointer to the same tinymt32_t structure (that is left unchanged between successive calls to the function).
</t>
        <t pn="section-3.5-8">
Similarly, each time a new pseudorandom integer between 0 and 255 inclusive (8-bit pseudorandom integer) is needed, the following function is used:
</t>
        <sourcecode type="c" markers="false" pn="section-3.5-9">
   uint32_t   tinymt32_rand256 (tinymt32_t * s);
</sourcecode>
        <t pn="section-3.5-10">
These two functions keep respectively the 4 or 8 less significant bits of the 32-bit pseudorandom number generated by the tinymt32_generate_uint32() function of <xref target="RFC8682" format="default" sectionFormat="of" derivedContent="RFC8682"/>.
This is done by computing the result of a binary AND between the tinymt32_generate_uint32() output and respectively the 0xF or 0xFF constants, using 32-bit unsigned integer operations.
<xref target="fig_tinymt32_mapping" format="default" sectionFormat="of" derivedContent="Figure 2"/> shows a possible implementation.
This is a C language implementation, written for C99 <xref target="C99" format="default" sectionFormat="of" derivedContent="C99"/>.
Test results discussed in  <xref target="annex_assessing_prng" format="default" sectionFormat="of" derivedContent="Appendix B"/> show that this simple technique, applied to this PRNG, is in line with the RLC FEC schemes needs.
</t>
        <figure anchor="fig_tinymt32_mapping" align="left" suppress-title="false" pn="figure-2">
          <name slugifiedName="name-4-bit-and-8-bit-mapping-fun">4-bit and 8-bit Mapping Functions for TinyMT32</name>
          <sourcecode name="" type="c" markers="true" pn="section-3.5-11.1">
/**
 * This function outputs a pseudorandom integer in [0 .. 15] range.
 *
 * @param s     pointer to tinymt internal state.
 * @return      unsigned integer between 0 and 15 inclusive.
 */
uint32_t tinymt32_rand16(tinymt32_t *s)
{
    return (tinymt32_generate_uint32(s) &amp; 0xF);
}

/**
 * This function outputs a pseudorandom integer in [0 .. 255] range.
 *
 * @param s     pointer to tinymt internal state.
 * @return      unsigned integer between 0 and 255 inclusive.
 */
uint32_t tinymt32_rand256(tinymt32_t *s)
{
    return (tinymt32_generate_uint32(s) &amp; 0xFF);
}
</sourcecode>
        </figure>
        <t pn="section-3.5-12">
Any implementation of this PRNG <bcp14>MUST</bcp14> have the same output as
that provided by the reference implementation of <xref target="RFC8682" format="default" sectionFormat="of" derivedContent="RFC8682"/>.

In order to increase the compliance confidence, three criteria are proposed: the one described in <xref target="RFC8682" format="default" sectionFormat="of" derivedContent="RFC8682"/> (for the TinyMT32 32-bit unsigned integer generator), and the two others detailed in <xref target="annex_tinymt32_validation" format="default" sectionFormat="of" derivedContent="Appendix A"/> (for the mapping to 4-bit and 8-bit intervals).
Because of the way the mapping functions work, it is unlikely that an implementation that fulfills the first criterion fails to fulfill the two others.
</t>
      </section>
      <section anchor="CommonProc_coef_generation_func" numbered="true" toc="include" removeInRFC="false" pn="section-3.6">
        <name slugifiedName="name-coding-coefficients-generat">Coding Coefficients Generation Function</name>
        <t pn="section-3.6-1">
   The coding coefficients used during the encoding process are
   generated at the RLC encoder by the generate_coding_coefficients()
   function each time a new repair symbol needs to be produced.

The fraction of coefficients that are nonzero (i.e., the density) is controlled by the DT (Density Threshold) parameter.
DT has values between 0 (the minimum value) and 15 (the maximum value), and the average probability of having a nonzero coefficient equals (DT + 1) / 16.
In particular, when DT equals 15 the function guaranties that all coefficients are nonzero (i.e., maximum density).
</t>
        <t pn="section-3.6-2">
These considerations apply to both the RLC over GF(2) and RLC over GF(2<sup>8</sup>), the only difference being the value of the m parameter.
With the RLC over GF(2) FEC scheme (<xref target="ArbitraryFlows_RLC_GF_2" format="default" sectionFormat="of" derivedContent="Section 5"/>), m is equal to 1.
With RLC over GF(2<sup>8</sup>) FEC scheme (<xref target="ArbitraryFlows_RLC_GF_28" format="default" sectionFormat="of" derivedContent="Section 4"/>), m is equal to 8.
</t>
        <t pn="section-3.6-3">
<xref target="fig_coef_generation_func" format="default" sectionFormat="of" derivedContent="Figure 3"/> shows the reference generate_coding_coefficients() implementation.
This is a C language implementation, written for C99 <xref target="C99" format="default" sectionFormat="of" derivedContent="C99"/>.
</t>
        <figure anchor="fig_coef_generation_func" align="left" suppress-title="false" pn="figure-3">
          <name slugifiedName="name-reference-implementation-of">Reference Implementation of the Coding Coefficients Generation Function</name>
          <sourcecode name="" type="c" markers="true" pn="section-3.6-4.1">
#include &lt;string.h&gt;

/*
 * Fills in the table of coding coefficients (of the right size)
 * provided with the appropriate number of coding coefficients to
 * use for the repair symbol key provided.
 *
 * (in) repair_key    key associated to this repair symbol. This
 *                    parameter is ignored (useless) if m=1 and dt=15
 * (in/out) cc_tab    pointer to a table of the right size to store
 *                    coding coefficients. All coefficients are
 *                    stored as bytes, regardless of the m parameter,
 *                    upon return of this function.
 * (in) cc_nb         number of entries in the cc_tab table. This
 *                    value is equal to the current encoding window
 *                    size.
 * (in) dt            integer between 0 and 15 (inclusive) that
 *                    controls the density. With value 15, all
 *                    coefficients are guaranteed to be nonzero
 *                    (i.e., equal to 1 with GF(2) and equal to a
 *                    value in {1,... 255} with GF(2^^8)), otherwise
 *                    a fraction of them will be 0.
 * (in) m             Finite Field GF(2^^m) parameter. In this
 *                    document only values 1 and 8 are considered.
 * (out)              returns 0 in case of success, an error code
 *                    different than 0 otherwise.
 */
int generate_coding_coefficients (uint16_t  repair_key,
                                  uint8_t*  cc_tab,
                                  uint16_t  cc_nb,
                                  uint8_t   dt,
                                  uint8_t   m)
{
    uint32_t      i;
    tinymt32_t    s;    /* PRNG internal state */

    if (dt &gt; 15) {
        return -1; /* error, bad dt parameter */
    }
    switch (m) {
    case 1:
        if (dt == 15) {
            /* all coefficients are 1 */
            memset(cc_tab, 1, cc_nb);
        } else {
            /* here coefficients are either 0 or 1 */
            tinymt32_init(&amp;s, repair_key);
            for (i = 0 ; i &lt; cc_nb ; i++) {
                cc_tab[i] = (tinymt32_rand16(&amp;s) &lt;= dt) ? 1 : 0;
            }
        }
        break;

    case 8:
        tinymt32_init(&amp;s, repair_key);
        if (dt == 15) {
            /* coefficient 0 is avoided here in order to include
             * all the source symbols */
            for (i = 0 ; i &lt; cc_nb ; i++) {
                do {
                    cc_tab[i] = (uint8_t) tinymt32_rand256(&amp;s);
                } while (cc_tab[i] == 0);
            }
        } else {
            /* here a certain number of coefficients should be 0 */
            for (i = 0 ; i &lt; cc_nb ; i++) {
                if (tinymt32_rand16(&amp;s) &lt;= dt) {
                    do {
                        cc_tab[i] = (uint8_t) tinymt32_rand256(&amp;s);
                    } while (cc_tab[i] == 0);
                } else {
                    cc_tab[i] = 0;
                }
            }
        }
        break;

    default:
        return -2; /* error, bad parameter m */
    }
    return 0; /* success */
}
</sourcecode>
        </figure>
      </section>
      <section anchor="CommonProc_gf_specificiation" numbered="true" toc="include" removeInRFC="false" pn="section-3.7">
        <name slugifiedName="name-finite-field-operations">Finite Field Operations</name>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-3.7.1">
          <name slugifiedName="name-finite-field-definitions">Finite Field Definitions</name>
          <t pn="section-3.7.1-1">
The two RLC FEC schemes specified in this document reuse the Finite Fields
defined in <xref target="RFC5510" format="default" section="8.1" sectionFormat="comma" derivedLink="https://rfc-editor.org/rfc/rfc5510#section-8.1" derivedContent="RFC5510"/>.
More specifically, the elements of the field GF(2<sup>m</sup>) are represented by polynomials with binary coefficients (i.e., over GF(2)) and degree lower or equal to m-1.
The addition between two elements is defined as the addition of binary polynomials in GF(2), which is equivalent to a bitwise XOR operation on the binary representation of these elements.
</t>
          <t pn="section-3.7.1-2">
With GF(2<sup>8</sup>), multiplication between two elements is the multiplication modulo a given irreducible polynomial of degree 8.
The following irreducible polynomial is used for GF(2<sup>8</sup>):
</t>
          <ul empty="true" spacing="normal" bare="false" pn="section-3.7.1-3">
            <li pn="section-3.7.1-3.1">x<sup>8</sup> + x<sup>4</sup> + x<sup>3</sup> + x<sup>2</sup> + 1 </li>
          </ul>
          <t pn="section-3.7.1-4">
With GF(2), multiplication corresponds to a logical AND operation.
</t>
        </section>
        <section anchor="CommonProc_linear_combination_computation" numbered="true" toc="include" removeInRFC="false" pn="section-3.7.2">
          <name slugifiedName="name-linear-combination-of-sourc">Linear Combination of Source Symbol Computation</name>
          <t pn="section-3.7.2-1">
The two RLC FEC schemes require the computation of a linear combination of source symbols, using the coding coefficients produced by the generate_coding_coefficients() function and stored in the cc_tab[] array.
</t>
          <t pn="section-3.7.2-2">
With the RLC over GF(2<sup>8</sup>) FEC scheme, a linear combination of the ew_size source symbol present in the encoding window, say src_0 to src_ew_size_1, in order to generate a repair symbol, is computed as follows.
For each byte of position i in each source and the repair symbol, where i belongs to [0; E-1], compute:
</t>
          <sourcecode type="pseudocode" markers="false" pn="section-3.7.2-3">
   repair[i] = cc_tab[0] * src_0[i] XOR cc_tab[1] * src_1[i] XOR ... 
   XOR cc_tab[ew_size - 1] * src_ew_size_1[i]
</sourcecode>
          <t pn="section-3.7.2-4">
where * is the multiplication over GF(2<sup>8</sup>).
In practice various optimizations need to be used in order to make this computation efficient (see in particular <xref target="PGM13" format="default" sectionFormat="of" derivedContent="PGM13"/>).
</t>
          <t pn="section-3.7.2-5">
With the RLC over GF(2) FEC scheme (binary case), a linear combination is computed as follows.
The repair symbol is the XOR sum of all the source symbols corresponding to a coding coefficient cc_tab[j] equal to 1 (i.e., the source symbols corresponding to zero coding coefficients are ignored).
The XOR sum of the byte of position i in each source is computed and stored in the corresponding byte of the repair symbol, where i belongs to [0; E-1].
In practice, the XOR sums will be computed several bytes at a time (e.g., on 64 bit words, or on arrays of 16 or more bytes when using SIMD CPU extensions).
</t>
          <t pn="section-3.7.2-6">
With both FEC schemes, the details of how to optimize the computation of these linear combinations are of high practical importance but out of scope of this document.
</t>
        </section>
      </section>
    </section>
    <section anchor="ArbitraryFlows_RLC_GF_28" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-sliding-window-rlc-fec-sche">Sliding Window RLC FEC Scheme over GF(2<sup>8</sup>) for Arbitrary Packet Flows</name>
      <t pn="section-4-1">
This fully-specified FEC scheme defines the Sliding Window Random Linear Codes (RLC) over GF(2<sup>8</sup>).
</t>
      <section anchor="ArbitraryFlows_formatsAndCodes" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-formats-and-codes">Formats and Codes</name>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.1">
          <name slugifiedName="name-fec-framework-configuration">FEC Framework Configuration Information</name>
          <t pn="section-4.1.1-1">
Following the guidelines of <xref target="RFC6363" format="default" sectionFormat="of" section="5.6" derivedLink="https://rfc-editor.org/rfc/rfc6363#section-5.6" derivedContent="RFC6363"/>, this section provides 
the FEC Framework Configuration Information (or FFCI).
This FCCI needs to be shared (e.g., using SDP) between the FECFRAME sender and receiver
instances in order to synchronize them.
It includes a FEC Encoding ID, mandatory for any FEC scheme specification, plus scheme-specific elements.
</t>
          <section numbered="true" toc="exclude" removeInRFC="false" pn="section-4.1.1.1">
            <name slugifiedName="name-fec-encoding-id">FEC Encoding ID</name>
            <dl newline="false" spacing="normal" pn="section-4.1.1.1-1">
              <dt pn="section-4.1.1.1-1.1">FEC Encoding ID:</dt>
              <dd pn="section-4.1.1.1-1.2">the value assigned to this fully specified FEC scheme <bcp14>MUST</bcp14> be 10,
	as assigned by IANA (<xref target="iana" format="default" sectionFormat="of" derivedContent="Section 9"/>).</dd>
            </dl>
            <t pn="section-4.1.1.1-2">
When SDP is used to communicate the FFCI, this FEC Encoding ID is carried in
the 'encoding-id' parameter.
</t>
          </section>
          <section anchor="ArbitraryFlows_fssi" numbered="true" toc="exclude" removeInRFC="false" pn="section-4.1.1.2">
            <name slugifiedName="name-fec-scheme-specific-informa">FEC Scheme-Specific Information</name>
            <t pn="section-4.1.1.2-1">
The FEC Scheme-Specific Information (FSSI) includes elements that are specific to the present FEC scheme.
More precisely:
</t>
            <dl newline="false" spacing="normal" pn="section-4.1.1.2-2">
              <dt pn="section-4.1.1.2-2.1">Encoding symbol size (E):</dt>
              <dd pn="section-4.1.1.2-2.2">
		a non-negative integer that indicates the size of each encoding symbol in bytes;</dd>
              <dt pn="section-4.1.1.2-2.3">Window Size Ratio (WSR) parameter: </dt>
              <dd pn="section-4.1.1.2-2.4">
		a non-negative integer between 0 and 255 (both inclusive) used to initialize window sizes.
		A value of 0 indicates this parameter is not considered (e.g., a fixed encoding window size may be chosen).
		A value between 1 and 255 inclusive is required by certain of the parameter derivation techniques described in <xref target="possible_param_derivation" format="default" sectionFormat="of" derivedContent="Appendix C"/>;</dd>
            </dl>
            <t pn="section-4.1.1.2-3">
This element is required both by the sender (RLC encoder) and the receiver(s) (RLC decoder).
</t>
            <t pn="section-4.1.1.2-4">
When SDP is used to communicate the FFCI, this FEC Scheme-Specific Information is carried in
the 'fssi' parameter in textual representation as specified in <xref target="RFC6364" format="default" sectionFormat="of" derivedContent="RFC6364"/>.
For instance:
</t>
            <sourcecode type="sdp" markers="false" pn="section-4.1.1.2-5">
   fssi=E:1400,WSR:191
</sourcecode>
            <t pn="section-4.1.1.2-6">
In that case the name values "E" and "WSR" are used to convey the E and WSR parameters respectively.

</t>
            <t pn="section-4.1.1.2-7">
If another mechanism requires the FSSI to be carried as an opaque octet string, the encoding format consists
of the following three octets, where the E field is carried in "big-endian" or "network order" format, that is,
most significant byte first:
</t>
            <dl newline="false" spacing="normal" pn="section-4.1.1.2-8">
              <dt pn="section-4.1.1.2-8.1"/>
              <dd pn="section-4.1.1.2-8.2"> Encoding symbol length (E): 16-bit field;</dd>
              <dt pn="section-4.1.1.2-8.3"/>
              <dd pn="section-4.1.1.2-8.4"> Window Size Ratio Parameter (WSR): 8-bit field.</dd>
            </dl>
            <t pn="section-4.1.1.2-9">
These three octets can be communicated as such, or for instance, be subject to an additional Base64 encoding.
</t>
            <figure anchor="fig_ArbitraryFlows_fssi_binary" align="left" suppress-title="false" pn="figure-4">
              <name slugifiedName="name-fssi-encoding-format">FSSI Encoding Format</name>
              <artwork name="" type="" align="left" alt="" pn="section-4.1.1.2-10.1">
 0                   1                   2
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|   Encoding Symbol Length (E)  |      WSR      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
            </figure>
          </section>
        </section>
        <section anchor="ArbitraryFlows_src_fpi" numbered="true" toc="include" removeInRFC="false" pn="section-4.1.2">
          <name slugifiedName="name-explicit-source-fec-payload">Explicit Source FEC Payload ID</name>
          <t pn="section-4.1.2-1">
A FEC Source Packet <bcp14>MUST</bcp14> contain an Explicit Source FEC Payload ID that is appended to the
end of the packet as illustrated in <xref target="fig_src_pkt_format" format="default" sectionFormat="of" derivedContent="Figure 5"/>.
</t>
          <figure anchor="fig_src_pkt_format" align="left" suppress-title="false" pn="figure-5">
            <name slugifiedName="name-structure-of-an-fec-source-">Structure of an FEC Source Packet with the Explicit Source FEC Payload ID</name>
            <artwork name="" type="" align="left" alt="" pn="section-4.1.2-2.1">
+--------------------------------+
|           IP Header            |
+--------------------------------+
|        Transport Header        |
+--------------------------------+
|              ADU               |
+--------------------------------+
| Explicit Source FEC Payload ID |
+--------------------------------+
</artwork>
          </figure>
          <t pn="section-4.1.2-3">
More precisely, the Explicit Source FEC Payload ID is composed of the following field,
carried in "big-endian" or "network order" format, that is, most significant byte first
(<xref target="fig_src_fpi" format="default" sectionFormat="of" derivedContent="Figure 6"/>):
</t>
          <dl newline="false" spacing="normal" pn="section-4.1.2-4">
            <dt pn="section-4.1.2-4.1">Encoding Symbol ID (ESI) (32-bit field):</dt>
            <dd pn="section-4.1.2-4.2">
		this unsigned integer identifies the first source symbol of the ADUI corresponding to this FEC Source Packet.
		The ESI is incremented for each new source symbol, and after reaching the maximum value
		(2<sup>32</sup>-1), wrapping to zero occurs.
		</dd>
          </dl>
          <figure anchor="fig_src_fpi" align="left" suppress-title="false" pn="figure-6">
            <name slugifiedName="name-source-fec-payload-id-encod">Source FEC Payload ID Encoding Format</name>
            <artwork name="" type="" align="left" alt="" pn="section-4.1.2-5.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                   Encoding Symbol ID (ESI)                    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
          </figure>
        </section>
        <section anchor="ArbitraryFlows_repair_fpi" numbered="true" toc="include" removeInRFC="false" pn="section-4.1.3">
          <name slugifiedName="name-repair-fec-payload-id">Repair FEC Payload ID</name>
          <t pn="section-4.1.3-1">
A FEC Repair Packet <bcp14>MAY</bcp14> contain one or more repair symbols.
When there are several repair symbols, all of them <bcp14>MUST</bcp14> have been generated from the same encoding window,
using Repair_Key values that are managed as explained below.
A receiver can easily deduce the number of repair symbols within a FEC Repair Packet by
comparing the received FEC Repair Packet size (equal to the UDP payload size when UDP is the underlying
transport protocol) and the symbol size, E, communicated in the FFCI.
</t>
          <t pn="section-4.1.3-2">
A FEC Repair Packet <bcp14>MUST</bcp14> contain a Repair FEC Payload ID that is prepended to the
repair symbol as illustrated in <xref target="fig_repair_pkt_format" format="default" sectionFormat="of" derivedContent="Figure 7"/>.
</t>
          <figure anchor="fig_repair_pkt_format" align="left" suppress-title="false" pn="figure-7">
            <name slugifiedName="name-structure-of-an-fec-repair-">Structure of an FEC Repair Packet with the Repair FEC Payload ID</name>
            <artwork name="" type="" align="left" alt="" pn="section-4.1.3-3.1">
+--------------------------------+
|           IP Header            |
+--------------------------------+
|        Transport Header        |
+--------------------------------+
|     Repair FEC Payload ID      |
+--------------------------------+
|         Repair Symbol          |
+--------------------------------+
</artwork>
          </figure>
          <t pn="section-4.1.3-4">
More precisely, the Repair FEC Payload ID is composed of the following fields where all integer fields are carried
in "big-endian" or "network order" format, that is, most significant byte first (<xref target="fig_repair_fpi" format="default" sectionFormat="of" derivedContent="Figure 8"/>):
</t>
          <dl newline="false" spacing="normal" pn="section-4.1.3-5">
            <dt pn="section-4.1.3-5.1">Repair_Key (16-bit field):</dt>
            <dd pn="section-4.1.3-5.2">
	this unsigned integer is used as a seed by the coefficient generation function (<xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>)
	in order to generate the desired number of coding coefficients.
	This repair key may be a monotonically increasing integer value that loops back to 0 after reaching 65535
	(see <xref target="ArbitraryFlows_FECCodeSpecification_encoding" format="default" sectionFormat="of" derivedContent="Section 6.1"/>).
	When a FEC Repair Packet contains several repair symbols, this repair key value is that of the first repair symbol.
	The remaining repair keys can be deduced by incrementing by 1 this value, up to a maximum value of 65535 after which it loops back to 0.
	</dd>
            <dt pn="section-4.1.3-5.3">Density Threshold for the coding coefficients, DT (4-bit field):</dt>
            <dd pn="section-4.1.3-5.4">
	this unsigned integer carries the Density Threshold (DT) used by the coding coefficient generation function <xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>.
	More precisely, it controls the probability of having a nonzero coding coefficient, which equals (DT+1) / 16.
	When a FEC Repair Packet contains several repair symbols, the DT value applies to all of them; </dd>
            <dt pn="section-4.1.3-5.5">Number of Source Symbols in the encoding window, NSS (12-bit field):</dt>
            <dd pn="section-4.1.3-5.6">
	this unsigned integer indicates the number of source symbols in the encoding window when this repair symbol was generated.
	When a FEC Repair Packet contains several repair symbols, this NSS value applies to all of them; </dd>
            <dt pn="section-4.1.3-5.7">ESI of First Source Symbol in the encoding window, FSS_ESI (32-bit field):</dt>
            <dd pn="section-4.1.3-5.8">
	this unsigned integer indicates the ESI of the first source symbol in the encoding window when this repair symbol was generated.
	When a FEC Repair Packet contains several repair symbols, this FSS_ESI value applies to all of them; </dd>
          </dl>
          <figure anchor="fig_repair_fpi" align="left" suppress-title="false" pn="figure-8">
            <name slugifiedName="name-repair-fec-payload-id-encod">Repair FEC Payload ID Encoding Format</name>
            <artwork name="" type="" align="left" alt="" pn="section-4.1.3-6.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Repair_Key              |  DT   |NSS (# src symb in ew) |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            FSS_ESI                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
          </figure>
        </section>
      </section>
      <section anchor="ArbitraryFlows_Procedures" numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-procedures">Procedures</name>
        <t pn="section-4.2-1">
All the procedures of <xref target="CommonProcedures" format="default" sectionFormat="of" derivedContent="Section 3"/> apply to this FEC scheme.
</t>
      </section>
    </section>
    <section anchor="ArbitraryFlows_RLC_GF_2" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-sliding-window-rlc-fec-schem">Sliding Window RLC FEC Scheme over GF(2) for Arbitrary Packet Flows</name>
      <t pn="section-5-1">
This fully-specified FEC scheme defines the Sliding Window Random Linear Codes (RLC) over GF(2) (binary case).
</t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-5.1">
        <name slugifiedName="name-formats-and-codes-2">Formats and Codes</name>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-5.1.1">
          <name slugifiedName="name-fec-framework-configuration-">FEC Framework Configuration Information</name>
          <section numbered="true" toc="exclude" removeInRFC="false" pn="section-5.1.1.1">
            <name slugifiedName="name-fec-encoding-id-2">FEC Encoding ID</name>
            <dl newline="false" spacing="normal" pn="section-5.1.1.1-1">
              <dt pn="section-5.1.1.1-1.1">FEC Encoding ID:</dt>
              <dd pn="section-5.1.1.1-1.2">the value assigned to this fully specified FEC scheme
	<bcp14>MUST</bcp14> be 9,
	as assigned by IANA (<xref target="iana" format="default" sectionFormat="of" derivedContent="Section 9"/>).</dd>
            </dl>
            <t pn="section-5.1.1.1-2">
When SDP is used to communicate the FFCI, this FEC Encoding ID is carried in
the 'encoding-id' parameter.
</t>
          </section>
          <section numbered="true" toc="exclude" removeInRFC="false" pn="section-5.1.1.2">
            <name slugifiedName="name-fec-scheme-specific-informat">FEC Scheme-Specific Information</name>
            <t pn="section-5.1.1.2-1">
All the considerations of <xref target="ArbitraryFlows_fssi" format="default" sectionFormat="of" derivedContent="Section 4.1.1.2"/> apply here.
</t>
          </section>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-5.1.2">
          <name slugifiedName="name-explicit-source-fec-payload-">Explicit Source FEC Payload ID</name>
          <t pn="section-5.1.2-1">
All the considerations of <xref target="ArbitraryFlows_src_fpi" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/> apply here.
</t>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-5.1.3">
          <name slugifiedName="name-repair-fec-payload-id-2">Repair FEC Payload ID</name>
          <t pn="section-5.1.3-1">
All the considerations of <xref target="ArbitraryFlows_repair_fpi" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/> apply here, with the only exception that the Repair_Key field
is useless if DT = 15 (indeed, in that case all the coefficients are necessarily equal to 1 and the coefficient generation function does not use any PRNG).
When DT = 15 the  FECFRAME sender <bcp14>MUST</bcp14> set the Repair_Key field to zero on transmission and a receiver <bcp14>MUST</bcp14> ignore it on receipt.
</t>
        </section>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-5.2">
        <name slugifiedName="name-procedures-2">Procedures</name>
        <t pn="section-5.2-1">
All the procedures of <xref target="CommonProcedures" format="default" sectionFormat="of" derivedContent="Section 3"/> apply to this FEC scheme.
</t>
      </section>
    </section>
    <section anchor="ArbitraryFlows_FECCodeSpecification" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-fec-code-specification">FEC Code Specification</name>
      <section anchor="ArbitraryFlows_FECCodeSpecification_encoding" numbered="true" toc="include" removeInRFC="false" pn="section-6.1">
        <name slugifiedName="name-encoding-side">Encoding Side</name>
        <t pn="section-6.1-1">
This section provides a high level description of a Sliding Window RLC encoder.
</t>
        <t pn="section-6.1-2">
Whenever a new FEC Repair Packet is needed, the RLC encoder instance first gathers the ew_size source symbols currently in the sliding encoding window. 
Then it chooses a repair key, which can be a monotonically increasing integer value, incremented for each repair symbol up to a maximum
value of 65535 (as it is carried within a 16-bit field) after which it loops back to 0. 
This repair key is communicated to the coefficient generation function (<xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>) in order to generate
ew_size coding coefficients.
Finally, the FECFRAME sender computes the repair symbol as a linear combination of the ew_size source symbols using the ew_size coding coefficients
(<xref target="CommonProc_gf_specificiation" format="default" sectionFormat="of" derivedContent="Section 3.7"/>).
When E is small and when there is an incentive to pack several repair symbols within the same FEC Repair Packet, the appropriate number of repair symbols
are computed.
In that case the repair key for each of them <bcp14>MUST</bcp14> be incremented by 1, keeping the same ew_size source symbols, since only the first repair key will
be carried in the Repair FEC Payload ID.
The FEC Repair Packet can then be passed to the transport layer for transmission.
The source versus repair FEC packet transmission order is out of scope of this document and several approaches exist that are implementation-specific.
</t>
        <t pn="section-6.1-3">
Other solutions are possible to select a repair key value when a new FEC Repair Packet is needed, for instance, by choosing a random integer between 0 and 65535.
However, selecting the same repair key as before (which may happen in case of a random process) is only meaningful if the encoding window has changed,
otherwise the same FEC Repair Packet will be generated.
In any case, choosing the repair key is entirely at the discretion of the sender, since it is communicated to the receiver(s) in each Repair FEC Payload ID. A receiver should not make any assumption on the way the repair key is managed.
</t>
      </section>
      <section anchor="ArbitraryFlows_FECCodeSpecification_decoding" numbered="true" toc="include" removeInRFC="false" pn="section-6.2">
        <name slugifiedName="name-decoding-side">Decoding Side</name>
        <t pn="section-6.2-1">
This section provides a high level description of a Sliding Window RLC decoder.
</t>
        <t pn="section-6.2-2">
A FECFRAME receiver needs to maintain a linear system whose variables are the received and lost source symbols.
Upon receiving a FEC Repair Packet, a receiver first extracts all the repair symbols it contains (in case several repair symbols are packed together).
For each repair symbol, when at least one of the corresponding source symbols it protects has been lost, the receiver adds an equation to the linear system
(or no equation if this repair packet does not change the linear system rank).
This equation of course re-uses the ew_size coding coefficients that are computed by the same coefficient generation function
(<xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>), using the repair key and encoding window descriptions carried in the Repair FEC Payload ID.
Whenever possible (i.e., when a sub-system covering one or more lost source
symbols is of full rank), decoding is performed in order to recover lost
source symbols.  Gaussian elimination is one possible algorithm to solve this
linear system.  Each time an ADUI can be totally recovered, padding is removed
(thanks to the Length field, L, of the ADUI) and the ADU is assigned to the
corresponding application flow (thanks to the Flow ID field, F, of the ADUI).
This ADU is finally passed to the corresponding upper application.  Received
FEC Source Packets, containing an ADU, <bcp14>MAY</bcp14> be passed to the
application either immediately or after some time to guaranty an ordered
delivery to the application.  This document does not mandate any approach as
this is an operational and management decision.
</t>
        <t pn="section-6.2-3">
With real-time flows, a lost ADU that is decoded after the maximum latency or an ADU received after this delay has no value to the application.
This raises the question of deciding whether or not an ADU is late.
This decision <bcp14>MAY</bcp14> be taken within the FECFRAME receiver (e.g., using the decoding window, see <xref target="CommonProc_rlcParameters" format="default" sectionFormat="of" derivedContent="Section 3.1"/>)
or within the application (e.g., using RTP timestamps within the ADU).
Deciding which option to follow and whether or not to pass all ADUs, including those assumed late, to the application are operational decisions that depend
on the application and are therefore out of scope of this document.
Additionally, <xref target="decodingBeyondMaxLatency" format="default" sectionFormat="of" derivedContent="Appendix D"/> discusses a backward compatible optimization whereby late source symbols <bcp14>MAY</bcp14> still be used within
the FECFRAME receiver in order to improve transmission robustness.
</t>
      </section>
    </section>
    <section anchor="SecurityConsiderations" numbered="true" toc="include" removeInRFC="false" pn="section-7">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t pn="section-7-1">
The FEC Framework document <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> provides a fairly comprehensive
analysis of security considerations applicable to FEC schemes.
Therefore, the present section follows the security considerations section of
<xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> and only discusses specific topics.
</t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-7.1">
        <name slugifiedName="name-attacks-against-the-data-fl">Attacks Against the Data Flow</name>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-7.1.1">
          <name slugifiedName="name-access-to-confidential-cont">Access to Confidential Content</name>
          <t pn="section-7.1.1-1">The Sliding Window RLC FEC scheme specified in this document does not change the
recommendations of <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>.
To summarize, if confidentiality is a concern, it is <bcp14>RECOMMENDED</bcp14> that one of the
solutions mentioned in <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> is used with special
considerations to the way this solution is applied (e.g., is encryption applied
before or after FEC protection, within the end system or in a middlebox), to the operational 
constraints (e.g., performing FEC decoding in a protected environment may be
complicated or even impossible) and to the threat model.
</t>
        </section>
        <section anchor="sec_content_corruption" numbered="true" toc="include" removeInRFC="false" pn="section-7.1.2">
          <name slugifiedName="name-content-corruption">Content Corruption</name>
          <t pn="section-7.1.2-1">The Sliding Window RLC FEC scheme specified in this document does not change the
recommendations of <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>.
To summarize, it is <bcp14>RECOMMENDED</bcp14> that one of the solutions mentioned in
<xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> is used on both the FEC Source and Repair Packets.  
</t>
        </section>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-7.2">
        <name slugifiedName="name-attacks-against-the-fec-par">Attacks Against the FEC Parameters</name>
        <t pn="section-7.2-1">
The FEC scheme specified in this document defines parameters that
can be the basis of attacks.
More specifically, the following parameters of the FFCI may be modified
by an attacker who targets receivers (<xref target="ArbitraryFlows_fssi" format="default" sectionFormat="of" derivedContent="Section 4.1.1.2"/>):
</t>
        <dl newline="false" spacing="normal" pn="section-7.2-2">
          <dt pn="section-7.2-2.1">FEC Encoding ID:</dt>
          <dd pn="section-7.2-2.2">changing this parameter leads a receiver to consider a different FEC scheme.
		The consequences are severe, the format of the Explicit Source FEC Payload ID
		and Repair FEC Payload ID of received packets will probably differ, leading to
		various malfunctions.
		Even if the original and modified FEC schemes share the same format, FEC decoding
		will either fail or lead to corrupted decoded symbols.
		This will happen if an attacker turns value 9 (i.e., RLC over GF(2)) to value 10 (RLC over GF(2<sup>8</sup>)),
		an additional consequence being a higher processing overhead at the receiver.
		In any case, the attack results in a form of Denial of Service (DoS) or corrupted content.
	</dd>
          <dt pn="section-7.2-2.3">Encoding symbol length (E):</dt>
          <dd pn="section-7.2-2.4">setting this E parameter to a different value will confuse a receiver.
		If the size of a received FEC Repair Packet is no longer multiple of the modified E value,
		a receiver quickly detects a problem and <bcp14>SHOULD</bcp14> reject the packet.
		If the new E value is a sub-multiple of the original E value (e.g., half the original value),
		then receivers may not detect the problem immediately.
		For instance, a receiver may think that a received FEC Repair Packet contains more repair symbols
		(e.g., twice as many if E is reduced by half), leading to malfunctions whose nature depends on
		implementation details.
		Here also, the attack always results in a form of DoS or corrupted content.
	</dd>
        </dl>
        <t pn="section-7.2-3">
It is therefore <bcp14>RECOMMENDED</bcp14> that security measures be taken to
guarantee the FFCI integrity, as specified in <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>.
How to achieve this depends on the way the FFCI is communicated from the sender
to the receiver, which is not specified in this document.
</t>
        <t pn="section-7.2-4">
Similarly, attacks are possible against the Explicit Source FEC Payload ID
and Repair FEC Payload ID.
More specifically, in case of a FEC Source Packet, the following value can be modified by an attacker who targets receivers:
</t>
        <dl newline="false" spacing="normal" pn="section-7.2-5">
          <dt pn="section-7.2-5.1">Encoding Symbol ID (ESI):</dt>
          <dd pn="section-7.2-5.2">changing the ESI leads a receiver to consider a wrong ADU, resulting in severe consequences, including
		corrupted content passed to the receiving application;
	</dd>
        </dl>
        <t pn="section-7.2-6">
And in case of a FEC Repair Packet:
</t>
        <dl newline="false" spacing="normal" pn="section-7.2-7">
          <dt pn="section-7.2-7.1">Repair Key:</dt>
          <dd pn="section-7.2-7.2">changing this value leads a receiver to generate a wrong coding coefficient sequence, and therefore
		any source symbol decoded using the repair symbols contained in this packet will be corrupted;
	</dd>
          <dt pn="section-7.2-7.3">DT:</dt>
          <dd pn="section-7.2-7.4">changing this value also leads a receiver to generate a wrong coding coefficient sequence, and therefore
		any source symbol decoded using the repair symbols contained in this packet will be corrupted.
		In addition, if the DT value is significantly increased, it will generate a higher processing overhead at a receiver.
		In case of very large encoding windows, this may impact the terminal performance;
	</dd>
          <dt pn="section-7.2-7.5">NSS:</dt>
          <dd pn="section-7.2-7.6">changing this value leads a receiver to consider a different set of source symbols, and therefore
		any source symbol decoded using the repair symbols contained in this packet will be corrupted.
		In addition, if the NSS value is significantly increased, it will generate a higher processing overhead at a receiver,
		which may impact the terminal performance;
	</dd>
          <dt pn="section-7.2-7.7">FSS_ESI:</dt>
          <dd pn="section-7.2-7.8">changing this value also leads a receiver to consider a different set of source symbols and therefore
		any source symbol decoded using the repair symbols contained in this packet will be corrupted.
	</dd>
        </dl>
        <t pn="section-7.2-8">
It is therefore <bcp14>RECOMMENDED</bcp14> that security measures are taken to guarantee the
FEC Source and Repair Packets as stated in <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>.
</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-7.3">
        <name slugifiedName="name-when-several-source-flows-a">When Several Source Flows are to be Protected Together</name>
        <t pn="section-7.3-1">The Sliding Window RLC FEC scheme specified in this document does not change the
recommendations of <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>.</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-7.4">
        <name slugifiedName="name-baseline-secure-fec-framewo">Baseline Secure FEC Framework Operation</name>
        <t pn="section-7.4-1">The Sliding Window RLC FEC scheme specified in this document does not change the
recommendations of <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> concerning the use of
the IPsec/Encapsulating Security Payload (ESP) security protocol as a mandatory-to-implement (but not mandatory-to-use) security scheme.
This is well suited to situations where the only insecure domain is the one
over which the FEC Framework operates.
</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-7.5">
        <name slugifiedName="name-additional-security-conside">Additional Security Considerations for Numerical Computations</name>
        <t pn="section-7.5-1">
In addition to the above security considerations, inherited from <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/>, 
the present document introduces several formulae, in particular in <xref target="param_derivation_cbr_realtime" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>.
It is <bcp14>RECOMMENDED</bcp14> to check that the computed values stay within reasonable bounds since numerical overflows,
caused by an erroneous implementation or an erroneous input value, may lead to hazardous behaviors.
However, what "reasonable bounds" means is use-case and implementation dependent and is not detailed in this document.
</t>
        <t pn="section-7.5-2">
<xref target="param_derivation_other_realtime_flows" format="default" sectionFormat="of" derivedContent="Appendix C.2"/> also mentions the possibility of "using the
timestamp field of an RTP packet header" when applicable.
A malicious attacker may deliberately corrupt this header field in order to trigger hazardous behaviors at a FECFRAME receiver.
Protection against this type of content corruption can be addressed with the above recommendations on a baseline secure operation.
In addition, it is also <bcp14>RECOMMENDED</bcp14> to check that the timestamp value be within reasonable bounds.
</t>
      </section>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-8">
      <name slugifiedName="name-operations-and-management-c">Operations and Management Considerations</name>
      <t pn="section-8-1">
The FEC Framework document <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> provides a fairly comprehensive
analysis of operations and management considerations applicable to FEC schemes.
Therefore, the present section only discusses specific topics.
</t>
      <section anchor="oprecom_ff_considerations" numbered="true" toc="include" removeInRFC="false" pn="section-8.1">
        <name slugifiedName="name-operational-recommendations">Operational Recommendations: Finite Field GF(2) Versus GF(2<sup>8</sup>)</name>
        <t pn="section-8.1-1">
The present document specifies two FEC schemes that differ on the Finite Field used for the coding coefficients.
It is expected that the RLC over GF(2<sup>8</sup>) FEC scheme will be mostly used since it warrants a higher packet loss protection.
In case of small encoding windows, the associated processing overhead is not an issue (e.g., we measured decoding speeds between
745 Mbps and 2.8 Gbps on an ARM Cortex-A15 embedded board in <xref target="Roca17" format="default" sectionFormat="of" derivedContent="Roca17"/> depending on the code rate and the channel conditions, using an encoding window of size 18 or 23 symbols; see the above article for the details).
Of course the CPU overhead will increase with the encoding window size, because more operations in the GF(2<sup>8</sup>) finite field will
be needed.
</t>
        <t pn="section-8.1-2">
The RLC over GF(2) FEC scheme offers an alternative.
In that case operations symbols can be directly XOR-ed together which warrants high bitrate encoding and decoding operations, and
can be an advantage with large encoding windows.
However, packet loss protection is significantly reduced by using this FEC scheme.
</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.2">
        <name slugifiedName="name-operational-recommendations-">Operational Recommendations: Coding Coefficients Density Threshold</name>
        <t pn="section-8.2-1"> 
In addition to the choice of the Finite Field, the two FEC schemes define a coding coefficient density threshold (DT) parameter.
This parameter enables a sender to control the code density, i.e., the proportion of coefficients that are nonzero on average.
With RLC over GF(2<sup>8</sup>), it is usually appropriate that small encoding windows be associated to a density threshold equal to 15,
the maximum value, in order to warrant a high loss protection.
</t>
        <t pn="section-8.2-2">
On the opposite, with larger encoding windows, it is usually appropriate that the density threshold be reduced.
With large encoding windows, an alternative can be to use RLC over GF(2) and a density threshold equal to 7 (i.e., an average density equal to 1/2) or smaller.
</t>
        <t pn="section-8.2-3">
Note that using a density threshold equal to 15 with RLC over GF(2) is equivalent to using an XOR code that computes the XOR sum of all the source symbols in the encoding window.
In that case: (1) only a single repair symbol can be produced for any encoding window, and (2) the repair_key parameter becomes useless (the coding coefficients generation function does not rely on the PRNG).
</t>
      </section>
    </section>
    <section anchor="iana" numbered="true" toc="include" removeInRFC="false" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t pn="section-9-1">
This document registers two values in the "FEC Framework (FECFRAME)
FEC Encoding IDs" registry <xref target="RFC6363" format="default" sectionFormat="of" derivedContent="RFC6363"/> as follows:
</t>
      <ul spacing="normal" bare="false" empty="false" pn="section-9-2">
        <li pn="section-9-2.1">9 refers to the Sliding Window Random Linear Codes (RLC) over GF(2) FEC Scheme for Arbitrary Packet Flows, as defined in <xref target="ArbitraryFlows_RLC_GF_2" format="default" sectionFormat="of" derivedContent="Section 5"/> of this document.</li>
        <li pn="section-9-2.2">10 refers to the Sliding Window Random Linear Codes (RLC) over GF(2<sup>8</sup>) FEC Scheme for Arbitrary Packet Flows, as defined in <xref target="ArbitraryFlows_RLC_GF_28" format="default" sectionFormat="of" derivedContent="Section 4"/> of this document.</li>
      </ul>
    </section>
  </middle>
  <back>
    <references pn="section-10">
      <name slugifiedName="name-references">References</name>
      <references pn="section-10.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="C99" quoteTitle="true" derivedAnchor="C99">
          <front>
            <title>Programming languages - C: C99, correction 3:2007</title>
            <seriesInfo name="ISO/IEC" value="9899:1999/Cor 3:2007"/>
            <author>
              <organization showOnFrontPage="true">International Organization for Standardization</organization>
            </author>
            <date month="November" year="2007"/>
          </front>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC6363" target="https://www.rfc-editor.org/info/rfc6363" quoteTitle="true" derivedAnchor="RFC6363">
          <front>
            <title>Forward Error Correction (FEC) Framework</title>
            <author initials="M." surname="Watson" fullname="M. Watson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Begen" fullname="A. Begen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Roca" fullname="V. Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="October"/>
            <abstract>
              <t>This document describes a framework for using Forward Error Correction (FEC) codes with applications in public and private IP networks to provide protection against packet loss.  The framework supports applying FEC to arbitrary packet flows over unreliable transport and is primarily intended for real-time, or streaming, media.  This framework can be used to define Content Delivery Protocols that provide FEC for streaming media delivery or other packet flows.  Content Delivery Protocols defined using this framework can support any FEC scheme (and associated FEC codes) that is compliant with various requirements defined in this document. Thus, Content Delivery Protocols can be defined that are not specific to a particular FEC scheme, and FEC schemes can be defined that are not specific to a particular Content Delivery Protocol.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6363"/>
          <seriesInfo name="DOI" value="10.17487/RFC6363"/>
        </reference>
        <reference anchor="RFC6364" target="https://www.rfc-editor.org/info/rfc6364" quoteTitle="true" derivedAnchor="RFC6364">
          <front>
            <title>Session Description Protocol Elements for the Forward Error Correction (FEC) Framework</title>
            <author initials="A." surname="Begen" fullname="A. Begen">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="October"/>
            <abstract>
              <t>This document specifies the use of the Session Description Protocol (SDP) to describe the parameters required to signal the Forward Error Correction (FEC) Framework Configuration Information between the sender(s) and receiver(s).  This document also provides examples that show the semantics for grouping multiple source and repair flows together for the applications that simultaneously use multiple instances of the FEC Framework.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6364"/>
          <seriesInfo name="DOI" value="10.17487/RFC6364"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8680" target="https://www.rfc-editor.org/info/rfc8680" quoteTitle="true" derivedAnchor="RFC8680">
          <front>
            <title>Forward Error Correction (FEC) Framework Extension to Sliding Window Codes</title>
            <seriesInfo name="RFC" value="8680"/>
            <seriesInfo name="DOI" value="10.17487/RFC8680"/>
            <author initials="V" surname="Roca" fullname="Vincent Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A" surname="Begen" fullname="Ali Begen">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2020"/>
          </front>
        </reference>
        <reference anchor="RFC8682" target="https://www.rfc-editor.org/info/rfc8682" quoteTitle="true" derivedAnchor="RFC8682">
          <front>
            <title>TinyMT32 Pseudorandom Number Generator (PRNG)</title>
            <seriesInfo name="RFC" value="8682"/>
            <seriesInfo name="DOI" value="10.17487/RFC8682"/>
            <author initials="M" surname="Saito" fullname="Mutsuo Saito">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M" surname="Matsumoto" fullname="Makoto Matsumoto">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V" surname="Roca" fullname="Vincent Roca" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E" surname="Baccelli" fullname="Emmanuel Baccelli">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2020"/>
          </front>
        </reference>
      </references>
      <references pn="section-10.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="PGM13" target="http://web.eecs.utk.edu/~plank/plank/papers/UT-CS-13-717.html" quoteTitle="true" derivedAnchor="PGM13">
          <front>
            <title>A Complete Treatment of Software Implementations of Finite Field Arithmetic for Erasure Coding Applications</title>
            <seriesInfo name="University of Tennessee Technical Report" value="UT-CS-13-717"/>
            <author initials="J." surname="Plank">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Greenan">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Miller">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="October" year="2013"/>
          </front>
        </reference>
        <reference anchor="RFC5170" target="https://www.rfc-editor.org/info/rfc5170" quoteTitle="true" derivedAnchor="RFC5170">
          <front>
            <title>Low Density Parity Check (LDPC) Staircase and Triangle Forward Error Correction (FEC) Schemes</title>
            <author initials="V." surname="Roca" fullname="V. Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Neumann" fullname="C. Neumann">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Furodet" fullname="D. Furodet">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2008" month="June"/>
            <abstract>
              <t>This document describes two Fully-Specified Forward Error Correction (FEC) Schemes, Low Density Parity Check (LDPC) Staircase and LDPC Triangle, and their application to the reliable delivery of data objects on the packet erasure channel (i.e., a communication path where packets are either received without any corruption or discarded during transmission).  These systematic FEC codes belong to the well- known class of "Low Density Parity Check" codes, and are large block FEC codes in the sense of RFC 3453.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5170"/>
          <seriesInfo name="DOI" value="10.17487/RFC5170"/>
        </reference>
        <reference anchor="RFC5510" target="https://www.rfc-editor.org/info/rfc5510" quoteTitle="true" derivedAnchor="RFC5510">
          <front>
            <title>Reed-Solomon Forward Error Correction (FEC) Schemes</title>
            <author initials="J." surname="Lacan" fullname="J. Lacan">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Roca" fullname="V. Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Peltotalo" fullname="J. Peltotalo">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Peltotalo" fullname="S. Peltotalo">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2009" month="April"/>
            <abstract>
              <t>This document describes a Fully-Specified Forward Error Correction (FEC) Scheme for the Reed-Solomon FEC codes over GF(2^^m), where m is in {2..16}, and its application to the reliable delivery of data objects on the packet erasure channel (i.e., a communication path where packets are either received without any corruption or discarded during transmission).  This document also describes a Fully-Specified FEC Scheme for the special case of Reed-Solomon codes over GF(2^^8) when there is no encoding symbol group.  Finally, in the context of the Under-Specified Small Block Systematic FEC Scheme (FEC Encoding ID 129), this document assigns an FEC Instance ID to the special case of Reed-Solomon codes over GF(2^^8).</t>
              <t>Reed-Solomon codes belong to the class of Maximum Distance Separable (MDS) codes, i.e., they enable a receiver to recover the k source symbols from any set of k received symbols.  The schemes described here are compatible with the implementation from Luigi Rizzo.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5510"/>
          <seriesInfo name="DOI" value="10.17487/RFC5510"/>
        </reference>
        <reference anchor="RFC6681" target="https://www.rfc-editor.org/info/rfc6681" quoteTitle="true" derivedAnchor="RFC6681">
          <front>
            <title>Raptor Forward Error Correction (FEC) Schemes for FECFRAME</title>
            <author initials="M." surname="Watson" fullname="M. Watson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Stockhammer" fullname="T. Stockhammer">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Luby" fullname="M. Luby">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="August"/>
            <abstract>
              <t>This document describes Fully-Specified Forward Error Correction (FEC) Schemes for the Raptor and RaptorQ codes and their application to reliable delivery of media streams in the context of the FEC Framework.  The Raptor and RaptorQ codes are systematic codes, where a number of repair symbols are generated from a set of source symbols and sent in one or more repair flows in addition to the source symbols that are sent to the receiver(s) within a source flow.  The Raptor and RaptorQ codes offer close to optimal protection against arbitrary packet losses at a low computational complexity.  Six FEC Schemes are defined: two for the protection of arbitrary packet flows, two that are optimized for small source blocks, and two for the protection of a single flow that already contains a sequence number. Repair data may be sent over arbitrary datagram transport (e.g., UDP) or using RTP.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6681"/>
          <seriesInfo name="DOI" value="10.17487/RFC6681"/>
        </reference>
        <reference anchor="RFC6726" target="https://www.rfc-editor.org/info/rfc6726" quoteTitle="true" derivedAnchor="RFC6726">
          <front>
            <title>FLUTE - File Delivery over Unidirectional Transport</title>
            <author initials="T." surname="Paila" fullname="T. Paila">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Walsh" fullname="R. Walsh">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Luby" fullname="M. Luby">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Roca" fullname="V. Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Lehtonen" fullname="R. Lehtonen">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="November"/>
            <abstract>
              <t>This document defines File Delivery over Unidirectional Transport (FLUTE), a protocol for the unidirectional delivery of files over the Internet, which is particularly suited to multicast networks.  The specification builds on Asynchronous Layered Coding, the base protocol designed for massively scalable multicast distribution. This document obsoletes RFC 3926.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6726"/>
          <seriesInfo name="DOI" value="10.17487/RFC6726"/>
        </reference>
        <reference anchor="RFC6816" target="https://www.rfc-editor.org/info/rfc6816" quoteTitle="true" derivedAnchor="RFC6816">
          <front>
            <title>Simple Low-Density Parity Check (LDPC) Staircase Forward Error Correction (FEC) Scheme for FECFRAME</title>
            <author initials="V." surname="Roca" fullname="V. Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Cunche" fullname="M. Cunche">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Lacan" fullname="J. Lacan">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="December"/>
            <abstract>
              <t>This document describes a fully specified simple Forward Error Correction (FEC) scheme for Low-Density Parity Check (LDPC) Staircase codes that can be used to protect media streams along the lines defined by FECFRAME.  These codes have many interesting properties: they are systematic codes, they perform close to ideal codes in many use-cases, and they also feature very high encoding and decoding throughputs.  LDPC-Staircase codes are therefore a good solution to protect a single high bitrate source flow or to protect globally several mid-rate flows within a single FECFRAME instance.  They are also a good solution whenever the processing load of a software encoder or decoder must be kept to a minimum.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6816"/>
          <seriesInfo name="DOI" value="10.17487/RFC6816"/>
        </reference>
        <reference anchor="RFC6865" target="https://www.rfc-editor.org/info/rfc6865" quoteTitle="true" derivedAnchor="RFC6865">
          <front>
            <title>Simple Reed-Solomon Forward Error Correction (FEC) Scheme for FECFRAME</title>
            <author initials="V." surname="Roca" fullname="V. Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Cunche" fullname="M. Cunche">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Lacan" fullname="J. Lacan">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Bouabdallah" fullname="A. Bouabdallah">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Matsuzono" fullname="K. Matsuzono">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="February"/>
            <abstract>
              <t>This document describes a fully-specified simple Forward Error Correction (FEC) scheme for Reed-Solomon codes over the finite field (also known as the Galois Field) GF(2^^m), with 2 &lt;= m &lt;= 16, that can be used to protect arbitrary media streams along the lines defined by FECFRAME.  The Reed-Solomon codes considered have attractive properties, since they offer optimal protection against packet erasures and the source symbols are part of the encoding symbols, which can greatly simplify decoding.  However, the price to pay is a limit on the maximum source block size, on the maximum number of encoding symbols, and a computational complexity higher than that of the Low-Density Parity Check (LDPC) codes, for instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6865"/>
          <seriesInfo name="DOI" value="10.17487/RFC6865"/>
        </reference>
        <reference anchor="RFC8406" target="https://www.rfc-editor.org/info/rfc8406" quoteTitle="true" derivedAnchor="RFC8406">
          <front>
            <title>Taxonomy of Coding Techniques for Efficient Network Communications</title>
            <author initials="B." surname="Adamson" fullname="B. Adamson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Adjih" fullname="C. Adjih">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bilbao" fullname="J. Bilbao">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Firoiu" fullname="V. Firoiu">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="F." surname="Fitzek" fullname="F. Fitzek">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Ghanem" fullname="S. Ghanem">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Lochin" fullname="E. Lochin">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Masucci" fullname="A. Masucci">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M-J." surname="Montpetit" fullname="M-J. Montpetit">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Pedersen" fullname="M. Pedersen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G." surname="Peralta" fullname="G. Peralta">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Roca" fullname="V. Roca" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Saxena" fullname="P. Saxena">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Sivakumar" fullname="S. Sivakumar">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="June"/>
            <abstract>
              <t>This document summarizes recommended terminology for Network Coding concepts and constructs.  It provides a comprehensive set of terms in order to avoid ambiguities in future IRTF and IETF documents on Network Coding.  This document is the product of the Coding for Efficient Network Communications Research Group (NWCRG), and it is in line with the terminology used by the RFCs produced by the Reliable Multicast Transport (RMT) and FEC Framework (FECFRAME) IETF working groups.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8406"/>
          <seriesInfo name="DOI" value="10.17487/RFC8406"/>
        </reference>
        <reference anchor="Roca16" target="https://hal.inria.fr/hal-01395937/en/" quoteTitle="true" derivedAnchor="Roca16">
          <front>
            <title>Block or Convolutional AL-FEC Codes? A Performance Comparison for Robust Low-Latency Communications</title>
            <seriesInfo name="HAL ID" value="hal-01395937v2"/>
            <author initials="V." surname="Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Teibi">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Burdinat">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Tran-Thai">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Thienot">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="February" year="2017"/>
          </front>
        </reference>
        <reference anchor="Roca17" target="https://hal.inria.fr/hal-01571609v1/en/" quoteTitle="true" derivedAnchor="Roca17">
          <front>
            <title>Less Latency and Better Protection with AL-FEC Sliding Window Codes: a Robust Multimedia CBR Broadcast Case Study</title>
            <seriesInfo name="HAL ID" value="hal-01571609"/>
            <author initials="V." surname="Roca">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Teibi">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Burdinat">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Tran">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Thienot">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="October" year="2017"/>
          </front>
          <refcontent>13th IEEE International Conference on Wireless and                   
            Mobile Computing, Networking and Communications (WiMob17)</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="annex_tinymt32_validation" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-tinymt32-validation-criteri">TinyMT32 Validation Criteria (Normative)</name>
      <t pn="section-appendix.a-1">
PRNG determinism, for a given seed, is a requirement.
Consequently, in order to validate an implementation of the TinyMT32 PRNG, the following criteria <bcp14>MUST</bcp14> be met.
</t>
      <t pn="section-appendix.a-2">
The first criterion focuses on the tinymt32_rand256(), where the 32-bit integer of the core TinyMT32 PRNG is scaled down to an 8-bit integer.
Using a seed value of 1, the first 50 values returned by: tinymt32_rand256() as 8-bit unsigned integers
<bcp14>MUST</bcp14> be equal to values provided in <xref target="fig_tinymt32_out_truncated_256" format="default" sectionFormat="of" derivedContent="Figure 9"/>, to be read line by line.
</t>
      <figure anchor="fig_tinymt32_out_truncated_256" align="left" suppress-title="false" pn="figure-9">
        <name slugifiedName="name-first-50-decimal-values-to-">First 50 decimal values (to be read per line) returned by tinymt32_rand256() as 8-bit unsigned integers, with a seed value of 1</name>
        <artwork name="" type="" align="left" alt="" pn="section-appendix.a-3.1">
        37        225        177        176         21
       246         54        139        168        237
       211        187         62        190        104
       135        210         99        176         11
       207         35         40        113        179
       214        254        101        212        211
       226         41        234        232        203
        29        194        211        112        107
       217        104        197        135         23
        89        210        252        109        166
</artwork>
      </figure>
      <t pn="section-appendix.a-4">
The second criterion focuses on the tinymt32_rand16(), where the 32-bit integer of the core TinyMT32 PRNG is scaled down to a 4-bit integer.
Using a seed value of 1, the first 50 values returned by: tinymt32_rand16() as 4-bit unsigned integers
<bcp14>MUST</bcp14> be equal to values provided in <xref target="fig_tinymt32_out_truncated_16" format="default" sectionFormat="of" derivedContent="Figure 10"/>, to be read line by line.
</t>
      <figure anchor="fig_tinymt32_out_truncated_16" align="left" suppress-title="false" pn="figure-10">
        <name slugifiedName="name-first-50-decimal-values-to-b">First 50 decimal values (to be read per line) returned by tinymt32_rand16() as 4-bit unsigned integers, with a seed value of 1</name>
        <artwork name="" type="" align="left" alt="" pn="section-appendix.a-5.1">
         5          1          1          0          5
         6          6         11          8         13
         3         11         14         14          8
         7          2          3          0         11
        15          3          8          1          3
         6         14          5          4          3
         2          9         10          8         11
        13          2          3          0         11
         9          8          5          7          7
         9          2         12         13          6
</artwork>
      </figure>
    </section>
    <section anchor="annex_assessing_prng" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.b">
      <name slugifiedName="name-assessing-the-prng-adequacy">Assessing the PRNG Adequacy (Informational)</name>
      <t pn="section-appendix.b-1">
This annex discusses the adequacy of the TinyMT32 PRNG and the tinymt32_rand16() and tinymt32_rand256() functions, to the RLC FEC schemes.
The goal is to assess the adequacy of these two functions in producing coding coefficients that are sufficiently different from one another, across various repair symbols with repair key values in sequence (we can expect this approach to be commonly used by implementers, see <xref target="ArbitraryFlows_FECCodeSpecification_encoding" format="default" sectionFormat="of" derivedContent="Section 6.1"/>).
This section is purely informational and does not claim to be a solid evaluation.
</t>
      <t pn="section-appendix.b-2">
The two RLC FEC schemes use the PRNG to produce pseudorandom coding coefficients (<xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>), each time a new repair symbol is needed.
A different repair key is used for each repair symbol, usually by incrementing the repair key value (<xref target="ArbitraryFlows_FECCodeSpecification_encoding" format="default" sectionFormat="of" derivedContent="Section 6.1"/>).
For each repair symbol, a limited number of pseudorandom numbers is needed, depending on the DT and encoding window size (<xref target="CommonProc_coef_generation_func" format="default" sectionFormat="of" derivedContent="Section 3.6"/>), using either tinymt32_rand16() or tinymt32_rand256().
Therefore, we are more interested in the randomness of small sequences of random numbers mapped to 4-bit or 8-bit integers, than in the randomness of a very large sequence of random numbers which is not representative of the usage of the PRNG.
</t>
      <t pn="section-appendix.b-3">
Evaluation of tinymt32_rand16():
We first generate a huge number (1,000,000,000) of small sequences (20 pseudorandom numbers per sequence), increasing the seed value for each sequence, and perform statistics on the number of occurrences of each of the 16 possible values across all sequences.
In this first test we consider 32-bit seed values in order to assess the PRNG quality after output truncation to 4 bits.
</t>
      <table anchor="table_tinymt32_out_truncated_16_huge_nb_small_seq" align="center" pn="table-1">
        <name slugifiedName="name-tinymt32_rand16-occurrence-">tinymt32_rand16() Occurrence Statistics</name>
        <thead>
          <tr>
            <th align="left" colspan="1" rowspan="1">Value</th>
            <th align="left" colspan="1" rowspan="1"> Occurrences</th>
            <th align="left" colspan="1" rowspan="1">Percentage (%)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left" colspan="1" rowspan="1">0</td>
            <td align="left" colspan="1" rowspan="1">1250036799</td>
            <td align="left" colspan="1" rowspan="1">6.2502</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">1</td>
            <td align="left" colspan="1" rowspan="1">1249995831</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">2</td>
            <td align="left" colspan="1" rowspan="1">1250038674</td>
            <td align="left" colspan="1" rowspan="1">6.2502</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">3</td>
            <td align="left" colspan="1" rowspan="1">1250000881</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">1250023929</td>
            <td align="left" colspan="1" rowspan="1">6.2501</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">1249986320</td>
            <td align="left" colspan="1" rowspan="1">6.2499</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">6</td>
            <td align="left" colspan="1" rowspan="1">1249995587</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">7</td>
            <td align="left" colspan="1" rowspan="1">1250020363</td>
            <td align="left" colspan="1" rowspan="1">6.2501</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">8</td>
            <td align="left" colspan="1" rowspan="1">1249995276</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">9</td>
            <td align="left" colspan="1" rowspan="1">1249982856</td>
            <td align="left" colspan="1" rowspan="1">6.2499</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">10</td>
            <td align="left" colspan="1" rowspan="1">1249984111</td>
            <td align="left" colspan="1" rowspan="1">6.2499</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">11</td>
            <td align="left" colspan="1" rowspan="1">1250009551</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">12</td>
            <td align="left" colspan="1" rowspan="1">1249955768</td>
            <td align="left" colspan="1" rowspan="1">6.2498</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">13</td>
            <td align="left" colspan="1" rowspan="1">1249994654</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">14</td>
            <td align="left" colspan="1" rowspan="1">1250000569</td>
            <td align="left" colspan="1" rowspan="1">6.2500</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">15</td>
            <td align="left" colspan="1" rowspan="1">1249978831</td>
            <td align="left" colspan="1" rowspan="1">6.2499</td>
          </tr>
        </tbody>
      </table>
      <t pn="section-appendix.b-5">
Evaluation of tinymt32_rand16(): We first generate a huge number
(1,000,000,000) of small sequences 
(20 pseudorandom numbers per sequence), increasing the seed value for each
sequence, and perform 
statistics on the number of occurrences of each of the 16 possible values
across the 20,000,000,000 
numbers of all sequences. In this first test, we consider 32-bit seed values in
order to assess the PRNG
quality after output truncation to 4 bits.
</t>
      <t pn="section-appendix.b-6">
The results (<xref target="table_tinymt32_out_truncated_16_huge_nb_small_seq" format="default" sectionFormat="of" derivedContent="Table 1"/>) show that all possible values are almost equally represented, or said differently, that the tinymt32_rand16() output converges to a uniform distribution where each of the 16 possible values would appear exactly 1 / 16 * 100 = 6.25% of times.
</t>
      <t pn="section-appendix.b-7">
Since the RLC FEC schemes use of this PRNG will be limited to 16-bit seed values, we carried out the same test for the first 2<sup>16</sup> seed values only.
The distribution (not shown) is of course less uniform, with value occurrences ranging between 6.2121% (i.e., 81,423 occurrences out of a total of 65536*20=1,310,720) and 6.2948% (i.e., 82,507 occurrences).
However, we do not believe it significantly impacts the RLC FEC scheme behavior.
</t>
      <t pn="section-appendix.b-8">
Other types of biases may exist that may be visible with smaller tests, for instance to evaluate the convergence speed to a uniform distribution.

   We therefore perform 200 tests, each of them producing 200 sequences,
   keeping only the first value of each sequence.

We use non-overlapping repair keys for each sequence, starting with value 0 and increasing it after each use.
</t>
      <table anchor="table_tinymt32_out_truncated_16_small_nb_small_seq" align="center" pn="table-2">
        <name slugifiedName="name-tinymt32_rand16-occurrence-s">tinymt32_rand16() Occurrence Statistics</name>
        <thead>
          <tr>
            <th align="left" colspan="1" rowspan="1">Value</th>
            <th align="left" colspan="1" rowspan="1">Min Occurrences</th>
            <th align="left" colspan="1" rowspan="1">Max Occurrences</th>
            <th align="left" colspan="1" rowspan="1">Average Occurrences</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left" colspan="1" rowspan="1">0</td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">21</td>
            <td align="left" colspan="1" rowspan="1">6.3675</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">1</td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">22</td>
            <td align="left" colspan="1" rowspan="1">6.0200</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">2</td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">20</td>
            <td align="left" colspan="1" rowspan="1">6.3125</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">3</td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">23</td>
            <td align="left" colspan="1" rowspan="1">6.1775</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">24</td>
            <td align="left" colspan="1" rowspan="1">6.1000</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">21</td>
            <td align="left" colspan="1" rowspan="1">6.5925</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">6</td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">30</td>
            <td align="left" colspan="1" rowspan="1">6.3075</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">7</td>
            <td align="left" colspan="1" rowspan="1">6</td>
            <td align="left" colspan="1" rowspan="1">22</td>
            <td align="left" colspan="1" rowspan="1">6.2225</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">8</td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">26</td>
            <td align="left" colspan="1" rowspan="1">6.1750</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">9</td>
            <td align="left" colspan="1" rowspan="1">3</td>
            <td align="left" colspan="1" rowspan="1">21</td>
            <td align="left" colspan="1" rowspan="1">5.9425</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">10 </td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">24</td>
            <td align="left" colspan="1" rowspan="1">6.3175</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">11 </td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">22</td>
            <td align="left" colspan="1" rowspan="1">6.4300</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">12 </td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">21</td>
            <td align="left" colspan="1" rowspan="1">6.1600</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">13 </td>
            <td align="left" colspan="1" rowspan="1">5</td>
            <td align="left" colspan="1" rowspan="1">22</td>
            <td align="left" colspan="1" rowspan="1">6.3100</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">14 </td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">26</td>
            <td align="left" colspan="1" rowspan="1">6.3950</td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">15 </td>
            <td align="left" colspan="1" rowspan="1">4</td>
            <td align="left" colspan="1" rowspan="1">21</td>
            <td align="left" colspan="1" rowspan="1">6.1700</td>
          </tr>
        </tbody>
      </table>
      <t pn="section-appendix.b-10">
<xref target="table_tinymt32_out_truncated_16_small_nb_small_seq" format="default" sectionFormat="of" derivedContent="Table 2"/> shows across all 200 tests, for each of the 16 possible pseudorandom number values, the minimum (resp. maximum) number of times it appeared in a test, as well as the average number of occurrences across the 200 tests.
Although the distribution is not perfect, there is no major bias.
On the contrary, in the same conditions, the Park-Miller linear congruential PRNG of <xref target="RFC5170" format="default" sectionFormat="of" derivedContent="RFC5170"/> with a result scaled down to 4-bit values, using seeds in sequence starting from 1, systematically returns 0 as the first value during some time. Then, after a certain repair key value threshold, it systematically returns 1, etc.
</t>
      <t pn="section-appendix.b-11">
Evaluation of tinymt32_rand256():
The same approach is used here.
Results (not shown) are similar: occurrences vary between 7,810,3368 (i.e., 0.3905%) and 7,814,7952 (i.e., 0.3907%).
Here also we see a convergence to the theoretical uniform distribution where each of the 256 possible values would appear exactly 1 / 256 * 100 = 0.390625% of times.
</t>
    </section>
    <section anchor="possible_param_derivation" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.c">
      <name slugifiedName="name-possible-parameter-derivati">Possible Parameter Derivation (Informational)</name>
      <t pn="section-appendix.c-1">
<xref target="CommonProc_rlcParameters" format="default" sectionFormat="of" derivedContent="Section 3.1"/> defines several parameters to control the encoder or decoder.
This annex proposes techniques to derive these parameters according to the target use-case.
This annex is informational, in the sense that using a different derivation technique will not prevent the encoder and decoder to interoperate: a decoder can still recover an erased source symbol without any error.
However, in case of a real-time flow, an inappropriate parameter derivation may lead to the decoding of erased source packets after their validity period, making them useless to the target application.
This annex proposes an approach to reduce this risk, among other things.
</t>
      <t pn="section-appendix.c-2">
The FEC schemes defined in this document can be used in various manners, depending on the target use-case:
</t>
      <ul spacing="normal" bare="false" empty="false" pn="section-appendix.c-3">
        <li pn="section-appendix.c-3.1"> the source ADU flow they protect may or may not have real-time constraints;</li>
        <li pn="section-appendix.c-3.2"> the source ADU flow may be a Constant Bitrate (CBR) or Variable Bitrate (VBR) flow;</li>
        <li pn="section-appendix.c-3.3"> with a VBR source ADU flow, the flow's minimum and maximum bitrates may or may not be known;</li>
        <li pn="section-appendix.c-3.4"> and the communication path between encoder and decoder may be a CBR communication path (e.g., as with certain LTE-based broadcast channels) or not (general case, e.g., with Internet).</li>
      </ul>
      <t pn="section-appendix.c-4">
The parameter derivation technique should be suited to the use-case, as described in the following sections.
</t>
      <section anchor="param_derivation_cbr_realtime" numbered="true" toc="include" removeInRFC="false" pn="section-c.1">
        <name slugifiedName="name-case-of-a-cbr-real-time-flo">Case of a CBR Real-Time Flow</name>
        <t pn="section-c.1-1">
In the following, we consider a real-time flow with max_lat latency budget.
The encoding symbol size, E, is constant.
The code rate, cr, is also constant, its value depending on the expected communication loss model (this choice is out of scope of this document).
</t>
        <t pn="section-c.1-2">
In a first configuration, the source ADU flow bitrate at the input of the FECFRAME sender is fixed and equal to br_in (in bits/s), and this value is known by the FECFRAME sender.
It follows that the transmission bitrate at the output of the FECFRAME sender will be higher, depending on the added repair flow overhead.
In order to comply with the maximum FEC-related latency budget, we have:
</t>
        <ul empty="true" spacing="normal" bare="false" pn="section-c.1-3">
          <li pn="section-c.1-3.1"> dw_max_size = (max_lat * br_in) / (8 * E) </li>
        </ul>
        <t pn="section-c.1-4">
assuming that the encoding and decoding times are negligible with respect to the target max_lat.
This is a reasonable assumption in many situations (e.g., see <xref target="oprecom_ff_considerations" format="default" sectionFormat="of" derivedContent="Section 8.1"/> in case of small window sizes).
Otherwise the max_lat parameter should be adjusted in order to avoid the problem.
In any case, interoperability will never be compromised by choosing a too large value.
</t>
        <t pn="section-c.1-5">
In a second configuration, the FECFRAME sender generates a fixed bitrate flow, equal to the CBR communication path bitrate equal to br_out (in bits/s), and this value is known by the FECFRAME sender, as in <xref target="Roca17" format="default" sectionFormat="of" derivedContent="Roca17"/>.
The maximum source flow bitrate needs to be such that, with the added repair flow overhead, the total transmission bitrate remains inferior or equal to br_out.
We have:
</t>
        <ul empty="true" spacing="normal" bare="false" pn="section-c.1-6">
          <li pn="section-c.1-6.1"> dw_max_size = (max_lat * br_out * cr) / (8 * E) </li>
        </ul>
        <t pn="section-c.1-7">
assuming here also that the encoding and decoding times are negligible with respect to the target max_lat.
</t>
        <t pn="section-c.1-8">
For decoding to be possible within the latency budget, it is required that the encoding window maximum size be smaller than or at most equal to the decoding window maximum size.
The ew_max_size is the main parameter at a FECFRAME sender, but its exact value has no impact on the FEC-related latency budget.
The ew_max_size parameter is computed as follows:
</t>
        <ul empty="true" spacing="normal" bare="false" pn="section-c.1-9">
          <li pn="section-c.1-9.1"> ew_max_size = dw_max_size * WSR / 255</li>
        </ul>
        <t pn="section-c.1-10">
In line with <xref target="Roca17" format="default" sectionFormat="of" derivedContent="Roca17"/>, WSR = 191 is considered as a reasonable value (the resulting encoding to decoding window size ratio is then close to 0.75), but other values between 1 and 255 inclusive are possible, depending on the use-case.
</t>
        <t pn="section-c.1-11">
The dw_max_size is computed by a FECFRAME sender but not explicitly communicated to a FECFRAME receiver.
However, a FECFRAME receiver can easily evaluate the ew_max_size by observing the maximum Number of Source Symbols (NSS) value contained in the Repair FEC Payload ID of received FEC Repair Packets (<xref target="ArbitraryFlows_repair_fpi" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>).
A receiver can then easily compute dw_max_size:
</t>
        <ul empty="true" spacing="normal" bare="false" pn="section-c.1-12">
          <li pn="section-c.1-12.1"> dw_max_size = max_NSS_observed * 255 / WSR </li>
        </ul>
        <t pn="section-c.1-13">
A receiver can then choose an appropriate linear system maximum size:
</t>
        <ul empty="true" spacing="normal" bare="false" pn="section-c.1-14">
          <li pn="section-c.1-14.1"> ls_max_size &gt;= dw_max_size </li>
        </ul>
        <t pn="section-c.1-15">
It is good practice to use a larger value for ls_max_size as explained in <xref target="decodingBeyondMaxLatency" format="default" sectionFormat="of" derivedContent="Appendix D"/>, which does not impact maximum latency nor interoperability.
</t>
        <t pn="section-c.1-16">
In any case, for a given use-case (i.e., for target encoding and decoding devices and desired protection levels in front of communication impairments) and for the computed ew_max_size, dw_max_size and ls_max_size values, it is <bcp14>RECOMMENDED</bcp14> to check that the maximum encoding time and maximum memory requirements at a FECFRAME sender, and maximum decoding time and maximum memory requirements at a FECFRAME receiver, stay within reasonable bounds.
When assuming that the encoding and decoding times are negligible with respect to the target max_lat, this should be verified as well, otherwise the max_lat <bcp14>SHOULD</bcp14> be adjusted accordingly.
</t>
        <t pn="section-c.1-17">
The particular case of session start needs to be managed appropriately since the ew_size, starting at zero, increases each time a new source ADU is received by the FECFRAME sender, until it reaches the ew_max_size value.
Therefore, a FECFRAME receiver <bcp14>SHOULD</bcp14> continuously observe the received FEC Repair Packets, since the NSS value carried in the Repair FEC Payload ID will increase too, and adjust its ls_max_size accordingly if need be.
With a CBR flow, session start is expected to be the only moment when the encoding window size will increase.
Similarly, with a CBR real-time flow, the session end is expected to be the only moment when the encoding window size will progressively decrease.
No adjustment of the ls_max_size is required at the FECFRAME receiver in that case.
</t>
      </section>
      <section anchor="param_derivation_other_realtime_flows" numbered="true" toc="include" removeInRFC="false" pn="section-c.2">
        <name slugifiedName="name-other-types-of-real-time-fl">Other Types of Real-Time Flow</name>
        <t pn="section-c.2-1">
In the following, we consider a real-time source ADU flow with a max_lat latency budget and a variable bitrate (VBR) measured at the entry of the FECFRAME sender.
A first approach consists in considering the smallest instantaneous bitrate of the source ADU flow, when this parameter is known, and to reuse the derivation of <xref target="param_derivation_cbr_realtime" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>.
Considering the smallest bitrate means that the encoding and decoding window maximum size estimations are pessimistic: these windows have the smallest size required to enable on-time decoding at a FECFRAME receiver.
If the instantaneous bitrate is higher than this smallest bitrate, this approach leads to an encoding window that is unnecessarily small, which reduces robustness in front of long erasure bursts.
</t>
        <t pn="section-c.2-2">
Another approach consists in using ADU timing information (e.g., using the timestamp field of an RTP packet header, or registering the time upon receiving a new ADU).
From the global FEC-related latency budget, the FECFRAME sender can derive a practical maximum latency budget for encoding operations, max_lat_for_encoding.
For the FEC schemes specified in this document, this latency budget <bcp14>SHOULD</bcp14> be computed with:
</t>
        <ul empty="true" spacing="normal" bare="false" pn="section-c.2-3">
          <li pn="section-c.2-3.1"> max_lat_for_encoding = max_lat * WSR / 255 </li>
        </ul>
        <t pn="section-c.2-4">
It follows that any source symbols associated to an ADU that has timed-out with respect to max_lat_for_encoding <bcp14>SHOULD</bcp14> be removed from the encoding window.
With this approach there is no pre-determined ew_size value: this value fluctuates over the time according to the instantaneous source ADU flow bitrate.
For practical reasons, a FECFRAME sender may still require that ew_size does not increase beyond a maximum value (<xref target="param_derivation_non_realtime" format="default" sectionFormat="of" derivedContent="Appendix C.3"/>).
</t>
        <t pn="section-c.2-5">
With both approaches, and no matter the choice of the FECFRAME sender, a FECFRAME receiver can still easily evaluate the ew_max_size by observing the maximum Number of Source Symbols (NSS) value contained in the Repair FEC Payload ID of received FEC Repair Packets.
A receiver can then compute dw_max_size and derive an appropriate ls_max_size as explained in <xref target="param_derivation_cbr_realtime" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>.
</t>
        <t pn="section-c.2-6">
When the observed NSS fluctuates significantly, a FECFRAME receiver may want to adapt its ls_max_size accordingly.
In particular when the NSS is significantly reduced, a FECFRAME receiver may want to reduce the ls_max_size too in order to limit computation complexity.
A balance must be found between using an ls_max_size "too large" (which increases computation complexity and memory requirements) and the opposite (which reduces recovery performance).
</t>
      </section>
      <section anchor="param_derivation_non_realtime" numbered="true" toc="include" removeInRFC="false" pn="section-c.3">
        <name slugifiedName="name-case-of-a-non-real-time-flo">Case of a Non-Real-Time Flow</name>
        <t pn="section-c.3-1">
Finally there are configurations where a source ADU flow has no real-time constraints.
FECFRAME and the FEC schemes defined in this document can still be used.
The choice of appropriate parameter values can be directed by practical considerations.
For instance, it can derive from an estimation of the maximum memory amount that could be dedicated to the linear system at a FECFRAME receiver, or the maximum computation complexity at a FECFRAME receiver, both of them depending on the ls_max_size parameter.
The same considerations also apply to the FECFRAME sender, where the maximum memory amount and computation complexity depend on the ew_max_size parameter.
</t>
        <t pn="section-c.3-2">
Here also, the NSS value contained in FEC Repair Packets is used by a FECFRAME receiver to determine the current coding window size and ew_max_size by observing its maximum value over the time.
</t>
      </section>
    </section>
    <section anchor="decodingBeyondMaxLatency" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.d">
      <name slugifiedName="name-decoding-beyond-maximum-lat">Decoding Beyond Maximum Latency Optimization (Informational)</name>
      <t pn="section-appendix.d-1">
This annex introduces non-normative considerations.
It is provided as suggestions, without any impact on interoperability.
For more information see <xref target="Roca16" format="default" sectionFormat="of" derivedContent="Roca16"/>.
</t>
      <t pn="section-appendix.d-2">
With a real-time source ADU flow, it is possible to improve the decoding performance of Sliding Window Codes without impacting maximum latency, at the cost of extra memory and CPU overhead.
The optimization consists, for a FECFRAME receiver, to extend the linear system beyond the decoding window maximum size, by keeping a certain number of old source symbols whereas their associated ADUs timed-out:
</t>
      <ul empty="true" spacing="normal" bare="false" pn="section-appendix.d-3">
        <li pn="section-appendix.d-3.1"> ls_max_size &gt; dw_max_size </li>
      </ul>
      <t pn="section-appendix.d-4">
Usually the following choice is a good trade-off between decoding performance and extra CPU overhead:
</t>
      <ul empty="true" spacing="normal" bare="false" pn="section-appendix.d-5">
        <li pn="section-appendix.d-5.1"> ls_max_size = 2 * dw_max_size </li>
      </ul>
      <t pn="section-appendix.d-6">
When the dw_max_size is very small, it may be preferable to keep a minimum ls_max_size value (e.g., LS_MIN_SIZE_DEFAULT = 40 symbols).
Going below this threshold will not save a significant amount of memory nor CPU cycles.
Therefore:
</t>
      <ul empty="true" spacing="normal" bare="false" pn="section-appendix.d-7">
        <li pn="section-appendix.d-7.1"> ls_max_size = max(2 * dw_max_size, LS_MIN_SIZE_DEFAULT) </li>
      </ul>
      <t pn="section-appendix.d-8">
Finally, it is worth noting that a receiver that benefits from an FEC protection significantly higher than what is required to recover from packet losses, can choose to reduce the ls_max_size.
In that case lost ADUs will be recovered without relying on this optimization.
</t>
      <figure anchor="fig_decoding_beyond_max_latency" align="left" suppress-title="false" pn="figure-11">
        <name slugifiedName="name-relationship-between-parame">Relationship between Parameters to Decode beyond Maximum Latency</name>
        <artwork name="" type="" align="left" alt="" pn="section-appendix.d-9.1">
                             ls_max_size
/---------------------------------^-------------------------------\

        late source symbols
 (pot. decoded but not delivered)            dw_max_size
/--------------^-----------------\ /--------------^---------------\
src0 src1 src2 src3 src4 src5 src6 src7 src8 src9 src10 src11 src12
</artwork>
      </figure>
      <t pn="section-appendix.d-10">
It means that source symbols, and therefore ADUs, may be decoded even if the added latency exceeds the maximum value permitted by the application (the "late source symbols" of <xref target="fig_decoding_beyond_max_latency" format="default" sectionFormat="of" derivedContent="Figure 11"/>).
It follows that the corresponding ADUs will not be useful to the application.
However, decoding these "late symbols" significantly improves the global robustness in bad reception conditions and is therefore recommended for receivers experiencing bad communication conditions <xref target="Roca16" format="default" sectionFormat="of" derivedContent="Roca16"/>.
In any case whether or not to use this optimization and what exact value to use for the ls_max_size parameter are local decisions made by each receiver independently, without any impact on the other receivers nor on the source.
</t>
    </section>
    <section numbered="false" toc="include" removeInRFC="false" pn="section-appendix.e">
      <name slugifiedName="name-acknowledgments">Acknowledgments</name>
      <t pn="section-appendix.e-1">
The authors would like to thank the three TSVWG chairs, Wesley Eddy (our shepherd), David Black, and Gorry Fairhurst; as well as Spencer Dawkins, our responsible AD;
and all those who provided comments -- namely (in alphabetical order), Alan DeKok, Jonathan Detchart, Russ Housley, Emmanuel Lochin, Marie-Jose Montpetit, and Greg Skinner.
Last but not least, the authors are really grateful to the IESG members, in particular Benjamin Kaduk, Mirja Kuehlewind, Eric Rescorla, Adam Roach, and Roman Danyliw for their highly valuable feedback that greatly contributed to improving this specification.
</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.f">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author fullname="Vincent Roca" initials="V" surname="Roca">
        <organization showOnFrontPage="true">INRIA</organization>
        <address>
          <postal>
            <street/>
            <city/>
            <code/>
            <extaddr>Univ. Grenoble Alpes</extaddr>
            <country>France</country>
          </postal>
          <email>vincent.roca@inria.fr</email>
        </address>
      </author>
      <author fullname="Belkacem Teibi" initials="B" surname="Teibi">
        <organization showOnFrontPage="true">INRIA</organization>
        <address>
          <postal>
            <street/>
            <city/>
            <code/>
            <extaddr>Univ. Grenoble Alpes</extaddr>
            <country>France</country>
          </postal>
          <email>belkacem.teibi@gmail.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
