<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" docName="draft-ietf-oauth-par-10" indexInclude="true" ipr="trust200902" number="9126" prepTime="2021-09-15T12:07:18" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-oauth-par-10" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9126" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="OAuth PAR">OAuth 2.0 Pushed Authorization Requests</title>
    <seriesInfo name="RFC" value="9126" stream="IETF"/>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization showOnFrontPage="true">yes.com</organization>
      <address>
        <postal>
          <street/>
        </postal>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>
    <author initials="B." surname="Campbell" fullname="Brian Campbell">
      <organization showOnFrontPage="true">Ping Identity</organization>
      <address>
        <postal>
          <street/>
        </postal>
        <email>bcampbell@pingidentity.com</email>
      </address>
    </author>
    <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
      <organization showOnFrontPage="true">NAT.Consulting</organization>
      <address>
        <postal>
          <street/>
        </postal>
        <email>nat@sakimura.org</email>
      </address>
    </author>
    <author initials="D." surname="Tonge" fullname="Dave Tonge">
      <organization showOnFrontPage="true">Moneyhub Financial Technology</organization>
      <address>
        <postal>
          <street/>
        </postal>
        <email>dave@tonge.org</email>
      </address>
    </author>
    <author initials="F." surname="Skokan" fullname="Filip Skokan">
      <organization showOnFrontPage="true">Auth0</organization>
      <address>
        <postal>
          <street/>
        </postal>
        <email>panva.ip@gmail.com</email>
      </address>
    </author>
    <date month="09" year="2021"/>
    <area>Security</area>
    <workgroup>Web Authorization Protocol</workgroup>
    <keyword>security</keyword>
    <keyword>oauth2</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document defines the pushed authorization request (PAR) endpoint, which allows
clients to push the payload of an OAuth 2.0 authorization request to the
authorization server via a direct request and provides them
with a request URI that is used as reference to the data in a
subsequent call to the authorization endpoint.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9126" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2021 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introductory-example">Introductory Example</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-conventions-and-terminology">Conventions and Terminology</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-pushed-authorization-reques">Pushed Authorization Request Endpoint</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-request">Request</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-successful-response">Successful Response</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-error-response">Error Response</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.4">
                <t indent="0" pn="section-toc.1-1.2.2.4.1"><xref derivedContent="2.4" format="counter" sectionFormat="of" target="section-2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-management-of-client-redire">Management of Client Redirect URIs</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-request-request-paramet">The "request" Request Parameter</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authorization-request">Authorization Request</xref></t>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authorization-server-metada">Authorization Server Metadata</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-client-metadata">Client Metadata</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-request-uri-guessing">Request URI Guessing</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-open-redirection">Open Redirection</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.3">
                <t indent="0" pn="section-toc.1-1.7.2.3.1"><xref derivedContent="7.3" format="counter" sectionFormat="of" target="section-7.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-request-object-replay">Request Object Replay</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.4">
                <t indent="0" pn="section-toc.1-1.7.2.4.1"><xref derivedContent="7.4" format="counter" sectionFormat="of" target="section-7.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-client-policy-change">Client Policy Change</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.5">
                <t indent="0" pn="section-toc.1-1.7.2.5.1"><xref derivedContent="7.5" format="counter" sectionFormat="of" target="section-7.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-request-uri-swapping">Request URI Swapping</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-privacy-considerations">Privacy Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-oauth-authorization-server-">OAuth Authorization Server Metadata</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-oauth-dynamic-client-regist">OAuth Dynamic Client Registration Metadata</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.3">
                <t indent="0" pn="section-toc.1-1.9.2.3.1"><xref derivedContent="9.3" format="counter" sectionFormat="of" target="section-9.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-oauth-uri-registration">OAuth URI Registration</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t indent="0" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="Introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">This document defines the pushed authorization request (PAR) endpoint, which enables an OAuth <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/> client
to push the payload of an authorization request directly
to the authorization server. A request URI value is received in exchange; it is used as reference
to the authorization request payload data in a subsequent call to the authorization endpoint
via the user agent.</t>
      <t indent="0" pn="section-1-2">In OAuth <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/>, authorization request parameters are typically sent as URI query
parameters via redirection in the user agent. This is simple but also yields challenges:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1-3">
        <li pn="section-1-3.1">There is no cryptographic integrity and authenticity protection. An attacker could, for example, modify the scope of access requested or swap the context of a payment transaction by changing scope values. Although protocol facilities exist to enable clients or users to detect some such changes, preventing modifications early in the process is a more robust solution.</li>
        <li pn="section-1-3.2">There is no mechanism to ensure confidentiality of the request parameters. Although HTTPS is required for the authorization endpoint, the request data passes through the user agent in the clear, and query string data can inadvertently leak to web server logs and to other sites via the referrer. The impact of such leakage can be significant, if personally identifiable information or other regulated data is sent in the authorization request (which might well be the case in identity, open banking, and similar scenarios).</li>
        <li pn="section-1-3.3">Authorization request URLs can become quite large, especially in scenarios requiring fine-grained authorization data, which might cause errors in request processing.</li>
      </ul>
      <t indent="0" pn="section-1-4">JWT-Secured Authorization Request (JAR) <xref target="RFC9101" format="default" sectionFormat="of" derivedContent="RFC9101"/> provides solutions for the security challenges by allowing OAuth clients to wrap authorization request parameters in a Request Object, which is a signed and optionally encrypted JSON Web Token (JWT) <xref target="RFC7519" format="default" sectionFormat="of" derivedContent="RFC7519"/>.

In order to cope with the size restrictions, JAR introduces the <tt>request_uri</tt> parameter that allows clients to send a reference to a Request Object instead of the Request Object itself.</t>
      <t indent="0" pn="section-1-5">This document complements JAR by providing an interoperable way to push the payload of an authorization request directly to the authorization server in exchange for a <tt>request_uri</tt> value usable at the authorization server in a subsequent authorization request.</t>
      <t indent="0" pn="section-1-6">PAR fosters OAuth security by providing clients a simple means for a confidential and integrity-protected authorization request. Clients requiring an even higher security level, especially cryptographically confirmed non-repudiation, are able to use JWT-based Request Objects as defined by <xref target="RFC9101" format="default" sectionFormat="of" derivedContent="RFC9101"/> 

in conjunction with PAR.</t>
      <t indent="0" pn="section-1-7">PAR allows the authorization server to authenticate the client before any user interaction happens.
The increased confidence in the identity of the client during the authorization process allows the authorization server to refuse illegitimate requests much earlier in the process, which can prevent attempts to spoof clients or otherwise tamper with or misuse an authorization request.</t>
      <t indent="0" pn="section-1-8">Note that HTTP <tt>POST</tt> requests to the authorization endpoint via the user agent, as described in <xref target="RFC6749" sectionFormat="of" section="3.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#section-3.1" derivedContent="RFC6749"/> and Section 3.1.2.1 of <xref target="OIDC" format="default" sectionFormat="of" derivedContent="OIDC"/>, could also be used to cope with the request size limitations described above. However, it's only optional per <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/>, and, even when supported, it is a viable option for conventional web applications but is prohibitively difficult to use with installed mobile applications. As described in <xref target="RFC8252" format="default" sectionFormat="of" derivedContent="RFC8252"/>, those apps use platform-specific APIs to open the authorization request URI in the system browser. When a mobile app launches a browser, however, the resultant initial request is constrained to use the <tt>GET</tt> method. Using <tt>POST</tt> for the authorization request would require the app to first direct the browser to open a URI that the app controls via <tt>GET</tt> while somehow conveying the sizable authorization request payload and then having the resultant response contain the content and script to initiate a cross-site form <tt>POST</tt> towards the authorization server. PAR is simpler to use and has additional security benefits, as described above.</t>
      <section anchor="introductory-example" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-introductory-example">Introductory Example</name>
        <t indent="0" pn="section-1.1-1">In conventional OAuth 2.0, a client typically initiates an authorization request by directing the user agent to make an HTTP request like the following to the authorization server's authorization endpoint (extra line breaks and indentation for display purposes only):</t>
        <sourcecode type="http-message" markers="false" pn="section-1.1-2"> GET /authorize?response_type=code
  &amp;client_id=CLIENT1234&amp;state=duk681S8n00GsJpe7n9boxdzen
  &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1
 Host: as.example.com
</sourcecode>
        <t indent="0" pn="section-1.1-3">Such a request could instead be pushed directly to the authorization server by the client with a <tt>POST</tt> request to the PAR endpoint as illustrated in the following example (extra line breaks and spaces for display purposes only).
The client can authenticate (e.g., using JWT client assertion-based authentication as shown) because the request is made directly to the authorization server.</t>
        <sourcecode type="http-message" markers="false" pn="section-1.1-4"> POST /as/par HTTP/1.1
 Host: as.example.com
 Content-Type: application/x-www-form-urlencoded

 &amp;response_type=code
 &amp;client_id=CLIENT1234&amp;state=duk681S8n00GsJpe7n9boxdzen
 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
 &amp;client_assertion_type=
  urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
 &amp;client_assertion=eyJraWQiOiI0MiIsImFsZyI6IkVTMjU2In0.eyJpc3MiOiJDTE
  lFTlQxMjM0Iiwic3ViIjoiQ0xJRU5UMTIzNCIsImF1ZCI6Imh0dHBzOi8vc2VydmVyL
  mV4YW1wbGUuY29tIiwiZXhwIjoxNjI1ODY4ODc4fQ.Igw8QrpAWRNPDGoWGRmJumLBM
  wbLjeIYwqWUu-ywgvvufl_0sQJftNs3bzjIrP0BV9rRG-3eI1Ksh0kQ1CwvzA

</sourcecode>
        <t indent="0" pn="section-1.1-5">The authorization server responds with a request URI:</t>
        <sourcecode type="http-message" markers="false" pn="section-1.1-6"> HTTP/1.1 201 Created
 Cache-Control: no-cache, no-store
 Content-Type: application/json

 {
   "request_uri": "urn:example:bwc4JK-ESC0w8acc191e-Y1LTC2",
   "expires_in": 90
 }
</sourcecode>
        <t indent="0" pn="section-1.1-7">The client uses the request URI value to create the subsequent authorization request by directing the user agent to make an HTTP request to the authorization server's authorization endpoint like the following (extra line breaks and indentation for display purposes only):</t>
        <sourcecode type="http-message" markers="false" pn="section-1.1-8"> GET /authorize?client_id=CLIENT1234
  &amp;request_uri=urn%3Aexample%3Abwc4JK-ESC0w8acc191e-Y1LTC2 HTTP/1.1
 Host: as.example.com
</sourcecode>
      </section>
      <section anchor="conventions-and-terminology" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-conventions-and-terminology">Conventions and Terminology</name>
        <t indent="0" pn="section-1.2-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
        <t indent="0" pn="section-1.2-2">This specification uses the terms "access token",
"authorization server", "authorization endpoint",
"authorization request", "token endpoint",
and
"client" defined by "The OAuth 2.0 Authorization Framework" <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/>.</t>
      </section>
    </section>
    <section anchor="pushed-authorization-request-endpoint" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-pushed-authorization-reques">Pushed Authorization Request Endpoint</name>
      <t indent="0" pn="section-2-1">The pushed authorization request endpoint is an HTTP API at the authorization server that accepts HTTP <tt>POST</tt> requests with parameters in the HTTP request message body using the <tt>application/x-www-form-urlencoded</tt> format. This format has a character encoding of UTF-8, as described in <xref target="RFC6749" sectionFormat="of" section="B" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#appendix-B" derivedContent="RFC6749"/>. The PAR endpoint URL <bcp14>MUST</bcp14> use the "https" scheme.</t>
      <t indent="0" pn="section-2-2">Authorization servers supporting PAR <bcp14>SHOULD</bcp14> include the URL of their pushed authorization request endpoint in their authorization server metadata document <xref target="RFC8414" format="default" sectionFormat="of" derivedContent="RFC8414"/> using the <tt>pushed_authorization_request_endpoint</tt> parameter as defined in <xref target="as_metadata" format="default" sectionFormat="of" derivedContent="Section 5"/>.</t>
      <t indent="0" pn="section-2-3">The endpoint accepts the authorization request parameters defined in <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/> for the authorization endpoint as well as all applicable extensions defined for the authorization endpoint. Some examples of such extensions include Proof Key for Code Exchange (PKCE) <xref target="RFC7636" format="default" sectionFormat="of" derivedContent="RFC7636"/>, Resource Indicators <xref target="RFC8707" format="default" sectionFormat="of" derivedContent="RFC8707"/>, and OpenID Connect (OIDC) <xref target="OIDC" format="default" sectionFormat="of" derivedContent="OIDC"/>. The endpoint <bcp14>MAY</bcp14> also support sending the set of authorization request parameters as a Request Object according to <xref target="RFC9101" format="default" sectionFormat="of" derivedContent="RFC9101"/> and <xref target="request_parameter" format="default" sectionFormat="of" derivedContent="Section 3"/> of this document.</t>
      <t indent="0" pn="section-2-4">The rules for client authentication as defined in <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/> for token endpoint requests, including the applicable authentication methods, apply for the PAR endpoint as well. If applicable, the <tt>token_endpoint_auth_method</tt> client metadata parameter <xref target="RFC7591" format="default" sectionFormat="of" derivedContent="RFC7591"/> indicates the registered authentication method for the client to use when making direct requests to the authorization server, including requests to the PAR endpoint. Similarly, the <tt>token_endpoint_auth_methods_supported</tt> authorization server metadata <xref target="RFC8414" format="default" sectionFormat="of" derivedContent="RFC8414"/> parameter lists client authentication methods supported by the authorization server when accepting direct requests from clients, including requests to the PAR endpoint.</t>
      <t indent="0" pn="section-2-5">Due to historical reasons, there is potential ambiguity regarding the appropriate audience
value to use when employing JWT client assertion-based authentication (defined in <xref target="RFC7523" sectionFormat="of" section="2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7523#section-2.2" derivedContent="RFC7523"/> with <tt>private_key_jwt</tt> or <tt>client_secret_jwt</tt> authentication method names per Section 9 of <xref target="OIDC" format="default" sectionFormat="of" derivedContent="OIDC"/>). To address that ambiguity, the issuer identifier URL of the authorization server according to <xref target="RFC8414" format="default" sectionFormat="of" derivedContent="RFC8414"/> <bcp14>SHOULD</bcp14> be used as the value of the audience. In order to facilitate interoperability, the authorization server <bcp14>MUST</bcp14> accept its issuer identifier, token endpoint URL, or pushed authorization request endpoint URL as values that identify it as an intended audience.</t>
      <section anchor="request" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-request">Request</name>
        <t indent="0" pn="section-2.1-1">A client sends the parameters that comprise an authorization request directly to the PAR endpoint. A typical parameter set might include: <tt>client_id</tt>, <tt>response_type</tt>, <tt>redirect_uri</tt>, <tt>scope</tt>, <tt>state</tt>, <tt>code_challenge</tt>, and <tt>code_challenge_method</tt> as shown in the example below. However, the pushed authorization request can be composed of any of the parameters applicable for use at the authorization endpoint, including those defined in <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/> as well as all applicable extensions. The <tt>request_uri</tt> authorization request parameter is one exception, and it <bcp14>MUST NOT</bcp14> be provided.</t>
        <t indent="0" pn="section-2.1-2">The request also includes, as appropriate for the given client, any additional parameters necessary for client authentication (e.g., <tt>client_secret</tt>  or <tt>client_assertion</tt> and <tt>client_assertion_type</tt>). Such parameters are defined and registered for use at the token endpoint but are applicable only for client authentication. When present in a pushed authorization request, they are relied upon only for client authentication and are not germane to the authorization request itself. Any token endpoint parameters that are not related to client authentication have no defined meaning for a pushed authorization request. The <tt>client_id</tt> parameter is defined with the same semantics for both authorization requests and requests to the token endpoint; as a required authorization request parameter, it is similarly required in a pushed authorization request.</t>
        <t indent="0" pn="section-2.1-3">The client constructs the message body of an HTTP <tt>POST</tt> request with parameters formatted with <tt>x-www-form-urlencoded</tt> using a character encoding of UTF-8, as described in <xref target="RFC6749" sectionFormat="of" section="B" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#appendix-B" derivedContent="RFC6749"/>. If applicable, the client also adds its authentication credentials to the request header or the request body using the same rules as for token endpoint requests.</t>
        <t indent="0" pn="section-2.1-4">This is illustrated by the following example (extra line breaks in the message body for display purposes only):</t>
        <sourcecode type="http-message" markers="false" pn="section-2.1-5"> POST /as/par HTTP/1.1
 Host: as.example.com
 Content-Type: application/x-www-form-urlencoded

 response_type=code&amp;state=af0ifjsldkj&amp;client_id=s6BhdRkqt3
 &amp;redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
 &amp;code_challenge=K2-ltc83acc4h0c9w6ESC_rEMTJ3bww-uCHaoeK1t8U
 &amp;code_challenge_method=S256&amp;scope=account-information
 &amp;client_assertion_type=
  urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
 &amp;client_assertion=eyJraWQiOiJrMmJkYyIsImFsZyI6IlJTMjU2In0.eyJpc3Mi
  OiJzNkJoZFJrcXQzIiwic3ViIjoiczZCaGRSa3F0MyIsImF1ZCI6Imh0dHBzOi8vc
  2VydmVyLmV4YW1wbGUuY29tIiwiZXhwIjoxNjI1ODY5Njc3fQ.te4IdnP_DK4hWrh
  TWA6fyhy3fxlAQZAhfA4lmzRdpoP5uZb-E90R5YxzN1YDA8mnVdpgj_Bx1lG5r6se
  f5TlckApA3hahhC804dcqlE4naEmLISmN1pds2WxTMOUzZY8aKKSDzNTDqhyTgE-K
  dTb3RafRj7tdZb09zWs7c_moOvfVcQIoy5zz1BvLQKW1Y8JsYvdpu2AvpxRPbcP8W
  yeW9B6PL6_fy3pXYKG3e-qUcvPa9kan-mo9EoSgt-YTDQjK1nZMdXIqTluK9caVJE
  RWW0fD1Y11_tlOcJn-ya7v7d8YmFyJpkhZfm8x1FoeH0djEicXTixEkdRuzsgUCm6
  GQ
</sourcecode>
        <t indent="0" pn="section-2.1-6">The authorization server <bcp14>MUST</bcp14> process the request as follows:</t>
        <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-2.1-7">
<li pn="section-2.1-7.1" derivedCounter="1.">Authenticate the client in the same way as at the token endpoint (<xref target="RFC6749" sectionFormat="of" section="2.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#section-2.3" derivedContent="RFC6749"/>).</li>
          <li pn="section-2.1-7.2" derivedCounter="2.">Reject the request if the <tt>request_uri</tt> authorization request parameter is provided.</li>
          <li pn="section-2.1-7.3" derivedCounter="3.">Validate the pushed request as it would an authorization request sent to the authorization endpoint. For example, the authorization server checks whether the redirect URI matches one of the redirect URIs configured for the client and also checks whether the client is authorized for the scope for which it is requesting access. This validation allows the authorization server to refuse unauthorized or fraudulent requests early. The authorization server <bcp14>MAY</bcp14> omit validation steps that it is unable to perform when processing the pushed request; however, such checks <bcp14>MUST</bcp14> then be performed when processing the authorization request at the authorization endpoint.</li>
        </ol>
        <t indent="0" pn="section-2.1-8">The authorization server <bcp14>MAY</bcp14> allow clients with authentication credentials to establish per-authorization-request redirect URIs with every pushed authorization request. Described in more detail in <xref target="redirect_uri_mgmt" format="default" sectionFormat="of" derivedContent="Section 2.4"/>, this is possible since, in contrast to <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/>, this specification gives the authorization server the ability to authenticate clients and validate client requests before the actual authorization request is performed.</t>
      </section>
      <section anchor="par-response" numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-successful-response">Successful Response</name>
        <t indent="0" pn="section-2.2-1">If the verification is successful, the server <bcp14>MUST</bcp14> generate a request URI and provide it in the response with a <tt>201</tt> HTTP status code. The following parameters are included as top-level members in the message body of the HTTP response using the <tt>application/json</tt> media type as defined by <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>.
</t>
        <dl newline="true" indent="3" spacing="normal" pn="section-2.2-2">
          <dt pn="section-2.2-2.1">request_uri</dt>
          <dd pn="section-2.2-2.2">The request URI corresponding to the authorization request posted. This URI is a single-use reference to the respective request data in the subsequent authorization request. The way the authorization process obtains the authorization request data is at the discretion of the authorization server and is out of scope of this specification. There is no need to make the authorization request data available to other parties via this URI.</dd>
          <dt pn="section-2.2-2.3">expires_in</dt>
          <dd pn="section-2.2-2.4"> A JSON number that represents the lifetime of the request URI in seconds as a positive integer. The request URI lifetime is at the discretion of the authorization server but will typically be relatively short (e.g., between 5 and 600 seconds).</dd>
        </dl>
        <t indent="0" pn="section-2.2-3">The format of the <tt>request_uri</tt> value is at the discretion of the authorization server, but it <bcp14>MUST</bcp14> contain some part generated using a cryptographically strong pseudorandom algorithm such that it is computationally infeasible to predict or guess a valid value (see <xref target="RFC6749" sectionFormat="of" section="10.10" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#section-10.10" derivedContent="RFC6749"/> for specifics). The authorization server <bcp14>MAY</bcp14> construct the <tt>request_uri</tt> value using the form <tt>urn:ietf:params:oauth:request_uri:&lt;reference-value&gt;</tt> with <tt>&lt;reference-value&gt;</tt> as the random part of the URI that references the respective authorization request data.</t>
        <t indent="0" pn="section-2.2-4">The <tt>request_uri</tt> value <bcp14>MUST</bcp14> be bound to the client that posted the authorization request.</t>
        <t indent="0" pn="section-2.2-5">The following is an example of such a response:</t>
        <sourcecode type="http-message" markers="false" pn="section-2.2-6"> HTTP/1.1 201 Created
 Content-Type: application/json
 Cache-Control: no-cache, no-store

 {
  "request_uri":
    "urn:ietf:params:oauth:request_uri:6esc_11ACC5bwc014ltc14eY22c",
  "expires_in": 60
 }
</sourcecode>
      </section>
      <section anchor="error_response" numbered="true" removeInRFC="false" toc="include" pn="section-2.3">
        <name slugifiedName="name-error-response">Error Response</name>
        <t indent="0" pn="section-2.3-1">The authorization server returns an error response with the same format as is specified for error responses from the token endpoint in <xref target="RFC6749" sectionFormat="of" section="5.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#section-5.2" derivedContent="RFC6749"/> using the appropriate error code from therein or from <xref target="RFC6749" sectionFormat="of" section="4.1.2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#section-4.1.2.1" derivedContent="RFC6749"/>.  In those cases where <xref target="RFC6749" sectionFormat="of" section="4.1.2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6749#section-4.1.2.1" derivedContent="RFC6749"/> prohibits automatic redirection with an error back to the requesting client and hence doesn't define an error code (for example, when the request fails due to a missing, invalid, or mismatching redirection URI), the <tt>invalid_request</tt> error code can be used as the default error code. Error codes defined by the OAuth extension can also be used when such an extension is involved in the initial processing of the authorization request that was pushed. Since initial processing of the pushed authorization request does not involve resource owner interaction, error codes related to user interaction, such as <tt>consent_required</tt> defined by <xref target="OIDC" format="default" sectionFormat="of" derivedContent="OIDC"/>, are never returned.</t>
        <t indent="0" pn="section-2.3-2">If the client is required to use signed Request Objects, by either the authorization server or the client policy (see <xref target="RFC9101" sectionFormat="comma" section="10.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9101#section-10.5" derivedContent="RFC9101"/>), the authorization server <bcp14>MUST</bcp14> only accept requests complying with the definition given in <xref target="request_parameter" format="default" sectionFormat="of" derivedContent="Section 3"/> and <bcp14>MUST</bcp14> refuse any other request with HTTP status code 400 and error code <tt>invalid_request</tt>.</t>
        <t indent="0" pn="section-2.3-3">In addition to the above, the PAR endpoint can also make use of the following HTTP status codes:</t>
        <dl indent="6" newline="false" spacing="normal" pn="section-2.3-4">
          <dt pn="section-2.3-4.1">405:</dt>
          <dd pn="section-2.3-4.2"> If the request did not use the <tt>POST</tt> method, the authorization server responds with an HTTP 405 (Method Not Allowed) status code.</dd>
          <dt pn="section-2.3-4.3">413:</dt>
          <dd pn="section-2.3-4.4"> If the request size was beyond the upper bound that the authorization server allows, the authorization server responds with an HTTP 413 (Payload Too Large) status code.</dd>
          <dt pn="section-2.3-4.5">429:</dt>
          <dd pn="section-2.3-4.6"> If the number of requests from a client during a particular time period exceeds the number the authorization server allows, the authorization server responds with an HTTP 429 (Too Many Requests) status code.</dd>
        </dl>
        <t indent="0" pn="section-2.3-5">The following is an example of an error response from the PAR endpoint:</t>
        <sourcecode type="http-message" markers="false" pn="section-2.3-6"> HTTP/1.1 400 Bad Request
 Content-Type: application/json
 Cache-Control: no-cache, no-store

 {
   "error": "invalid_request",
   "error_description":
     "The redirect_uri is not valid for the given client"
 }
</sourcecode>
      </section>
      <section anchor="redirect_uri_mgmt" numbered="true" removeInRFC="false" toc="include" pn="section-2.4">
        <name slugifiedName="name-management-of-client-redire">Management of Client Redirect URIs</name>
        <t indent="0" pn="section-2.4-1">OAuth 2.0 <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/> allows clients to use unregistered <tt>redirect_uri</tt> values in certain circumstances or for the authorization server to apply its own matching semantics to the <tt>redirect_uri</tt> value presented by the client at the authorization endpoint. However, the OAuth security BCP <xref target="I-D.ietf-oauth-security-topics" format="default" sectionFormat="of" derivedContent="OAUTH-SECURITY-TOPICS"/> as well as the OAuth 2.1 specification <xref target="I-D.ietf-oauth-v2-1" format="default" sectionFormat="of" derivedContent="OAUTH-V2"/> require an authorization server to exactly match the <tt>redirect_uri</tt> parameter against the set of redirect URIs previously established for a particular client. This is a means for early detection of client impersonation attempts and prevents token leakage and open redirection. As a downside, this can make client management more cumbersome since the redirect URI is typically the most volatile part of a client policy.</t>
        <t indent="0" pn="section-2.4-2">The exact matching requirement <bcp14>MAY</bcp14> be relaxed when using PAR for clients that have established authentication credentials with the authorization server. This is possible since, in contrast to a conventional authorization request, the authorization server authenticates the client before the authorization process starts and thus ensures it is interacting with the legitimate client. The authorization server <bcp14>MAY</bcp14> allow such clients to specify <tt>redirect_uri</tt> values that were not previously registered with the authorization server. This will give the client more flexibility (e.g., to mint distinct <tt>redirect_uri</tt> values per authorization server at runtime) and can simplify client management. It is at the discretion of the authorization server to apply restrictions on supplied <tt>redirect_uri</tt> values, e.g., the authorization server <bcp14>MAY</bcp14> require a certain URI prefix or allow only a query parameter to vary at runtime.</t>
        <aside pn="section-2.4-3">
          <t indent="0" pn="section-2.4-3.1">Note: The ability to set up transaction-specific redirect URIs is also useful in situations where client IDs and corresponding credentials and policies are managed by a trusted third party, e.g., via client certificates containing client permissions. Such an externally managed client could interact with an authorization server trusting the respective third party without the need for an additional registration step.</t>
        </aside>
      </section>
    </section>
    <section anchor="request_parameter" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-the-request-request-paramet">The "request" Request Parameter</name>
      <t indent="0" pn="section-3-1">Clients <bcp14>MAY</bcp14> use the <tt>request</tt> parameter as defined in JAR <xref target="RFC9101" format="default" sectionFormat="of" derivedContent="RFC9101"/> to push a Request Object JWT to the authorization server. The rules for processing, signing, and encryption of the Request Object as defined in JAR <xref target="RFC9101" format="default" sectionFormat="of" derivedContent="RFC9101"/> apply. Request parameters required by a given client authentication method are included in the <tt>application/x-www-form-urlencoded</tt> request directly and are the only parameters other than <tt>request</tt> in the form body (e.g., mutual TLS client authentication <xref target="RFC8705" format="default" sectionFormat="of" derivedContent="RFC8705"/> uses the <tt>client_id</tt> HTTP request parameter, while JWT assertion-based client authentication <xref target="RFC7523" format="default" sectionFormat="of" derivedContent="RFC7523"/> uses <tt>client_assertion</tt> and <tt>client_assertion_type</tt>). All other request parameters, i.e., those pertaining to the authorization request itself, <bcp14>MUST</bcp14> appear as claims of the JWT representing the authorization request.</t>
      <t indent="0" pn="section-3-2">The following is an example of a pushed authorization request using a signed Request Object with the same authorization request payload as the example in <xref target="request" format="default" sectionFormat="of" derivedContent="Section 2.1"/>. The client is authenticated with JWT client assertion-based authentication <xref target="RFC7523" format="default" sectionFormat="of" derivedContent="RFC7523"/> (extra line breaks and spaces for display purposes only):</t>
      <sourcecode type="http-message" markers="false" pn="section-3-3"> POST /as/par HTTP/1.1
 Host: as.example.com
 Content-Type: application/x-www-form-urlencoded

 client_assertion_type=
  urn%3Aietf%3Aparams%3Aoauth%3Aclient-assertion-type%3Ajwt-bearer
 &amp;client_assertion=eyJraWQiOiJrMmJkYyIsImFsZyI6IlJTMjU2In0.eyJpc3Mi
  OiJzNkJoZFJrcXQzIiwic3ViIjoiczZCaGRSa3F0MyIsImF1ZCI6Imh0dHBzOi8vc
  2VydmVyLmV4YW1wbGUuY29tIiwiZXhwIjoxNjI1ODY5Njc3fQ.te4IdnP_DK4hWrh
  TWA6fyhy3fxlAQZAhfA4lmzRdpoP5uZb-E90R5YxzN1YDA8mnVdpgj_Bx1lG5r6se
  f5TlckApA3hahhC804dcqlE4naEmLISmN1pds2WxTMOUzZY8aKKSDzNTDqhyTgE-K
  dTb3RafRj7tdZb09zWs7c_moOvfVcQIoy5zz1BvLQKW1Y8JsYvdpu2AvpxRPbcP8W
  yeW9B6PL6_fy3pXYKG3e-qUcvPa9kan-mo9EoSgt-YTDQjK1nZMdXIqTluK9caVJE
  RWW0fD1Y11_tlOcJn-ya7v7d8YmFyJpkhZfm8x1FoeH0djEicXTixEkdRuzsgUCm6
  GQ
 &amp;request=eyJraWQiOiJrMmJkYyIsImFsZyI6IlJTMjU2In0.eyJpc3MiOiJzNkJoZ
  FJrcXQzIiwiYXVkIjoiaHR0cHM6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJleHAiOj
  E2MjU4Njk2NzcsInJlc3BvbnNlX3R5cGUiOiJjb2RlIiwiY2xpZW50X2lkIjoiczZ
  CaGRSa3F0MyIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vY2xpZW50LmV4YW1wbGUu
  b3JnL2NiIiwic2NvcGUiOiJhY2NvdW50LWluZm9ybWF0aW9uIiwic3RhdGUiOiJhZ
  jBpZmpzbGRraiIsImNvZGVfY2hhbGxlbmdlIjoiSzItbHRjODNhY2M0aDBjOXc2RV
  NDX3JFTVRKM2J3dy11Q0hhb2VLMXQ4VSIsImNvZGVfY2hhbGxlbmdlX21ldGhvZCI
  6IlMyNTYifQ.l9R3RC9bFBHry_8acObQjEf4fX5yfJkWUPfak3J3iiBm0aaQznPw5
  BZ0B3VQZ9_KYdPt5bTkaflS5fSDklM3_7my9MyOSKFYmf46INk6ju_qUuC2crkOQX
  ZWYJB-0bnYEbdHpUjazFSUvN49cEGstNQeE-dKDWHNgEojgcuNA_pjKfL9VYp1dEA
  6-WjXZ_OlJ7R_mBWpjFAzc0UkQwqX5hfOJoGTqB2tE4a4aB2z8iYlUJp0DeeYp_hP
  N6svtmdvte73p5bLGDFpRIlmrBQIAQuxiS0skORpXlS0cBcgHimXVnXOJG7E-A_lS
  _5y54dVLQPA1jKYx-fxbYSG7dp2fw
 &amp;client_id=s6BhdRkqt3
</sourcecode>
      <t indent="0" pn="section-3-4">The authorization server <bcp14>MUST</bcp14> take the following steps beyond the processing rules defined in <xref target="request" format="default" sectionFormat="of" derivedContent="Section 2.1"/>:</t>
      <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-3-5">
<li pn="section-3-5.1" derivedCounter="1.">If applicable, decrypt the Request Object as specified in JAR <xref target="RFC9101" sectionFormat="comma" section="6.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9101#section-6.1" derivedContent="RFC9101"/>.</li>
        <li pn="section-3-5.2" derivedCounter="2.">Validate the Request Object signature as specified in JAR <xref target="RFC9101" sectionFormat="comma" section="6.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9101#section-6.2" derivedContent="RFC9101"/>.</li>
        <li pn="section-3-5.3" derivedCounter="3.">If the client has authentication credentials established with the authorization server, reject the request if the authenticated <tt>client_id</tt> does not match the <tt>client_id</tt> claim in the Request Object. Additionally, requiring the <tt>iss</tt> claim to match the <tt>client_id</tt> is at the discretion of the authorization server.</li>
      </ol>
      <t indent="0" pn="section-3-6">The following RSA key pair, represented in JSON Web Key (JWK) format <xref target="RFC7517" format="default" sectionFormat="of" derivedContent="RFC7517"/>, can be used to validate or recreate the Request Object signature in the above example (extra line breaks and indentation within values for display purposes only):</t>
      <sourcecode type="json" markers="false" pn="section-3-7"> {
   "kty": "RSA",
   "kid":"k2bdc",
   "n": "y9Lqv4fCp6Ei-u2-ZCKq83YvbFEk6JMs_pSj76eMkddWRuWX2aBKGHAtKlE
         5P7_vn__PCKZWePt3vGkB6ePgzAFu08NmKemwE5bQI0e6kIChtt_6KzT5Oa
         aXDFI6qCLJmk51Cc4VYFaxgqevMncYrzaW_50mZ1yGSFIQzLYP8bijAHGVj
         dEFgZaZEN9lsn_GdWLaJpHrB3ROlS50E45wxrlg9xMncVb8qDPuXZarvghL
         L0HzOuYRadBJVoWZowDNTpKpk2RklZ7QaBO7XDv3uR7s_sf2g-bAjSYxYUG
         sqkNA9b3xVW53am_UZZ3tZbFTIh557JICWKHlWj5uzeJXaw",
   "e": "AQAB",
   "d": "LNwG_pCKrwowALpCpRdcOKlSVqylSurZhE6CpkRiE9cpDgGKIkO9CxPlXOL
         zjqxXuQc8MdMqRQZTnAwgd7HH0B6gncrruV3NewI-XQV0ckldTjqNfOTz1V
         Rs-jE-57KAXI3YBIhu-_0YpIDzdk_wBuAk661Svn0GsPQe7m9DoxdzenQu9
         O_soewUhlPzRrTH0EeIqYI715rwI3TYaSzoWBmEPD2fICyj18FF0MPy_SQz
         k3noVUUIzfzLnnJiWy_p63QBCMqjRoSHHdMnI4z9iVpIwJWQ3jO5n_2lC2-
         cSgwjmKsFzDBbQNJc7qMG1N6EssJUwgGJxz1eAUFf0w4YAQ",
   "qi": "J-mG0swR4FTy3atrcQ7dd0hhYn1E9QndN-
         -sDG4EQO0RnFj6wIefCvwIc4
         7hCtVeFnCTPYJNc_JyV-mU-9vlzS5GSNuyR5qdpsMZXUMpEvQcwKt23ffPZ
         YGaqfKyEesmf_Wi8fFcE68H9REQjnniKrXm7w2-IuG_IrVJA9Ox-uU",
   "q": "4hlMYAGa0dvogdK1jnxQ7J_Lqpqi99e-AeoFvoYpMPhthChTzwFZO9lQmUo
         BpMqVQTws_s7vWGmt7ZAB3ywkurf0pV7BD0fweJiUzrWk4KJjxtmP_auuxr
         jvm3s2FUGn6f0wRY9Z8Hj9A7C72DnYCjuZiJQMYCWDsZ8-d-L1a-s",
   "p": "5sd9Er3I2FFT9R-gy84_oakEyCmgw036B_nfYEEOCwpSvi2z7UcIVK3bSEL
         5WCW6BNgB3HDWhq8aYPirwQnqm0K9mX1E-4xM10WWZ-rP3XjYpQeS0Snru5
         LFVWsAzi-FX7BOqBibSAXLdEGXcXa44l08iec_bPD3xduq5V_1YoE",
   "dq": "Nz2PF3XM6bEc4XsluKZO70ErdYdKgdtIJReUR7Rno_tOZpejwlPGBYVW19
         zpAeYtCT82jxroB2XqhLxGeMxEPQpsz2qTKLSe4BgHY2ml2uxSDGdjcsrbb
         NoKUKaN1CuyZszhWl1n0AT_bENl4bJgQj_Fh0UEsQj5YBBUJt5gr_k",
   "dp": "Zc877jirkkLOtyTs2vxyNe9KnMNAmOidlUc2tE_-0gAL4Lpo1hSwKCtKwe
         ZJ-gkqt1hT-dwNx_0Xtg_-NXsadMRMwJnzBMYwYAfjApUkfqABc0yUCJJl3
         KozRCugf1WXkU9GZAH2_x8PUopdNUEa70ISowPRh04HANKX4fkjWAE"
  }
</sourcecode>
    </section>
    <section anchor="authorization-request" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-authorization-request">Authorization Request</name>
      <t indent="0" pn="section-4-1">The client uses the <tt>request_uri</tt> value returned by the authorization server to build an authorization request as defined in <xref target="RFC9101" format="default" sectionFormat="of" derivedContent="RFC9101"/>. This is shown in the following example where the client directs the user agent to make the following HTTP request (extra line breaks and indentation for display purposes only):</t>
      <sourcecode type="http-message" markers="false" pn="section-4-2"> GET /authorize?client_id=s6BhdRkqt3&amp;request_uri=urn%3Aietf%3Aparams
  %3Aoauth%3Arequest_uri%3A6esc_11ACC5bwc014ltc14eY22c HTTP/1.1
 Host: as.example.com
</sourcecode>
      <t indent="0" pn="section-4-3">Since parts of the authorization request content, e.g., the <tt>code_challenge</tt> parameter value, are unique to a particular authorization request, the client <bcp14>MUST</bcp14> only use a <tt>request_uri</tt> value once.  Authorization servers <bcp14>SHOULD</bcp14> treat <tt>request_uri</tt> values as one-time use but <bcp14>MAY</bcp14> allow for duplicate requests due to a user reloading/refreshing their user agent. An expired <tt>request_uri</tt> <bcp14>MUST</bcp14> be rejected as invalid.</t>
      <t indent="0" pn="section-4-4">The authorization server <bcp14>MUST</bcp14> validate authorization requests arising from a pushed request as it would any other authorization request. The authorization server <bcp14>MAY</bcp14> omit validation steps that it performed when the request was pushed, provided that it can validate that the request was a pushed request and that the request or the authorization server's policy has not been modified in a way that would affect the outcome of the omitted steps.</t>
      <t indent="0" pn="section-4-5">Authorization server policy <bcp14>MAY</bcp14> dictate, either globally or on a per-client basis, that PAR be the only means for a client to pass authorization request data. In this case, the authorization server will refuse, using the <tt>invalid_request</tt> error code, to process any request to the authorization endpoint that does not have a <tt>request_uri</tt> parameter with a value obtained from the PAR endpoint.</t>
      <aside pn="section-4-6">
        <t indent="0" pn="section-4-6.1">Note: Authorization server and clients <bcp14>MAY</bcp14> use metadata as defined in Sections <xref target="as_metadata" format="counter" sectionFormat="of" derivedContent="5"/> and <xref target="c_metadata" format="counter" sectionFormat="of" derivedContent="6"/> to signal the desired behavior.</t>
      </aside>
    </section>
    <section anchor="as_metadata" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-authorization-server-metada">Authorization Server Metadata</name>
      <t indent="0" pn="section-5-1">The following authorization server metadata parameters <xref target="RFC8414" format="default" sectionFormat="of" derivedContent="RFC8414"/> are introduced to signal the server's capability and policy with respect to PAR.</t>
      <dl newline="true" indent="3" spacing="normal" pn="section-5-2">
        <dt pn="section-5-2.1">pushed_authorization_request_endpoint</dt>
        <dd pn="section-5-2.2">The URL of the pushed authorization request endpoint at which a client can post an authorization request to exchange for a <tt>request_uri</tt> value usable at the authorization server.</dd>
        <dt pn="section-5-2.3">require_pushed_authorization_requests</dt>
        <dd pn="section-5-2.4">Boolean parameter indicating whether the authorization server accepts authorization request data only via PAR. If omitted, the default value is <tt>false</tt>.</dd>
      </dl>
      <t indent="0" pn="section-5-3">Note that the presence of <tt>pushed_authorization_request_endpoint</tt> is sufficient for a client to determine that it may use the PAR flow. A <tt>request_uri</tt> value obtained from the PAR endpoint is usable at the authorization endpoint regardless of other authorization server metadata such as <tt>request_uri_parameter_supported</tt> or <tt>require_request_uri_registration</tt> <xref target="OIDC.Disco" format="default" sectionFormat="of" derivedContent="OIDC.Disco"/>.</t>
    </section>
    <section anchor="c_metadata" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-client-metadata">Client Metadata</name>
      <t indent="0" pn="section-6-1">The Dynamic Client Registration Protocol <xref target="RFC7591" format="default" sectionFormat="of" derivedContent="RFC7591"/> defines an API for dynamically registering OAuth 2.0 client metadata with authorization servers. The metadata defined by <xref target="RFC7591" format="default" sectionFormat="of" derivedContent="RFC7591"/>, and registered extensions to it, also imply a general data model for clients that is useful for authorization server implementations even when the Dynamic Client Registration Protocol isn't in play. Such implementations will typically have some sort of user interface available for managing client configuration. The following client metadata parameter is introduced by this document to indicate whether pushed authorization requests are required for the given client.</t>
      <dl newline="true" indent="3" spacing="normal" pn="section-6-2">
        <dt pn="section-6-2.1">require_pushed_authorization_requests</dt>
        <dd pn="section-6-2.2">Boolean parameter indicating whether the only means of initiating an authorization request the client is allowed to use is PAR. If omitted, the default value is <tt>false</tt>.</dd>
      </dl>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <section anchor="request-uri-guessing" numbered="true" removeInRFC="false" toc="include" pn="section-7.1">
        <name slugifiedName="name-request-uri-guessing">Request URI Guessing</name>
        <t indent="0" pn="section-7.1-1">An attacker could attempt to guess and replay a valid request URI value and
try to impersonate the respective client. 

The authorization server <bcp14>MUST</bcp14> account for the considerations
given in JAR <xref target="RFC9101" sectionFormat="comma" section="10.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9101#section-10.2" derivedContent="RFC9101"/>, clause (d) on request URI entropy.</t>
      </section>
      <section anchor="open-redirection" numbered="true" removeInRFC="false" toc="include" pn="section-7.2">
        <name slugifiedName="name-open-redirection">Open Redirection</name>
        <t indent="0" pn="section-7.2-1">An attacker could try to register a redirect URI pointing to a site under their control in order to obtain authorization codes or launch other attacks towards the user. The authorization server <bcp14>MUST</bcp14> only accept new redirect URIs in the pushed authorization request from authenticated clients.</t>
      </section>
      <section anchor="request-object-replay" numbered="true" removeInRFC="false" toc="include" pn="section-7.3">
        <name slugifiedName="name-request-object-replay">Request Object Replay</name>
        <t indent="0" pn="section-7.3-1">An attacker could replay a request URI captured from a legitimate authorization request. In order to cope with such attacks, the authorization server <bcp14>SHOULD</bcp14> make the request URIs one-time use.</t>
      </section>
      <section anchor="client-policy-change" numbered="true" removeInRFC="false" toc="include" pn="section-7.4">
        <name slugifiedName="name-client-policy-change">Client Policy Change</name>
        <t indent="0" pn="section-7.4-1">The client policy might change between the lodging of the Request Object and the
authorization request using a particular Request Object. Therefore, it is recommended that the authorization server check the request parameter against the client policy when processing the authorization request.</t>
      </section>
      <section anchor="request-uri-swapping" numbered="true" removeInRFC="false" toc="include" pn="section-7.5">
        <name slugifiedName="name-request-uri-swapping">Request URI Swapping</name>
        <t indent="0" pn="section-7.5-1">An attacker could capture the request URI from one request and then substitute it into a different authorization request. For example, in the context of OpenID Connect, an attacker could replace a request URI asking for a high level of authentication assurance with one that requires a lower level of assurance. Clients <bcp14>SHOULD</bcp14> make use of PKCE <xref target="RFC7636" format="default" sectionFormat="of" derivedContent="RFC7636"/>, a unique <tt>state</tt> parameter <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/>, or the OIDC "nonce" parameter <xref target="OIDC" format="default" sectionFormat="of" derivedContent="OIDC"/> in the pushed Request Object to prevent this attack.</t>
      </section>
    </section>
    <section anchor="privacy-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-privacy-considerations">Privacy Considerations</name>
      <t indent="0" pn="section-8-1">OAuth 2.0 is a complex and flexible framework with broad-ranging privacy implications due to its very nature of having one entity intermediate user authorization to data access between two other entities. The privacy considerations of all of OAuth are beyond the scope of this document, which only defines an alternative way of initiating one message sequence in the larger framework. However, using PAR may improve privacy by reducing the potential for inadvertent information disclosure since it passes the authorization request data directly between the client and authorization server over a secure connection in the message body of an HTTP request rather than in the query component of a URL that passes through the user agent in the clear.</t>
    </section>
    <section anchor="iana_considerations" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <section anchor="oauth-authorization-server-metadata" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-oauth-authorization-server-">OAuth Authorization Server Metadata</name>
        <t indent="0" pn="section-9.1-1">IANA has registered the following values in the IANA "OAuth Authorization Server Metadata" registry of <xref target="IANA.OAuth.Parameters" format="default" sectionFormat="of" derivedContent="IANA.OAuth.Parameters"/> established by <xref target="RFC8414" format="default" sectionFormat="of" derivedContent="RFC8414"/>.</t>
        <dl spacing="compact" indent="3" newline="false" pn="section-9.1-2">
          <dt pn="section-9.1-2.1">Metadata Name:</dt>
          <dd pn="section-9.1-2.2">
            <tt>pushed_authorization_request_endpoint</tt></dd>
          <dt pn="section-9.1-2.3">Metadata Description:</dt>
          <dd pn="section-9.1-2.4">URL of the authorization server's pushed authorization request endpoint.</dd>
          <dt pn="section-9.1-2.5">Change Controller:</dt>
          <dd pn="section-9.1-2.6">IESG</dd>
          <dt pn="section-9.1-2.7">Specification Document(s):</dt>
          <dd pn="section-9.1-2.8">
            <xref target="as_metadata" format="default" sectionFormat="of" derivedContent="Section 5"/> of RFC 9126</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-9.1-3">
          <dt pn="section-9.1-3.1">Metadata Name:</dt>
          <dd pn="section-9.1-3.2">
            <tt>require_pushed_authorization_requests</tt></dd>
          <dt pn="section-9.1-3.3">Metadata Description:</dt>
          <dd pn="section-9.1-3.4">Indicates whether the authorization server accepts authorization requests only via PAR.</dd>
          <dt pn="section-9.1-3.5">Change Controller:</dt>
          <dd pn="section-9.1-3.6">IESG</dd>
          <dt pn="section-9.1-3.7">Specification Document(s):</dt>
          <dd pn="section-9.1-3.8">
            <xref target="as_metadata" format="default" sectionFormat="of" derivedContent="Section 5"/> of RFC 9126</dd>
        </dl>
      </section>
      <section anchor="oauth-dynamic-client-registration-metadata" numbered="true" removeInRFC="false" toc="include" pn="section-9.2">
        <name slugifiedName="name-oauth-dynamic-client-regist">OAuth Dynamic Client Registration Metadata</name>
        <t indent="0" pn="section-9.2-1">IANA has registered the following value in the IANA "OAuth Dynamic Client Registration Metadata" registry of <xref target="IANA.OAuth.Parameters" format="default" sectionFormat="of" derivedContent="IANA.OAuth.Parameters"/> established by <xref target="RFC7591" format="default" sectionFormat="of" derivedContent="RFC7591"/>.</t>
        <dl spacing="compact" indent="3" newline="false" pn="section-9.2-2">
          <dt pn="section-9.2-2.1">Client Metadata Name:</dt>
          <dd pn="section-9.2-2.2">
            <tt>require_pushed_authorization_requests</tt></dd>
          <dt pn="section-9.2-2.3">Client Metadata Description:</dt>
          <dd pn="section-9.2-2.4">Indicates whether the client is required to use PAR to initiate authorization requests.</dd>
          <dt pn="section-9.2-2.5">Change Controller:</dt>
          <dd pn="section-9.2-2.6">IESG</dd>
          <dt pn="section-9.2-2.7">Specification Document(s):</dt>
          <dd pn="section-9.2-2.8">
            <xref target="c_metadata" format="default" sectionFormat="of" derivedContent="Section 6"/> of RFC 9126</dd>
        </dl>
      </section>
      <section anchor="oauth-uri-registration" numbered="true" removeInRFC="false" toc="include" pn="section-9.3">
        <name slugifiedName="name-oauth-uri-registration">OAuth URI Registration</name>
        <t indent="0" pn="section-9.3-1">IANA has registered the following value in the "OAuth URI" registry of <xref target="IANA.OAuth.Parameters" format="default" sectionFormat="of" derivedContent="IANA.OAuth.Parameters"/> established by <xref target="RFC6755" format="default" sectionFormat="of" derivedContent="RFC6755"/>.</t>
        <dl spacing="compact" indent="3" newline="false" pn="section-9.3-2">
          <dt pn="section-9.3-2.1">URN:</dt>
          <dd pn="section-9.3-2.2">
            <tt>urn:ietf:params:oauth:request_uri:</tt></dd>
          <dt pn="section-9.3-2.3">Common Name:</dt>
          <dd pn="section-9.3-2.4">A URN Sub-Namespace for OAuth Request URIs.</dd>
          <dt pn="section-9.3-2.5">Change Controller:</dt>
          <dd pn="section-9.3-2.6">IESG</dd>
          <dt pn="section-9.3-2.7">Specification Document(s):</dt>
          <dd pn="section-9.3-2.8">
            <xref target="par-response" format="default" sectionFormat="of" derivedContent="Section 2.2"/> of RFC 9126</dd>
        </dl>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-oauth-security-topics" to="OAUTH-SECURITY-TOPICS"/>
    <displayreference target="I-D.ietf-oauth-v2-1" to="OAUTH-V2"/>
    <references pn="section-10">
      <name slugifiedName="name-references">References</name>
      <references pn="section-10.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC6749" target="https://www.rfc-editor.org/info/rfc6749" quoteTitle="true" derivedAnchor="RFC6749">
          <front>
            <title>The OAuth 2.0 Authorization Framework</title>
            <author initials="D." surname="Hardt" fullname="D. Hardt" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t indent="0">The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6749"/>
          <seriesInfo name="DOI" value="10.17487/RFC6749"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t indent="0">JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t indent="0">This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8414" target="https://www.rfc-editor.org/info/rfc8414" quoteTitle="true" derivedAnchor="RFC8414">
          <front>
            <title>OAuth 2.0 Authorization Server Metadata</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="June"/>
            <abstract>
              <t indent="0">This specification defines a metadata format that an OAuth 2.0 client can use to obtain the information needed to interact with an OAuth 2.0 authorization server, including its endpoint locations and authorization server capabilities.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8414"/>
          <seriesInfo name="DOI" value="10.17487/RFC8414"/>
        </reference>
        <reference anchor="RFC9101" target="https://www.rfc-editor.org/info/rfc9101" quoteTitle="true" derivedAnchor="RFC9101">
          <front>
            <title>The OAuth 2.0 Authorization Framework: JWT-Secured Authorization Request (JAR)</title>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2021" month="August"/>
            <abstract>
              <t indent="0">The authorization request in OAuth 2.0 described in RFC 6749 utilizes query parameter serialization, which means that authorization request parameters are encoded in the URI of the request and sent through user agents such as web browsers.  While it is easy to implement, it means that a) the communication through the user agents is not integrity protected and thus, the parameters can be tainted, b) the source of the communication is not authenticated, and c) the communication through the user agents can be monitored.  Because of these weaknesses, several attacks to the protocol have now been put forward.</t>
              <t indent="0">This document introduces the ability to send request parameters in a JSON Web Token (JWT) instead, which allows the request to be signed with JSON Web Signature (JWS) and encrypted with JSON Web Encryption (JWE) so that the integrity, source authentication, and confidentiality properties of the authorization request are attained.  The request can be sent by value or by reference.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9101"/>
          <seriesInfo name="DOI" value="10.17487/RFC9101"/>
        </reference>
      </references>
      <references pn="section-10.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="IANA.OAuth.Parameters" target="http://www.iana.org/assignments/oauth-parameters" quoteTitle="true" derivedAnchor="IANA.OAuth.Parameters">
          <front>
            <title>OAuth Parameters</title>
            <author>
              <organization showOnFrontPage="true">IANA</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-security-topics" quoteTitle="true" target="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-18" derivedAnchor="OAUTH-SECURITY-TOPICS">
          <front>
            <title>OAuth 2.0 Security Best Current Practice</title>
            <author fullname="Torsten Lodderstedt">
              <organization showOnFrontPage="true">yes.com</organization>
            </author>
            <author fullname="John Bradley">
              <organization showOnFrontPage="true">Yubico</organization>
            </author>
            <author fullname="Andrey Labunets">
	 </author>
            <author fullname="Daniel Fett">
              <organization showOnFrontPage="true">yes.com</organization>
            </author>
            <date month="April" day="13" year="2021"/>
            <abstract>
              <t indent="0">   This document describes best current security practice for OAuth 2.0.
   It updates and extends the OAuth 2.0 Security Threat Model to
   incorporate practical experiences gathered since OAuth 2.0 was
   published and covers new threats relevant due to the broader
   application of OAuth 2.0.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-security-topics-18"/>
          <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-oauth-security-topics-18.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="I-D.ietf-oauth-v2-1" quoteTitle="true" target="https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-03" derivedAnchor="OAUTH-V2">
          <front>
            <title>The OAuth 2.1 Authorization Framework</title>
            <author initials="D" surname="Hardt" fullname="Dick Hardt">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A" surname="Parecki" fullname="Aaron Parecki">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2021" month="September" day="08"/>
            <abstract>
              <t indent="0">The OAuth 2.1 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and an authorization service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 2.0 Authorization Framework described in RFC 6749.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-v2-1-03"/>
          <format type="TXT" target="https://www.ietf.org/internet-drafts/draft-ietf-oauth-v2-1-03.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="OIDC" target="http://openid.net/specs/openid-connect-core-1_0.html" quoteTitle="true" derivedAnchor="OIDC">
          <front>
            <title>OpenID Connect Core 1.0 incorporating errata set 1</title>
            <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
              <organization showOnFrontPage="true">NRI</organization>
            </author>
            <author fullname="John Bradley" initials="J." surname="Bradley">
              <organization showOnFrontPage="true">Ping Identity</organization>
            </author>
            <author fullname="Mike Jones" initials="M." surname="Jones">
              <organization showOnFrontPage="true">Microsoft</organization>
            </author>
            <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
              <organization showOnFrontPage="true">Google</organization>
            </author>
            <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
              <organization showOnFrontPage="true">Salesforce</organization>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="OIDC.Disco" target="http://openid.net/specs/openid-connect-discovery-1_0.html" quoteTitle="true" derivedAnchor="OIDC.Disco">
          <front>
            <title>OpenID Connect Discovery 1.0 incorporating errata set 1</title>
            <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
              <organization abbrev="NRI" showOnFrontPage="true">Nomura Research Institute, Ltd.</organization>
            </author>
            <author fullname="John Bradley" initials="J." surname="Bradley">
              <organization abbrev="Ping Identity" showOnFrontPage="true">Ping Identity</organization>
            </author>
            <author fullname="Michael B. Jones" initials="M." surname="Jones">
              <organization abbrev="Microsoft" showOnFrontPage="true">Microsoft</organization>
            </author>
            <author fullname="Edmund Jay" initials="E." surname="Jay">
              <organization abbrev="Illumila" showOnFrontPage="true">Illumila</organization>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="RFC6755" target="https://www.rfc-editor.org/info/rfc6755" quoteTitle="true" derivedAnchor="RFC6755">
          <front>
            <title>An IETF URN Sub-Namespace for OAuth</title>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t indent="0">This document establishes an IETF URN Sub-namespace for use with OAuth-related specifications.  This document is not an Internet  Standards Track specification; it is published for informational  purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6755"/>
          <seriesInfo name="DOI" value="10.17487/RFC6755"/>
        </reference>
        <reference anchor="RFC7517" target="https://www.rfc-editor.org/info/rfc7517" quoteTitle="true" derivedAnchor="RFC7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t indent="0">A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key.  This specification also defines a JWK Set JSON data structure that represents a set of JWKs.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and IANA registries established by that specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="RFC7519" target="https://www.rfc-editor.org/info/rfc7519" quoteTitle="true" derivedAnchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t indent="0">JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC7523" target="https://www.rfc-editor.org/info/rfc7523" quoteTitle="true" derivedAnchor="RFC7523">
          <front>
            <title>JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Mortimore" fullname="C. Mortimore">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t indent="0">This specification defines the use of a JSON Web Token (JWT) Bearer Token as a means for requesting an OAuth 2.0 access token as well as for client authentication.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7523"/>
          <seriesInfo name="DOI" value="10.17487/RFC7523"/>
        </reference>
        <reference anchor="RFC7591" target="https://www.rfc-editor.org/info/rfc7591" quoteTitle="true" derivedAnchor="RFC7591">
          <front>
            <title>OAuth 2.0 Dynamic Client Registration Protocol</title>
            <author initials="J." surname="Richer" fullname="J. Richer" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Machulak" fullname="M. Machulak">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="July"/>
            <abstract>
              <t indent="0">This specification defines mechanisms for dynamically registering OAuth 2.0 clients with authorization servers.  Registration requests send a set of desired client metadata values to the authorization server.  The resulting registration responses return a client identifier to use at the authorization server and the client metadata values registered for the client.  The client can then use this registration information to communicate with the authorization server using the OAuth 2.0 protocol.  This specification also defines a set of common client metadata fields and values for clients to use during registration.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7591"/>
          <seriesInfo name="DOI" value="10.17487/RFC7591"/>
        </reference>
        <reference anchor="RFC7636" target="https://www.rfc-editor.org/info/rfc7636" quoteTitle="true" derivedAnchor="RFC7636">
          <front>
            <title>Proof Key for Code Exchange by OAuth Public Clients</title>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Agarwal" fullname="N. Agarwal">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t indent="0">OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack.  This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced "pixy").</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7636"/>
          <seriesInfo name="DOI" value="10.17487/RFC7636"/>
        </reference>
        <reference anchor="RFC8252" target="https://www.rfc-editor.org/info/rfc8252" quoteTitle="true" derivedAnchor="RFC8252">
          <front>
            <title>OAuth 2.0 for Native Apps</title>
            <author initials="W." surname="Denniss" fullname="W. Denniss">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="October"/>
            <abstract>
              <t indent="0">OAuth 2.0 authorization requests from native apps should only be made through external user-agents, primarily the user's browser.  This specification details the security and usability reasons why this is the case and how native apps and authorization servers can implement this best practice.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="212"/>
          <seriesInfo name="RFC" value="8252"/>
          <seriesInfo name="DOI" value="10.17487/RFC8252"/>
        </reference>
        <reference anchor="RFC8705" target="https://www.rfc-editor.org/info/rfc8705" quoteTitle="true" derivedAnchor="RFC8705">
          <front>
            <title>OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens</title>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t indent="0">This document describes OAuth client authentication and certificate-bound access and refresh tokens using mutual Transport Layer Security (TLS) authentication with X.509 certificates.  OAuth clients are provided a mechanism for authentication to the authorization server using mutual TLS, based on either self-signed certificates or public key infrastructure (PKI). OAuth authorization servers are provided a mechanism for binding access tokens to a client's mutual-TLS certificate, and OAuth protected resources are provided a method for ensuring that such an access token presented to it was issued to the client presenting the token.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8705"/>
          <seriesInfo name="DOI" value="10.17487/RFC8705"/>
        </reference>
        <reference anchor="RFC8707" target="https://www.rfc-editor.org/info/rfc8707" quoteTitle="true" derivedAnchor="RFC8707">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t indent="0">This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8707"/>
          <seriesInfo name="DOI" value="10.17487/RFC8707"/>
        </reference>
      </references>
    </references>
    <section anchor="Acknowledgements" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">This specification is based on the work on <eref target="https://bitbucket.org/openid/fapi/src/master/Financial_API_Pushed_Request_Object.md" brackets="none">Pushed Request Object</eref>
conducted at the Financial-grade API Working Group at the OpenID Foundation. We would like to thank the members of the WG for their valuable contributions.</t>
      <t indent="0" pn="section-appendix.a-2">We would like to thank
<contact fullname="Vladimir Dzhuvinov"/>,
<contact fullname="Aaron Parecki"/>,
<contact fullname="Justin Richer"/>,
<contact fullname="Sascha Preibisch"/>,
<contact fullname="Daniel Fett"/>,
<contact fullname="Michael B. Jones"/>,
<contact fullname="Annabelle Backman"/>,
<contact fullname="Joseph Heenan"/>,
<contact fullname="Sean Glencross"/>,
<contact fullname="Maggie Hung"/>,
<contact fullname="Neil Madden"/>,
<contact fullname="Karsten Meyer zu Selhausen"/>,
<contact fullname="Roman Danyliw"/>,
<contact fullname="Meral Shirazipour"/>,
and
<contact fullname="Takahiko Kawasaki"/>
    for their valuable feedback on this document.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
        <organization showOnFrontPage="true">yes.com</organization>
        <address>
          <postal>
            <street/>
          </postal>
          <email>torsten@lodderstedt.net</email>
        </address>
      </author>
      <author initials="B." surname="Campbell" fullname="Brian Campbell">
        <organization showOnFrontPage="true">Ping Identity</organization>
        <address>
          <postal>
            <street/>
          </postal>
          <email>bcampbell@pingidentity.com</email>
        </address>
      </author>
      <author initials="N." surname="Sakimura" fullname="Nat Sakimura">
        <organization showOnFrontPage="true">NAT.Consulting</organization>
        <address>
          <postal>
            <street/>
          </postal>
          <email>nat@sakimura.org</email>
        </address>
      </author>
      <author initials="D." surname="Tonge" fullname="Dave Tonge">
        <organization showOnFrontPage="true">Moneyhub Financial Technology</organization>
        <address>
          <postal>
            <street/>
          </postal>
          <email>dave@tonge.org</email>
        </address>
      </author>
      <author initials="F." surname="Skokan" fullname="Filip Skokan">
        <organization showOnFrontPage="true">Auth0</organization>
        <address>
          <postal>
            <street/>
          </postal>
          <email>panva.ip@gmail.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
