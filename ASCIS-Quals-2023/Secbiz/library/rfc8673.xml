<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="exp" consensus="true" docName="draft-ietf-httpbis-rand-access-live-04" indexInclude="true" ipr="trust200902" number="8673" prepTime="2019-11-27T10:02:59" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-httpbis-rand-access-live-04" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8673" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title>HTTP Random Access and Live Content</title>
    <seriesInfo name="RFC" value="8673" stream="IETF"/>
    <author fullname="Craig Pratt" initials="C." surname="Pratt">
      <address>
        <postal>
          <street/>
          <city>Portland</city>
          <region>OR</region>
          <code>97229</code>
          <country>United States of America</country>
        </postal>
        <email>pratt@acm.org</email>
      </address>
    </author>
    <author fullname="Darshak Thakore" initials="D." surname="Thakore">
      <organization abbrev="CableLabs" showOnFrontPage="true">CableLabs</organization>
      <address>
        <postal>
          <street>858 Coal Creek Circle</street>
          <city>Louisville</city>
          <region>CO</region>
          <code>80027</code>
          <country>United States of America</country>
        </postal>
        <email>d.thakore@cablelabs.com</email>
      </address>
    </author>
    <author fullname="Barbara Stark" initials="B." surname="Stark">
      <organization showOnFrontPage="true">AT&amp;T</organization>
      <address>
        <postal>
          <street/>
          <city>Atlanta</city>
          <region>GA</region>
          <country>United States of America</country>
        </postal>
        <email>barbara.stark@att.com</email>
      </address>
    </author>
    <date month="11" year="2019"/>
    <area>Applications and Real-Time</area>
    <workgroup>HTTP</workgroup>
    <keyword>http</keyword>
    <keyword>range</keyword>
    <keyword>live</keyword>
    <keyword>aggregation</keyword>
    <abstract pn="section-abstract">
      <t pn="section-abstract-1">
            To accommodate byte-range requests for content that has
            data appended over time, this document defines semantics
            that allow an HTTP client and a server to perform byte-range
      GET and HEAD requests that start at an arbitrary byte offset
      within the representation and end at an indeterminate offset.
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for examination, experimental implementation, and
            evaluation.
        </t>
        <t pn="section-boilerplate.1-2">
            This document defines an Experimental Protocol for the Internet
            community.  This document is a product of the Internet Engineering
            Task Force (IETF).  It represents the consensus of the IETF community.
            It has received public review and has been approved for publication
            by the Internet Engineering Steering Group (IESG).  Not all documents
            approved by the IESG are candidates for any level of Internet
            Standard; see Section 2 of RFC 7841. 
        </t>
        <t pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8673" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t pn="section-boilerplate.2-1">
            Copyright (c) 2019 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notational-conventions">Notational Conventions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-performing-range-requests-o">Performing Range Requests on Random-Access Aggregating (Live) Content</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-establishing-the-randomly-a">Establishing the Randomly Accessible Byte Range</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-byte-range-requests-beyond-">Byte-Range Requests beyond the Randomly Accessible Byte Range</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-other-applications-of-rando">Other Applications of Random-Access Aggregating Content</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requests-starting-at-the-ag">Requests Starting at the Aggregation/Live Point</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-shift-buffer-representation">Shift-Buffer Representations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-recommendations-for-byte-ra">Recommendations for Byte-Range Request last-byte-pos Values</xref></t>
          </li>
          <li pn="section-toc.1-1.5">
            <t keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t keepWithNext="true" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t keepWithNext="true" pn="section-toc.1-1.8.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t keepWithNext="true" pn="section-toc.1-1.9.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t pn="section-1-1">
      Some Hypertext Transfer Protocol (HTTP) clients use byte-range requests
      (range requests using the "bytes" range unit) to transfer select
      portions of large representations <xref target="RFC7233" format="default" sectionFormat="of" derivedContent="RFC7233"/>. In some
      cases, large representations require content to be continuously or
      periodically appended, such as representations consisting of live audio 
      or video sources, blockchain databases, and log files. Clients cannot 
      access the appended/live content using a range request with the "bytes"
      range unit using the currently defined byte-range semantics without 
      accepting performance or behavior sacrifices that are not acceptable for 
      many applications.
      </t>
      <t pn="section-1-2">
	For instance, HTTP clients have the ability to access appended content 
	on an indeterminate-length resource by transferring the entire 
	representation from the beginning and continuing to read the appended 
	content as it's made available. Obviously, this is highly inefficient 
	for cases where the representation is large and only the most recently 
	appended content is needed by the client.
      </t>
      <t pn="section-1-3">		
	Alternatively, clients can access appended
	content by sending periodic, open-ended byte-range
	requests using the last known end byte position as the
	range start. Performing low-frequency periodic
	byte-range requests in this fashion (polling) introduces
	latency since the client will necessarily be somewhat
	behind in transferring the aggregated content, effectively 
	resulting in the same kind of latency issues with the segmented content 
	transfer mechanisms in "HTTP Live Streaming" (HLS) <xref target="RFC8216" format="default" sectionFormat="of" derivedContent="RFC8216"/> and "Dynamic Adaptive Streaming
	over HTTP" <xref target="MPEG-DASH" format="default" sectionFormat="of" derivedContent="MPEG-DASH"/>.
	While performing 
        these range requests at higher frequency can reduce this latency, 
        it also incurs more processing overhead and HTTP exchanges as 
        many of the requests will return no content, since content is 
	usually aggregated in groups of bytes (e.g., a video frame, audio 
	sample, block, or log entry).
      </t>
      <t pn="section-1-4">
           This document describes a usage model for range requests that enables
           efficient retrieval of representations that are appended to over time
           by using large values and associated semantics for communicating
           range end positions. This model allows representations to be
           progressively delivered by servers as new content is added. It also
           ensures compatibility with servers and intermediaries that don't
           support this technique.
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-notational-conventions">Notational Conventions</name>
        <t pn="section-1.1-1">This document cites Augmented Backus-Naur Form (ABNF) productions
            from <xref target="RFC7233" format="default" sectionFormat="of" derivedContent="RFC7233"/>, using the notation defined in <xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/>.
        </t>
      </section>
    </section>
    <section anchor="definition" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-performing-range-requests-o">Performing Range Requests on Random-Access Aggregating (Live) Content</name>
      <t pn="section-2-1">
            This document recommends a two-step process for accessing resources
            that have indeterminate-length representations.
      </t>
      <t pn="section-2-2">
            Two steps are necessary because of limitations with the range request
            header fields and the Content-Range response header fields. A server cannot
            know from a range request that a client wishes to receive a response
            that does not have a definite end. More critically, the header fields
            do not allow the server to signal that a resource has indeterminate
            length without also providing a fixed portion of the resource.
      </t>
      <t pn="section-2-3">
            A client first learns that the resource has a representation of
            indeterminate length by requesting a range of the resource. The server
            responds with the range that is available but indicates that the
            length of the representation is unknown using the existing
            Content-Range syntax. See <xref target="establishing-range" format="default" sectionFormat="of" derivedContent="Section 2.1"/>
            for details and examples.
      </t>
      <t pn="section-2-4">
            Once the client knows the resource has indeterminate length, it can
            request a range with a very large end position from the resource. The
            client chooses an explicit end value larger than can be transferred in
            the foreseeable term. A server that supports range requests of
            indeterminate length signals its understanding of the client's
            indeterminate range request by indicating that the range it is
            providing has a range end that exactly matches the client's requested
            range end rather than a range that is bounded by what is currently
            available. See <xref target="live-range-requests" format="default" sectionFormat="of" derivedContent="Section 2.2"/> for details.
      </t>
      <section anchor="establishing-range" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-establishing-the-randomly-a">Establishing the Randomly Accessible Byte Range</name>
        <t pn="section-2.1-1">
        Determining if a representation is continuously aggregating ("live")
	and determining the randomly accessible byte range can both be
	performed using the existing definition for an open-ended byte-range
	request. Specifically, <xref target="RFC7233" sectionFormat="of" section="2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7233#section-2.1" derivedContent="RFC7233"/> defines a byte-range request of the form:
        </t>
        <sourcecode type="abnf" markers="false" pn="section-2.1-2">
   byte-range-spec = first-byte-pos "-" [ last-byte-pos ]
</sourcecode>
        <t pn="section-2.1-3">
      which allows a client to send a HEAD request with a first-byte-pos and 
      leave last-byte-pos absent. A server that receives a satisfiable
      byte-range request (with first-byte-pos smaller than the current
      representation length) may respond with a 206 status code (Partial
      Content) with a Content-Range
      header field indicating the currently satisfiable byte range. For example:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-2.1-4">
HEAD /resource HTTP/1.1
Host: example.com
Range: bytes=0-
</artwork>
        <t pn="section-2.1-5">
      returns a response of the form:
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-2.1-6">
HTTP/1.1 206 Partial Content
Content-Range: bytes 0-1234567/*
</artwork>
        <t pn="section-2.1-7">
      from the server indicating that (1) the complete representation length
      is unknown (via the "*" in place of the complete-length field) and (2)
      only bytes 0-1234567 were accessible at the time the request was
      processed by the server. The client can infer from this response that
      bytes 0-1234567 of the representation can be requested and transfer
      can be performed immediately.

        </t>
      </section>
      <section anchor="live-range-requests" numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-byte-range-requests-beyond-">Byte-Range Requests beyond the Randomly Accessible Byte Range</name>
        <t pn="section-2.2-1">
        Once a client has determined that a representation has an
	indeterminate length and established the byte range that can be
	accessed, it may want to perform a request with a start position
	within the randomly accessible content range and an end position 
	at an indefinite/live point -- a point where the byte-range GET 
	request is fulfilled on-demand as the content is aggregated.
        </t>
        <t pn="section-2.2-2">
        For example, for a large video asset, a client may wish to start a 
	content transfer from the video "key" frame immediately before the 
	point of aggregation and continue the content transfer indefinitely 
	as content is aggregated, in order to support low-latency startup 
	of a live video stream.
        </t>
        <t pn="section-2.2-3">
        Unlike a byte-range request header field, a byte-content-range response
        header field cannot be "open-ended", per <xref target="RFC7233" sectionFormat="of" section="4.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7233#section-4.2" derivedContent="RFC7233"/>:
        </t>
        <sourcecode type="abnf" markers="false" pn="section-2.2-4">
   byte-content-range  = bytes-unit SP
                        ( byte-range-resp / unsatisfied-range )

   byte-range-resp     = byte-range "/" ( complete-length / "*" )
   byte-range          = first-byte-pos "-" last-byte-pos
   unsatisfied-range   = "*/" complete-length

   complete-length     = 1*DIGIT
</sourcecode>
        <t pn="section-2.2-5">
        Specifically, last-byte-pos is required in byte-range. So, in order 
	to preserve interoperability with existing HTTP clients, servers, 
	proxies, and caches, this document proposes a mechanism for a client 
	to indicate support for handling an indeterminate-length byte-range 
	response and a mechanism for a server to indicate if/when it's 
	providing an indeterminate-length response.
        </t>
        <t pn="section-2.2-6">
        A client can indicate support for handling indeterminate-length 
	byte-range responses by providing a very large value for the 
	last-byte-pos in the byte-range request. For example, a client can 
	perform a byte-range GET request of the form:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-2.2-7">
GET /resource HTTP/1.1
Host: example.com
Range: bytes=1230000-999999999999
</artwork>
        <t pn="section-2.2-8">
        where the last-byte-pos in the request is much larger than the 
	last-byte-pos returned in response to an open-ended byte-range 
	HEAD request, as described above, and much larger than the expected 
	maximum size of the representation. See <xref target="Security" format="default" sectionFormat="of" derivedContent="Section 6"/> for 
	range value considerations.
        </t>
        <t pn="section-2.2-9">
        In response, a server may indicate that it is supplying a continuously 
	aggregating/live response by supplying the client request's 
	last-byte-pos in the Content-Range response header field.
        </t>
        <t pn="section-2.2-10">
        For example:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-2.2-11">
GET /resource HTTP/1.1
Host: example.com
Range: bytes=1230000-999999999999
</artwork>
        <t pn="section-2.2-12">
        returns
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-2.2-13">
HTTP/1.1 206 Partial Content
Content-Range: bytes 1230000-999999999999/*
</artwork>
        <t pn="section-2.2-14">
        from the server to indicate that the response will start at byte
	1230000 and continue indefinitely to include all aggregated content, as it becomes available.
        </t>
        <t pn="section-2.2-15">
        A server that doesn't support or supply a continuously aggregating/live 
	response will supply the currently satisfiable byte range, 
	as it would with an open-ended byte request.
        </t>
        <t pn="section-2.2-16">
        For example:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-2.2-17">
GET /resource HTTP/1.1
Host: example.com
Range: bytes=1230000-999999999999
</artwork>
        <t pn="section-2.2-18">
        returns
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-2.2-19">
HTTP/1.1 206 Partial Content
Content-Range: bytes 1230000-1234567/*
</artwork>
        <t pn="section-2.2-20">
        from the server to indicate that the response will start at byte
	1230000, end at byte 1234567, and not include any aggregated content. 
	This is the response expected from a typical HTTP server -- one that 
	doesn't support byte-range requests on aggregating content.
        </t>
        <t pn="section-2.2-21">
        A client that doesn't receive a response indicating it is continuously 
	aggregating must use other means to access aggregated content (e.g., 
	periodic byte-range polling).
        </t>
        <t pn="section-2.2-22">
        A server that does return a continuously aggregating/live response
	should return data using chunked transfer coding and not provide a
	Content-Length header field. A 0-length chunk indicates the end of the
	transfer, per <xref target="RFC7230" sectionFormat="of" section="4.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7230#section-4.1" derivedContent="RFC7230"/>.
        </t>
      </section>
    </section>
    <section anchor="other-applications" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-other-applications-of-rando">Other Applications of Random-Access Aggregating Content</name>
      <section anchor="starting-at-live" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-requests-starting-at-the-ag">Requests Starting at the Aggregation/Live Point</name>
        <t pn="section-3.1-1">
          A client that wishes to only receive newly aggregated portions of a
          resource (i.e., start at the live point) can use a HEAD request to
          learn what range the server has currently available and initiate an
          indeterminate-length transfer. For example:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-3.1-2">
HEAD /resource HTTP/1.1
Host: example.com
Range: bytes=0-
</artwork>
        <t pn="section-3.1-3">
            with the Content-Range response header field indicating the range
	    (or ranges) available. For example:
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-3.1-4">
206 Partial Content
Content-Range: bytes 0-1234567/*
</artwork>
        <t pn="section-3.1-5">
            The client can then issue a request for a range starting at the end
            value (using a very large value for the end of a range) and receive
            only new content.
        </t>
        <t pn="section-3.1-6">
          For example:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-3.1-7">
GET /resource HTTP/1.1
Host: example.com
Range: bytes=1234567-999999999999
</artwork>
        <t pn="section-3.1-8">
          with a server returning a Content-Range response indicating that an
	  indeterminate-length response body will be provided:
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-3.1-9">
206 Partial Content
Content-Range: bytes 1234567-999999999999/*
</artwork>
      </section>
      <section anchor="shift-buffers" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-shift-buffer-representation">Shift-Buffer Representations</name>
        <t pn="section-3.2-1">
        Some representations lend themselves to front-end content removal in
	addition to aggregation. While still supporting random access,
	representations of this type have a portion at the beginning (the "0"
	end) of the randomly accessible region that becomes inaccessible over
	time. Examples of this kind of representation would be an audio-video 
	time-shift buffer or a rolling log file.
        </t>
        <t pn="section-3.2-2">
        For example, a range request containing:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-3.2-3">
HEAD /resource HTTP/1.1
Host: example.com
Range: bytes=0-
</artwork>
        <t pn="section-3.2-4">
        returns
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-3.2-5">
206 Partial Content
Content-Range: bytes 1000000-1234567/*
</artwork>
        <t pn="section-3.2-6">
        indicating that the first 1000000 bytes were not accessible at the
	time the HEAD request was processed. Subsequent HEAD requests could return:
        </t>
        <artwork type="example" align="left" pn="section-3.2-7">
Content-Range: bytes 1000000-1234567/*
</artwork>
        <artwork type="example" align="left" pn="section-3.2-8">
Content-Range: bytes 1010000-1244567/*
</artwork>
        <artwork type="example" align="left" pn="section-3.2-9">
Content-Range: bytes 1020000-1254567/*
</artwork>
        <t pn="section-3.2-10">
        Note though that the difference between the first-byte-pos and 
	last-byte-pos need not be constant.
        </t>
        <t pn="section-3.2-11">
        The client could then follow up with a GET range request containing:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-3.2-12">
GET /resource HTTP/1.1
Host: example.com
Range: bytes=1020000-999999999999
</artwork>
        <t pn="section-3.2-13">
        with the server returning
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-3.2-14">
206 Partial Content
Content-Range: bytes 1020000-999999999999/*
</artwork>
        <t pn="section-3.2-15">
        with the response body returning bytes 1020000-1254567 immediately 
	and aggregated/live data being returned as the content is aggregated.
        </t>
        <t pn="section-3.2-16">
        A server that doesn't support or supply a continuously aggregating/live
	response will supply the currently satisfiable byte range, as
	it would with an open-ended byte request. For example:
        </t>
        <artwork type="message/http; msgtype=&quot;request&quot;" align="left" pn="section-3.2-17">
GET /resource HTTP/1.1
Host: example.com
Range: bytes=0-999999999999
</artwork>
        <t pn="section-3.2-18">
        returns
        </t>
        <artwork type="message/http; msgtype=&quot;response&quot;" align="left" pn="section-3.2-19">
HTTP/1.1 206 Partial Content
Content-Range: bytes 1020000-1254567/*
</artwork>
        <t pn="section-3.2-20">
        from the server to indicate that the response will start at byte
	1020000, end at byte 1254567, and not include any aggregated 
	content. This is the response expected from a typical HTTP 
	server -- one that doesn't support byte-range requests on aggregating content.
        </t>
        <t pn="section-3.2-21">
          Note that responses to GET requests performed on shift-buffer
          representations using Range headers can be cached by intermediaries, since
          the Content-Range response header indicates which portion of the
          representation is being returned in the response body. However, GET
          requests without a Range header cannot be cached since the first
          byte of the response body can vary from request to request. To
          ensure GET requests without Range headers on shift-buffer representations
          are not cached, servers hosting a shift-buffer representation should
          either not return a 200-level response (e.g., send a 300-level
          redirect response with a URI that represents the current start of
          the shift buffer) or indicate the response is non-cacheable. See
          <xref target="RFC7234" format="default" sectionFormat="of" derivedContent="RFC7234"/> for details on HTTP cache control.
        </t>
      </section>
    </section>
    <section anchor="RecommendedVLV" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-recommendations-for-byte-ra">Recommendations for Byte-Range Request last-byte-pos Values</name>
      <t pn="section-4-1">
            While it would be ideal to define a single large last-byte-pos
            value for byte-range requests, there's no single value that would work for all
            applications and platforms. For example, JavaScript numbers cannot
            represent all integer values above 2^^53, so a JavaScript
            application may want to use 2^^53-1 for last-byte-pos. This
            value, however, would not be sufficient for all applications, such
            as long-duration high-bitrate streams. So 
            2^^53-1 (9007199254740991) is recommended as a last-byte-pos
            unless an application has a good justification to use a smaller or
            larger value. For example, if it is always known that the resource won't
            exceed a value smaller than the recommended last-byte-pos for
            an application, a smaller value can be used. If it's likely
            that an application will utilize resources larger than the
            recommended last-byte-pos (such as a continuously aggregating
            high-bitrate media stream), a larger value should be used.
      </t>
      <t pn="section-4-2">
            Note that, in accordance with the semantics defined above, servers
	    that support random-access live content will need to return the 
	    last-byte-pos provided in the byte-range request in some cases -- even
	    if the last-byte-pos cannot be represented as a numerical value 
	    internally by the server. As is the case with any
	    continuously aggregating/live resource, the server should
	    terminate the content transfer when the end of the resource is 
	    reached -- whether the end is due to termination of the content
	    source or the content length exceeds the server's maximum representation length.
      </t>
    </section>
    <section anchor="IANA" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t pn="section-5-1">This document has no IANA actions.</t>
    </section>
    <section anchor="Security" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t pn="section-6-1">
            As described above, servers need to be prepared to receive 
	    last-byte-pos values in range requests that are numerically larger 
	    than the server implementation supports and return these values in 
	    Content-Range response header fields. Servers should check the 
	    last-byte-pos value before converting and storing them into
	    numeric form to ensure the value doesn't cause an overflow or
	    index incorrect data. The simplest way to satisfy the live-range 
	    semantics defined in this document without potential overflow
	    issues is to store the last-byte-pos as a string value and return 
	    it in the byte-range Content-Range response header's last-byte-pos field.
      </t>
    </section>
  </middle>
  <back>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" quoteTitle="true" derivedAnchor="RFC5234">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Overell" fullname="P. Overell">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2008" month="January"/>
            <abstract>
              <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="68"/>
          <seriesInfo name="RFC" value="5234"/>
          <seriesInfo name="DOI" value="10.17487/RFC5234"/>
        </reference>
        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230" quoteTitle="true" derivedAnchor="RFC7230">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7230"/>
          <seriesInfo name="DOI" value="10.17487/RFC7230"/>
        </reference>
        <reference anchor="RFC7233" target="https://www.rfc-editor.org/info/rfc7233" quoteTitle="true" derivedAnchor="RFC7233">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="Y." surname="Lafon" fullname="Y. Lafon" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7233"/>
          <seriesInfo name="DOI" value="10.17487/RFC7233"/>
        </reference>
        <reference anchor="RFC7234" target="https://www.rfc-editor.org/info/rfc7234" quoteTitle="true" derivedAnchor="RFC7234">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7234"/>
          <seriesInfo name="DOI" value="10.17487/RFC7234"/>
        </reference>
      </references>
      <references pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="MPEG-DASH" target="https://www.iso.org/standard/75485.html" quoteTitle="true" derivedAnchor="MPEG-DASH">
          <front>
            <title>Information technology -- Dynamic adaptive streaming over HTTP (DASH) -- Part 1: Media presentation description and segment formats</title>
            <seriesInfo name="ISO/IEC" value="23009-1"/>
            <author>
              <organization showOnFrontPage="true">ISO</organization>
            </author>
            <date month="August" year="2019"/>
          </front>
        </reference>
        <reference anchor="RFC8216" target="https://www.rfc-editor.org/info/rfc8216" quoteTitle="true" derivedAnchor="RFC8216">
          <front>
            <title>HTTP Live Streaming</title>
            <author initials="R." surname="Pantos" fullname="R. Pantos" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="W." surname="May" fullname="W. May">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="August"/>
            <abstract>
              <t>This document describes a protocol for transferring unbounded streams of multimedia data.  It specifies the data format of the files and the actions to be taken by the server (sender) and the clients (receivers) of the streams.  It describes version 7 of this protocol.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8216"/>
          <seriesInfo name="DOI" value="10.17487/RFC8216"/>
        </reference>
      </references>
    </references>
    <section anchor="Acknowledgements" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t pn="section-appendix.a-1">
      The authors would like to thank Mark Nottingham, Patrick McManus, Julian Reschke, Remy Lebeau, Rodger
      Combs, Thorsten Lohmar, Martin Thompson, Adrien de Croy, K. Morgan, Roy
      T. Fielding, and Jeremy Poulter.
      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author fullname="Craig Pratt" initials="C." surname="Pratt">
        <address>
          <postal>
            <street/>
            <city>Portland</city>
            <region>OR</region>
            <code>97229</code>
            <country>United States of America</country>
          </postal>
          <email>pratt@acm.org</email>
        </address>
      </author>
      <author fullname="Darshak Thakore" initials="D." surname="Thakore">
        <organization abbrev="CableLabs" showOnFrontPage="true">CableLabs</organization>
        <address>
          <postal>
            <street>858 Coal Creek Circle</street>
            <city>Louisville</city>
            <region>CO</region>
            <code>80027</code>
            <country>United States of America</country>
          </postal>
          <email>d.thakore@cablelabs.com</email>
        </address>
      </author>
      <author fullname="Barbara Stark" initials="B." surname="Stark">
        <organization showOnFrontPage="true">AT&amp;T</organization>
        <address>
          <postal>
            <street/>
            <city>Atlanta</city>
            <region>GA</region>
            <country>United States of America</country>
          </postal>
          <email>barbara.stark@att.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
