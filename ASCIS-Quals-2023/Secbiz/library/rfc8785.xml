<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="info" docName="draft-rundgren-json-canonicalization-scheme-17" indexInclude="true" ipr="trust200902" number="8785" prepTime="2020-06-29T09:56:36" scripts="Common,Latin" sortRefs="true" submissionType="independent" symRefs="true" tocDepth="4" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-rundgren-json-canonicalization-scheme-17" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8785" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="JSON Canonicalization Scheme">JSON Canonicalization Scheme (JCS)</title>
    <seriesInfo name="RFC" value="8785" stream="independent"/>
    <author fullname="Anders Rundgren" initials="A." surname="Rundgren">
      <organization showOnFrontPage="true">Independent</organization>
      <address>
        <postal>
          <city>Montpellier</city>
          <country>France</country>
        </postal>
        <email>anders.rundgren.net@gmail.com</email>
        <uri>https://www.linkedin.com/in/andersrundgren/</uri>
      </address>
    </author>
    <author fullname="Bret Jordan" initials="B." surname="Jordan">
      <organization showOnFrontPage="true">Broadcom</organization>
      <address>
        <postal>
          <street>1320 Ridder Park Drive</street>
          <region>CA</region>
          <code>95131</code>
          <city>San Jose</city>
          <country>United States of America</country>
        </postal>
        <email>bret.jordan@broadcom.com</email>
      </address>
    </author>
    <author fullname="Samuel Erdtman" initials="S." surname="Erdtman">
      <organization showOnFrontPage="true">Spotify AB</organization>
      <address>
        <postal>
          <street>Birger Jarlsgatan 61, 4tr</street>
          <code>113 56</code>
          <city>Stockholm</city>
          <country>Sweden</country>
        </postal>
        <email>erdtman@spotify.com</email>
      </address>
    </author>
    <date month="06" year="2020"/>
    <area>Security</area>
    <workgroup/>
    <keyword>JSON</keyword>
    <keyword>ECMAScript</keyword>
    <keyword>Signatures</keyword>
    <keyword>Cryptography</keyword>
    <keyword>Canonicalization</keyword>
    <abstract pn="section-abstract">
      <t pn="section-abstract-1">
        Cryptographic operations like hashing and signing need the data to be
        expressed in an invariant format so that the operations are reliably
        repeatable.

        One way to address this is to create a canonical representation of
        the data.  Canonicalization also permits data to be exchanged in its
        original form on the "wire" while cryptographic operations
        performed on the canonicalized counterpart of the data in the
        producer and consumer endpoints generate consistent results.
      </t>
      <t pn="section-abstract-2">
        This document describes the JSON Canonicalization Scheme (JCS).
        This specification defines how to create a canonical representation
        of JSON data by building on the strict serialization methods for
        JSON primitives defined by ECMAScript, constraining JSON data to
        the Internet JSON (I-JSON) subset, and by using deterministic property
	sorting.
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for informational purposes.
        </t>
        <t pn="section-boilerplate.1-2">
            This is a contribution to the RFC Series, independently of any
            other RFC stream.  The RFC Editor has chosen to publish this
            document at its discretion and makes no statement about its value
            for implementation or deployment.  Documents approved for
            publication by the RFC Editor are not candidates for any level of
            Internet Standard; see Section 2 of RFC 7841.
        </t>
        <t pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8785" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t pn="section-boilerplate.2-1">
            Copyright (c) 2020 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-detailed-operation">Detailed Operation</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t keepWithNext="true" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-creation-of-input-data">Creation of Input Data</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-generation-of-canonical-jso">Generation of Canonical JSON Data</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.2.2">
                  <li pn="section-toc.1-1.3.2.2.2.1">
                    <t pn="section-toc.1-1.3.2.2.2.1.1"><xref derivedContent="3.2.1" format="counter" sectionFormat="of" target="section-3.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-whitespace">Whitespace</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.2.2.2">
                    <t pn="section-toc.1-1.3.2.2.2.2.1"><xref derivedContent="3.2.2" format="counter" sectionFormat="of" target="section-3.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serialization-of-primitive-">Serialization of Primitive Data Types</xref></t>
                    <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.2.2.2.2">
                      <li pn="section-toc.1-1.3.2.2.2.2.2.1">
                        <t pn="section-toc.1-1.3.2.2.2.2.2.1.1"><xref derivedContent="3.2.2.1" format="counter" sectionFormat="of" target="section-3.2.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serialization-of-literals">Serialization of Literals</xref></t>
                      </li>
                      <li pn="section-toc.1-1.3.2.2.2.2.2.2">
                        <t pn="section-toc.1-1.3.2.2.2.2.2.2.1"><xref derivedContent="3.2.2.2" format="counter" sectionFormat="of" target="section-3.2.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serialization-of-strings">Serialization of Strings</xref></t>
                      </li>
                      <li pn="section-toc.1-1.3.2.2.2.2.2.3">
                        <t pn="section-toc.1-1.3.2.2.2.2.2.3.1"><xref derivedContent="3.2.2.3" format="counter" sectionFormat="of" target="section-3.2.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serialization-of-numbers">Serialization of Numbers</xref></t>
                      </li>
                    </ul>
                  </li>
                  <li pn="section-toc.1-1.3.2.2.2.3">
                    <t pn="section-toc.1-1.3.2.2.2.3.1"><xref derivedContent="3.2.3" format="counter" sectionFormat="of" target="section-3.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sorting-of-object-propertie">Sorting of Object Properties</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.2.2.4">
                    <t pn="section-toc.1-1.3.2.2.2.4.1"><xref derivedContent="3.2.4" format="counter" sectionFormat="of" target="section-3.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-utf-8-generation">UTF-8 Generation</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.5">
            <t pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t pn="section-toc.1-1.7.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ecmascript-sample-canonical">ECMAScript Sample Canonicalizer</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t pn="section-toc.1-1.8.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-number-serialization-sample">Number Serialization Samples</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t pn="section-toc.1-1.9.1"><xref derivedContent="Appendix C" format="default" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-canonicalized-json-as-wire-">Canonicalized JSON as "Wire Format"</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t pn="section-toc.1-1.10.1"><xref derivedContent="Appendix D" format="default" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dealing-with-big-numbers">Dealing with Big Numbers</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t pn="section-toc.1-1.11.1"><xref derivedContent="Appendix E" format="default" sectionFormat="of" target="section-appendix.e"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-string-subtype-handling">String Subtype Handling</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
              <li pn="section-toc.1-1.11.2.1">
                <t pn="section-toc.1-1.11.2.1.1"><xref derivedContent="E.1" format="counter" sectionFormat="of" target="section-e.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-subtypes-in-arrays">Subtypes in Arrays</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.12">
            <t pn="section-toc.1-1.12.1"><xref derivedContent="Appendix F" format="default" sectionFormat="of" target="section-appendix.f"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-implementation-guidelines">Implementation Guidelines</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t pn="section-toc.1-1.13.1"><xref derivedContent="Appendix G" format="default" sectionFormat="of" target="section-appendix.g"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-open-source-implementations">Open-Source Implementations</xref></t>
          </li>
          <li pn="section-toc.1-1.14">
            <t pn="section-toc.1-1.14.1"><xref derivedContent="Appendix H" format="default" sectionFormat="of" target="section-appendix.h"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-other-json-canonicalization">Other JSON Canonicalization Efforts</xref></t>
          </li>
          <li pn="section-toc.1-1.15">
            <t pn="section-toc.1-1.15.1"><xref derivedContent="Appendix I" format="default" sectionFormat="of" target="section-appendix.i"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-development-portal">Development Portal</xref></t>
          </li>
          <li pn="section-toc.1-1.16">
            <t pn="section-toc.1-1.16.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.j"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.17">
            <t pn="section-toc.1-1.17.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.k"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="Introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t pn="section-1-1">
        This document describes the JSON Canonicalization Scheme (JCS).
        This specification defines how to create a canonical representation
        of JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/> data by building
        on the strict serialization methods for
        JSON primitives defined by ECMAScript <xref target="ECMA-262" format="default" sectionFormat="of" derivedContent="ECMA-262"/>,
        constraining JSON data to the I-JSON <xref target="RFC7493" format="default" sectionFormat="of" derivedContent="RFC7493"/>
        subset, and by using deterministic property sorting. The output from
	JCS is a
        "hashable" representation of JSON data that can be used by
	cryptographic methods.
        The subsequent paragraphs outline the primary design considerations.
      </t>
      <t pn="section-1-2">
        Cryptographic operations like hashing and signing need the data to be
        expressed in an invariant format so that the operations are reliably
        repeatable.
        One way to accomplish this is to convert the data into
        a format that has a simple and fixed representation,
        like base64url <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648"/>.
        This is how JSON Web Signature (JWS) <xref target="RFC7515" format="default" sectionFormat="of" derivedContent="RFC7515"/> addressed this issue.
        Another solution is to create a canonical version of the data,
        similar to what was done for the XML signature <xref target="XMLDSIG" format="default" sectionFormat="of" derivedContent="XMLDSIG"/> standard.
      </t>
      <t pn="section-1-3">  
        The primary advantage with a canonicalizing scheme is that data
        can be kept in its original form. This is the core rationale behind
	JCS.
        Put another way, using canonicalization enables a JSON object to
	remain a JSON object
        even after being signed. This can simplify system design,
	documentation, and logging.
      </t>
      <t pn="section-1-4">
        To avoid "reinventing the wheel", JCS relies on the serialization of
	JSON primitives
        (strings, numbers, and literals), as defined by ECMAScript (aka
	JavaScript)
        <xref target="ECMA-262" format="default" sectionFormat="of" derivedContent="ECMA-262"/> beginning with version 6.
      </t>
      <t pn="section-1-5">
        Seasoned XML developers may recall difficulties getting XML signatures
        to validate.  This was usually due to different interpretations of the
	quite intricate
        XML canonicalization rules as well as of the equally complex
        Web Services security standards.
        The reasons why JCS should not suffer from similar issues are:
      </t>
      <ul spacing="normal" bare="false" empty="false" pn="section-1-6">
        <li pn="section-1-6.1">
          JSON does not have a namespace concept and default values.
        </li>
        <li pn="section-1-6.2">
          Data is constrained to the I‑JSON <xref target="RFC7493" format="default" sectionFormat="of" derivedContent="RFC7493"/> subset.
          This eliminates the need for specific parsers for dealing with
	  canonicalization.
        </li>
        <li pn="section-1-6.3">
          JCS-compatible serialization of JSON primitives is currently
	  supported
          by most web browsers as well as by Node.js <xref target="NODEJS" format="default" sectionFormat="of" derivedContent="NODEJS"/>.
        </li>
        <li pn="section-1-6.4">
          The full JCS specification is currently supported by multiple
          open-source implementations (see <xref target="open.source" format="default" sectionFormat="of" derivedContent="Appendix G"/>).
          See also <xref target="impl.guidelines" format="default" sectionFormat="of" derivedContent="Appendix F"/> for
	  implementation 
          guidelines.
        </li>
      </ul>
      <t pn="section-1-7">
        JCS is compatible with some existing systems relying on JSON
        canonicalization such as JSON Web Key (JWK) Thumbprint <xref target="RFC7638" format="default" sectionFormat="of" derivedContent="RFC7638"/> and Keybase <xref target="KEYBASE" format="default" sectionFormat="of" derivedContent="KEYBASE"/>.
      </t>
      <t pn="section-1-8">
        For potential uses outside of cryptography, see <xref target="I-D.rundgren-comparable-json" format="default" sectionFormat="of" derivedContent="JSONCOMP"/>.
      </t>
      <t pn="section-1-9">
        The intended audiences of this document are JSON tool vendors as
        well as designers of JSON-based cryptographic solutions.
        The reader is assumed to be knowledgeable in ECMAScript, including the
	"JSON" object.
      </t>
    </section>
    <section anchor="Terminology" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <t pn="section-2-1">
        Note that this document is not on the IETF standards track. However, a
	conformant
        implementation is supposed to adhere to the specified behavior for
        security and interoperability reasons.  This text uses BCP 14 to
        describe that necessary behavior.
      </t>
      <t pn="section-2-2">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/>
        <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they appear in all capitals,
    as shown here.
      </t>
    </section>
    <section anchor="Operation" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-detailed-operation">Detailed Operation</name>
      <t pn="section-3-1">
        This section describes the details related to creating 
        a canonical JSON representation and how they are addressed by JCS.
      </t>
      <t pn="section-3-2">
        <xref target="impl.guidelines" format="default" sectionFormat="of" derivedContent="Appendix F"/> describes
        the <bcp14>RECOMMENDED</bcp14> way of adding JCS support to existing
	JSON tools.
      </t>
      <section anchor="json.datacreation" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-creation-of-input-data">Creation of Input Data</name>
        <t pn="section-3.1-1">
          Data to be canonically serialized is usually created by:
        </t>
        <ul spacing="normal" bare="false" empty="false" pn="section-3.1-2">
          <li pn="section-3.1-2.1">
              Parsing previously generated JSON data.
          </li>
          <li pn="section-3.1-2.2">
              Programmatically creating data.
          </li>
        </ul>
        <t pn="section-3.1-3">
          Irrespective of the method used, the data to be serialized
	  <bcp14>MUST</bcp14> be adapted
          for I‑JSON <xref target="RFC7493" format="default" sectionFormat="of" derivedContent="RFC7493"/>
	  formatting, which implies the following:
        </t>
        <ul spacing="normal" bare="false" empty="false" pn="section-3.1-4">
          <li pn="section-3.1-4.1">
              JSON objects <bcp14>MUST NOT</bcp14> exhibit duplicate property
	      names.
          </li>
          <li pn="section-3.1-4.2">
              JSON string data <bcp14>MUST</bcp14> be expressible
              as Unicode <xref target="UNICODE" format="default" sectionFormat="of" derivedContent="UNICODE"/>.
          </li>
          <li pn="section-3.1-4.3">
              JSON number data <bcp14>MUST</bcp14> be expressible
              as IEEE 754 <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/>
	      double-precision values.
            For applications needing higher precision or longer integers than
            offered by IEEE 754 double precision, it is
	    <bcp14>RECOMMENDED</bcp14> to represent such
            numbers as JSON strings; see <xref target="json.bignumbers" format="default" sectionFormat="of" derivedContent="Appendix D"/> for 
              details on how this can be performed in an interoperable and
	      extensible way.
          </li>
        </ul>
        <t pn="section-3.1-5">
          An additional constraint is that parsed JSON string data <bcp14>MUST NOT</bcp14> be altered during subsequent serializations.  For more
          information, see <xref target="string.subtypes" format="default" sectionFormat="of" derivedContent="Appendix E"/>.
        </t>
        <t pn="section-3.1-6">
          Note: Although the Unicode standard offers the possibility of
          rearranging certain character sequences, referred to as "Unicode
          Normalization" <xref target="UCNORM" format="default" sectionFormat="of" derivedContent="UCNORM"/>,
          JCS-compliant string processing does not take this into
          consideration. That is, all components involved in a scheme
          depending on JCS <bcp14>MUST</bcp14> preserve Unicode string data
          "as is".
        </t>
      </section>
      <section anchor="json.canonicalization" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-generation-of-canonical-jso">Generation of Canonical JSON Data</name>
        <t pn="section-3.2-1">
          The following subsections describe the steps required to create a
	  canonical
          JSON representation of the data elaborated on in the previous
	  section.
        </t>
        <t pn="section-3.2-2">
          <xref target="canonicalize.js" format="default" sectionFormat="of" derivedContent="Appendix A"/> shows sample code
          for an ECMAScript-based canonicalizer, matching the JCS
	  specification.
        </t>
        <section anchor="json.whitespace" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.1">
          <name slugifiedName="name-whitespace">Whitespace</name>
          <t pn="section-3.2.1-1">
            Whitespace between JSON tokens <bcp14>MUST NOT</bcp14> be emitted.
          </t>
        </section>
        <section anchor="json.serialization.data" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.2">
          <name slugifiedName="name-serialization-of-primitive-">Serialization of Primitive Data Types</name>
          <t pn="section-3.2.2-1">
            Assume the following JSON object is parsed:
          </t>
          <sourcecode type="json" markers="false" pn="section-3.2.2-2">
  {
    "numbers": [333333333.33333329, 1E30, 4.50,
                2e-3, 0.000000000000000000000000001],
    "string": "\u20ac$\u000F\u000aA'\u0042\u0022\u005c\\\"\/",
    "literals": [null, true, false]
  }
</sourcecode>
          <t pn="section-3.2.2-3">
            If the parsed data is subsequently serialized using a serializer
            compliant with ECMAScript's "JSON.stringify()", the result would
            (with a line wrap added for display purposes only) be rather
            divergent with respect to the original data:
          </t>
          <sourcecode type="json" markers="false" pn="section-3.2.2-4">
  {"numbers":[333333333.3333333,1e+30,4.5,0.002,1e-27],"string":
  "€$\u000f\nA'B\"\\\\\"/","literals":[null,true,false]}
</sourcecode>
          <t pn="section-3.2.2-5">
            The reason for the difference between the parsed data and its
            serialized counterpart is due to a wide tolerance on input data
	    (as defined
            by JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>), while output
	    data (as defined by ECMAScript)
            has a fixed representation.  As can be seen in the example,
            numbers are subject to rounding as well.
          </t>
          <t pn="section-3.2.2-6">
            The following subsections describe the serialization of primitive
	    JSON data types
            according to JCS.  This part is identical to that of ECMAScript.
            In the (unlikely) event that a future version of ECMAScript would
            invalidate any of the following serialization methods, it will be
            up to the developer community to
            either stick to this specification or create a new specification.
          </t>
          <section anchor="json.ser.literals" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.2.1">
            <name slugifiedName="name-serialization-of-literals">Serialization of Literals</name>
            <t pn="section-3.2.2.1-1">
              In accordance with JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>, 
              the literals "null", "true", and
              "false" <bcp14>MUST</bcp14> be serialized as null, true, and
	      false, respectively.
            </t>
          </section>
          <section anchor="json.ser.string" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.2.2">
            <name slugifiedName="name-serialization-of-strings">Serialization of Strings</name>
            <t pn="section-3.2.2.2-1">
              For JSON string data (which includes JSON object property names
              as well), each Unicode code point <bcp14>MUST</bcp14> be
              serialized as described below (see Section 24.3.2.2 of <xref target="ECMA-262" format="default" sectionFormat="of" derivedContent="ECMA-262"/>):
            </t>
            <ul spacing="normal" bare="false" empty="false" pn="section-3.2.2.2-2">
              <li pn="section-3.2.2.2-2.1">
                If the Unicode value falls within the traditional ASCII
                control character range (U+0000 through U+001F), it
                <bcp14>MUST</bcp14> be serialized using lowercase hexadecimal
                Unicode notation (\uhhhh) unless it is in the set of
                predefined JSON control characters U+0008, U+0009, U+000A,
                U+000C, or U+000D, which <bcp14>MUST</bcp14> be serialized as
                \b, \t, \n, \f, and \r, respectively.
              </li>
              <li pn="section-3.2.2.2-2.2">
                If the Unicode value is outside of the ASCII control character
                range, it <bcp14>MUST</bcp14> be serialized "as is"
                unless it is equivalent to U+005C (\) or U+0022 ("),
                which <bcp14>MUST</bcp14> be serialized as \\ and \",
                respectively.
               </li>
            </ul>
            <t pn="section-3.2.2.2-3">
              Finally, the resulting sequence of Unicode code points
	      <bcp14>MUST</bcp14> be enclosed in double quotes (").
            </t>
            <t pn="section-3.2.2.2-4">
              Note: Since invalid Unicode data like "lone surrogates" (e.g.,
	      U+DEAD)
              may lead to interoperability issues including broken signatures,
              occurrences of such data <bcp14>MUST</bcp14> cause a compliant
	      JCS implementation to terminate
              with an appropriate error.
            </t>
          </section>
          <section anchor="json.ser.number" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.2.3">
            <name slugifiedName="name-serialization-of-numbers">Serialization of Numbers</name>
            <t pn="section-3.2.2.3-1">
              ECMAScript builds on the IEEE 754 <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/> double-precision standard for representing
              JSON number data.  Such data <bcp14>MUST</bcp14> be serialized
              according to Section 7.1.12.1 of <xref target="ECMA-262" format="default" sectionFormat="of" derivedContent="ECMA-262"/>, including the "Note 2" enhancement.
            </t>
            <t pn="section-3.2.2.3-2">
              Due to the relative complexity of this part, the algorithm 
              itself is not included in this document.
              For implementers of JCS-compliant number serialization,
              Google's implementation in V8 <xref target="V8" format="default" sectionFormat="of" derivedContent="V8"/> may serve as a reference.
              Another compatible number serialization reference implementation
              is Ryu <xref target="RYU" format="default" sectionFormat="of" derivedContent="RYU"/>,
              which is used by the JCS open-source Java implementation 
              mentioned in <xref target="open.source" format="default" sectionFormat="of" derivedContent="Appendix G"/>.
              <xref target="json.ieee754.test" format="default" sectionFormat="of" derivedContent="Appendix B"/> holds a set
	            of IEEE 754 sample values and their
              corresponding JSON serialization.
            </t>
            <t pn="section-3.2.2.3-3">
              Note: Since Not a Number (NaN) and Infinity
              are not permitted in JSON, occurrences of NaN or
              Infinity <bcp14>MUST</bcp14> cause a compliant JCS
              implementation to terminate with an appropriate error.
            </t>
          </section>
        </section>
        <section anchor="json.sorting.properties" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.3">
          <name slugifiedName="name-sorting-of-object-propertie">Sorting of Object Properties</name>
          <t pn="section-3.2.3-1">
            Although the previous step normalized the representation of
            primitive JSON data types, the result would not yet qualify as
            "canonical" since JSON object properties are not in lexicographic
            (alphabetical) order.
          </t>
          <t pn="section-3.2.3-2">
            Applied to the sample in <xref target="json.serialization.data" format="default" sectionFormat="of" derivedContent="Section 3.2.2"/>,
            a properly canonicalized version should (with a
            line wrap added for display purposes only) read as:
          </t>
          <sourcecode type="json" markers="false" pn="section-3.2.3-3">
  {"literals":[null,true,false],"numbers":[333333333.3333333,
  1e+30,4.5,0.002,1e-27],"string":"€$\u000f\nA'B\"\\\\\"/"}
</sourcecode>
          <t pn="section-3.2.3-4">
            The rules for lexicographic sorting of JSON object
            properties according to JCS are as follows:
          </t>
          <ul spacing="normal" bare="false" empty="false" pn="section-3.2.3-5">
            <li pn="section-3.2.3-5.1">
                JSON object properties <bcp14>MUST</bcp14> be sorted
		recursively,
                which means that JSON child Objects
                <bcp14>MUST</bcp14> have their properties sorted as well.
            </li>
            <li pn="section-3.2.3-5.2">
              JSON array data <bcp14>MUST</bcp14> also be scanned for the
              presence of JSON objects (if an object is found, then its
	      properties <bcp14>MUST</bcp14> be sorted),
              but array element order <bcp14>MUST NOT</bcp14> be changed.
            </li>
          </ul>
          <t pn="section-3.2.3-6">
            When a JSON object is about to have its properties
            sorted, the following measures <bcp14>MUST</bcp14> be adhered to:
          </t>
          <ul spacing="normal" bare="false" empty="false" pn="section-3.2.3-7">
            <li pn="section-3.2.3-7.1">
              The sorting process is applied to property name strings in their
	      "raw" (unescaped) form.
              That is, a newline character is treated as U+000A.
            </li>
            <li pn="section-3.2.3-7.2">
              Property name strings to be sorted are formatted
              as arrays of UTF-16 <xref target="UNICODE" format="default" sectionFormat="of" derivedContent="UNICODE"/>
	      code units.
              The sorting is based on pure value comparisons, where code units
	      are treated as
              unsigned integers, independent of locale settings.
            </li>
            <li pn="section-3.2.3-7.3">
              <t pn="section-3.2.3-7.3.1">
                Property name strings either have different values at some
		index that is
                a valid index for both strings, or their lengths are
		different, or both.
                If they have different values at one or more index
                positions, let k be the smallest such index; then, the string
		whose
                value at position k has the smaller value, as determined by
		using
                the "&lt;" operator, lexicographically precedes the other
		string.
                If there is no index position at which they differ,
                then the shorter string lexicographically precedes the longer
		string.
              </t>
              <t pn="section-3.2.3-7.3.2">
                In plain English, this means that property names are sorted in
		ascending order like the following:
              </t>
              <artwork type="ascii-art" align="left" alt="" pn="section-3.2.3-7.3.3">
        ""
        "a"
        "aa"
        "ab"
</artwork>
            </li>
          </ul>
          <t pn="section-3.2.3-8">
            The rationale for basing the sorting algorithm on UTF-16 code
	    units is that
            it maps directly to the string type in ECMAScript (featured in web
	    browsers
            and Node.js), Java, and .NET.  In addition, JSON only supports
	    escape sequences
            expressed as UTF-16 code units, making knowledge and handling of
	    such data
            a necessity anyway.
            Systems using another internal representation of string data will
	    need to convert
            JSON property name strings into arrays of UTF-16 code units before
	    sorting.
            The conversion from UTF-8 or UTF-32 to UTF-16 is defined by the
            Unicode <xref target="UNICODE" format="default" sectionFormat="of" derivedContent="UNICODE"/> standard.
          </t>
          <t pn="section-3.2.3-9">
   The following JSON test data can be used for verifying the correctness of
   the sorting scheme in a JCS implementation:
          </t>
          <sourcecode type="json" markers="false" pn="section-3.2.3-10">
  {
    "\u20ac": "Euro Sign",
    "\r": "Carriage Return",
    "\ufb33": "Hebrew Letter Dalet With Dagesh",
    "1": "One",
    "\ud83d\ude00": "Emoji: Grinning Face",
    "\u0080": "Control",
    "\u00f6": "Latin Small Letter O With Diaeresis"
  }
</sourcecode>
          <t pn="section-3.2.3-11">
            Expected argument order after sorting property strings:
          </t>
          <artwork type="ascii-art" align="left" alt="" pn="section-3.2.3-12">  "Carriage Return"
  "One"
  "Control"
  "Latin Small Letter O With Diaeresis"
  "Euro Sign"
  "Emoji: Grinning Face"
  "Hebrew Letter Dalet With Dagesh"</artwork>
          <t pn="section-3.2.3-13">
            Note: For the purpose of obtaining a deterministic property order,
            sorting of data encoded in UTF-8 or UTF-32 would also work, but
            the outcome for JSON data like above would differ and thus be
            incompatible with this specification.

            However, in practice, property names are rarely defined outside of
            7-bit ASCII, making it possible to sort string data in UTF-8 or
            UTF-32 format without conversion to UTF-16 and still be compatible
            with JCS.  Whether or not this is a viable option depends on the
            environment JCS is used in.
          </t>
        </section>
        <section anchor="json.utf8" numbered="true" toc="include" removeInRFC="false" pn="section-3.2.4">
          <name slugifiedName="name-utf-8-generation">UTF-8 Generation</name>
          <t pn="section-3.2.4-1">
            Finally, in order to create a platform-independent representation,
            the result of the preceding step <bcp14>MUST</bcp14> be encoded in
	    UTF-8.
          </t>
          <t pn="section-3.2.4-2">
            Applied to the sample in <xref target="json.sorting.properties" format="default" sectionFormat="of" derivedContent="Section 3.2.3"/>, this
            should yield the following bytes, here shown in hexadecimal
	    notation:
          </t>
          <artwork type="ascii-art" align="left" alt="" pn="section-3.2.4-3">  7b 22 6c 69 74 65 72 61 6c 73 22 3a 5b 6e 75 6c 6c 2c 74 72
  75 65 2c 66 61 6c 73 65 5d 2c 22 6e 75 6d 62 65 72 73 22 3a
  5b 33 33 33 33 33 33 33 33 33 2e 33 33 33 33 33 33 33 2c 31
  65 2b 33 30 2c 34 2e 35 2c 30 2e 30 30 32 2c 31 65 2d 32 37
  5d 2c 22 73 74 72 69 6e 67 22 3a 22 e2 82 ac 24 5c 75 30 30
  30 66 5c 6e 41 27 42 5c 22 5c 5c 5c 5c 5c 22 2f 22 7d</artwork>
          <t pn="section-3.2.4-4">
            This data is intended to be usable as input to cryptographic
	    methods.
          </t>
        </section>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t pn="section-4-1">
        This document has no IANA actions.
      </t>
    </section>
    <section anchor="Security" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t pn="section-5-1">
        It is crucial to perform sanity checks on input data to avoid
        overflowing buffers and similar things that could affect the
        integrity of the system.
      </t>
      <t pn="section-5-2">
        When JCS is applied to signature schemes like the one described
        in <xref target="impl.guidelines" format="default" sectionFormat="of" derivedContent="Appendix F"/>,
        applications <bcp14>MUST</bcp14> perform the following operations
	before acting
        upon received data:
      </t>
      <ol spacing="normal" type="1" start="1" pn="section-5-3">
        <li pn="section-5-3.1" derivedCounter="1.">
          Parse the JSON data and verify that it adheres to I-JSON.
        </li>
        <li pn="section-5-3.2" derivedCounter="2.">
          Verify the data for correctness according to the conventions defined
	  by the
          ecosystem where it is to be used.   This also includes locating the
          property holding the signature data.
        </li>
        <li pn="section-5-3.3" derivedCounter="3.">
          Verify the signature.
        </li>
      </ol>
      <t pn="section-5-4">
        If any of these steps fail, the operation in progress
	<bcp14>MUST</bcp14> be aborted.
      </t>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.rundgren-comparable-json" to="JSONCOMP"/>
    <references pn="section-6">
      <name slugifiedName="name-references">References</name>
      <references pn="section-6.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="ECMA-262" target="https://www.ecma-international.org/ecma-262/10.0/index.html" quoteTitle="true" derivedAnchor="ECMA-262">
          <front>
            <title>ECMAScript 2019 Language Specification</title>
            <author>
              <organization showOnFrontPage="true">ECMA International</organization>
            </author>
            <date year="2019" month="June"/>
          </front>
          <refcontent>Standard ECMA-262 10th Edition</refcontent>
        </reference>
        <reference anchor="IEEE754" target="https://ieeexplore.ieee.org/document/8766229" quoteTitle="true" derivedAnchor="IEEE754">
          <front>
            <title>IEEE Standard for Floating-Point Arithmetic</title>
            <seriesInfo name="DOI" value="10.1109/IEEESTD.2019.8766229"/>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
          </front>
          <refcontent>IEEE 754-2019</refcontent>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC7493" target="https://www.rfc-editor.org/info/rfc7493" quoteTitle="true" derivedAnchor="RFC7493">
          <front>
            <title>The I-JSON Message Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="March"/>
            <abstract>
              <t>I-JSON (short for "Internet JSON") is a restricted profile of JSON designed to maximize interoperability and increase confidence that software can process it successfully with predictable results.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7493"/>
          <seriesInfo name="DOI" value="10.17487/RFC7493"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="UCNORM" target="https://www.unicode.org/reports/tr15/" quoteTitle="true" derivedAnchor="UCNORM">
          <front>
            <title>Unicode Normalization Forms</title>
            <author>
              <organization showOnFrontPage="true">The Unicode Consortium</organization>
            </author>
          </front>
        </reference>
        <reference anchor="UNICODE" target="https://www.unicode.org/versions/latest/" quoteTitle="true" derivedAnchor="UNICODE">
          <front>
            <title>The Unicode Standard</title>
            <author>
              <organization showOnFrontPage="true">The Unicode Consortium</organization>
            </author>
          </front>
        </reference>
      </references>
      <references pn="section-6.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="I-D.rundgren-comparable-json" quoteTitle="true" target="https://tools.ietf.org/html/draft-rundgren-comparable-json-04" derivedAnchor="JSONCOMP">
          <front>
            <title>"Comparable" JSON (JSONCOMP)</title>
            <author initials="A" surname="Rundgren" fullname="Anders Rundgren">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="February" day="13" year="2019"/>
            <abstract>
              <t>This application note describes how JCS [JCS] can be utilized to support applications needing canonicalization beyond the core JSON [RFC8259] level, with comparisons as the primary target.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-rundgren-comparable-json-04"/>
          <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-rundgren-comparable-json-04.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="KEYBASE" target="https://keybase.io/docs/api/1.0/canonical_packings" quoteTitle="true" derivedAnchor="KEYBASE">
          <front>
            <title>Canonical Packings for JSON and Msgpack</title>
            <author>
              <organization showOnFrontPage="true">Keybase</organization>
            </author>
          </front>
        </reference>
        <reference anchor="NODEJS" target="https://nodejs.org" quoteTitle="true" derivedAnchor="NODEJS">
          <front>
            <title>Node.js</title>
            <author>
              <organization showOnFrontPage="true">OpenJS Foundation</organization>
            </author>
          </front>
        </reference>
        <reference anchor="OPENAPI" target="https://www.openapis.org/" quoteTitle="true" derivedAnchor="OPENAPI">
          <front>
            <title>The OpenAPI Specification: a broadly adopted industry standard for describing modern APIs</title>
            <author>
              <organization showOnFrontPage="true">OpenAPI Initiative</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RFC4648" target="https://www.rfc-editor.org/info/rfc4648" quoteTitle="true" derivedAnchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author initials="S." surname="Josefsson" fullname="S. Josefsson">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="October"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC7515" target="https://www.rfc-editor.org/info/rfc7515" quoteTitle="true" derivedAnchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC7638" target="https://www.rfc-editor.org/info/rfc7638" quoteTitle="true" derivedAnchor="RFC7638">
          <front>
            <title>JSON Web Key (JWK) Thumbprint</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t>This specification defines a method for computing a hash value over a JSON Web Key (JWK).  It defines which fields in a JWK are used in the hash computation, the method of creating a canonical form for those fields, and how to convert the resulting Unicode string into a byte sequence to be hashed.  The resulting hash value can be used for identifying or selecting the key represented by the JWK that is the subject of the thumbprint.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7638"/>
          <seriesInfo name="DOI" value="10.17487/RFC7638"/>
        </reference>
        <reference anchor="RYU" target="https://github.com/ulfjack/ryu" quoteTitle="true" derivedAnchor="RYU">
          <front>
            <title>Ryu floating point number serializing algorithm</title>
            <author/>
            <date month="May" year="2020"/>
          </front>
          <refcontent>commit 27d3c55</refcontent>
        </reference>
        <reference anchor="V8" target="https://v8.dev/" quoteTitle="true" derivedAnchor="V8">
          <front>
            <title>What is V8?</title>
            <author>
              <organization showOnFrontPage="true">Google LLC</organization>
            </author>
          </front>
        </reference>
        <reference anchor="XMLDSIG" target="https://www.w3.org/TR/xmldsig-core1/" quoteTitle="true" derivedAnchor="XMLDSIG">
          <front>
            <title>XML Signature Syntax and Processing Version 1.1</title>
            <author>
              <organization showOnFrontPage="true">W3C</organization>
            </author>
            <date month="April" year="2013"/>
          </front>
          <refcontent>W3C Recommendation</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="canonicalize.js" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-ecmascript-sample-canonical">ECMAScript Sample Canonicalizer</name>
      <t pn="section-appendix.a-1">
        Below is an example of a JCS canonicalizer for usage with
	ECMAScript-based systems:
      </t>
      <sourcecode type="javascript" markers="false" pn="section-appendix.a-2">
  ////////////////////////////////////////////////////////////
  // Since the primary purpose of this code is highlighting //
  // the core of the JCS algorithm, error handling and      //
  // UTF-8 generation were not implemented.                 //
  ////////////////////////////////////////////////////////////
  var canonicalize = function(object) {

      var buffer = '';
      serialize(object);
      return buffer;

      function serialize(object) {
          if (object === null || typeof object !== 'object' ||
              object.toJSON != null) {
              /////////////////////////////////////////////////
              // Primitive type or toJSON, use "JSON"        //
              /////////////////////////////////////////////////
              buffer += JSON.stringify(object);

          } else if (Array.isArray(object)) {
              /////////////////////////////////////////////////
              // Array - Maintain element order              //
              /////////////////////////////////////////////////
              buffer += '[';
              let next = false;
              object.forEach((element) =&gt; {
                  if (next) {
                      buffer += ',';
                  }
                  next = true;
                  /////////////////////////////////////////
                  // Array element - Recursive expansion //
                  /////////////////////////////////////////
                  serialize(element);
              });
              buffer += ']';

          } else {
              /////////////////////////////////////////////////
              // Object - Sort properties before serializing //
              /////////////////////////////////////////////////
              buffer += '{';
              let next = false;
              Object.keys(object).sort().forEach((property) =&gt; {
                  if (next) {
                      buffer += ',';
                  }
                  next = true;
                  /////////////////////////////////////////////
                  // Property names are strings, use "JSON"  //
                  /////////////////////////////////////////////
                  buffer += JSON.stringify(property);
                  buffer += ':';
                  //////////////////////////////////////////
                  // Property value - Recursive expansion //
                  //////////////////////////////////////////
                  serialize(object[property]);
              });
              buffer += '}';
          }
      }
  };
</sourcecode>
    </section>
    <section anchor="json.ieee754.test" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.b">
      <name slugifiedName="name-number-serialization-sample">Number Serialization Samples</name>
      <t pn="section-appendix.b-1">
        The following table holds a set of ECMAScript-compatible number
	serialization samples,
        including some edge cases.  The column
        "IEEE 754" refers to the internal
        ECMAScript representation of the "Number" data type, which is based on
	the
        IEEE 754 <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/> standard using
	64-bit (double-precision) values,
        here expressed in hexadecimal.
      </t>
      <table anchor="ECMAScript-TABLE" align="center" pn="table-1">
        <name slugifiedName="name-ecmascript-compatible-json-">ECMAScript-Compatible JSON Number Serialization Samples</name>
        <thead>
          <tr>
            <th align="center" colspan="1" rowspan="1">IEEE 754</th>
            <th align="center" colspan="1" rowspan="1">JSON Representation</th>
            <th align="center" colspan="1" rowspan="1">Comment</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>0000000000000000</tt>
            </td>
            <td align="left" colspan="1" rowspan="1">
              <tt>0</tt>
            </td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Zero</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>8000000000000000</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>0</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Minus zero</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>0000000000000001</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>5e-324</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Min pos number</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>8000000000000001</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>-5e-324</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Min neg number</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>7fefffffffffffff</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>1.7976931348623157e+308</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Max pos number</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>ffefffffffffffff</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>-1.7976931348623157e+308</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Max neg number</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>4340000000000000</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>9007199254740992</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Max pos
int    (1)</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>c340000000000000</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>-9007199254740992</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Max neg
int    (1)</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>4430000000000000</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>295147905179352830000</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>~2**68         (2)
</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>7fffffffffffffff</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
            <td align="left" colspan="1" rowspan="1">
              <tt>NaN            (3)</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>7ff0000000000000</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
            <td align="left" colspan="1" rowspan="1">
              <tt>Infinity       (3)</tt></td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>44b52d02c7e14af5</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>9.999999999999997e+22</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>44b52d02c7e14af6</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>1e+23</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>44b52d02c7e14af7</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>1.0000000000000001e+23</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>444b1ae4d6e2ef4e</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>999999999999999700000</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>444b1ae4d6e2ef4f</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>999999999999999900000</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>444b1ae4d6e2ef50</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>1e+21</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>3eb0c6f7a0b5ed8c</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>9.999999999999997e-7</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>3eb0c6f7a0b5ed8d</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>0.000001</tt></td>
            <td align="left" colspan="1" rowspan="1">
      </td>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>41b3de4355555553</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>333333333.3333332</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>41b3de4355555554</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>333333333.33333325</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>41b3de4355555555</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>333333333.3333333</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>41b3de4355555556</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>333333333.3333334</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>41b3de4355555557</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>333333333.33333343</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>becbf647612f3696</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>-0.0000033333333333333333</tt></td>
            <td align="left" colspan="1" rowspan="1"/>
          </tr>
          <tr>
            <td align="left" colspan="1" rowspan="1">
              <tt>43143ff3c1cb0959</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>1424953923781206.2</tt></td>
            <td align="left" colspan="1" rowspan="1">
              <tt>Round to even  (4)</tt></td>
          </tr>
        </tbody>
      </table>
      <t pn="section-appendix.b-3">
        Notes:
      </t>
      <ol spacing="normal" type="(%d)" start="1" pn="section-appendix.b-4">
        <li pn="section-appendix.b-4.1" derivedCounter="(1)">
          For maximum compliance with the ECMAScript "JSON" object,
          values that are to be interpreted as true integers
          <bcp14>SHOULD</bcp14> be in the range -9007199254740991 to
	  9007199254740991.
          However, how numbers are used in applications does not affect the
	  JCS algorithm.
        </li>
        <li pn="section-appendix.b-4.2" derivedCounter="(2)">
          Although a set of specific integers like 2**68 could be regarded as
	  having
          extended precision, the JCS/ECMAScript number serialization
          algorithm does not take this into consideration.
        </li>
        <li pn="section-appendix.b-4.3" derivedCounter="(3)">
            Values out of range are not permitted in JSON.
            See <xref target="json.ser.number" format="default" sectionFormat="of" derivedContent="Section 3.2.2.3"/>.
        </li>
        <li pn="section-appendix.b-4.4" derivedCounter="(4)">
          This number is exactly 1424953923781206.25 but will, after the "Note
	  2" rule
          mentioned in <xref target="json.ser.number" format="default" sectionFormat="of" derivedContent="Section 3.2.2.3"/>, be
	  truncated and
          rounded to the closest even value.
        </li>
      </ol>
      <t pn="section-appendix.b-5">
        For a more exhaustive validation of a JCS number serializer, you may
        test against a file (currently) available in the development portal
        (see <xref target="json.development" format="default" sectionFormat="of" derivedContent="Appendix I"/>) containing a
        large set of sample values. Another option is running V8 <xref target="V8" format="default" sectionFormat="of" derivedContent="V8"/> as a live reference together with a
        program generating a substantial amount of random IEEE 754 values.
      </t>
    </section>
    <section anchor="json.wireformat" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.c">
      <name slugifiedName="name-canonicalized-json-as-wire-">Canonicalized JSON as "Wire Format"</name>
      <t pn="section-appendix.c-1">
        Since the result from the canonicalization process (see <xref target="json.utf8" format="default" sectionFormat="of" derivedContent="Section 3.2.4"/>) is fully valid JSON, it can
        also be used as "Wire Format".  However, this is just an option since
        cryptographic schemes based on JCS, in most cases, would not depend on
        that externally supplied JSON data already being canonicalized.
      </t>
      <t pn="section-appendix.c-2">
        In fact, the ECMAScript standard way of serializing objects using
        "JSON.stringify()" produces a
        more "logical" format, where properties are
        kept in the order they were created or received.  The
        example below shows an address record that could benefit from
        ECMAScript standard serialization:
      </t>
      <sourcecode type="json" markers="false" pn="section-appendix.c-3">
  {
    "name": "John Doe",
    "address": "2000 Sunset Boulevard",
    "city": "Los Angeles",
    "zip": "90001",
    "state": "CA"
  }
</sourcecode>
      <t pn="section-appendix.c-4">
        Using canonicalization, the properties above would be output in the
	order
        "address", "city", "name", "state", and "zip", which adds fuzziness
        to the data from a human (developer or technical support) perspective.
        Canonicalization also converts JSON data into a single line of text,
	which may
        be less than ideal for debugging and logging.
      </t>
    </section>
    <section anchor="json.bignumbers" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.d">
      <name slugifiedName="name-dealing-with-big-numbers">Dealing with Big Numbers</name>
      <t pn="section-appendix.d-1">
        There are several issues associated with the
        JSON number type, here illustrated by the following
        sample object:
      </t>
      <sourcecode type="json" markers="false" pn="section-appendix.d-2">
  {
    "giantNumber": 1.4e+9999,
    "payMeThis": 26000.33,
    "int64Max": 9223372036854775807
  }
</sourcecode>
      <t pn="section-appendix.d-3">
        Although the sample above conforms to JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>,
        applications would normally use different native data types for
	storing
        "giantNumber" and "int64Max".  In addition, monetary data like
	"payMeThis" would
        presumably not rely on floating-point data types due to rounding
	issues with respect
        to decimal arithmetic.
      </t>
      <t pn="section-appendix.d-4">
        The established way of handling this kind of "overloading" of the
        JSON number type (at least in an extensible manner) is through
        mapping mechanisms, instructing parsers what to do with different
	properties
        based on their name.  However, this greatly limits the value of using
	the
        JSON number type outside of its original, somewhat constrained
	JavaScript context.
        The ECMAScript "JSON" object does not support mappings to the JSON
	number type either.
      </t>
      <t pn="section-appendix.d-5">
        Due to the above, numbers that do not have a natural place in the
	current
        JSON ecosystem <bcp14>MUST</bcp14> be wrapped using the JSON string
	type.  This is close to
        a de facto standard for open systems.  This is also applicable for
        other data types that do not have direct support in JSON, like
	"DateTime"
        objects as described in <xref target="string.subtypes" format="default" sectionFormat="of" derivedContent="Appendix E"/>.
      </t>
      <t pn="section-appendix.d-6">
        Aided by a system using the JSON string type, be it programmatic like
      </t>
      <sourcecode type="" markers="false" pn="section-appendix.d-7">
  var obj = JSON.parse('{"giantNumber": "1.4e+9999"}');
  var biggie = new BigNumber(obj.giantNumber);
</sourcecode>
      <t pn="section-appendix.d-8">
        or declarative schemes like OpenAPI <xref target="OPENAPI" format="default" sectionFormat="of" derivedContent="OPENAPI"/>,
        JCS imposes no limits on applications, including when using
	ECMAScript.
      </t>
    </section>
    <section anchor="string.subtypes" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.e">
      <name slugifiedName="name-string-subtype-handling">String Subtype Handling</name>
      <t pn="section-appendix.e-1">
        Due to the limited set of data types featured in JSON, the JSON string
        type is commonly used for holding subtypes.  This can, depending on
        JSON parsing method, lead to interoperability problems, which
        <bcp14>MUST</bcp14> be dealt with by JCS-compliant applications
        targeting a wider audience.
      </t>
      <t pn="section-appendix.e-2">
        Assume you want to parse a JSON object where the schema
        designer assigned the property "big" for holding a "BigInt" subtype
	and
        "time" for holding a "DateTime" subtype, while "val" is supposed to be
	a JSON number
        compliant with JCS. The following example shows such an object:
      </t>
      <sourcecode type="json" markers="false" pn="section-appendix.e-3">
  {
    "time": "2019-01-28T07:45:10Z",
    "big": "055",
    "val": 3.5
  }
</sourcecode>
      <t pn="section-appendix.e-4">Parsing of this object can be accomplished by the following
      ECMAScript statement:</t>
      <sourcecode type="" markers="false" pn="section-appendix.e-5">
  var object = JSON.parse(JSON_object_featured_as_a_string);
</sourcecode>
      <t pn="section-appendix.e-6">After parsing, the actual data can be extracted, which for subtypes,
      also involves a conversion step using the result of the parsing process
      (an ECMAScript object) as input:</t>
      <sourcecode type="" markers="false" pn="section-appendix.e-7">
  ... = new Date(object.time); // Date object
  ... = BigInt(object.big);    // Big integer
  ... = object.val;            // JSON/JS number
</sourcecode>
      <t pn="section-appendix.e-8">
        Note that the "BigInt" data type is currently only natively supported
	by V8 <xref target="V8" format="default" sectionFormat="of" derivedContent="V8"/>.
      </t>
      <t pn="section-appendix.e-9">
        Canonicalization of "object" using the sample code in <xref target="canonicalize.js" format="default" sectionFormat="of" derivedContent="Appendix A"/> would return the
        following string:
      </t>
      <sourcecode type="json" markers="false" pn="section-appendix.e-10">
  {"big":"055","time":"2019-01-28T07:45:10Z","val":3.5}
</sourcecode>
      <t pn="section-appendix.e-11">
        Although this is (with respect to JCS) technically correct, there is
        another way of parsing JSON data, which also can be used with
        ECMAScript as shown below:
      </t>
      <sourcecode type="" markers="false" pn="section-appendix.e-12">
  // "BigInt" requires the following code to become JSON serializable
  BigInt.prototype.toJSON = function() {
      return this.toString();
  };

  // JSON parsing using a "stream"-based method
  var object = JSON.parse(JSON_object_featured_as_a_string,
      (k,v) =&gt; k == 'time' ? new Date(v) : k == 'big' ? BigInt(v) : v
  );
</sourcecode>
      <t pn="section-appendix.e-13">
        If you now apply the canonicalizer in <xref target="canonicalize.js" format="default" sectionFormat="of" derivedContent="Appendix A"/> to "object", the following string would be
        generated:
      </t>
      <sourcecode type="json" markers="false" pn="section-appendix.e-14">
  {"big":"55","time":"2019-01-28T07:45:10.000Z","val":3.5}
</sourcecode>
      <t pn="section-appendix.e-15">
        In this case, the string arguments for "big" and "time" have changed
	with respect to the original,
        presumably making an application depending on JCS fail.
      </t>
      <t pn="section-appendix.e-16">
        The reason for the deviation is that in stream- and schema-based JSON
	parsers,
        the original string argument is typically replaced on the fly
        by the native subtype that, when serialized, may exhibit a different
        and platform-dependent pattern.
      </t>
      <t pn="section-appendix.e-17">
        That is, stream- and schema-based parsing <bcp14>MUST</bcp14> treat
        subtypes as "pure" (immutable) JSON string types and perform the
        actual conversion to the designated native type in a subsequent step.
        In modern programming platforms like Go, Java, and C#, this can be
        achieved with moderate efforts by combining annotations, getters, and
        setters.  Below is an example in C#/Json.NET showing a part of a class
        that is serializable as a JSON object:
      </t>
      <sourcecode type="" markers="false" pn="section-appendix.e-18">
  // The "pure" string solution uses a local
  // string variable for JSON serialization while
  // exposing another type to the application
  [JsonProperty("amount")]
  private string _amount;

  [JsonIgnore]
  public decimal Amount {
      get { return decimal.Parse(_amount); }
      set { _amount = value.ToString(); }
  }
</sourcecode>
      <t pn="section-appendix.e-19">
        In an application, "Amount" can be accessed as any other property
        while it is actually represented by a quoted string in JSON contexts.
      </t>
      <t pn="section-appendix.e-20">
        Note: The example above also addresses the constraints on numeric data
        implied by I-JSON (the C# "decimal" data type has quite different
        characteristics compared to IEEE 754 double precision).
      </t>
      <section anchor="string.subtypes.arrays" numbered="true" toc="include" removeInRFC="false" pn="section-e.1">
        <name slugifiedName="name-subtypes-in-arrays">Subtypes in Arrays</name>
        <t pn="section-e.1-1">
          Since the JSON array construct permits mixing arbitrary JSON data
	  types,
          custom parsing and serialization code may be required
          to cope with subtypes anyway.
        </t>
      </section>
    </section>
    <section anchor="impl.guidelines" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.f">
      <name slugifiedName="name-implementation-guidelines">Implementation Guidelines</name>
      <t pn="section-appendix.f-1">
        The optimal solution is integrating support for JCS directly
        in JSON serializers (parsers need no changes).
        That is, canonicalization would just be an additional "mode"
        for a JSON serializer. However, this is currently not the case.
        Fortunately, JCS support can be introduced through externally supplied
        canonicalizer software acting as a post processor to existing
        JSON serializers. This arrangement also relieves the JCS implementer
	from
        having to deal with how underlying data is to be represented in JSON.
      </t>
      <t pn="section-appendix.f-2">
        The post processor concept enables signature creation schemes like the
	following:
      </t>
      <ol spacing="normal" type="1" start="1" pn="section-appendix.f-3">
        <li pn="section-appendix.f-3.1" derivedCounter="1.">
            Create the data to be signed.
        </li>
        <li pn="section-appendix.f-3.2" derivedCounter="2.">
            Serialize the data using existing JSON tools.
        </li>
        <li pn="section-appendix.f-3.3" derivedCounter="3.">
            Let the external canonicalizer process the serialized data and
	    return canonicalized result data.
        </li>
        <li pn="section-appendix.f-3.4" derivedCounter="4.">
            Sign the canonicalized data.
        </li>
        <li pn="section-appendix.f-3.5" derivedCounter="5.">
            Add the resulting signature value to the original JSON data
	    through a designated signature property.
        </li>
        <li pn="section-appendix.f-3.6" derivedCounter="6.">
            Serialize the completed (now signed) JSON object using existing
	    JSON tools.
        </li>
      </ol>
      <t pn="section-appendix.f-4">
        A compatible signature verification scheme would then be as follows:
      </t>
      <ol spacing="normal" type="1" start="1" pn="section-appendix.f-5">
        <li pn="section-appendix.f-5.1" derivedCounter="1.">
            Parse the signed JSON data using existing JSON tools.
        </li>
        <li pn="section-appendix.f-5.2" derivedCounter="2.">
            Read and save the signature value from the designated signature
	    property.
        </li>
        <li pn="section-appendix.f-5.3" derivedCounter="3.">
            Remove the signature property from the parsed JSON object.
        </li>
        <li pn="section-appendix.f-5.4" derivedCounter="4.">
            Serialize the remaining JSON data using existing JSON tools.
        </li>
        <li pn="section-appendix.f-5.5" derivedCounter="5.">
            Let the external canonicalizer process the serialized data and
	    return canonicalized result data.
        </li>
        <li pn="section-appendix.f-5.6" derivedCounter="6.">
            Verify that the canonicalized data matches the saved signature
	    value
            using the algorithm and key used for creating the signature.
        </li>
      </ol>
      <t pn="section-appendix.f-6">
        A canonicalizer like above is effectively only a "filter", potentially
	usable with
        a multitude of quite different cryptographic schemes.
      </t>
      <t pn="section-appendix.f-7">
        Using a JSON serializer with integrated JCS support, the serialization
	performed
        before the canonicalization step could be eliminated for both
	processes.
      </t>
    </section>
    <section anchor="open.source" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.g">
      <name slugifiedName="name-open-source-implementations">Open-Source Implementations</name>
      <t pn="section-appendix.g-1">
        The following open-source implementations have been verified to be
        compatible with JCS:
      </t>
      <ul spacing="normal" bare="false" empty="false" pn="section-appendix.g-2">
        <li pn="section-appendix.g-2.1">
          JavaScript: <eref target="https://www.npmjs.com/package/canonicalize" brackets="angle"/>
        </li>
        <li pn="section-appendix.g-2.2">
          Java: <eref target="https://github.com/erdtman/java-json-canonicalization" brackets="angle"/>
        </li>
        <li pn="section-appendix.g-2.3">
          Go: <eref target="https://github.com/cyberphone/json-canonicalization/tree/master/go" brackets="angle"/>
        </li>
        <li pn="section-appendix.g-2.4">
          .NET/C#: <eref target="https://github.com/cyberphone/json-canonicalization/tree/master/dotnet" brackets="angle"/>
        </li>
        <li pn="section-appendix.g-2.5">
          Python: <eref target="https://github.com/cyberphone/json-canonicalization/tree/master/python3" brackets="angle"/>
        </li>
      </ul>
    </section>
    <section anchor="json.otherefforts" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.h">
      <name slugifiedName="name-other-json-canonicalization">Other JSON Canonicalization Efforts</name>
      <t pn="section-appendix.h-1">
        There are (and have been) other efforts creating "Canonical JSON". 
        Below is a list of URLs to some of them:
      </t>
      <ul spacing="normal" bare="false" empty="false" pn="section-appendix.h-2">
        <li pn="section-appendix.h-2.1">
          <eref target="https://tools.ietf.org/html/draft-staykov-hu-json-canonical-form-00" brackets="angle"/>
        </li>
        <li pn="section-appendix.h-2.2">
          <eref target="https://gibson042.github.io/canonicaljson-spec/" brackets="angle"/>
        </li>
        <li pn="section-appendix.h-2.3">
          <eref target="http://wiki.laptop.org/go/Canonical_JSON" brackets="angle"/>
        </li>
      </ul>
      <t pn="section-appendix.h-3">
        The listed efforts all build on text-level JSON-to-JSON
        transformations. The primary feature of text-level canonicalization is
        that it can be made neutral to the flavor of JSON used.  However, such
        schemes also imply major changes to the JSON parsing process, which is
        a likely hurdle for adoption. Albeit at the expense of certain JSON
        and application constraints, JCS was designed to be compatible with
        existing JSON tools.
      </t>
    </section>
    <section anchor="json.development" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.i">
      <name slugifiedName="name-development-portal">Development Portal</name>
      <t pn="section-appendix.i-1">
        The JCS specification is currently developed at:
        <eref target="https://github.com/cyberphone/ietf-json-canon" brackets="angle"/>.
      </t>
      <t pn="section-appendix.i-2">
        JCS source code and extensive test data is available at:
        <eref target="https://github.com/cyberphone/json-canonicalization" brackets="angle"/>.
      </t>
    </section>
    <section anchor="Acknowledgements" numbered="false" toc="include" removeInRFC="false" pn="section-appendix.j">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t pn="section-appendix.j-1">
        Building on ECMAScript number serialization was
        originally proposed by <contact fullname="James Manger"/>. This
	ultimately led to the
        adoption of the entire ECMAScript serialization scheme for JSON
	primitives.
      </t>
      <t pn="section-appendix.j-2">
        Other people who have contributed with valuable input to this
	specification include
        <contact fullname="Scott Ananian"/>,
        <contact fullname="Tim Bray"/>,
        <contact fullname="Ben Campbell"/>,
        <contact fullname="Adrian Farell"/>,
        <contact fullname="Richard Gibson"/>,
        <contact fullname="Bron Gondwana"/>,
        <contact fullname="John-Mark Gurney"/>,
        <contact fullname="Mike Jones,"/>
        <contact fullname="John Levine"/>,
        <contact fullname="Mark Miller"/>,
        <contact fullname="Matthew Miller"/>,
        <contact fullname="Mark Nottingham"/>,
        <contact fullname="Mike Samuel"/>,
        <contact fullname="Jim Schaad"/>,
        <contact fullname="Robert Tupelo-Schneck"/>,
        and <contact fullname="Michal Wadas"/>.
      </t>
      <t pn="section-appendix.j-3">
        For carrying out real-world concept verification, the software and
        support for number serialization provided by
        <contact fullname="Ulf Adams"/>,
        <contact fullname="Tanner Gooding"/>,
        and <contact fullname="Remy Oudompheng"/>
        was very helpful.
      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.k">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author fullname="Anders Rundgren" initials="A." surname="Rundgren">
        <organization showOnFrontPage="true">Independent</organization>
        <address>
          <postal>
            <city>Montpellier</city>
            <country>France</country>
          </postal>
          <email>anders.rundgren.net@gmail.com</email>
          <uri>https://www.linkedin.com/in/andersrundgren/</uri>
        </address>
      </author>
      <author fullname="Bret Jordan" initials="B." surname="Jordan">
        <organization showOnFrontPage="true">Broadcom</organization>
        <address>
          <postal>
            <street>1320 Ridder Park Drive</street>
            <region>CA</region>
            <code>95131</code>
            <city>San Jose</city>
            <country>United States of America</country>
          </postal>
          <email>bret.jordan@broadcom.com</email>
        </address>
      </author>
      <author fullname="Samuel Erdtman" initials="S." surname="Erdtman">
        <organization showOnFrontPage="true">Spotify AB</organization>
        <address>
          <postal>
            <street>Birger Jarlsgatan 61, 4tr</street>
            <code>113 56</code>
            <city>Stockholm</city>
            <country>Sweden</country>
          </postal>
          <email>erdtman@spotify.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
