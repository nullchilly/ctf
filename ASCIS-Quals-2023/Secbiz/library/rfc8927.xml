<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="exp" docName="draft-ucarion-json-type-definition-04" indexInclude="true" ipr="trust200902" number="8927" prepTime="2020-11-06T15:07:59" scripts="Common,Latin" sortRefs="true" submissionType="independent" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ucarion-json-type-definition-04" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8927" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title>JSON Type Definition</title>
    <seriesInfo name="RFC" value="8927" stream="independent"/>
    <author initials="U." surname="Carion" fullname="Ulysse Carion">
      <organization abbrev="Segment" showOnFrontPage="true">Segment.io, Inc</organization>
      <address>
        <postal>
          <street>100 California Street</street>
          <city>San Francisco</city>
          <region>CA</region>
          <code>94111</code>
          <country>United States of America</country>
        </postal>
        <email>ulysse@segment.com</email>
      </address>
    </author>
    <date month="11" year="2020"/>
    <area>Applications</area>
    <workgroup>Independent Submission</workgroup>
    <keyword>data interchange format</keyword>
    <keyword>description language</keyword>
    <keyword>schema language</keyword>
    <keyword>tree grammar</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document proposes a format, called JSON Type Definition (JTD),
      for describing the shape of JavaScript Object Notation (JSON)
      messages. Its main goals are to enable code generation from schemas as
      well as portable validation with standardized error indicators. To this
      end, JTD is intentionally limited to be no more expressive than the type
      systems of mainstream programming languages. This intentional
      limitation, as well as the decision to make JTD schemas be JSON
      documents, makes tooling atop of JTD easier to build.</t>
      <t indent="0" pn="section-abstract-2">This document does not have IETF consensus and is presented here to
      facilitate experimentation with the concept of JTD.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for examination, experimental implementation, and
            evaluation.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document defines an Experimental Protocol for the Internet
            community.  This is a contribution to the RFC Series,
            independently of any other RFC stream.  The RFC Editor has chosen to publish this
            document at its discretion and makes no statement about its value
            for implementation or deployment.  Documents approved for publication
            by the RFC Editor are not candidates for any level of Internet
            Standard; see Section 2 of RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8927" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2020 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-scope-of-experiment">Scope of Experiment</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-syntax">Syntax</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-root-vs-non-root-schemas">Root vs. Non-root Schemas</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-forms">Forms</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2.2.2">
                  <li pn="section-toc.1-1.2.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.1.1"><xref derivedContent="2.2.1" format="counter" sectionFormat="of" target="section-2.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-empty">Empty</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.2.1"><xref derivedContent="2.2.2" format="counter" sectionFormat="of" target="section-2.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ref">Ref</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.3.1"><xref derivedContent="2.2.3" format="counter" sectionFormat="of" target="section-2.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-type">Type</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.4">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.4.1"><xref derivedContent="2.2.4" format="counter" sectionFormat="of" target="section-2.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-enum">Enum</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.5">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.5.1"><xref derivedContent="2.2.5" format="counter" sectionFormat="of" target="section-2.2.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-elements">Elements</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.6">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.6.1"><xref derivedContent="2.2.6" format="counter" sectionFormat="of" target="section-2.2.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-properties">Properties</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.7">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.7.1"><xref derivedContent="2.2.7" format="counter" sectionFormat="of" target="section-2.2.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-values">Values</xref></t>
                  </li>
                  <li pn="section-toc.1-1.2.2.2.2.8">
                    <t indent="0" pn="section-toc.1-1.2.2.2.2.8.1"><xref derivedContent="2.2.8" format="counter" sectionFormat="of" target="section-2.2.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-discriminator">Discriminator</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-extending-jtds-syntax">Extending JTD's Syntax</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-semantics">Semantics</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-allowing-additional-propert">Allowing Additional            Properties</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-errors">Errors</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-forms-2">Forms</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.3.2">
                  <li pn="section-toc.1-1.3.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.1.1"><xref derivedContent="3.3.1" format="counter" sectionFormat="of" target="section-3.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-empty-2">Empty</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.2.1"><xref derivedContent="3.3.2" format="counter" sectionFormat="of" target="section-3.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ref-2">Ref</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.3">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.3.1"><xref derivedContent="3.3.3" format="counter" sectionFormat="of" target="section-3.3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-type-2">Type</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.4">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.4.1"><xref derivedContent="3.3.4" format="counter" sectionFormat="of" target="section-3.3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-enum-2">Enum</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.5">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.5.1"><xref derivedContent="3.3.5" format="counter" sectionFormat="of" target="section-3.3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-elements-2">Elements</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.6">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.6.1"><xref derivedContent="3.3.6" format="counter" sectionFormat="of" target="section-3.3.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-properties-2">Properties</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.7">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.7.1"><xref derivedContent="3.3.7" format="counter" sectionFormat="of" target="section-3.3.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-values-2">Values</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.3.2.8">
                    <t indent="0" pn="section-toc.1-1.3.2.3.2.8.1"><xref derivedContent="3.3.8" format="counter" sectionFormat="of" target="section-3.3.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-discriminator-2">Discriminator</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-rationale-for-omitted-featu">Rationale for Omitted Features</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-support-for-64-bit-numbers">Support for 64-Bit Numbers</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-support-for-non-root-defini">Support for Non-root Definitions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-comparison-with-cddl">Comparison with CDDL</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="Appendix C" format="default" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example">Example</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.d"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgments">Acknowledgments</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.e"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-address">Author's Address</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">This document describes a schema language for JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/> called JSON Type Definition
      (JTD).</t>
      <t indent="0" pn="section-1-2">There exist many options for describing JSON data. JTD's niche is to
      focus on enabling code generation from schemas; to this end, JTD's
      expressiveness is intentionally limited to be no more powerful than what
      can be expressed in the type systems of mainstream programming
      languages.</t>
      <t indent="0" pn="section-1-3">The goals of JTD are to:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1-4">
        <li pn="section-1-4.1">Provide an unambiguous description of the overall structure of a
	JSON document.</li>
        <li pn="section-1-4.2">Be able to describe common JSON data types and structures (that
        is, the data types and structures necessary to support most JSON
        documents and that are widely understood in an interoperable way by
        JSON implementations).</li>
        <li pn="section-1-4.3">Provide a single format that is readable and editable by both
	humans and machines and that can be embedded within other JSON
	documents. This makes JTD a convenient format for tooling to accept as
	input or produce as output.</li>
        <li pn="section-1-4.4">Enable code generation from JTD schemas. JTD schemas are meant to
	be easy to convert into data structures idiomatic to mainstream
	programming languages.</li>
        <li pn="section-1-4.5">Provide a standardized format for error indicators when data does
	not conform with a schema.</li>
      </ul>
      <t indent="0" pn="section-1-5">JTD is intentionally designed as a rather minimal schema
      language. Thus, although JTD can describe some categories of JSON, it is
      not able to describe its own structure; this document uses Concise Data
      Definition Language (CDDL) <xref target="RFC8610" format="default" sectionFormat="of" derivedContent="RFC8610"/> to
      describe JTD's syntax. By keeping the expressiveness of the schema
      language minimal, JTD makes code generation and standardized error
      indicators easier to implement.</t>
      <t indent="0" pn="section-1-6">Examples in this document use constructs from the C++ programming
      language. These examples are provided to aid the reader in understanding
      the principles of JTD but are not limiting in any way.</t>
      <t indent="0" pn="section-1-7">JTD's feature set is designed to represent common patterns in
      JSON-using applications, while still having a clear correspondence to
      programming languages in widespread use. Thus, JTD supports:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1-8">
        <li pn="section-1-8.1">Signed and unsigned 8-, 16-, and 32-bit integers. A tool that
	converts JTD schemas into code can use "int8_t",
	"uint8_t", "int16_t", etc., or their equivalents in the
	target language, to represent these JTD types.</li>
        <li pn="section-1-8.2">A distinction between "float32" and "float64". Code
	generators can use "float" and "double", or their
	equivalents, for these JTD types.</li>
        <li pn="section-1-8.3">A "properties" form of JSON objects, corresponding to some sort of
	struct or record. The "properties" form of JSON objects is akin to a
	C++ "struct".</li>
        <li pn="section-1-8.4">A "values" form of JSON objects, corresponding to some sort of
	dictionary or associative array. The "values" form of JSON objects is
	akin to a C++ "std::map".</li>
        <li pn="section-1-8.5">A "discriminator" form of JSON objects, corresponding to a
	discriminated (or "tagged") union. The "discriminator" form of JSON
	objects is akin to a C++ "std::variant".</li>
      </ul>
      <t indent="0" pn="section-1-9">The principle of common patterns in JSON is why JTD does not support
      64-bit integers, as these are usually transmitted over JSON in
      non-interoperable (i.e., ignoring the recommendations in <xref target="RFC7493" sectionFormat="of" section="2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7493#section-2.2" derivedContent="RFC7493"/>) or mutually
      inconsistent ways. <xref target="other-considerations-int64" format="default" sectionFormat="of" derivedContent="Appendix A.1"/> further elaborates on why JTD does not support 64-bit
      integers.</t>
      <t indent="0" pn="section-1-10">The principle of clear correspondence to common programming languages
      is why JTD does not support, for example, a data type for integers up to
      2**53-1.</t>
      <t indent="0" pn="section-1-11">It is expected that for many use cases, a schema language of JTD's
      expressiveness is sufficient. Where a more expressive language is
      required, alternatives exist in CDDL and others.</t>
      <t indent="0" pn="section-1-12">This document does not have IETF consensus and is presented here to
      facilitate experimentation with the concept of JTD. The purpose of the
      experiment is to gain experience with JTD and to possibly revise this
      work accordingly.  If JTD is determined to be a valuable and popular
      approach, it may be taken to the IETF for further discussion and
      revision.</t>
      <t indent="0" pn="section-1-13">This document has the following structure.
      <xref target="syntax" format="default" sectionFormat="of" derivedContent="Section 2"/> defines the syntax of
      JTD. <xref target="semantics" format="default" sectionFormat="of" derivedContent="Section 3"/> describes the semantics
      of JTD; this includes determining whether some data satisfies a schema
      and what error indicators should be produced when the data is
      unsatisfactory. <xref target="other-considerations" format="default" sectionFormat="of" derivedContent="Appendix A"/>
      discusses why certain features are omitted from JTD. <xref target="comparison-with-cddl" format="default" sectionFormat="of" derivedContent="Appendix B"/> presents various JTD
      schemas and their CDDL equivalents.</t>
      <section anchor="terminology" numbered="true" toc="include" removeInRFC="false" pn="section-1.1">
        <name slugifiedName="name-terminology">Terminology</name>
        <t indent="0" pn="section-1.1-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as
    described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
        <t indent="0" pn="section-1.1-2">The term "JSON Pointer", when it appears in this document, is to be
	understood as it is defined in <xref target="RFC6901" format="default" sectionFormat="of" derivedContent="RFC6901"/>.</t>
        <t indent="0" pn="section-1.1-3">The terms "object", "member", "array", "number", "name", and
	"string" in this document are to be interpreted as described in <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>.</t>
        <t indent="0" pn="section-1.1-4">The term "instance", when it appears in this document, refers to a
	JSON value being validated against a JTD schema. This value can be an
	entire JSON document, or it can be a value embedded within a JSON
	document.</t>
      </section>
      <section anchor="scope-of-experiment" numbered="true" toc="include" removeInRFC="false" pn="section-1.2">
        <name slugifiedName="name-scope-of-experiment">Scope of Experiment</name>
        <t indent="0" pn="section-1.2-1">JTD is an experiment. Participation in this experiment consists of
	using JTD to validate or document interchanged JSON messages or
	building tooling atop of JTD. Feedback on the results of this
	experiment may be emailed to the author. Participants in this
	experiment are anticipated to mostly be nodes that provide or consume
	JSON-based APIs.</t>
        <t indent="0" pn="section-1.2-2">Nodes know if they are participating in the experiment if they are
	validating JSON messages against a JTD schema or if they are relying
	on another node to do so. Nodes are also participating in the
	experiment if they are running code generated from a JTD schema.</t>
        <t indent="0" pn="section-1.2-3">The risk of this experiment "escaping" takes the form of a
	JTD-supporting node expecting another node, which lacks such support,
	to validate messages against some JTD schema. In such a case, the
	outcome will likely be that the nodes fail to interchange information correctly.</t>
        <t indent="0" pn="section-1.2-4">This experiment will be deemed successful when JTD has been
	implemented by multiple independent parties and these parties
	successfully use JTD to facilitate information interchange within
	their internal systems or between systems operated by independent parties.</t>
        <t indent="0" pn="section-1.2-5">If this experiment is deemed successful, and JTD is determined to
	be a valuable and popular approach, it may be taken to the IETF for
	further discussion and revision. One possible outcome of this
	discussion and revision could be that a working group produces a
	Standards Track specification of JTD.</t>
        <t indent="0" pn="section-1.2-6">Some implementations of JTD, as well as code generators and other
	tooling related to JTD, are available at
	<eref target="https://github.com/jsontypedef" brackets="angle"/>.</t>
      </section>
    </section>
    <section anchor="syntax" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-syntax">Syntax</name>
      <t indent="0" pn="section-2-1">This section describes when a JSON document is a correct JTD
      schema. Because Concise Data Definition Language (CDDL) is well suited
      to the task of defining complex JSON formats, such as JTD schemas, this
      section uses CDDL to describe the format of JTD schemas.</t>
      <t indent="0" pn="section-2-2">JTD schemas may recursively contain other schemas. In this document,
      a "root schema" is one that is not contained within another schema,
      i.e., it is "top level".</t>
      <t indent="0" pn="section-2-3">A JTD schema is a JSON object taking on an appropriate form. JTD
      schemas may contain "additional data", discussed in <xref target="extending-JTD-syntax" format="default" sectionFormat="of" derivedContent="Section 2.3"/>. Root JTD schemas may
      optionally contain definitions (a mapping from names to schemas).</t>
      <t indent="0" pn="section-2-4">A correct root JTD schema <bcp14>MUST</bcp14> match the "root-schema" CDDL
      rule described in this section. A correct non-root JTD schema <bcp14>MUST</bcp14> match
      the "schema" CDDL rule described in this section.</t>
      <figure anchor="cddl-schema" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-cddl-definition-of-a-schema">CDDL Definition of a Schema</name>
        <sourcecode type="cddl" markers="false" pn="section-2-5.1">
; root-schema is identical to schema, but additionally allows for
; definitions.
;
; definitions are prohibited from appearing on non-root schemas.
root-schema = {
  ? definitions: { * tstr =&gt; { schema}},
  schema,
}
; schema is the main CDDL rule defining a JTD schema.
;
; All JTD schemas are JSON objects taking on one of eight forms
; listed here.
schema = (
  ref //
  type //
  enum //
  elements //
  properties //
  values //
  discriminator //
  empty //
)
; shared is a CDDL rule containing properties that all eight schema
; forms share.
shared = (
  ? metadata: { * tstr =&gt; any },
  ? nullable: bool,
)
; empty describes the "empty" schema form.
empty = shared
; ref describes the "ref" schema form.
;
; There are additional constraints on this form that cannot be
; expressed in CDDL. Section 2.2.2 describes these additional
; constraints in detail.
ref = ( ref: tstr, shared )
; type describes the "type" schema form.
type = (
  type: "boolean"
    / "float32"
    / "float64"
    / "int8"
    / "uint8"
    / "int16"
    / "uint16"
    / "int32"
    / "uint32"
    / "string"
    / "timestamp",
  shared,
)
; enum describes the "enum" schema form.
;
; There are additional constraints on this form that cannot be
; expressed in CDDL. Section 2.2.4 describes these additional
; constraints in detail.
enum = ( enum: [+ tstr], shared )
; elements describes the "elements" schema form.
elements = ( elements: { schema }, shared )
; properties describes the "properties" schema form.
;
; This CDDL rule is defined so that a schema of the "properties" form
; may omit a member named "properties" or a member named
; "optionalProperties", but not both.
;
; There are additional constraints on this form that cannot be
; expressed in CDDL. Section 2.2.6 describes these additional
; constraints in detail.
properties = (with-properties // with-optional-properties)
with-properties = (
  properties: { * tstr =&gt; { schema }},
  ? optionalProperties: { * tstr =&gt; { schema }},
  ? additionalProperties: bool,
  shared,
)
with-optional-properties = (
  ? properties: { * tstr =&gt; { schema }},
  optionalProperties: { * tstr =&gt; { schema }},
  ? additionalProperties: bool,
  shared,
)
; values describes the "values" schema form.
values = ( values: { schema }, shared )
; discriminator describes the "discriminator" schema form.
;
; There are additional constraints on this form that cannot be
; expressed in CDDL. Section 2.2.8 describes these additional
; constraints in detail.
discriminator = (
  discriminator: tstr,
  ; Note well: this rule is defined in terms of the "properties"
  ; CDDL rule, not the "schema" CDDL rule.
  mapping: { * tstr =&gt; { properties } }
  shared,
)
</sourcecode>
      </figure>
      <t indent="0" pn="section-2-6">The remainder of this section will describe constraints on JTD
      schemas that cannot be expressed in CDDL. It will also provide examples of
      valid and invalid JTD schemas.</t>
      <section anchor="root-vs-non-root-schemas" numbered="true" toc="include" removeInRFC="false" pn="section-2.1">
        <name slugifiedName="name-root-vs-non-root-schemas">Root vs. Non-root Schemas</name>
        <t indent="0" pn="section-2.1-1">The "root-schema" rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/> permits a member named "definitions",
	but the "schema" rule does not permit for such a member. This
	means that only root (i.e., "top-level") JTD schemas can have a
	"definitions" object, and subschemas may not.</t>
        <t indent="0" pn="section-2.1-2">Thus,</t>
        <sourcecode type="json" markers="false" pn="section-2.1-3">
   { "definitions": {} }
</sourcecode>
        <t indent="0" pn="section-2.1-4">is a correct JTD schema, but</t>
        <sourcecode type="json" markers="false" pn="section-2.1-5">
   {
     "definitions": {
       "foo": {
         "definitions": {}
       }
     }
   }
</sourcecode>
        <t indent="0" pn="section-2.1-6">is not, because subschemas (such as the object at
	"/definitions/foo") must not have a member named
	"definitions".</t>
      </section>
      <section anchor="forms" numbered="true" toc="include" removeInRFC="false" pn="section-2.2">
        <name slugifiedName="name-forms">Forms</name>
        <t indent="0" pn="section-2.2-1">JTD schemas (i.e., JSON objects satisfying the "schema" CDDL
	rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>) must take on
	one of eight forms. These forms are defined so as to be mutually
	exclusive; a schema cannot satisfy multiple forms at once.</t>
        <section anchor="syntax-form-empty" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.1">
          <name slugifiedName="name-empty">Empty</name>
          <t indent="0" pn="section-2.2.1-1">The "empty" form is defined by the "empty" CDDL
	  rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics
	  of the "empty" form are described in <xref target="semantics-form-empty" format="default" sectionFormat="of" derivedContent="Section 3.3.1"/>.</t>
          <t indent="0" pn="section-2.2.1-2">Despite the name "empty", schemas of the "empty" form are
	  not necessarily empty JSON objects. Like schemas of any of the eight
	  forms, schemas of the "empty" form may contain members named
	  "nullable" (whose value must be "true" or
	  "false") or "metadata" (whose value must be an object)
	  or both.</t>
          <t indent="0" pn="section-2.2.1-3">Thus,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.1-4">
   {}
</sourcecode>
          <t indent="0" pn="section-2.2.1-5">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.1-6">
   { "nullable": true }
</sourcecode>
          <t indent="0" pn="section-2.2.1-7">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.1-8">
   { "nullable": true, "metadata": { "foo": "bar" }}
</sourcecode>
          <t indent="0" pn="section-2.2.1-9">are correct JTD schemas of the "empty" form, but</t>
          <sourcecode type="json" markers="false" pn="section-2.2.1-10">
   { "nullable": "foo" }
</sourcecode>
          <t indent="0" pn="section-2.2.1-11">is not, because the value of the member named "nullable"
	  must be "true" or "false".</t>
        </section>
        <section anchor="syntax-form-ref" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.2">
          <name slugifiedName="name-ref">Ref</name>
          <t indent="0" pn="section-2.2.2-1">The "ref" form is defined by the "ref" CDDL rule in
	  <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics of the
	  "ref" form are described in <xref target="semantics-form-ref" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>.</t>
          <t indent="0" pn="section-2.2.2-2">For a schema of the "ref" form to be correct, the value of
	  the member named "ref" must refer to one of the definitions
	  found at the root level of the schema it appears in. More formally,
	  for a schema <em>S</em> of the "ref" form:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.2.2-3">
            <li pn="section-2.2.2-3.1">Let <em>B</em> be the root schema containing the schema or
	    the schema itself if it is a root schema.</li>
            <li pn="section-2.2.2-3.2">Let <em>R</em> be the value of the member of <em>S</em> with
	    the name "ref".</li>
          </ul>
          <t indent="0" pn="section-2.2.2-4">If the schema is correct, then <em>B</em> <bcp14>MUST</bcp14> have a member
	  <em>D</em> with the name "definitions", and <em>D</em> <bcp14>MUST</bcp14>
	  contain a member whose name equals <em>R</em>.</t>
          <t indent="0" pn="section-2.2.2-5">Thus,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.2-6">
   {
     "definitions": {
       "coordinates": {
         "properties": {
           "lat": { "type": "float32" },
           "lng": { "type": "float32" }
         }
       }
     },
     "properties": {
       "user_location": { "ref": "coordinates" },
       "server_location": { "ref": "coordinates" }
     }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.2-7">is a correct JTD schema and demonstrates the point of the
	  "ref" form: to avoid redefining the same thing
	  twice. However,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.2-8">
   { "ref": "foo" }
</sourcecode>
          <t indent="0" pn="section-2.2.2-9">is not a correct JTD schema, as there are no top-level
	  "definitions", and so the "ref" form cannot be
	  correct. Similarly,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.2-10">
   { "definitions": { "foo": {}}, "ref": "bar" }
</sourcecode>
          <t indent="0" pn="section-2.2.2-11">is not a correct JTD schema, as there is no member named
	  "bar" in the top-level "definitions".</t>
        </section>
        <section anchor="syntax-form-type" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.3">
          <name slugifiedName="name-type">Type</name>
          <t indent="0" pn="section-2.2.3-1">The "type" form is defined by the "type" CDDL rule
	  in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics of
	  the "type" form are described in <xref target="semantics-form-type" format="default" sectionFormat="of" derivedContent="Section 3.3.3"/>.</t>
          <t indent="0" pn="section-2.2.3-2">As an example of a correct JTD schema of the "type"
	  form,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.3-3">
   { "type": "uint8" }
</sourcecode>
          <t indent="0" pn="section-2.2.3-4">is a correct JTD schema, whereas</t>
          <sourcecode type="json" markers="false" pn="section-2.2.3-5">
   { "type": true }
</sourcecode>
          <t indent="0" pn="section-2.2.3-6">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.3-7">
   { "type": "foo" }
</sourcecode>
          <t indent="0" pn="section-2.2.3-8">are not correct schemas, as neither "true" nor the JSON
	  string "foo" are in the list of permitted values of the
	  "type" member described in the "type" CDDL rule in
	  <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>.</t>
        </section>
        <section anchor="syntax-form-enum" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.4">
          <name slugifiedName="name-enum">Enum</name>
          <t indent="0" pn="section-2.2.4-1">The "enum" form is defined by the "enum" CDDL rule
	  in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics of
	  the "enum" form are described in <xref target="semantics-form-enum" format="default" sectionFormat="of" derivedContent="Section 3.3.4"/>.</t>
          <t indent="0" pn="section-2.2.4-2">For a schema of the "enum" form to be correct, the value
	  of the member named "enum" must be a nonempty array of
	  strings, and that array must not contain duplicate values. More
	  formally, for a schema <em>S</em> of the "enum" form:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.2.4-3">
            <li pn="section-2.2.4-3.1">Let <em>E</em> be the value of the member of <em>S</em> with
	    name "enum".</li>
          </ul>
          <t indent="0" pn="section-2.2.4-4">If the schema is correct, then there <bcp14>MUST NOT</bcp14> exist any pair of
	  elements of <em>E</em> that encode equal string values, where
	  string equality is defined as in <xref target="RFC8259" sectionFormat="of" section="8.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8259#section-8.3" derivedContent="RFC8259"/>.</t>
          <t indent="0" pn="section-2.2.4-5">Thus,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.4-6">
   { "enum": [] }
</sourcecode>
          <t indent="0" pn="section-2.2.4-7">is not a correct JTD schema, as the value of the member named
	  "enum" must be nonempty, and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.4-8">
   { "enum": ["a\\b", "a\u005Cb"] }
</sourcecode>
          <t indent="0" pn="section-2.2.4-9">is not a correct JTD schema, as</t>
          <sourcecode type="json" markers="false" pn="section-2.2.4-10">
   "a\\b"
</sourcecode>
          <t indent="0" pn="section-2.2.4-11">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.4-12">
   "a\u005Cb"
</sourcecode>
          <t indent="0" pn="section-2.2.4-13">encode strings that are equal by the definition of string
	  equality given in <xref target="RFC8259" sectionFormat="of" section="8.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8259#section-8.3" derivedContent="RFC8259"/>. By contrast,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.4-14">
   { "enum": ["PENDING", "IN_PROGRESS", "DONE" ]}
</sourcecode>
          <t indent="0" pn="section-2.2.4-15">is an example of a correct JTD schema of the "enum"
	  form.</t>
        </section>
        <section anchor="syntax-form-elements" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.5">
          <name slugifiedName="name-elements">Elements</name>
          <t indent="0" pn="section-2.2.5-1">The "elements" form is defined by the "elements"
	  CDDL rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The
	  semantics of the "elements" form are described in <xref target="semantics-form-elements" format="default" sectionFormat="of" derivedContent="Section 3.3.5"/>.</t>
          <t indent="0" pn="section-2.2.5-2">As an example of a correct JTD schema of the "elements"
	  form,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.5-3">
   { "elements": { "type": "uint8" }}
</sourcecode>
          <t indent="0" pn="section-2.2.5-4">is a correct JTD schema, whereas</t>
          <sourcecode type="json" markers="false" pn="section-2.2.5-5">
   { "elements": true }
</sourcecode>
          <t indent="0" pn="section-2.2.5-6">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.5-7">
   { "elements": { "type": "foo" } }
</sourcecode>
          <t indent="0" pn="section-2.2.5-8">are not correct schemas, as neither</t>
          <sourcecode type="json" markers="false" pn="section-2.2.5-9">
   true
</sourcecode>
          <t indent="0" pn="section-2.2.5-10">nor</t>
          <sourcecode type="json" markers="false" pn="section-2.2.5-11">
   { "type": "foo" }
</sourcecode>
          <t indent="0" pn="section-2.2.5-12">are correct JTD schemas, and the value of the member named
	  "elements" must be a correct JTD schema.</t>
        </section>
        <section anchor="syntax-form-properties" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.6">
          <name slugifiedName="name-properties">Properties</name>
          <t indent="0" pn="section-2.2.6-1">The "properties" form is defined by the
	  "properties" CDDL rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics of the "properties" form
	  are described in <xref target="semantics-form-props" format="default" sectionFormat="of" derivedContent="Section 3.3.6"/>.</t>
          <t indent="0" pn="section-2.2.6-2">For a schema of the "properties" form to be correct,
	  properties must either be required (i.e., in "properties") or
	  optional (i.e., in "optionalProperties"), but not both.</t>
          <t indent="0" pn="section-2.2.6-3">More formally, if a schema has both a member named
          "properties" (with value <em>P</em>) and another member named
          "optionalProperties" (with value <em>O</em>), then <em>O</em>
          and <em>P</em> <bcp14>MUST NOT</bcp14> have any member names in
          common; that is, no member of <em>P</em> may have a name equal to
          the name of any member of <em>O</em>, under the definition of string
          equality given in <xref target="RFC8259" sectionFormat="of" section="8.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8259#section-8.3" derivedContent="RFC8259"/>.</t>
          <t indent="0" pn="section-2.2.6-4">Thus,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.6-5">
   {
     "properties": { "confusing": {} },
     "optionalProperties": { "confusing": {} }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.6-6">is not a correct JTD schema, as "confusing" appears in
	  both "properties" and "optionalProperties". By
	  contrast,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.6-7">
   {
     "properties": {
       "users": {
         "elements": {
           "properties": {
             "id": { "type": "string" },
             "name": { "type": "string" },
             "create_time": { "type": "timestamp" }
           },
           "optionalProperties": {
             "delete_time": { "type": "timestamp" }
           }
         }
       },
       "next_page_token": { "type": "string" }
     }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.6-8">is a correct JTD schema of the "properties" form,
	  describing a paginated list of users and demonstrating the recursive
	  nature of the syntax of JTD schemas.</t>
        </section>
        <section anchor="syntax-form-values" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.7">
          <name slugifiedName="name-values">Values</name>
          <t indent="0" pn="section-2.2.7-1">The "values" form is defined by the "values" CDDL
	  rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics
	  of the "values" form are described in <xref target="semantics-form-values" format="default" sectionFormat="of" derivedContent="Section 3.3.7"/>.</t>
          <t indent="0" pn="section-2.2.7-2">As an example of a correct JTD schema of the "values"
	  form,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.7-3">
   { "values": { "type": "uint8" }}
</sourcecode>
          <t indent="0" pn="section-2.2.7-4">is a correct JTD schema, whereas</t>
          <sourcecode type="json" markers="false" pn="section-2.2.7-5">
   { "values": true }
</sourcecode>
          <t indent="0" pn="section-2.2.7-6">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.7-7">
   { "values": { "type": "foo" } }
</sourcecode>
          <t indent="0" pn="section-2.2.7-8">are not correct schemas, as neither</t>
          <sourcecode type="json" markers="false" pn="section-2.2.7-9">
   true
</sourcecode>
          <t indent="0" pn="section-2.2.7-10">nor</t>
          <sourcecode type="json" markers="false" pn="section-2.2.7-11">
   { "type": "foo" }
</sourcecode>
          <t indent="0" pn="section-2.2.7-12">are correct JTD schemas, and the value of the member named
	  "values" must be a correct JTD schema.</t>
        </section>
        <section anchor="syntax-form-discriminator" numbered="true" toc="include" removeInRFC="false" pn="section-2.2.8">
          <name slugifiedName="name-discriminator">Discriminator</name>
          <t indent="0" pn="section-2.2.8-1">The "discriminator" form is defined by the
	  "discriminator" CDDL rule in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The semantics of the "discriminator" form
	  are described in <xref target="semantics-form-discriminator" format="default" sectionFormat="of" derivedContent="Section 3.3.8"/>. Understanding the semantics of the
	  "discriminator" form will likely aid the reader in
	  understanding why this section provides constraints on the
	  "discriminator" form beyond those in <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>.</t>
          <t indent="0" pn="section-2.2.8-2">To prevent ambiguous or unsatisfiable constraints on the
	  "discriminator" property of a tagged union, an additional
	  constraint on schemas of the "discriminator" form exists. For
	  schemas of the "discriminator" form:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.2.8-3">
            <li pn="section-2.2.8-3.1">Let <em>D</em> be the member of the schema with the name
	    "discriminator".</li>
            <li pn="section-2.2.8-3.2">Let <em>M</em> be the member of the schema with the name
	    "mapping".</li>
          </ul>
          <t indent="0" pn="section-2.2.8-4">If the schema is correct, then all member values <em>S</em> of
	  <em>M</em> will be schemas of the "properties" form. For each
	  <em>S</em>:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2.2.8-5">
            <li pn="section-2.2.8-5.1">If <em>S</em> has a member <em>N</em> whose name equals
	    "nullable", <em>N</em>'s value <bcp14>MUST NOT</bcp14> be the JSON
	    primitive value "true".</li>
            <li pn="section-2.2.8-5.2">For each member <em>P</em> of <em>S</em> whose name equals
	    "properties" or "optionalProperties", <em>P</em>'s
	    value, which must be an object, <bcp14>MUST NOT</bcp14> contain any members whose
	    name equals <em>D</em>'s value.</li>
          </ul>
          <t indent="0" pn="section-2.2.8-6">Thus,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.8-7">
   {
     "discriminator": "event_type",
     "mapping": {
       "can_the_object_be_null_or_not?": {
         "nullable": true,
         "properties": { "foo": { "type": "string" } }}
       }
     }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.8-8">is an incorrect schema, as a member of "mapping" has a
	  member named "nullable" whose value is "true". This
	  would suggest that the instance may be null. Yet, the top-level
	  schema lacks such a "nullable" set to "true", which
	  would suggest that the instance in fact cannot be null. If this were
	  a correct JTD schema, it would be unclear which piece of information
	  takes precedence.</t>
          <t indent="0" pn="section-2.2.8-9">JTD handles such possible ambiguity by disallowing, at the
	  syntactic level, the possibility of contradictory specifications of
	  whether an instance described by a schema of the
	  "discriminator" form may be null. The schemas in a
	  discriminator "mapping" cannot have "nullable" set to
	  "true"; only the discriminator itself can use
	  "nullable" in this way.</t>
          <t indent="0" pn="section-2.2.8-10">It also follows that</t>
          <sourcecode type="json" markers="false" pn="section-2.2.8-11">
   {
     "discriminator": "event_type",
     "mapping": {
       "is_event_type_a_string_or_a_float32?": {
         "properties": { "event_type": { "type": "float32" }}
       }
     }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.8-12">and</t>
          <sourcecode type="json" markers="false" pn="section-2.2.8-13">
   {
     "discriminator": "event_type",
     "mapping": {
       "is_event_type_a_string_or_an_optional_float32?": {
         "optionalProperties": { "event_type": { "type": "float32" }}
       }
     }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.8-14">are incorrect schemas, as "event_type" is both the value
	  of "discriminator" and a member name in one of the
	  "mapping" member "properties" or
	  "optionalProperties". This is ambiguous, because ordinarily
	  the "discriminator" keyword would indicate that
	  "event_type" is expected to be a string, but another part of
	  the schema specifies that "event_type" is expected to be a
	  number.</t>
          <t indent="0" pn="section-2.2.8-15">JTD handles such possible ambiguity by disallowing, at the
	  syntactic level, the possibility of contradictory specifications of
	  discriminator "tags". Discriminator "tags" cannot be redefined in
	  other parts of the schema.</t>
          <t indent="0" pn="section-2.2.8-16">By contrast,</t>
          <sourcecode type="json" markers="false" pn="section-2.2.8-17">
   {
     "discriminator": "event_type",
     "mapping": {
       "account_deleted": {
         "properties": {
           "account_id": { "type": "string" }
         }
       },
       "account_payment_plan_changed": {
         "properties": {
           "account_id": { "type": "string" },
           "payment_plan": { "enum": ["FREE", "PAID"] }
         },
         "optionalProperties": {
           "upgraded_by": { "type": "string" }
         }
       }
     }
   }
</sourcecode>
          <t indent="0" pn="section-2.2.8-18">is a correct schema, describing a pattern of data common in
	  JSON-based messaging systems. <xref target="semantics-form-discriminator" format="default" sectionFormat="of" derivedContent="Section 3.3.8"/> provides
	  examples of what this schema accepts and rejects.</t>
        </section>
      </section>
      <section anchor="extending-JTD-syntax" numbered="true" toc="include" removeInRFC="false" pn="section-2.3">
        <name slugifiedName="name-extending-jtds-syntax">Extending JTD's Syntax</name>
        <t indent="0" pn="section-2.3-1">This document does not describe any extension mechanisms for JTD
	schema validation, which is described in <xref target="semantics" format="default" sectionFormat="of" derivedContent="Section 3"/>. However, schemas are defined to optionally contain
	a "metadata" keyword, whose value is an arbitrary JSON
	object. Call the members of this object "metadata members".</t>
        <t indent="0" pn="section-2.3-2">Users <bcp14>MAY</bcp14> add metadata members to JTD schemas to convey information
	that is not pertinent to validation. For example, such metadata
	members could provide hints to code generators or trigger some
	special behavior for a library that generates user interfaces from
	schemas.</t>
        <t indent="0" pn="section-2.3-3">Users <bcp14>SHOULD NOT</bcp14> expect metadata members to be understood by other
	parties. As a result, if consistent validation with other parties is a
	requirement, users <bcp14>MUST NOT</bcp14> use metadata members to affect how schema
	validation, as described in <xref target="semantics" format="default" sectionFormat="of" derivedContent="Section 3"/>, works.</t>
        <t indent="0" pn="section-2.3-4">Users <bcp14>MAY</bcp14> expect metadata members to be understood by other
	parties and <bcp14>MAY</bcp14> use metadata members to affect how schema validation
	works, if these other parties are somehow known to support these
	metadata members. For example, two parties may agree, out of band,
	that they will support an extended JTD with a custom metadata member
	that affects validation.</t>
      </section>
    </section>
    <section anchor="semantics" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-semantics">Semantics</name>
      <t indent="0" pn="section-3-1">This section describes when an instance is valid against a correct
      JTD schema and the error indicators to produce when an instance is
      invalid.</t>
      <section anchor="allow-additional-properties" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-allowing-additional-propert">Allowing Additional            Properties</name>
        <t indent="0" pn="section-3.1-1">Users will have different desired behavior with respect to
	"unspecified" members in an instance. For example, consider the JTD
	schema in <xref target="JTD-properties-a" format="default" sectionFormat="of" derivedContent="Figure 2"/>:</t>
        <figure anchor="JTD-properties-a" align="left" suppress-title="false" pn="figure-2">
          <name slugifiedName="name-an-illustrative-jtd-schema">An Illustrative JTD Schema</name>
          <sourcecode type="json" markers="false" pn="section-3.1-2.1">
{ "properties": { "a": { "type": "string" }}}
</sourcecode>
        </figure>
        <t indent="0" pn="section-3.1-3">Some users may expect that</t>
        <sourcecode type="json" markers="false" pn="section-3.1-4">
   {"a": "foo", "b": "bar"}
</sourcecode>
        <t indent="0" pn="section-3.1-5">satisfies the schema in <xref target="JTD-properties-a" format="default" sectionFormat="of" derivedContent="Figure 2"/>. Others may disagree, as "b" is not one of
	the properties described in the schema. In this document, allowing
	such "unspecified" members, like "b" in this example, happens
	when evaluation is in "allow additional properties" mode.</t>
        <t indent="0" pn="section-3.1-6">Evaluation of a schema does not allow additional properties by
        default, but this can be overridden by having the schema include a
        member named "additionalProperties", where that member has a
        value of "true".</t>
        <t indent="0" pn="section-3.1-7">More formally, evaluation of a schema <em>S</em> is in "allow
	additional properties" mode if there exists a member of <em>S</em>
	whose name equals "additionalProperties" and whose value is a
	boolean "true". Otherwise, evaluation of <em>S</em> is not in
	"allow additional properties" mode.</t>
        <t indent="0" pn="section-3.1-8">See <xref target="semantics-form-props" format="default" sectionFormat="of" derivedContent="Section 3.3.6"/> for how
	allowing unknown properties affects schema evaluation, but briefly,
	the schema</t>
        <sourcecode type="json" markers="false" pn="section-3.1-9">
   { "properties": { "a": { "type": "string" }}}
</sourcecode>
        <t indent="0" pn="section-3.1-10">rejects</t>
        <sourcecode type="json" markers="false" pn="section-3.1-11">
   { "a": "foo", "b": "bar" }
</sourcecode>
        <t indent="0" pn="section-3.1-12">However, the schema</t>
        <sourcecode type="json" markers="false" pn="section-3.1-13">
   {
     "additionalProperties": true,
     "properties": { "a": { "type": "string" }}
   }
</sourcecode>
        <t indent="0" pn="section-3.1-14">accepts</t>
        <sourcecode type="json" markers="false" pn="section-3.1-15">
   { "a": "foo", "b": "bar" }
</sourcecode>
        <t indent="0" pn="section-3.1-16">Note that "additionalProperties" does not get "inherited" by
	subschemas. For example, the JTD schema</t>
        <sourcecode type="json" markers="false" pn="section-3.1-17">
   {
     "additionalProperties": true,
     "properties": {
       "a": {
         "properties": {
           "b": { "type": "string" }
         }
       }
     }
   }
</sourcecode>
        <t indent="0" pn="section-3.1-18">accepts</t>
        <sourcecode type="json" markers="false" pn="section-3.1-19">
   { "a": { "b": "c" }, "foo": "bar" }
</sourcecode>
        <t indent="0" pn="section-3.1-20">but rejects</t>
        <sourcecode type="json" markers="false" pn="section-3.1-21">
   { "a": { "b": "c", "foo": "bar" }}
</sourcecode>
        <t indent="0" pn="section-3.1-22">because the "additionalProperties" at the root level does
	not affect the behavior of subschemas.</t>
        <t indent="0" pn="section-3.1-23">Note from <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/> that only
	schemas of the "properties" form may have a member named
	"additionalProperties".</t>
      </section>
      <section anchor="errors" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-errors">Errors</name>
        <t indent="0" pn="section-3.2-1">To facilitate consistent validation error handling, this document
	specifies a standard error indicator format. Implementations <bcp14>SHOULD</bcp14>
	support producing error indicators in this standard form.</t>
        <t indent="0" pn="section-3.2-2">The standard error indicator format is a JSON array. The order of
	the elements of this array is not specified. The elements of this
	array are JSON objects with:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.2-3">
          <li pn="section-3.2-3.1">A member with the name "instancePath", whose value is a
	  JSON string encoding a JSON Pointer. This JSON Pointer will point to
	  the part of the instance that was rejected.</li>
          <li pn="section-3.2-3.2">A member with the name "schemaPath", whose value is a
	  JSON string encoding a JSON Pointer. This JSON Pointer will point to
	  the part of the schema that rejected the instance.</li>
        </ul>
        <t indent="0" pn="section-3.2-4">The values for "instancePath" and "schemaPath" depend
	on the form of the schema and are described in detail in <xref target="semantics-forms" format="default" sectionFormat="of" derivedContent="Section 3.3"/>.</t>
      </section>
      <section anchor="semantics-forms" numbered="true" toc="include" removeInRFC="false" pn="section-3.3">
        <name slugifiedName="name-forms-2">Forms</name>
        <t indent="0" pn="section-3.3-1">This section describes, for each of the eight JTD schema forms, the
	rules dictating whether an instance is accepted, as well as the error
	indicators to produce when an instance is invalid.</t>
        <t indent="0" pn="section-3.3-2">The forms a correct schema may take on are formally described in
	<xref target="syntax" format="default" sectionFormat="of" derivedContent="Section 2"/>.</t>
        <section anchor="semantics-form-empty" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.1">
          <name slugifiedName="name-empty-2">Empty</name>
          <t indent="0" pn="section-3.3.1-1">The "empty" form is meant to describe instances whose
	  values are unknown, unpredictable, or otherwise unconstrained by the
	  schema. The syntax of the "empty" form is described in <xref target="syntax-form-empty" format="default" sectionFormat="of" derivedContent="Section 2.2.1"/>.</t>
          <t indent="0" pn="section-3.3.1-2">If a schema is of the "empty" form, then it accepts all
	  instances. A schema of the "empty" form will never produce any error
	  indicators.</t>
        </section>
        <section anchor="semantics-form-ref" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.2">
          <name slugifiedName="name-ref-2">Ref</name>
          <t indent="0" pn="section-3.3.2-1">The "ref" form is for when a schema is defined in terms of
	  something in the "definitions" of the root schema. The "ref"
	  form enables schemas to be less repetitive and also enables
	  describing recursive structures. The syntax of the "ref" form
	  is described in <xref target="syntax-form-ref" format="default" sectionFormat="of" derivedContent="Section 2.2.2"/>.</t>
          <t indent="0" pn="section-3.3.2-2">If a schema is of the "ref" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.2-3">
            <li pn="section-3.3.2-3.1">
              <t indent="0" pn="section-3.3.2-3.1.1">If the schema has a member named "nullable" whose value
	    is the boolean "true", and the instance is the JSON
	    primitive value "null", then the schema accepts the
	    instance.</t>
              <t indent="0" pn="section-3.3.2-3.1.2">Otherwise:</t>
              <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.3.2-3.1.3">
                <li pn="section-3.3.2-3.1.3.1">Let <em>R</em> be the value of the schema member with the name
	    "ref".</li>
                <li pn="section-3.3.2-3.1.3.2">Let <em>B</em> be the root schema containing the schema or
	    the schema itself if it is a root schema.</li>
                <li pn="section-3.3.2-3.1.3.3">Let <em>D</em> be the member of <em>B</em> with the name

	    "definitions". Per <xref target="syntax" format="default" sectionFormat="of" derivedContent="Section 2"/>,
	    we know <em>D</em> exists.</li>
                <li pn="section-3.3.2-3.1.3.4">Let <em>S</em> be the value of the member of <em>D</em> whose
	    name equals <em>R</em>. Per <xref target="syntax-form-ref" format="default" sectionFormat="of" derivedContent="Section 2.2.2"/>, we know <em>S</em> exists and is a schema.</li>
              </ul>
            </li>
          </ul>
          <t indent="0" pn="section-3.3.2-4">The schema accepts the instance if and only if <em>S</em> accepts
	  the instance. Otherwise, the error indicators to return in this case
	  are the union of the error indicators from evaluating <em>S</em>
	  against the instance.</t>
          <t indent="0" pn="section-3.3.2-5">For example, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-6">
   {
     "definitions": { "a": { "type": "float32" }},
     "ref": "a"
   }
</sourcecode>
          <t indent="0" pn="section-3.3.2-7">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-8">
   123
</sourcecode>
          <t indent="0" pn="section-3.3.2-9">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-10">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.2-11">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-12">
   [{ "instancePath": "", "schemaPath": "/definitions/a/type" }]
</sourcecode>
          <t indent="0" pn="section-3.3.2-13">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-14">
   {
     "definitions": { "a": { "type": "float32" }},
     "ref": "a",
     "nullable": true
   }
</sourcecode>
          <t indent="0" pn="section-3.3.2-15">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-16">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.2-17">because the schema has a "nullable" member whose value is
	  "true".</t>
          <t indent="0" pn="section-3.3.2-18">Note that "nullable" being "false" has no effect in
	  any of the forms described in this document. For example, the
	  schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-19">
   {
     "definitions": { "a": { "nullable": false, "type": "float32" }},
     "ref": "a",
     "nullable": true
   }
</sourcecode>
          <t indent="0" pn="section-3.3.2-20">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.2-21">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.2-22">In other words, it is not the case that putting a "false"
	  value for "nullable" will ever override a "nullable"
	  member in schemas of the "ref" form; it is correct, though
	  ineffectual, to have a value of "false" for the
	  "nullable" member in a schema.</t>
        </section>
        <section anchor="semantics-form-type" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.3">
          <name slugifiedName="name-type-2">Type</name>
          <t indent="0" pn="section-3.3.3-1">The "type" form is meant to describe instances whose value
	  is a boolean, number, string, or timestamp <xref target="RFC3339" format="default" sectionFormat="of" derivedContent="RFC3339"/>. The syntax of the "type" form is
	  described in <xref target="syntax-form-type" format="default" sectionFormat="of" derivedContent="Section 2.2.3"/>.</t>
          <t indent="0" pn="section-3.3.3-2">If a schema is of the "type" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.3-3">
            <li pn="section-3.3.3-3.1">
              <t indent="0" pn="section-3.3.3-3.1.1">If the schema has a member named "nullable" whose value
	    is the boolean "true", and the instance is the JSON
	    primitive value "null", then the schema accepts the
	    instance.</t>
              <t indent="0" pn="section-3.3.3-3.1.2">Otherwise:</t>
              <ul empty="true" bare="false" indent="3" spacing="normal" pn="section-3.3.3-3.1.3">
                <li pn="section-3.3.3-3.1.3.1">Let <em>T</em> be the value of the member with the name "type". The
following table describes whether the instance is accepted, as a function of
<em>T</em>'s value:</li>
                <li pn="section-3.3.3-3.1.3.2">
                  <table anchor="type-values" align="center" pn="table-1">
                    <name slugifiedName="name-accepted-values-for-type">Accepted Values for Type</name>
                    <thead>
                      <tr>
                        <th align="left" colspan="1" rowspan="1">If <em>"T"</em> equals ...</th>
                        <th align="left" colspan="1" rowspan="1">then the instance is accepted if it is ...</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">boolean</td>
                        <td align="left" colspan="1" rowspan="1">equal to "true" or "false"</td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">float32</td>
                        <td align="left" colspan="1" rowspan="1">a JSON number</td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">float64</td>
                        <td align="left" colspan="1" rowspan="1">a JSON number</td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">int8</td>
                        <td align="left" colspan="1" rowspan="1">See <xref target="int-ranges" format="default" sectionFormat="of" derivedContent="Table 2"/></td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">uint8</td>
                        <td align="left" colspan="1" rowspan="1">See <xref target="int-ranges" format="default" sectionFormat="of" derivedContent="Table 2"/></td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">int16</td>
                        <td align="left" colspan="1" rowspan="1">See <xref target="int-ranges" format="default" sectionFormat="of" derivedContent="Table 2"/></td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">uint16</td>
                        <td align="left" colspan="1" rowspan="1">See <xref target="int-ranges" format="default" sectionFormat="of" derivedContent="Table 2"/></td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">int32</td>
                        <td align="left" colspan="1" rowspan="1">See <xref target="int-ranges" format="default" sectionFormat="of" derivedContent="Table 2"/></td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">uint32</td>
                        <td align="left" colspan="1" rowspan="1">See <xref target="int-ranges" format="default" sectionFormat="of" derivedContent="Table 2"/></td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">string</td>
                        <td align="left" colspan="1" rowspan="1">a JSON string</td>
                      </tr>
                      <tr>
                        <td align="left" colspan="1" rowspan="1">timestamp</td>
                        <td align="left" colspan="1" rowspan="1">a JSON string that follows the standard
		format described in <xref target="RFC3339" format="default" sectionFormat="of" derivedContent="RFC3339"/>,
		as refined by <xref target="RFC4287" sectionFormat="of" section="3.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4287#section-3.3" derivedContent="RFC4287"/></td>
                      </tr>
                    </tbody>
                  </table>
                  <t indent="0" pn="section-3.3.3-3.1.3.2.2">"float32" and "float64" are distinguished from each
	  other in their intent. "float32" indicates data intended to
	  be processed as an IEEE 754 single-precision float, whereas
	  "float64" indicates data intended to be processed as an IEEE
	  754 double-precision float. Tools that generate code from JTD
	  schemas will likely produce different code for "float32" than
	  for "float64".</t>
                </li>
              </ul>
            </li>
          </ul>
          <t indent="0" pn="section-3.3.3-4">If <em>T</em> starts with "int" or "uint", then the
	  instance is accepted if and only if it is a JSON number encoding a
	  value with zero fractional part. Depending on the value of
	  <em>T</em>, this encoded number must additionally fall within a
	  particular range:</t>
          <table anchor="int-ranges" align="center" pn="table-2">
            <name slugifiedName="name-ranges-for-integer-types">Ranges for Integer Types</name>
            <thead>
              <tr>
                <th align="left" colspan="1" rowspan="1">
                  <em>"T"</em></th>
                <th align="left" colspan="1" rowspan="1">Minimum Value (Inclusive)</th>
                <th align="left" colspan="1" rowspan="1">Maximum Value (Inclusive)</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" colspan="1" rowspan="1">int8</td>
                <td align="left" colspan="1" rowspan="1">-128</td>
                <td align="left" colspan="1" rowspan="1">127</td>
              </tr>
              <tr>
                <td align="left" colspan="1" rowspan="1">uint8</td>
                <td align="left" colspan="1" rowspan="1">0</td>
                <td align="left" colspan="1" rowspan="1">255</td>
              </tr>
              <tr>
                <td align="left" colspan="1" rowspan="1">int16</td>
                <td align="left" colspan="1" rowspan="1">-32,768</td>
                <td align="left" colspan="1" rowspan="1">32,767</td>
              </tr>
              <tr>
                <td align="left" colspan="1" rowspan="1">uint16</td>
                <td align="left" colspan="1" rowspan="1">0</td>
                <td align="left" colspan="1" rowspan="1">65,535</td>
              </tr>
              <tr>
                <td align="left" colspan="1" rowspan="1">int32</td>
                <td align="left" colspan="1" rowspan="1">-2,147,483,648</td>
                <td align="left" colspan="1" rowspan="1">2,147,483,647</td>
              </tr>
              <tr>
                <td align="left" colspan="1" rowspan="1">uint32</td>
                <td align="left" colspan="1" rowspan="1">0</td>
                <td align="left" colspan="1" rowspan="1">4,294,967,295</td>
              </tr>
            </tbody>
          </table>
          <t indent="0" pn="section-3.3.3-6">Note that</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-7">
   10
</sourcecode>
          <t indent="0" pn="section-3.3.3-8">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-9">
   10.0
</sourcecode>
          <t indent="0" pn="section-3.3.3-10">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-11">
   1.0e1
</sourcecode>
          <t indent="0" pn="section-3.3.3-12">encode values with zero fractional part, whereas</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-13">
   10.5
</sourcecode>
          <t indent="0" pn="section-3.3.3-14">encodes a number with a non-zero fractional part. Thus, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-15">
   {"type": "int8"}
</sourcecode>
          <t indent="0" pn="section-3.3.3-16">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-17">
   10
</sourcecode>
          <t indent="0" pn="section-3.3.3-18">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-19">
   10.0
</sourcecode>
          <t indent="0" pn="section-3.3.3-20">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-21">
   1.0e1
</sourcecode>
          <t indent="0" pn="section-3.3.3-22">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-23">
   10.5
</sourcecode>
          <t indent="0" pn="section-3.3.3-24">as well as</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-25">
   false
</sourcecode>
          <t indent="0" pn="section-3.3.3-26">because "false" is not a number at all.</t>
          <t indent="0" pn="section-3.3.3-27">If the instance is not accepted, then the error indicator for
	  this case shall have an "instancePath" pointing to the
	  instance and a "schemaPath" pointing to the schema member
	  with the name "type".</t>
          <t indent="0" pn="section-3.3.3-28">For example, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-29">
   {"type": "boolean"}
</sourcecode>
          <t indent="0" pn="section-3.3.3-30">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-31">
   false
</sourcecode>
          <t indent="0" pn="section-3.3.3-32">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-33">
   127
</sourcecode>
          <t indent="0" pn="section-3.3.3-34">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-35">
   {"type": "float32"}
</sourcecode>
          <t indent="0" pn="section-3.3.3-36">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-37">
   10.5
</sourcecode>
          <t indent="0" pn="section-3.3.3-38">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-39">
   127
</sourcecode>
          <t indent="0" pn="section-3.3.3-40">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-41">
   false
</sourcecode>
          <t indent="0" pn="section-3.3.3-42">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-43">
   {"type": "string"}
</sourcecode>
          <t indent="0" pn="section-3.3.3-44">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-45">
   "1985-04-12T23:20:50.52Z"
</sourcecode>
          <t indent="0" pn="section-3.3.3-46">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-47">
   "foo"
</sourcecode>
          <t indent="0" pn="section-3.3.3-48">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-49">
   false
</sourcecode>
          <t indent="0" pn="section-3.3.3-50">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-51">
   {"type": "timestamp"}
</sourcecode>
          <t indent="0" pn="section-3.3.3-52">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-53">
   "1985-04-12T23:20:50.52Z"
</sourcecode>
          <t indent="0" pn="section-3.3.3-54">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-55">
   "foo"
</sourcecode>
          <t indent="0" pn="section-3.3.3-56">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-57">
   false
</sourcecode>
          <t indent="0" pn="section-3.3.3-58">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-59">
   {"type": "boolean", "nullable": true}
</sourcecode>
          <t indent="0" pn="section-3.3.3-60">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-61">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.3-62">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-63">
   false
</sourcecode>
          <t indent="0" pn="section-3.3.3-64">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-65">
   127
</sourcecode>
          <t indent="0" pn="section-3.3.3-66">In all of the examples of rejected instances given in this
	  section, the error indicator to produce is:</t>
          <sourcecode type="json" markers="false" pn="section-3.3.3-67">
   [{ "instancePath": "", "schemaPath": "/type" }]
</sourcecode>
        </section>
        <section anchor="semantics-form-enum" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.4">
          <name slugifiedName="name-enum-2">Enum</name>
          <t indent="0" pn="section-3.3.4-1">The "enum" form is meant to describe instances whose value
	  must be one of a given set of string values. The syntax of the
	  "enum" form is described in <xref target="syntax-form-enum" format="default" sectionFormat="of" derivedContent="Section 2.2.4"/>.</t>
          <t indent="0" pn="section-3.3.4-2">If a schema is of the "enum" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.4-3">
            <li pn="section-3.3.4-3.1">
              <t indent="0" pn="section-3.3.4-3.1.1">If the schema has a member named "nullable" whose value
	    is the boolean "true", and the instance is the JSON
	    primitive value "null", then the schema accepts the
	    instance.</t>
              <t indent="0" pn="section-3.3.4-3.1.2">Otherwise:</t>
              <ul empty="true" bare="false" indent="3" spacing="normal" pn="section-3.3.4-3.1.3">
                <li pn="section-3.3.4-3.1.3.1">Let <em>E</em> be the value of the schema member with the name "enum". The
instance is accepted if and only if it is equal to one of the elements of
<em>E</em>.
</li>
              </ul>
            </li>
          </ul>
          <t indent="0" pn="section-3.3.4-4">If the instance is not accepted, then the error indicator for
	  this case shall have an "instancePath" pointing to the
	  instance and a "schemaPath" pointing to the schema member
	  with the name "enum".</t>
          <t indent="0" pn="section-3.3.4-5">For example, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-6">
   { "enum": ["PENDING", "DONE", "CANCELED"] }
</sourcecode>
          <t indent="0" pn="section-3.3.4-7">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-8">
   "PENDING"
</sourcecode>
          <t indent="0" pn="section-3.3.4-9">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-10">
   "DONE"
</sourcecode>
          <t indent="0" pn="section-3.3.4-11">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-12">
   "CANCELED"
</sourcecode>
          <t indent="0" pn="section-3.3.4-13">but rejects all of</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-14">
   0
</sourcecode>
          <t indent="0" pn="section-3.3.4-15">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-16">
   1
</sourcecode>
          <t indent="0" pn="section-3.3.4-17">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-18">
   2
</sourcecode>
          <t indent="0" pn="section-3.3.4-19">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-20">
   "UNKNOWN"
</sourcecode>
          <t indent="0" pn="section-3.3.4-21">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-22">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.4-23">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-24">
   [{ "instancePath": "", "schemaPath": "/enum" }]
</sourcecode>
          <t indent="0" pn="section-3.3.4-25">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-26">
   { "enum": ["PENDING", "DONE", "CANCELED"], "nullable": true }
</sourcecode>
          <t indent="0" pn="section-3.3.4-27">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-28">
   "PENDING"
</sourcecode>
          <t indent="0" pn="section-3.3.4-29">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-30">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.4-31">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-32">
   1
</sourcecode>
          <t indent="0" pn="section-3.3.4-33">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-34">
   "UNKNOWN"
</sourcecode>
          <t indent="0" pn="section-3.3.4-35">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.4-36">
   [{ "instancePath": "", "schemaPath": "/enum" }]
</sourcecode>
        </section>
        <section anchor="semantics-form-elements" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.5">
          <name slugifiedName="name-elements-2">Elements</name>
          <t indent="0" pn="section-3.3.5-1">The "elements" form is meant to describe instances that
	  must be arrays. A further subschema describes the elements of the
	  array. The syntax of the "elements" form is described in
	  <xref target="syntax-form-elements" format="default" sectionFormat="of" derivedContent="Section 2.2.5"/>.</t>
          <t indent="0" pn="section-3.3.5-2">If a schema is of the "elements" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.5-3">
            <li pn="section-3.3.5-3.1">
              <t indent="0" pn="section-3.3.5-3.1.1">If the schema has a member named "nullable" whose value
	    is the boolean "true", and the instance is the JSON
	    primitive value "null", then the schema accepts the
	    instance.</t>
              <t indent="0" pn="section-3.3.5-3.1.2">Otherwise:</t>
              <ul empty="true" bare="false" indent="3" spacing="normal" pn="section-3.3.5-3.1.3">
                <li pn="section-3.3.5-3.1.3.1">
                  <t indent="0" pn="section-3.3.5-3.1.3.1.1">Let <em>S</em> be the value of the schema member with the
	      name "elements". The instance is accepted if and only if
	      all of the following are true:  </t>
                </li>
                <li pn="section-3.3.5-3.1.3.2">
                  <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.5-3.1.3.2.1">
                    <li pn="section-3.3.5-3.1.3.2.1.1">The instance is an array. Otherwise, the error indicator
		for this case shall have an "instancePath" pointing to
		the instance and a "schemaPath" pointing to the schema
		member with the name "elements".</li>
                    <li pn="section-3.3.5-3.1.3.2.1.2">If the instance is an array, then every element of the
		instance must be accepted by <em>S</em>. Otherwise, the error
		indicators for this case are the union of all the errors
		arising from evaluating <em>S</em> against elements of the
		instance.</li>
                  </ul>
                </li>
              </ul>
            </li>
          </ul>
          <t indent="0" pn="section-3.3.5-4">For example, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-5">
   {
     "elements": {
       "type": "float32"
     }
   }
</sourcecode>
          <t indent="0" pn="section-3.3.5-6">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-7">
   []
</sourcecode>
          <t indent="0" pn="section-3.3.5-8">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-9">
   [1, 2, 3]
</sourcecode>
          <t indent="0" pn="section-3.3.5-10">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-11">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.5-12">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-13">
   [{ "instancePath": "", "schemaPath": "/elements" }]
</sourcecode>
          <t indent="0" pn="section-3.3.5-14">and rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-15">
   [1, 2, "foo", 3, "bar"]
</sourcecode>
          <t indent="0" pn="section-3.3.5-16">with the error indicators</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-17">
   [
     { "instancePath": "/2", "schemaPath": "/elements/type" },
     { "instancePath": "/4", "schemaPath": "/elements/type" }
   ]
</sourcecode>
          <t indent="0" pn="section-3.3.5-18">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-19">
   {
     "elements": {
       "type": "float32"
     },
     "nullable": true
   }
</sourcecode>
          <t indent="0" pn="section-3.3.5-20">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-21">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.5-22">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-23">
   []
</sourcecode>
          <t indent="0" pn="section-3.3.5-24">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-25">
   [1, 2, 3]
</sourcecode>
          <t indent="0" pn="section-3.3.5-26">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-27">
   [1, 2, "foo", 3, "bar"]
</sourcecode>
          <t indent="0" pn="section-3.3.5-28">with the error indicators</t>
          <sourcecode type="json" markers="false" pn="section-3.3.5-29">
   [
     { "instancePath": "/2", "schemaPath": "/elements/type" },
     { "instancePath": "/4", "schemaPath": "/elements/type" }
   ]
</sourcecode>
        </section>
        <section anchor="semantics-form-props" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.6">
          <name slugifiedName="name-properties-2">Properties</name>
          <t indent="0" pn="section-3.3.6-1">The "properties" form is meant to describe JSON objects
	  being used as a "struct". The syntax of the "properties" form
	  is described in <xref target="syntax-form-properties" format="default" sectionFormat="of" derivedContent="Section 2.2.6"/>.</t>
          <t indent="0" pn="section-3.3.6-2">If a schema is of the "properties" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.6-3">
            <li pn="section-3.3.6-3.1">
              <t indent="0" pn="section-3.3.6-3.1.1">If the schema has a member named "nullable" whose value
	    is the boolean "true", and the instance is the JSON
	    primitive value "null", then the schema accepts the
	    instance.</t>
              <t indent="0" pn="section-3.3.6-3.1.2">Otherwise:</t>
              <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.3.6-3.1.3">
                <li pn="section-3.3.6-3.1.3.1">
                  <t indent="0" pn="section-3.3.6-3.1.3.1.1">The instance must be an object.</t>
                  <t indent="0" pn="section-3.3.6-3.1.3.1.2">Otherwise, the schema rejects the instance. The error indicator for this
                 case shall have an "instancePath" pointing to the instance,
                 and a "schemaPath" pointing to the schema member with the
                 name "properties" if such a schema member exists; if such a
                 member doesn't exist, "schemaPath" shall point to the schema
                 member with the name "optionalProperties".</t>
                </li>
                <li pn="section-3.3.6-3.1.3.2">
                  <t indent="0" pn="section-3.3.6-3.1.3.2.1">If the instance is an object, and the schema has a member
              named "properties", then let <em>P</em> be the value of the
              schema member named "properties". Per <xref target="syntax-form-properties" format="default" sectionFormat="of" derivedContent="Section 2.2.6"/>, we know
              <em>P</em> is an object. For every member name in <em>P</em>, a
              member of the same name in the instance must exist.  </t>
                  <t indent="0" pn="section-3.3.6-3.1.3.2.2"> Otherwise, the schema rejects the instance. The error indicator for this
case shall have an "instancePath" pointing to the instance, and a "schemaPath"
pointing to the member of <em>P</em> failing the requirement just described.
</t>
                </li>
                <li pn="section-3.3.6-3.1.3.3">
                  <t indent="0" pn="section-3.3.6-3.1.3.3.1">If the instance is an object, then let <em>P</em> be the
	      value of the schema member named "properties" (if it
	      exists) and <em>O</em> be the value of the schema member named
	      "optionalProperties" (if it exists).  </t>
                  <t indent="0" pn="section-3.3.6-3.1.3.3.2">For every member <em>I</em> of the instance, find a
	      member with the same name as <em>I</em>'s in <em>P</em> or
	      <em>O</em>. Per <xref target="syntax-form-properties" format="default" sectionFormat="of" derivedContent="Section 2.2.6"/>, we know it is not possible for both <em>P</em> and
	      <em>O</em> to have such a member. If the "discriminator tag
	      exemption" is in effect on <em>I</em> (see <xref target="semantics-form-discriminator" format="default" sectionFormat="of" derivedContent="Section 3.3.8"/>), then
	      ignore <em>I</em>.</t>
                  <t indent="0" pn="section-3.3.6-3.1.3.3.3">Otherwise:  </t>
                  <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.6-3.1.3.3.4">
                    <li pn="section-3.3.6-3.1.3.3.4.1">
                      <t indent="0" pn="section-3.3.6-3.1.3.3.4.1.1">If no such member in <em>P</em> or <em>O</em> exists and
                  validation is not in "allow additional properties" mode (see
                  <xref target="allow-additional-properties" format="default" sectionFormat="of" derivedContent="Section 3.1"/>), then the schema rejects the instance.
                      </t>
                      <t indent="0" pn="section-3.3.6-3.1.3.3.4.1.2">The error indicator for this case has an
		  "instancePath" pointing to <em>I</em> and a
		  "schemaPath" pointing to the schema.</t>
                    </li>
                    <li pn="section-3.3.6-3.1.3.3.4.2">
                      <t indent="0" pn="section-3.3.6-3.1.3.3.4.2.1">If such a member in <em>P</em> or <em>O</em> does exist,
		  then call this member <em>S</em>. If <em>S</em> rejects
		  <em>I</em>'s value, then the schema rejects the instance.</t>
                      <t indent="0" pn="section-3.3.6-3.1.3.3.4.2.2">The error indicators for this case are the union of the
		  error indicators from evaluating <em>S</em> against <em>I</em>'s value.</t>
                    </li>
                  </ul>
                </li>
              </ul>
            </li>
          </ul>
          <ul empty="true" bare="false" indent="3" spacing="normal" pn="section-3.3.6-4">
            <li pn="section-3.3.6-4.1">
              <t indent="0" pn="section-3.3.6-4.1.1">If an instance is an object, it may have multiple errors arising
	  from the second and third bullet in the list above. In this case,
	  the error indicators are the union of the errors.</t>
              <t indent="0" pn="section-3.3.6-4.1.2">For example, the schema</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.3">
   {
     "properties": {
       "a": { "type": "string" },
       "b": { "type": "string" }
     },
     "optionalProperties": {
       "c": { "type": "string" },
       "d": { "type": "string" }
     }
   }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.4">accepts</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.5">
   { "a": "foo", "b": "bar" }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.6">and</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.7">
   { "a": "foo", "b": "bar", "c": "baz" }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.8">and</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.9">
   { "a": "foo", "b": "bar", "c": "baz", "d": "quux" }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.10">and</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.11">
   { "a": "foo", "b": "bar", "d": "quux" }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.12">but rejects</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.13">
   null
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.14">with the error indicator</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.15">
   [{ "instancePath": "", "schemaPath": "/properties" }]
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.16">and rejects</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.17">
   { "b": 3, "c": 3, "e": 3 }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.18">with the error indicators</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.19">
   [
     { "instancePath": "",
       "schemaPath": "/properties/a" },
     { "instancePath": "/b",
       "schemaPath": "/properties/b/type" },
     { "instancePath": "/c",
       "schemaPath": "/optionalProperties/c/type" },
     { "instancePath": "/e",
       "schemaPath": "" }
   ]
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.20">If instead the schema had "additionalProperties: true"
	  but was otherwise the same:</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.21">
   {
     "properties": {
       "a": { "type": "string" },
       "b": { "type": "string" }
     },
     "optionalProperties": {
       "c": { "type": "string" },
       "d": { "type": "string" }
     },
     "additionalProperties": true
   }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.22">and the instance remained the same:</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.23">
   { "b": 3, "c": 3, "e": 3 }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.24">then the error indicators from evaluating the instance against
	  the schema would be:</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.25">
   [
     { "instancePath": "",
       "schemaPath": "/properties/a" },
     { "instancePath": "/b",
       "schemaPath": "/properties/b/type" },
     { "instancePath": "/c",
       "schemaPath": "/optionalProperties/c/type" },
   ]
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.26">These are the same errors as before, except the final error
	  (associated with the additional member named "e" in the
	  instance) is no longer present. This is because
	  "additionalProperties: true" enables "allow additional
	  properties" mode on the schema.</t>
              <t indent="0" pn="section-3.3.6-4.1.27">Finally, the schema</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.28">
   {
     "nullable": true,
     "properties": {
       "a": { "type": "string" },
       "b": { "type": "string" }
     },
     "optionalProperties": {
       "c": { "type": "string" },
       "d": { "type": "string" }
     },
     "additionalProperties": true
   }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.29">accepts</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.30">
   null
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.31">but rejects</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.32">
   { "b": 3, "c": 3, "e": 3 }
</sourcecode>
              <t indent="0" pn="section-3.3.6-4.1.33">with the error indicators</t>
              <sourcecode type="json" markers="false" pn="section-3.3.6-4.1.34">
   [
     { "instancePath": "",
       "schemaPath": "/properties/a" },
     { "instancePath": "/b",
       "schemaPath": "/properties/b/type" },
     { "instancePath": "/c",
       "schemaPath": "/optionalProperties/c/type" },
   ]
</sourcecode>
            </li>
          </ul>
        </section>
        <section anchor="semantics-form-values" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.7">
          <name slugifiedName="name-values-2">Values</name>
          <t indent="0" pn="section-3.3.7-1">The "values" form is meant to describe instances that are
	  JSON objects being used as an associative array. The syntax of the
	  "values" form is described in <xref target="syntax-form-values" format="default" sectionFormat="of" derivedContent="Section 2.2.7"/>.</t>
          <t indent="0" pn="section-3.3.7-2">If a schema is of the "values" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.7-3">
            <li pn="section-3.3.7-3.1">
              <t indent="0" pn="section-3.3.7-3.1.1">If the schema has a member named "nullable" whose value
	    is the boolean "true", and the instance is the JSON
	    primitive value "null", then the schema accepts the
	    instance.</t>
              <t indent="0" pn="section-3.3.7-3.1.2">Otherwise:</t>
              <ul empty="true" bare="false" indent="3" spacing="normal" pn="section-3.3.7-3.1.3">
                <li pn="section-3.3.7-3.1.3.1">
                  <t indent="0" pn="section-3.3.7-3.1.3.1.1">Let <em>S</em> be the value of the schema member with the
	      name "values". The instance is accepted if and only if
	      all of the following are true:  </t>
                  <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.7-3.1.3.1.2">
                    <li pn="section-3.3.7-3.1.3.1.2.1">The instance is an object. Otherwise, the error indicator
		for this case shall have an "instancePath" pointing to
		the instance and a "schemaPath" pointing to the schema
		member with the name "values".</li>
                    <li pn="section-3.3.7-3.1.3.1.2.2">If the instance is an object, then every member value of
		the instance must be accepted by <em>S</em>. Otherwise, the
		error indicators for this case are the union of all the error
		indicators arising from evaluating <em>S</em> against member
		values of the instance.</li>
                  </ul>
                </li>
              </ul>
            </li>
          </ul>
          <t indent="0" pn="section-3.3.7-4">For example, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-5">
   {
     "values": {
       "type": "float32"
     }
   }
</sourcecode>
          <t indent="0" pn="section-3.3.7-6">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-7">
   {}
</sourcecode>
          <t indent="0" pn="section-3.3.7-8">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-9">
   {"a": 1, "b": 2}
</sourcecode>
          <t indent="0" pn="section-3.3.7-10">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-11">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.7-12">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-13">
   [{ "instancePath": "", "schemaPath": "/values" }]
</sourcecode>
          <t indent="0" pn="section-3.3.7-14">and rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-15">
   { "a": 1, "b": 2, "c": "foo", "d": 3, "e": "bar" }
</sourcecode>
          <t indent="0" pn="section-3.3.7-16">with the error indicators</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-17">
   [
     { "instancePath": "/c", "schemaPath": "/values/type" },
     { "instancePath": "/e", "schemaPath": "/values/type" }
   ]
</sourcecode>
          <t indent="0" pn="section-3.3.7-18">The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-19">
   {
     "nullable": true,
     "values": {
       "type": "float32"
     }
   }
</sourcecode>
          <t indent="0" pn="section-3.3.7-20">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-21">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.7-22">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-23">
   { "a": 1, "b": 2, "c": "foo", "d": 3, "e": "bar" }
</sourcecode>
          <t indent="0" pn="section-3.3.7-24">with the error indicators</t>
          <sourcecode type="json" markers="false" pn="section-3.3.7-25">
   [
     { "instancePath": "/c", "schemaPath": "/values/type" },
     { "instancePath": "/e", "schemaPath": "/values/type" }
   ]
</sourcecode>
        </section>
        <section anchor="semantics-form-discriminator" numbered="true" toc="include" removeInRFC="false" pn="section-3.3.8">
          <name slugifiedName="name-discriminator-2">Discriminator</name>
          <t indent="0" pn="section-3.3.8-1">The "discriminator" form is meant to describe JSON objects
	  being used in a fashion similar to a discriminated union construct
	  in C-like languages. The syntax of the "discriminator" form
	  is described in <xref target="syntax-form-discriminator" format="default" sectionFormat="of" derivedContent="Section 2.2.8"/>.</t>
          <t indent="0" pn="section-3.3.8-2">When a schema is of the "discriminator" form, it validates that:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.8-3">
            <li pn="section-3.3.8-3.1">the instance is an object,</li>
            <li pn="section-3.3.8-3.2">the instance has a particular "tag" property,</li>
            <li pn="section-3.3.8-3.3">this "tag" property's value is a string within a set of
	    valid values, and</li>
            <li pn="section-3.3.8-3.4">the instance satisfies another schema, where this other
	    schema is chosen based on the value of the "tag" property.</li>
          </ul>
          <t indent="0" pn="section-3.3.8-4">The behavior of the "discriminator" form is more complex than the
	  other keywords. Readers familiar with CDDL may find the final
	  example in <xref target="comparison-with-cddl" format="default" sectionFormat="of" derivedContent="Appendix B"/>
	  helpful in understanding its behavior. What follows in this section
	  is a description of the "discriminator" form's behavior, as well as
	  some examples.</t>
          <t indent="0" pn="section-3.3.8-5">If a schema is of the "discriminator" form, then:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.8-6">
            <li pn="section-3.3.8-6.1">Let <em>D</em> be the schema member with the name
	    "discriminator".</li>
            <li pn="section-3.3.8-6.2">Let <em>M</em> be the schema member with the name
	    "mapping".</li>
            <li pn="section-3.3.8-6.3">Let <em>I</em> be the instance member whose name equals
	    <em>D</em>'s value. <em>I</em> may, for some rejected instances,
	    not exist.</li>
            <li pn="section-3.3.8-6.4">Let <em>S</em> be the member of <em>M</em> whose name equals
	    <em>I</em>'s value. <em>S</em> may, for some rejected instances,
	    not exist.</li>
          </ul>
          <t indent="0" pn="section-3.3.8-7">If the schema has a member named "nullable" whose value is
	  the boolean "true", and the instance is the JSON primitive
	  value "null", then the schema accepts the instance. Otherwise,
	  the instance is accepted if and only if all of the following are
	  true:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.8-8">
            <li pn="section-3.3.8-8.1">
              <t indent="0" pn="section-3.3.8-8.1.1">The instance is an object.  </t>
              <t indent="0" pn="section-3.3.8-8.1.2">Otherwise, the error indicator for this case shall have an
	      "instancePath" pointing to the instance and a
	      "schemaPath" pointing to <em>D</em>.</t>
            </li>
            <li pn="section-3.3.8-8.2">
              <t indent="0" pn="section-3.3.8-8.2.1">If the instance is a JSON object, then <em>I</em> must exist.  </t>
              <t indent="0" pn="section-3.3.8-8.2.2">Otherwise, the error indicator for this case shall have an
	      "instancePath" pointing to the instance and a
	      "schemaPath" pointing to <em>D</em>.</t>
            </li>
            <li pn="section-3.3.8-8.3">
              <t indent="0" pn="section-3.3.8-8.3.1">If the instance is a JSON object and <em>I</em> exists,
	      <em>I</em>'s value must be a string.  </t>
              <t indent="0" pn="section-3.3.8-8.3.2">Otherwise, the error indicator for this case shall have an
	      "instancePath" pointing to <em>I</em> and a
	      "schemaPath" pointing to <em>D</em>.</t>
            </li>
            <li pn="section-3.3.8-8.4">
              <t indent="0" pn="section-3.3.8-8.4.1">If the instance is a JSON object and <em>I</em> exists and
	      has a string value, then <em>S</em> must exist.  </t>
              <t indent="0" pn="section-3.3.8-8.4.2">Otherwise, the error indicator for this case shall have an
	      "instancePath" pointing to <em>I</em> and a
	      "schemaPath" pointing to <em>M</em>.</t>
            </li>
            <li pn="section-3.3.8-8.5">
              <t indent="0" pn="section-3.3.8-8.5.1">If the instance is a JSON object, <em>I</em> exists, and
	      <em>S</em> exists, then the instance must satisfy <em>S</em>'s
	      value. Per <xref target="syntax" format="default" sectionFormat="of" derivedContent="Section 2"/>, we know <em>S</em>'s
	      value is a schema of the "properties" form. Apply the
	      "discriminator tag exemption" afforded in <xref target="semantics-form-props" format="default" sectionFormat="of" derivedContent="Section 3.3.6"/> to <em>I</em>
	      when evaluating whether the instance satisfies <em>S</em>'s
	      value.  </t>
              <t indent="0" pn="section-3.3.8-8.5.2">Otherwise, the error indicators for this case shall be error
	      indicators from evaluating <em>S</em>'s value against the
	      instance, with the "discriminator tag exemption" applied to
	      <em>I</em>.</t>
            </li>
          </ul>
          <t indent="0" pn="section-3.3.8-9">The list items above are defined in a mutually exclusive way. For
	  any given instance and schema, exactly one of the list items above
	  will apply.</t>
          <t indent="0" pn="section-3.3.8-10">For example, the schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-11">
   {
     "discriminator": "version",
     "mapping": {
       "v1": {
         "properties": {
           "a": { "type": "float32" }
         }
       },
       "v2": {
         "properties": {
           "a": { "type": "string" }
         }
       }
     }
   }
</sourcecode>
          <t indent="0" pn="section-3.3.8-12">rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-13">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.8-14">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-15">
   [{ "instancePath": "", "schemaPath": "/discriminator" }]
</sourcecode>
          <t indent="0" pn="section-3.3.8-16">(This is the case of the instance not being an object.)</t>
          <t indent="0" pn="section-3.3.8-17">Also rejected is</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-18">
   {}
</sourcecode>
          <t indent="0" pn="section-3.3.8-19">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-20">
   [{ "instancePath": "", "schemaPath": "/discriminator" }]
</sourcecode>
          <t indent="0" pn="section-3.3.8-21">(This is the case of <em>I</em> not existing.)</t>
          <t indent="0" pn="section-3.3.8-22">Also rejected is</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-23">
   { "version": 1 }
</sourcecode>
          <t indent="0" pn="section-3.3.8-24">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-25">
   [
     {
       "instancePath": "/version",
       "schemaPath": "/discriminator"
     }
   ]
</sourcecode>
          <t indent="0" pn="section-3.3.8-26">(This is the case of <em>I</em> existing but not having a string
	  value.)</t>
          <t indent="0" pn="section-3.3.8-27">Also rejected is</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-28">
   { "version": "v3" }
</sourcecode>
          <t indent="0" pn="section-3.3.8-29">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-30">
   [
     {
       "instancePath": "/version",
       "schemaPath": "/mapping"
     }
   ]
</sourcecode>
          <t indent="0" pn="section-3.3.8-31">(This is the case of <em>I</em> existing and having a string
	  value but <em>S</em> not existing.)</t>
          <t indent="0" pn="section-3.3.8-32">Also rejected is</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-33">
   { "version": "v2", "a": 3 }
</sourcecode>
          <t indent="0" pn="section-3.3.8-34">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-35">
   [
     {
       "instancePath": "/a",
       "schemaPath": "/mapping/v2/properties/a/type"
     }
   ]
</sourcecode>
          <t indent="0" pn="section-3.3.8-36">(This is the case of <em>I</em> and <em>S</em> existing but the
	  instance not satisfying <em>S</em>'s value.)</t>
          <t indent="0" pn="section-3.3.8-37">Finally, the schema accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-38">
   { "version": "v2", "a": "foo" }
</sourcecode>
          <t indent="0" pn="section-3.3.8-39">This instance is accepted even though "version" is not
	  mentioned by "/mapping/v2/properties"; the "discriminator tag
	  exemption" ensures that "version" is not treated as an
	  additional property when evaluating the instance against <em>S</em>'s value.</t>
          <t indent="0" pn="section-3.3.8-40">By contrast, consider the same schema but with "nullable"
	  being "true". The schema</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-41">
   {
     "nullable": true,
      "discriminator": "version",
      "mapping": {
        "v1": {
          "properties": {
            "a": { "type": "float32" }
          }
        },
        "v2": {
          "properties": {
            "a": { "type": "string" }
          }
        }
      }
   }
</sourcecode>
          <t indent="0" pn="section-3.3.8-42">accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-43">
   null
</sourcecode>
          <t indent="0" pn="section-3.3.8-44">To further illustrate the "discriminator" form with examples,
	  recall the JTD schema in <xref target="syntax-form-discriminator" format="default" sectionFormat="of" derivedContent="Section 2.2.8"/>, reproduced here:</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-45">
   {
     "discriminator": "event_type",
     "mapping": {
       "account_deleted": {
         "properties": {
           "account_id": { "type": "string" }
         }
       },
       "account_payment_plan_changed": {
         "properties": {
           "account_id": { "type": "string" },
           "payment_plan": { "enum": ["FREE", "PAID"] }
         },
         "optionalProperties": {
           "upgraded_by": { "type": "string" }
         }
       }
     }
   }
</sourcecode>
          <t indent="0" pn="section-3.3.8-46">This schema accepts</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-47">
   { "event_type": "account_deleted", "account_id": "abc-123" }
</sourcecode>
          <t indent="0" pn="section-3.3.8-48">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-49">
   {
     "event_type": "account_payment_plan_changed",
     "account_id": "abc-123",
     "payment_plan": "PAID"
   }
</sourcecode>
          <t indent="0" pn="section-3.3.8-50">and</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-51">
   {
     "event_type": "account_payment_plan_changed",
     "account_id": "abc-123",
     "payment_plan": "PAID",
     "upgraded_by": "users/mkhwarizmi"
   }
</sourcecode>
          <t indent="0" pn="section-3.3.8-52">but rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-53">
   {}
</sourcecode>
          <t indent="0" pn="section-3.3.8-54">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-55">
   [{ "instancePath": "", "schemaPath": "/discriminator" }]
</sourcecode>
          <t indent="0" pn="section-3.3.8-56">and rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-57">
   { "event_type": "some_other_event_type" }
</sourcecode>
          <t indent="0" pn="section-3.3.8-58">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-59">
   [
     {
       "instancePath": "/event_type",
       "schemaPath": "/mapping"
     }
   ]
</sourcecode>
          <t indent="0" pn="section-3.3.8-60">and rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-61">
   { "event_type": "account_deleted" }
</sourcecode>
          <t indent="0" pn="section-3.3.8-62">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-63">
   [{
     "instancePath": "",
     "schemaPath": "/mapping/account_deleted/properties/account_id"
   }]
</sourcecode>
          <t indent="0" pn="section-3.3.8-64">and rejects</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-65">
   {
     "event_type": "account_payment_plan_changed",
     "account_id": "abc-123",
     "payment_plan": "PAID",
     "xxx": "asdf"
   }
</sourcecode>
          <t indent="0" pn="section-3.3.8-66">with the error indicator</t>
          <sourcecode type="json" markers="false" pn="section-3.3.8-67">
   [{
     "instancePath": "/xxx",
     "schemaPath": "/mapping/account_payment_plan_changed"
   }]
</sourcecode>
        </section>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-4-1">This document has no IANA actions.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-5-1">Implementations of JTD will necessarily be manipulating JSON
      data. Therefore, the security considerations of <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/> are all relevant here.</t>
      <t indent="0" pn="section-5-2">Implementations that evaluate user-inputted schemas <bcp14>SHOULD</bcp14> implement
      mechanisms to detect and abort circular references that might cause a
      naive implementation to go into an infinite loop. Without such
      mechanisms, implementations may be vulnerable to denial-of-service
      attacks.</t>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.handrews-json-schema" to="JSON-SCHEMA"/>
    <references pn="section-6">
      <name slugifiedName="name-references">References</name>
      <references pn="section-6.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC3339" target="https://www.rfc-editor.org/info/rfc3339" quoteTitle="true" derivedAnchor="RFC3339">
          <front>
            <title>Date and Time on the Internet: Timestamps</title>
            <author initials="G." surname="Klyne" fullname="G. Klyne">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Newman" fullname="C. Newman">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="July"/>
            <abstract>
              <t indent="0">This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3339"/>
          <seriesInfo name="DOI" value="10.17487/RFC3339"/>
        </reference>
        <reference anchor="RFC4287" target="https://www.rfc-editor.org/info/rfc4287" quoteTitle="true" derivedAnchor="RFC4287">
          <front>
            <title>The Atom Syndication Format</title>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Sayre" fullname="R. Sayre" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2005" month="December"/>
            <abstract>
              <t indent="0">This document specifies Atom, an XML-based Web content and metadata syndication format.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4287"/>
          <seriesInfo name="DOI" value="10.17487/RFC4287"/>
        </reference>
        <reference anchor="RFC6901" target="https://www.rfc-editor.org/info/rfc6901" quoteTitle="true" derivedAnchor="RFC6901">
          <front>
            <title>JavaScript Object Notation (JSON) Pointer</title>
            <author initials="P." surname="Bryan" fullname="P. Bryan" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Zyp" fullname="K. Zyp">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="April"/>
            <abstract>
              <t indent="0">JSON Pointer defines a string syntax for identifying a specific value within a JavaScript Object Notation (JSON) document.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6901"/>
          <seriesInfo name="DOI" value="10.17487/RFC6901"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t indent="0">JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t indent="0">This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610" quoteTitle="true" derivedAnchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author initials="H." surname="Birkholz" fullname="H. Birkholz">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Vigano" fullname="C. Vigano">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Bormann" fullname="C. Bormann">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2019" month="June"/>
            <abstract>
              <t indent="0">This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
      </references>
      <references pn="section-6.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="I-D.handrews-json-schema" quoteTitle="true" target="https://tools.ietf.org/html/draft-handrews-json-schema-02" derivedAnchor="JSON-SCHEMA">
          <front>
            <title>JSON Schema: A Media Type for Describing JSON Documents</title>
            <author fullname="Austin Wright">
	 </author>
            <author fullname="Henry Andrews">
	 </author>
            <author fullname="Ben Hutton">
              <organization showOnFrontPage="true">Wellcome Sanger Institute</organization>
            </author>
            <author fullname="Greg Dennis">
	 </author>
            <date month="September" day="17" year="2019"/>
            <abstract>
              <t indent="0">   JSON Schema defines the media type "application/schema+json", a JSON-
   based format for describing the structure of JSON data.  JSON Schema
   asserts what a JSON document must look like, ways to extract
   information from it, and how to interact with it.  The "application/
   schema-instance+json" media type provides additional feature-rich
   integration with "application/schema+json" beyond what can be offered
   for "application/json" documents.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-handrews-json-schema-02"/>
          <format type="TXT" target="https://www.ietf.org/internet-drafts/draft-handrews-json-schema-02.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="OPENAPI" target="https://spec.openapis.org/oas/v3.0.3" quoteTitle="true" derivedAnchor="OPENAPI">
          <front>
            <title>OpenAPI Specification</title>
            <author>
              <organization showOnFrontPage="true">OpenAPI Initiative</organization>
            </author>
            <date year="2020" month="February"/>
          </front>
        </reference>
        <reference anchor="RFC7071" target="https://www.rfc-editor.org/info/rfc7071" quoteTitle="true" derivedAnchor="RFC7071">
          <front>
            <title>A Media Type for Reputation Interchange</title>
            <author initials="N." surname="Borenstein" fullname="N. Borenstein">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Kucherawy" fullname="M. Kucherawy">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="November"/>
            <abstract>
              <t indent="0">This document defines the format of reputation response data ("reputons"), the media type for packaging it, and definition of a registry for the names of reputation applications and response sets.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7071"/>
          <seriesInfo name="DOI" value="10.17487/RFC7071"/>
        </reference>
        <reference anchor="RFC7493" target="https://www.rfc-editor.org/info/rfc7493" quoteTitle="true" derivedAnchor="RFC7493">
          <front>
            <title>The I-JSON Message Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="March"/>
            <abstract>
              <t indent="0">I-JSON (short for "Internet JSON") is a restricted profile of JSON designed to maximize interoperability and increase confidence that software can process it successfully with predictable results.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7493"/>
          <seriesInfo name="DOI" value="10.17487/RFC7493"/>
        </reference>
      </references>
    </references>
    <section anchor="other-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-rationale-for-omitted-featu">Rationale for Omitted Features</name>
      <t indent="0" pn="section-appendix.a-1">This appendix is not normative.</t>
      <t indent="0" pn="section-appendix.a-2">This section describes possible features that are intentionally left
      out of JSON Type Definition and justifies why these features are
      omitted.</t>
      <section anchor="other-considerations-int64" numbered="true" toc="include" removeInRFC="false" pn="section-a.1">
        <name slugifiedName="name-support-for-64-bit-numbers">Support for 64-Bit Numbers</name>
        <t indent="0" pn="section-a.1-1">This document does not allow "int64" or "uint64" as
	values for the JTD "type" keyword (see Sections <xref target="syntax-form-type" format="counter" sectionFormat="of" derivedContent="2.2.3"/> and <xref target="semantics-form-type" format="counter" sectionFormat="of" derivedContent="3.3.3"/>). Such hypothetical
	"int64" or "uint64" types would behave like
	"int32" or "uint32" (respectively) but with the range
	of values associated with 64-bit instead of 32-bit integers. That is:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-a.1-2">
          <li pn="section-a.1-2.1">
            "int64" would accept numbers between -(2**63) and
	  (2**63)-1</li>
          <li pn="section-a.1-2.2">
            "uint64" would accept numbers between 0 and (2**64)-1</li>
        </ul>
        <t indent="0" pn="section-a.1-3">Users of "int64" and "uint64" would likely expect
	that the full range of signed or unsigned 64-bit integers could
	interoperably be transmitted as JSON without loss of precision. But
	this assumption is likely to be incorrect, for the reasons given in
	<xref target="RFC7493" sectionFormat="of" section="2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7493#section-2.2" derivedContent="RFC7493"/>.</t>
        <t indent="0" pn="section-a.1-4">"int64" and "uint64" likely would have led users to
	falsely assume that the full range of 64-bit integers can be
	interoperably processed as JSON without loss of precision. To avoid
	leading users astray, JTD omits "int64" and
	"uint64".</t>
      </section>
      <section anchor="support-for-non-root-definitions" numbered="true" toc="include" removeInRFC="false" pn="section-a.2">
        <name slugifiedName="name-support-for-non-root-defini">Support for Non-root Definitions</name>
        <t indent="0" pn="section-a.2-1">This document disallows the "definitions" keyword from
	appearing outside of root schemas (see <xref target="cddl-schema" format="default" sectionFormat="of" derivedContent="Figure 1"/>). Conceivably, this document could have instead
	allowed "definitions" to appear on any schema, even non-root
	ones. Under this alternative design, "ref"s would resolve to a
	definition in the "nearest" (i.e., most nested) schema that both
	contained the "ref" and had a suitably named
	"definitions" member.</t>
        <t indent="0" pn="section-a.2-2">For instance, under this alternative approach, one could define
	schemas like the one in <xref target="hypothetical-ref" format="default" sectionFormat="of" derivedContent="Figure 3"/>.</t>
        <figure anchor="hypothetical-ref" align="left" suppress-title="false" pn="figure-3">
          <name slugifiedName="name-a-hypothetical-schema-had-t">A Hypothetical Schema Had This Document Permitted Non-root
	  Definitions. This Is Not a Correct JTD Schema.</name>
          <sourcecode type="json" markers="false" pn="section-a.2-3.1">
{
  "properties": {
    "foo": {
      "definitions": {
        "user": { "properties": { "user_id": {"type": "string" }}}
      },
      "ref": "user"
    },
    "bar": {
      "definitions": {
        "user": { "properties": { "user_id": {"type": "string" }}}
      },
      "ref": "user"
    },
    "baz": {
      "definitions": {
        "user": { "properties": { "userId": {"type": "string" }}}
      },
      "ref": "user"
    }
  }
}
</sourcecode>
        </figure>
        <t indent="0" pn="section-a.2-4">If schemas like that in <xref target="hypothetical-ref" format="default" sectionFormat="of" derivedContent="Figure 3"/> were permitted, code generation from JTD schemas
	would be more difficult, and the generated code would be less useful.</t>
        <t indent="0" pn="section-a.2-5">Code generation would be more difficult because it would force code
	generators to implement a name-mangling scheme for types generated
	from definitions. This additional difficulty is not immense, but it adds
	complexity to an otherwise relatively trivial task.</t>
        <t indent="0" pn="section-a.2-6">Generated code would be less useful because generated, mangled
	struct names are less pithy than human-defined struct names. For
	instance, the "user" definitions in <xref target="hypothetical-ref" format="default" sectionFormat="of" derivedContent="Figure 3"/> might have been generated
	into types named "PropertiesFooUser",
	"PropertiesBarUser", and "PropertiesBazUser"; obtuse
	names like these are less useful to human-written code than names like
	"User".</t>
        <t indent="0" pn="section-a.2-7">Furthermore, even though "PropertiesFooUser" and
	"PropertiesBarUser" would be essentially identical, they would
	not be interchangeable in many statically typed programming
	languages. A code generator could attempt to circumvent this by
	deduplicating identical definitions, but then the user might be
	confused as to why the subtly distinct "PropertiesBazUser",
	defined from a schema allowing a property named "userId" (not
	"user_id"), was not deduplicated.</t>
        <t indent="0" pn="section-a.2-8">Because there seem to be implementation and usability challenges
	associated with non-root definitions, and because it would be easier
	to later amend JTD to permit for non-root definitions than to later
	amend JTD to prohibit them, this document does not permit non-root
	definitions in JTD schemas.</t>
      </section>
    </section>
    <section anchor="comparison-with-cddl" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.b">
      <name slugifiedName="name-comparison-with-cddl">Comparison with CDDL</name>
      <t indent="0" pn="section-appendix.b-1">This appendix is not normative.</t>
      <t indent="0" pn="section-appendix.b-2">To aid the reader familiar with CDDL, this section illustrates how
      JTD works by presenting JTD schemas and CDDL schemas that accept and
      reject the same instances.</t>
      <t indent="0" pn="section-appendix.b-3">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-4">
   {}
</sourcecode>
      <t indent="0" pn="section-appendix.b-5">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-6">
   root = any
</sourcecode>
      <t indent="0" pn="section-appendix.b-7">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-8">
   {
     "definitions": {
       "a": { "elements": { "ref": "b" }},
       "b": { "type": "float32" }
     },
     "elements": {
       "ref": "a"
     }
   }
</sourcecode>
      <t indent="0" pn="section-appendix.b-9">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-10">
   root = [* a]
   a = [* b]
   b = number
</sourcecode>
      <t indent="0" pn="section-appendix.b-11">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-12">
   { "enum": ["PENDING", "DONE", "CANCELED"]}
</sourcecode>
      <t indent="0" pn="section-appendix.b-13">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-14">
   root = "PENDING" / "DONE" / "CANCELED"
</sourcecode>
      <t indent="0" pn="section-appendix.b-15">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-16">
   {"type": "boolean"}
</sourcecode>
      <t indent="0" pn="section-appendix.b-17">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-18">
   root = bool
</sourcecode>
      <t indent="0" pn="section-appendix.b-19">The JTD schemas:</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-20">
   {"type": "float32"}
</sourcecode>
      <t indent="0" pn="section-appendix.b-21">and</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-22">
   {"type": "float64"}
</sourcecode>
      <t indent="0" pn="section-appendix.b-23">both accept the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-24">
   root = number
</sourcecode>
      <t indent="0" pn="section-appendix.b-25">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-26">
   {"type": "string"}
</sourcecode>
      <t indent="0" pn="section-appendix.b-27">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-28">
   root = tstr
</sourcecode>
      <t indent="0" pn="section-appendix.b-29">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-30">
   {"type": "timestamp"}
</sourcecode>
      <t indent="0" pn="section-appendix.b-31">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-32">
   root = tdate
</sourcecode>
      <t indent="0" pn="section-appendix.b-33">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-34">
   { "elements": { "type": "float32" }}
</sourcecode>
      <t indent="0" pn="section-appendix.b-35">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-36">
   root = [* number]
</sourcecode>
      <t indent="0" pn="section-appendix.b-37">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-38">
   {
     "properties": {
       "a": { "type": "boolean" },
       "b": { "type": "float32" }
     },
     "optionalProperties": {
       "c": { "type": "string" },
       "d": { "type": "timestamp" }
     }
   }
</sourcecode>
      <t indent="0" pn="section-appendix.b-39">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-40">
   root = { a: bool, b: number, ? c: tstr, ? d: tdate }
</sourcecode>
      <t indent="0" pn="section-appendix.b-41">The JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-42">
   { "values": { "type": "float32" }}
</sourcecode>
      <t indent="0" pn="section-appendix.b-43">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-44">
   root = { * tstr =&gt; number }
</sourcecode>
      <t indent="0" pn="section-appendix.b-45">Finally, the JTD schema</t>
      <sourcecode type="json" markers="false" pn="section-appendix.b-46">
   {
     "discriminator": "a",
     "mapping": {
       "foo": {
         "properties": {
           "b": { "type": "float32" }
         }
       },
       "bar": {
         "properties": {
           "b": { "type": "string" }
         }
       }
     }
   }
</sourcecode>
      <t indent="0" pn="section-appendix.b-47">accepts the same instances as the CDDL rule</t>
      <sourcecode type="cddl" markers="false" pn="section-appendix.b-48">
   root = { a: "foo", b: number } / { a: "bar", b: tstr }
</sourcecode>
    </section>
    <section anchor="examples" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.c">
      <name slugifiedName="name-example">Example</name>
      <t indent="0" pn="section-appendix.c-1">This appendix is not normative.</t>
      <t indent="0" pn="section-appendix.c-2">As a demonstration of JTD, in <xref target="JTD-reputation-object" format="default" sectionFormat="of" derivedContent="Figure 4"/> is a JTD schema closely equivalent to the
      plain-English definition "reputation-object" described in
      <xref target="RFC7071" sectionFormat="of" section="6.2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7071#section-6.2.2" derivedContent="RFC7071"/>:</t>
      <figure anchor="JTD-reputation-object" align="left" suppress-title="false" pn="figure-4">
        <name slugifiedName="name-a-jtd-schema-describing-rep">A JTD Schema Describing "reputation-object" from <xref target="RFC7071" sectionFormat="of" section="6.2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7071#section-6.2.2" derivedContent="RFC7071"/></name>
        <sourcecode type="json" markers="false" pn="section-appendix.c-3.1">
{
  "properties": {
    "application": { "type": "string" },
    "reputons": {
      "elements": {
        "additionalProperties": true,
        "properties": {
          "rater": { "type": "string" },
          "assertion": { "type": "string" },
          "rated": { "type": "string" },
          "rating": { "type": "float32" },
        },
        "optionalProperties": {
          "confidence": { "type": "float32" },
          "normal-rating": { "type": "float32" },
          "sample-size": { "type": "float64" },
          "generated": { "type": "float64" },
          "expires": { "type": "float64" }
        }
      }
    }
  }
}
</sourcecode>
      </figure>
      <t indent="0" pn="section-appendix.c-4">This schema does not enforce the requirement that
      "sample-size", "generated", and "expires" be
      unbounded positive integers. It does not express the limitation that
      "rating", "confidence", and "normal-rating" should
      not have more than three decimal places of precision.</t>
      <t indent="0" pn="section-appendix.c-5">The example in <xref target="JTD-reputation-object" format="default" sectionFormat="of" derivedContent="Figure 4"/> can be compared against the equivalent example in
      <xref target="RFC8610" sectionFormat="of" section="H" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8610#appendix-H" derivedContent="RFC8610"/>.</t>
    </section>
    <section numbered="false" anchor="acknowledgments" toc="include" removeInRFC="false" pn="section-appendix.d">
      <name slugifiedName="name-acknowledgments">Acknowledgments</name>
      <t indent="0" pn="section-appendix.d-1"><contact fullname="Carsten Bormann"/> provided lots of useful
      guidance and feedback on 
      JTD's design and the structure of this document.</t>
      <t indent="0" pn="section-appendix.d-2"><contact fullname="Evgeny Poberezkin"/> suggested the addition of
      "nullable" and 
      thoroughly vetted this document for mistakes and opportunities for
      simplification.</t>
      <t indent="0" pn="section-appendix.d-3"><contact fullname="Tim Bray"/> suggested the current "ref"
      model and the addition 
      of "enum". <contact fullname="Anders Rundgren"/> suggested
      extending "type" to 
      have more support for numerical types. <contact fullname="James       Manger"/> suggested additional 
      clarifying examples of how integer types work. <contact fullname="Adrian       Farrel"/> suggested 
      many improvements to help make this document clearer.</t>
      <t indent="0" pn="section-appendix.d-4">Members of the IETF JSON mailing list -- in particular, <contact fullname="Pete Cordell"/>, 
      <contact fullname="Phillip Hallam-Baker"/>, <contact fullname="Nico       Williams"/>, <contact fullname="John Cowan"/>, <contact fullname="Rob       Sayre"/>, and <contact fullname="Erik Wilde"/> -- provided lots of useful
      feedback.</t>
      <t indent="0" pn="section-appendix.d-5">OpenAPI's "discriminator" object <xref target="OPENAPI" format="default" sectionFormat="of" derivedContent="OPENAPI"/> inspired the "discriminator" form. <xref target="I-D.handrews-json-schema" format="default" sectionFormat="of" derivedContent="JSON-SCHEMA"/> influenced various
      parts of JTD's early design.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.e">
      <name slugifiedName="name-authors-address">Author's Address</name>
      <author initials="U." surname="Carion" fullname="Ulysse Carion">
        <organization abbrev="Segment" showOnFrontPage="true">Segment.io, Inc</organization>
        <address>
          <postal>
            <street>100 California Street</street>
            <city>San Francisco</city>
            <region>CA</region>
            <code>94111</code>
            <country>United States of America</country>
          </postal>
          <email>ulysse@segment.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
