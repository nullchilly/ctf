<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" docName="draft-ietf-rtcweb-security-arch-20" indexInclude="true" ipr="pre5378Trust200902" number="8827" prepTime="2021-01-16T18:38:47" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="4" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-rtcweb-security-arch-20" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8827" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="WebRTC Sec. Arch.">WebRTC Security Architecture</title>
    <seriesInfo name="RFC" value="8827" stream="IETF"/>
    <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
      <organization showOnFrontPage="true">Mozilla</organization>
      <address>
        <email>ekr@rtfm.com</email>
      </address>
    </author>
    <date month="01" year="2021"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">
        This document defines the security architecture for WebRTC, a protocol
        suite intended for use with real-time applications that can be deployed
        in browsers -- "real-time communication on the Web".
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8827" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2021 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
        <t indent="0" pn="section-boilerplate.2-3">
            This document may contain material from IETF Documents or IETF
            Contributions published or made publicly available before November
            10, 2008. The person(s) controlling the copyright in some of this
            material may not have granted the IETF Trust the right to allow
            modifications of such material outside the IETF Standards Process.
            Without obtaining an adequate license from the person(s)
            controlling the copyright in such materials, this document may not
            be modified outside the IETF Standards Process, and derivative
            works of it may not be created outside the IETF Standards Process,
            except to format it for publication as an RFC or to translate it
            into languages other than English.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-trust-model">Trust Model</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authenticated-entities">Authenticated Entities</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unauthenticated-entities">Unauthenticated Entities</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-overview">Overview</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-initial-signaling">Initial Signaling</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-media-consent-verification">Media Consent Verification</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.3">
                <t indent="0" pn="section-toc.1-1.4.2.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dtls-handshake">DTLS Handshake</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.4">
                <t indent="0" pn="section-toc.1-1.4.2.4.1"><xref derivedContent="4.4" format="counter" sectionFormat="of" target="section-4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-communications-and-consent-">Communications and Consent Freshness</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sdp-identity-attribute">SDP Identity Attribute</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-offer-answer-considerations">Offer/Answer Considerations</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2.1.2">
                  <li pn="section-toc.1-1.5.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.5.2.1.2.1.1"><xref derivedContent="5.1.1" format="counter" sectionFormat="of" target="section-5.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-generating-the-initial-sdp-">Generating the Initial SDP Offer</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.5.2.1.2.2.1"><xref derivedContent="5.1.2" format="counter" sectionFormat="of" target="section-5.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-generating-an-sdp-answer">Generating an SDP Answer</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.1.2.3">
                    <t indent="0" pn="section-toc.1-1.5.2.1.2.3.1"><xref derivedContent="5.1.3" format="counter" sectionFormat="of" target="section-5.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-processing-an-sdp-offer-or-">Processing an SDP Offer or Answer</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.1.2.4">
                    <t indent="0" pn="section-toc.1-1.5.2.1.2.4.1"><xref derivedContent="5.1.4" format="counter" sectionFormat="of" target="section-5.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-modifying-the-session">Modifying the Session</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-detailed-technical-descript">Detailed Technical Description</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-origin-and-web-security-iss">Origin and Web Security Issues</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-device-permissions-model">Device Permissions Model</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-communications-consent">Communications Consent</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.4">
                <t indent="0" pn="section-toc.1-1.6.2.4.1"><xref derivedContent="6.4" format="counter" sectionFormat="of" target="section-6.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ip-location-privacy">IP Location Privacy</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.5">
                <t indent="0" pn="section-toc.1-1.6.2.5.1"><xref derivedContent="6.5" format="counter" sectionFormat="of" target="section-6.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-communications-security">Communications Security</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-web-based-peer-authenticati">Web-Based Peer Authentication</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-trust-relationships-idps-ap">Trust Relationships: IdPs, APs, and RPs</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-overview-of-operation">Overview of Operation</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.3">
                <t indent="0" pn="section-toc.1-1.7.2.3.1"><xref derivedContent="7.3" format="counter" sectionFormat="of" target="section-7.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-items-for-standardization">Items for Standardization</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.4">
                <t indent="0" pn="section-toc.1-1.7.2.4.1"><xref derivedContent="7.4" format="counter" sectionFormat="of" target="section-7.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-binding-identity-assertions">Binding Identity Assertions to JSEP Offer/Answer Transactions</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2.4.2">
                  <li pn="section-toc.1-1.7.2.4.2.1">
                    <t indent="0" pn="section-toc.1-1.7.2.4.2.1.1"><xref derivedContent="7.4.1" format="counter" sectionFormat="of" target="section-7.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-carrying-identity-assertion">Carrying Identity Assertions</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.7.2.5">
                <t indent="0" pn="section-toc.1-1.7.2.5.1"><xref derivedContent="7.5" format="counter" sectionFormat="of" target="section-7.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-determining-the-idp-uri">Determining the IdP URI</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2.5.2">
                  <li pn="section-toc.1-1.7.2.5.2.1">
                    <t indent="0" pn="section-toc.1-1.7.2.5.2.1.1"><xref derivedContent="7.5.1" format="counter" sectionFormat="of" target="section-7.5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authenticating-party">Authenticating Party</xref></t>
                  </li>
                  <li pn="section-toc.1-1.7.2.5.2.2">
                    <t indent="0" pn="section-toc.1-1.7.2.5.2.2.1"><xref derivedContent="7.5.2" format="counter" sectionFormat="of" target="section-7.5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-relying-party">Relying Party</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.7.2.6">
                <t indent="0" pn="section-toc.1-1.7.2.6.1"><xref derivedContent="7.6" format="counter" sectionFormat="of" target="section-7.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requesting-assertions">Requesting Assertions</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.7">
                <t indent="0" pn="section-toc.1-1.7.2.7.1"><xref derivedContent="7.7" format="counter" sectionFormat="of" target="section-7.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-managing-user-login">Managing User Login</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-verifying-assertions">Verifying Assertions</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2">
              <li pn="section-toc.1-1.8.2.1">
                <t indent="0" pn="section-toc.1-1.8.2.1.1"><xref derivedContent="8.1" format="counter" sectionFormat="of" target="section-8.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-identity-formats">Identity Formats</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-communications-security-2">Communications Security</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-privacy">Privacy</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.3">
                <t indent="0" pn="section-toc.1-1.9.2.3.1"><xref derivedContent="9.3" format="counter" sectionFormat="of" target="section-9.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-denial-of-service">Denial of Service</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.4">
                <t indent="0" pn="section-toc.1-1.9.2.4.1"><xref derivedContent="9.4" format="counter" sectionFormat="of" target="section-9.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-idp-authentication-mechanis">IdP Authentication Mechanism</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2.4.2">
                  <li pn="section-toc.1-1.9.2.4.2.1">
                    <t indent="0" pn="section-toc.1-1.9.2.4.2.1.1"><xref derivedContent="9.4.1" format="counter" sectionFormat="of" target="section-9.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-peerconnection-origin-check">PeerConnection Origin Check</xref></t>
                  </li>
                  <li pn="section-toc.1-1.9.2.4.2.2">
                    <t indent="0" pn="section-toc.1-1.9.2.4.2.2.1"><xref derivedContent="9.4.2" format="counter" sectionFormat="of" target="section-9.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-idp-well-known-uri">IdP Well-Known URI</xref></t>
                  </li>
                  <li pn="section-toc.1-1.9.2.4.2.3">
                    <t indent="0" pn="section-toc.1-1.9.2.4.2.3.1"><xref derivedContent="9.4.3" format="counter" sectionFormat="of" target="section-9.4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-privacy-of-idp-generated-id">Privacy of IdP-Generated Identities and the Hosting Site</xref></t>
                  </li>
                  <li pn="section-toc.1-1.9.2.4.2.4">
                    <t indent="0" pn="section-toc.1-1.9.2.4.2.4.1"><xref derivedContent="9.4.4" format="counter" sectionFormat="of" target="section-9.4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-of-third-party-idp">Security of Third-Party IdPs</xref></t>
                    <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2.4.2.4.2">
                      <li pn="section-toc.1-1.9.2.4.2.4.2.1">
                        <t indent="0" pn="section-toc.1-1.9.2.4.2.4.2.1.1"><xref derivedContent="9.4.4.1" format="counter" sectionFormat="of" target="section-9.4.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-confusable-characters">Confusable Characters</xref></t>
                      </li>
                    </ul>
                  </li>
                  <li pn="section-toc.1-1.9.2.4.2.5">
                    <t indent="0" pn="section-toc.1-1.9.2.4.2.5.1"><xref derivedContent="9.4.5" format="counter" sectionFormat="of" target="section-9.4.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-web-security-feature-intera">Web Security Feature Interactions</xref></t>
                    <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2.4.2.5.2">
                      <li pn="section-toc.1-1.9.2.4.2.5.2.1">
                        <t indent="0" pn="section-toc.1-1.9.2.4.2.5.2.1.1"><xref derivedContent="9.4.5.1" format="counter" sectionFormat="of" target="section-9.4.5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-popup-blocking">Popup Blocking</xref></t>
                      </li>
                      <li pn="section-toc.1-1.9.2.4.2.5.2.2">
                        <t indent="0" pn="section-toc.1-1.9.2.4.2.5.2.2.1"><xref derivedContent="9.4.5.2" format="counter" sectionFormat="of" target="section-9.4.5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-third-party-cookies">Third Party Cookies</xref></t>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
              <li pn="section-toc.1-1.11.2.1">
                <t indent="0" pn="section-toc.1-1.11.2.1.1"><xref derivedContent="11.1" format="counter" sectionFormat="of" target="section-11.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.11.2.2">
                <t indent="0" pn="section-toc.1-1.11.2.2.1"><xref derivedContent="11.2" format="counter" sectionFormat="of" target="section-11.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-address">Author's Address</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="sec.introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">
        The Real-Time Communications on the Web (RTCWEB) Working Group
        standardized protocols for real-time communications between Web
        browsers, generally called "WebRTC" <xref target="RFC8825" format="default" sectionFormat="of" derivedContent="RFC8825"/>.
        The major use cases for WebRTC technology are real-time audio
        and/or video calls, Web conferencing, and direct data transfer. Unlike
        most conventional real-time systems (e.g., SIP-based <xref target="RFC3261" format="default" sectionFormat="of" derivedContent="RFC3261"/> soft phones), WebRTC communications are directly
        controlled by some Web server, via a JavaScript (JS) API as shown in
        <xref target="fig.simple" format="default" sectionFormat="of" derivedContent="Figure 1"/>.
      </t>
      <figure anchor="fig.simple" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-a-simple-webrtc-system">A Simple WebRTC System</name>
        <artwork name="" type="" align="left" alt="" pn="section-1-2.1">
                         +----------------+
                         |                |
                         |   Web Server   |
                         |                |
                         +----------------+
                             ^        ^
                            /          \
                    HTTP   /            \   HTTP
                          /              \
                         /                \
                        v                  v
                     JS API              JS API
               +-----------+            +-----------+
               |           |    Media   |           |
               |  Browser  |&lt;----------&gt;|  Browser  |
               |           |            |           |
               +-----------+            +-----------+ </artwork>
      </figure>
      <t indent="0" pn="section-1-3">
        A more complicated system might allow for inter-domain calling, as shown
        in <xref target="fig.multidomain" format="default" sectionFormat="of" derivedContent="Figure 2"/>.  The protocol to be used between
        the domains is not standardized by WebRTC, but given the installed base
        and the form of the WebRTC API is likely to be something SDP-based like
        SIP or something like the Extensible Messaging and Presence Protocol (XMPP)
        <xref target="RFC6120" format="default" sectionFormat="of" derivedContent="RFC6120"/>.
      </t>
      <figure anchor="fig.multidomain" align="left" suppress-title="false" pn="figure-2">
        <name slugifiedName="name-a-multidomain-webrtc-system">A Multidomain WebRTC System</name>
        <artwork name="" type="" align="left" alt="" pn="section-1-4.1">
          +--------------+                +--------------+
          |              | SIP, XMPP, ... |              |
          |  Web Server  |&lt;--------------&gt;|  Web Server  |
          |              |                |              |
          +--------------+                +--------------+
                 ^                                ^
                 |                                |
           HTTP  |                                |  HTTP
                 |                                |
                 v                                v
                 JS API                       JS API
           +-----------+                     +-----------+
           |           |        Media        |           |
           |  Browser  |&lt;-------------------&gt;|  Browser  |
           |           |                     |           |
           +-----------+                     +-----------+ </artwork>
      </figure>
      <t indent="0" pn="section-1-5">
        This system presents a number of new security challenges, which are
        analyzed in <xref target="RFC8826" format="default" sectionFormat="of" derivedContent="RFC8826"/>.  This document
        describes a security architecture for WebRTC which addresses the threats
        and requirements described in that document.
      </t>
    </section>
    <section anchor="sec-term" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <t indent="0" pn="section-2-1">The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
    "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
    "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/>
        <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they appear in all capitals,
    as shown here.</t>
    </section>
    <section anchor="sec.proposal.trusthierarchy" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-trust-model">Trust Model</name>
      <t indent="0" pn="section-3-1">
        The basic assumption of this architecture is that network resources
        exist in a hierarchy of trust, rooted in the browser, which serves as
        the user's Trusted Computing Base (TCB). Any security property which the
        user wishes to have enforced must be ultimately guaranteed by the
        browser (or transitively by some property the browser
        verifies). Conversely, if the browser is compromised, then no security
        guarantees are possible.  Note that there are cases (e.g., Internet
        kiosks) where the user can't really trust the browser that much. In
        these cases, the level of security provided is limited by how much they
        trust the browser.
      </t>
      <t indent="0" pn="section-3-2">
        Optimally, we would not rely on trust in any entities other than the
        browser. However, this is unfortunately not possible if we wish to have
        a functional system.  Other network elements fall into two categories:
        those which can be authenticated by the browser and thus can be granted
        permissions to access sensitive resources, and those which cannot be
        authenticated and thus are untrusted.
      </t>
      <section anchor="sec.proposal.authenticated" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-authenticated-entities">Authenticated Entities</name>
        <t indent="0" pn="section-3.1-1">
          There are two major classes of authenticated entities in the system:
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-3.1-2">
          <dt pn="section-3.1-2.1">Calling services:</dt>
          <dd pn="section-3.1-2.2">Web sites whose origin we can verify (optimally
              via HTTPS, but in some cases because we are on a topologically
              restricted network, such as behind a firewall, and can infer
              authentication from firewall behavior).</dd>
          <dt pn="section-3.1-2.3">Other users:</dt>
          <dd pn="section-3.1-2.4">WebRTC peers whose origin we can verify
              cryptographically (optimally via DTLS-SRTP).</dd>
        </dl>
        <t indent="0" pn="section-3.1-3">
          Note that merely being authenticated does not make these entities
          trusted. For instance, just because we can verify that
          &lt;https://www.example.org/&gt; is owned by Dr. Evil does not mean that we can
          trust Dr. Evil to access our camera and microphone. However, it gives
          the user an opportunity to determine whether they wish to trust
          Dr. Evil or not; after all, if they desire to contact Dr. Evil (perhaps
          to arrange for ransom payment), it's safe to temporarily give them
          access to the camera and microphone for the purpose of the call, but
          they don't want Dr. Evil to be able to access their camera and
          microphone other than during the call. The point here is that we must
          first identify other elements before we can determine whether and how
          much to trust them. Additionally, sometimes we need to identify the
          communicating peer before we know what policies to apply.
        </t>
      </section>
      <section anchor="sec.proposal.unauthenticated" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-unauthenticated-entities">Unauthenticated Entities</name>
        <t indent="0" pn="section-3.2-1">
          Other than the above entities, we are not generally able to identify
          other network elements; thus, we cannot trust them.  This does not mean
          that it is not possible to have any interaction with them, but it
          means that we must assume that they will behave maliciously and design
          a system which is secure even if they do so.
        </t>
      </section>
    </section>
    <section anchor="sec.proposal.overview" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-overview">Overview</name>
      <t indent="0" pn="section-4-1">
        This section describes a typical WebRTC session and shows how the
        various security elements interact and what guarantees are provided to
        the user. The example in this section is a "best case" scenario in which
        we provide the maximal amount of user authentication and media privacy
        with the minimal level of trust in the calling service. Simpler versions
        with lower levels of security are also possible and are noted in the
        text where applicable. It's also important to recognize the tension
        between security (or performance) and privacy. The example shown here is
        aimed towards settings where we are more concerned about secure calling
        than about privacy, but as we shall see, there are settings where one
        might wish to make different tradeoffs -- this architecture is still
        compatible with those settings.
      </t>
      <t indent="0" pn="section-4-2">
        For the purposes of this example, we assume the topology shown in the
        figures below. This topology is derived from the topology shown in <xref target="fig.simple" format="default" sectionFormat="of" derivedContent="Figure 1"/>, but separates Alice's and Bob's identities from the
        process of signaling.  Specifically, Alice and Bob have relationships
        with some Identity Provider (IdP) that supports a protocol (such as
        OpenID Connect) that can be used to demonstrate their identity to
        other parties. For instance, Alice might have an account with a social
        network which she can then use to authenticate to other Web sites
        without explicitly having an account with those sites; this is a fairly
        conventional pattern on the Web. <xref target="sec.trust-relationships" format="default" sectionFormat="of" derivedContent="Section 7.1"/> provides an overview of IdPs
        and the relevant terminology.  Alice and Bob might have
        relationships with different IdPs as well.
        Note: The IdP mechanism described here has not seen wide adoption.
        See <xref target="sec.generic.idp" format="default" sectionFormat="of" derivedContent="Section 7"/> for more on the status of
        IdP-based authentication.
      </t>
      <t indent="0" pn="section-4-3">
        This separation of identity provision and signaling isn't particularly
        important in "closed world" cases where Alice and Bob are users on the
        same social network and have identities based on that domain (<xref target="fig.proposal.idp" format="default" sectionFormat="of" derivedContent="Figure 3"/>). However, there are important settings where
        that is not the case, such as federation (calls from one domain to
        another; see <xref target="fig.proposal-federated.idp" format="default" sectionFormat="of" derivedContent="Figure 4"/>) and calling on
        untrusted sites, such as where two users who have a relationship via a
        given social network want to call each other on another, untrusted,
        site, such as a poker site.
      </t>
      <t indent="0" pn="section-4-4">
        Note that the servers themselves are also authenticated by an external
        identity service, the SSL/TLS certificate infrastructure (not shown).
        As is conventional in the Web, all identities are ultimately rooted in
        that system. For instance, when an IdP makes an identity assertion, the
        Relying Party consuming that assertion is able to verify because it is
        able to connect to the IdP via HTTPS.
      </t>
      <figure anchor="fig.proposal.idp" align="left" suppress-title="false" pn="figure-3">
        <name slugifiedName="name-a-call-with-idp-based-ident">A Call with IdP-Based Identity</name>
        <artwork name="" type="" align="left" alt="" pn="section-4-5.1">
                            +----------------+
                            |                |
                            |     Signaling  |
                            |     Server     |
                            |                |
                            +----------------+
                                ^        ^
                               /          \
                       HTTPS  /            \   HTTPS
                             /              \
                            /                \
                           v                  v
                        JS API              JS API
                  +-----------+            +-----------+
                  |           |    Media   |           |
            Alice |  Browser  |&lt;----------&gt;|  Browser  | Bob
                  |           | (DTLS+SRTP)|           |
                  +-----------+            +-----------+
                        ^      ^--+     +--^     ^
                        |         |     |        |
                        v         |     |        v
                  +-----------+   |     |  +-----------+
                  |           |&lt;--------+  |           |
                  |   IdP1    |   |        |    IdP2   |
                  |           |   +-------&gt;|           |
                  +-----------+            +-----------+ </artwork>
      </figure>
      <t indent="0" pn="section-4-6">
        <xref target="fig.proposal-federated.idp" format="default" sectionFormat="of" derivedContent="Figure 4"/> shows essentially the same
        calling scenario but with a call between two separate domains (i.e., a
        federated case), as in <xref target="fig.multidomain" format="default" sectionFormat="of" derivedContent="Figure 2"/>. As mentioned
        above, the domains communicate by some unspecified protocol, and
        providing separate signaling and identity allows for calls to be
        authenticated regardless of the details of the inter-domain protocol.
      </t>
      <figure anchor="fig.proposal-federated.idp" align="left" suppress-title="false" pn="figure-4">
        <name slugifiedName="name-a-federated-call-with-idp-b">A Federated Call with IdP-Based Identity</name>
        <artwork name="" type="" align="left" alt="" pn="section-4-7.1">
        +----------------+    Unspecified    +----------------+
        |                |      protocol     |                |
        |    Signaling   |&lt;-----------------&gt;|    Signaling   |
        |    Server      |  (SIP, XMPP, ...) |    Server      |
        |                |                   |                |
        +----------------+                   +----------------+
                 ^                                   ^
                 |                                   |
           HTTPS |                                   | HTTPS
                 |                                   |
                 |                                   |
                 v                                   v
              JS API                               JS API
        +-----------+                             +-----------+
        |           |             Media           |           |
  Alice |  Browser  |&lt;---------------------------&gt;|  Browser  | Bob
        |           |           DTLS+SRTP         |           |
        +-----------+                             +-----------+
              ^      ^--+                      +--^     ^
              |         |                      |        |
              v         |                      |        v
        +-----------+   |                      |  +-----------+
        |           |&lt;-------------------------+  |           |
        |   IdP1    |   |                         |    IdP2   |
        |           |   +------------------------&gt;|           |
        +-----------+                             +-----------+ </artwork>
      </figure>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-initial-signaling">Initial Signaling</name>
        <t indent="0" pn="section-4.1-1">
          For simplicity, assume the topology in <xref target="fig.proposal.idp" format="default" sectionFormat="of" derivedContent="Figure 3"/>.  Alice and Bob are both users of a common
          calling service; they both have approved the calling service to make
          calls (we defer the discussion of device access permissions until
          later).  They are both connected to the calling service via HTTPS and
          so know the origin with some level of confidence. They also have
          accounts with some IdP.  This sort of identity service
          is becoming increasingly common in the Web environment (with technologies
          such as Federated Google Login, Facebook Connect, OAuth,
          OpenID, WebFinger), and is often provided as a side effect service of
          a user's ordinary accounts with some service. In this example, we show
          Alice and Bob using a separate identity service, though the identity
          service may be the same entity as the calling service or there may be
          no identity service at all.
        </t>
        <t indent="0" pn="section-4.1-2">
          Alice is logged onto the calling service and decides to call Bob. She
          can see from the calling service that he is online and the calling
          service presents a JS UI in the form of a button next to Bob's name
          which says "Call". Alice clicks the button, which initiates a JS
          callback that instantiates a PeerConnection object. This does not
          require a security check: JS from any origin is allowed to get this
          far.
        </t>
        <t indent="0" pn="section-4.1-3">
          Once the PeerConnection is created, the calling service JS needs to
          set up some media. Because this is an audio/video call, it creates a
          MediaStream with two MediaStreamTracks, one connected to an audio
          input and one connected to a video input. At this point, the first
          security check is required: untrusted origins are not allowed to
          access the camera and microphone, so the browser prompts Alice for
          permission.
        </t>
        <t indent="0" pn="section-4.1-4">
          In the current W3C API, once some streams have been added, Alice's
          browser + JS generates a signaling message <xref target="RFC8829" format="default" sectionFormat="of" derivedContent="RFC8829"/> containing:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1-5">
          <li pn="section-4.1-5.1">
              Media channel information
          </li>
          <li pn="section-4.1-5.2">
              Interactive Connectivity Establishment (ICE) <xref target="RFC8445" format="default" sectionFormat="of" derivedContent="RFC8445"/> candidates
          </li>
          <li pn="section-4.1-5.3">
              A "fingerprint" attribute binding the communication to a key pair
              <xref target="RFC5763" format="default" sectionFormat="of" derivedContent="RFC5763"/>. Note that this key may simply be
              ephemerally generated for this call or specific to this domain,
              and Alice may have a large number of such keys.
          </li>
        </ul>
        <t indent="0" pn="section-4.1-6">
          Prior to sending out the signaling message, the PeerConnection code
          contacts the identity service and obtains an assertion binding Alice's
          identity to her fingerprint. The exact details depend on the identity
          service (though as discussed in <xref target="sec.generic.idp" format="default" sectionFormat="of" derivedContent="Section 7"/>
          PeerConnection can be agnostic to them), but for now it's easiest to
          think of as an OAuth token.  The assertion may bind other
          information to the identity besides the fingerprint, but at minimum it
          needs to bind the fingerprint.
        </t>
        <t indent="0" pn="section-4.1-7">
          This message is sent to the signaling server, e.g., by fetch()
          <xref target="fetch" format="default" sectionFormat="of" derivedContent="fetch"/> or by WebSockets
          <xref target="RFC6455" format="default" sectionFormat="of" derivedContent="RFC6455"/>, over TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>.
          The signaling server processes the message from Alice's browser,
          determines that this is a call to Bob, and sends a signaling message to
          Bob's browser (again, the format is currently undefined).  The JS on
          Bob's browser processes it, and alerts Bob to the incoming call and to
          Alice's identity. In this case, Alice has provided an identity
          assertion and so Bob's browser contacts Alice's IdP
          (again, this is done in a generic way so the browser has no specific
          knowledge of the IdP) to verify the assertion. It is also possible
          to have IdPs with which the browser has a specific trust relationship,
          as described in <xref target="sec.trust-relationships" format="default" sectionFormat="of" derivedContent="Section 7.1"/>.
          This allows the browser
          to display a trusted element in the browser chrome indicating that a
          call is coming in from Alice. If Alice is in Bob's address book, then
          this interface might also include her real name, a picture, etc.  The
          calling site will also provide some user interface element (e.g., a
          button) to allow Bob to answer the call, though this is most likely
          not part of the trusted UI.
        </t>
        <t indent="0" pn="section-4.1-8">
          If Bob agrees, a PeerConnection is instantiated with the message from
          Alice's side.  Then, a similar process occurs as on Alice's browser:
          Bob's browser prompts him for device permission, the media streams are
          created, and a return signaling message containing media information,
          ICE candidates, and a fingerprint is sent back to Alice via the
          signaling service.  If Bob has a relationship with an IdP, the message
          will also come with an identity assertion.
        </t>
        <t indent="0" pn="section-4.1-9">
          At this point, Alice and Bob each know that the other party wants to
          have a secure call with them. Based purely on the interface provided
          by the signaling server, they know that the signaling server claims
          that the call is from Alice to Bob. This level of security is provided
          merely by having the fingerprint in the message and having that
          message received securely from the signaling server.  Because the far
          end sent an identity assertion along with their message, they know
          that this is verifiable from the IdP as well. Note that if the call is
          federated, as shown in <xref target="fig.proposal-federated.idp" format="default" sectionFormat="of" derivedContent="Figure 4"/>,
          then Alice is able to verify Bob's identity in a way that is not
          mediated by either her signaling server or Bob's. Rather, she verifies
          it directly with Bob's IdP.
        </t>
        <t indent="0" pn="section-4.1-10">
          Of course, the call works perfectly well if either Alice or Bob
          doesn't have a relationship with an IdP; they just get a lower level
          of assurance. I.e., they simply have whatever information their
          calling site claims about the caller/callee's identity.  Moreover,
          Alice might wish to make an anonymous call through an anonymous
          calling site, in which case she would of course just not provide any
          identity assertion and the calling site would mask her identity from
          Bob.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-media-consent-verification">Media Consent Verification</name>
        <t indent="0" pn="section-4.2-1">
          As described in <xref target="RFC8826" sectionFormat="comma" section="4.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8826#section-4.2" derivedContent="RFC8826"/>, media consent verification is provided via ICE.
  Thus, Alice and
          Bob perform ICE checks with each other.  At the completion of these
          checks, they are ready to send non-ICE data.
        </t>
        <t indent="0" pn="section-4.2-2">
          At this point, Alice knows that (a) Bob (assuming he is verified via
          his IdP) or someone else who the signaling service is claiming is Bob
          is willing to exchange traffic with her and (b) either Bob is at
          the IP address which she has verified via ICE or there is an attacker
          who is on-path to that IP address detouring the traffic. Note that it
          is not possible for an attacker who is on-path between Alice and Bob
          but not attached to the signaling service to spoof these checks
          because they do not have the ICE credentials. Bob has the same
          security guarantees with respect to Alice.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-4.3">
        <name slugifiedName="name-dtls-handshake">DTLS Handshake</name>
        <t indent="0" pn="section-4.3-1">
          Once the requisite ICE checks have completed, Alice and Bob can set
          up a secure channel or channels. This is performed via DTLS <xref target="RFC6347" format="default" sectionFormat="of" derivedContent="RFC6347"/>
          and DTLS-SRTP <xref target="RFC5763" format="default" sectionFormat="of" derivedContent="RFC5763"/> keying for SRTP
          <xref target="RFC3711" format="default" sectionFormat="of" derivedContent="RFC3711"/> for the media channel and
          the Stream Control Transmission Protocol (SCTP) over DTLS
          <xref target="RFC8261" format="default" sectionFormat="of" derivedContent="RFC8261"/> for data
          channels. Specifically, Alice and Bob perform a DTLS handshake on
          every component which has been established by ICE. The total number of
          channels depends on the amount of muxing; in the most likely case, we
          are using both RTP/RTCP mux and muxing multiple media streams on the
          same channel, in which case there is only one DTLS handshake. Once the
          DTLS handshake has completed, the keys are exported <xref target="RFC5705" format="default" sectionFormat="of" derivedContent="RFC5705"/> and used to key SRTP for the media channels.
        </t>
        <t indent="0" pn="section-4.3-2">
          At this point, Alice and Bob know that they share a set of secure data
          and/or media channels with keys which are not known to any third-party
          attacker. If Alice and Bob authenticated via their IdPs, then they
          also know that the signaling service is not mounting a
          man-in-the-middle attack on their traffic. Even if they do not use an
          IdP, as long as they have minimal trust in the signaling service not
          to perform a man-in-the-middle attack, they know that their
          communications are secure against the signaling service as well (i.e.,
          that the signaling service cannot mount a passive attack on the
          communications).
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-4.4">
        <name slugifiedName="name-communications-and-consent-">Communications and Consent Freshness</name>
        <t indent="0" pn="section-4.4-1">
          From a security perspective, everything from here on in is a little
          anticlimactic: Alice and Bob exchange data protected by the keys
          negotiated by DTLS. Because of the security guarantees discussed in
          the previous sections, they know that the communications are encrypted
          and authenticated.
        </t>
        <t indent="0" pn="section-4.4-2">
          The one remaining security property we need to establish is "consent
          freshness", i.e., allowing Alice to verify that Bob is still prepared
          to receive her communications so that Alice does not continue to send
          large traffic volumes to entities which went abruptly offline. ICE
          specifies periodic Session Traversal Utilities for NAT (STUN) keepalives but only if media is not flowing.
          Because the consent issue is more difficult here, we require WebRTC
          implementations to periodically send keepalives using the
          consent freshness
          mechanism specified in <xref target="RFC7675" format="default" sectionFormat="of" derivedContent="RFC7675"/>.
  If a
          keepalive fails and no new ICE channels can be established, then the
          session is terminated.
        </t>
      </section>
    </section>
    <section anchor="sec.sdp-id-attr" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-sdp-identity-attribute">SDP Identity Attribute</name>
      <t indent="0" pn="section-5-1">
        The SDP "identity" attribute is a session-level attribute that
        is used by an endpoint to convey its identity assertion to its
        peer. The identity-assertion value is encoded as base64, as described
        in <xref target="RFC4648" sectionFormat="of" section="4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4648#section-4" derivedContent="RFC4648"/>.
      </t>
      <t indent="0" pn="section-5-2">
        The procedures in this section are based on the assumption
        that the identity assertion of an endpoint is bound to the
        fingerprints of the endpoint. This does not preclude the definition of
        alternative means of binding an assertion to the endpoint, but such
        means are outside the scope of this specification.
      </t>
      <t indent="0" pn="section-5-3">
        The semantics of multiple "identity" attributes within an
        offer or answer are undefined.  Implementations <bcp14>SHOULD</bcp14> only include a
        single "identity" attribute in an offer or answer, and Relying Parties
        <bcp14>MAY</bcp14> elect to ignore all but the first "identity" attribute.
      </t>
      <dl newline="false" spacing="normal" indent="3" pn="section-5-4">
        <dt pn="section-5-4.1">Name:</dt>
        <dd pn="section-5-4.2">identity</dd>
        <dt pn="section-5-4.3">Value:</dt>
        <dd pn="section-5-4.4">identity-assertion</dd>
        <dt pn="section-5-4.5">Usage Level:</dt>
        <dd pn="section-5-4.6">session</dd>
        <dt pn="section-5-4.7">Charset Dependent:</dt>
        <dd pn="section-5-4.8">no</dd>
        <dt pn="section-5-4.9">Default Value:</dt>
        <dd pn="section-5-4.10">N/A</dd>
      </dl>
      <t indent="0" pn="section-5-5">Syntax:</t>
      <sourcecode name="abnf-1" type="abnf" markers="false" pn="section-5-6">
 identity-assertion       = identity-assertion-value
                            *(SP identity-extension)
 identity-assertion-value = base64
 identity-extension       = extension-name [ "=" extension-value ]
 extension-name           = token
 extension-value          = 1*(%x01-09 / %x0b-0c / %x0e-3a / %x3c-ff)
                            ; byte-string from [RFC4566]

 &lt;ALPHA and DIGIT as defined in [RFC4566]&gt;
 &lt;base64 as defined in [RFC4566]&gt;
</sourcecode>
      <t indent="0" pn="section-5-7">Example:</t>
      <sourcecode name="sdp-1" type="sdp" markers="false" pn="section-5-8">
 a=identity:\
   eyJpZHAiOnsiZG9tYWluIjoiZXhhbXBsZS5vcmciLCJwcm90b2NvbCI6ImJvZ3Vz\
   In0sImFzc2VydGlvbiI6IntcImlkZW50aXR5XCI6XCJib2JAZXhhbXBsZS5vcmdc\
   IixcImNvbnRlbnRzXCI6XCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3l6XCIsXCJz\
   aWduYXR1cmVcIjpcIjAxMDIwMzA0MDUwNlwifSJ9</sourcecode>
      <aside pn="section-5-9">
        <t indent="0" pn="section-5-9.1">Note that long lines in the example are folded to meet the column
  width constraints of this document; the backslash ("\") at the end of
  a line, the carriage return that follows, and whitespace shall be ignored.</t>
      </aside>
      <t indent="0" pn="section-5-10">
         This specification does not define any extensions for the attribute.
      </t>
      <t indent="0" pn="section-5-11">
         The identity-assertion value is a JSON encoded string
         <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>. The JSON object
         contains two keys: "assertion" and "idp". The "assertion" key value contains
         an opaque string that is consumed by the IdP. The "idp" key value contains a
         dictionary with one or two further values that identify the IdP. See
         <xref target="sec.request-assert" format="default" sectionFormat="of" derivedContent="Section 7.6"/> for more details.
      </t>
      <section anchor="sec.sdp-id-attr-oa" numbered="true" toc="include" removeInRFC="false" pn="section-5.1">
        <name slugifiedName="name-offer-answer-considerations">Offer/Answer Considerations</name>
        <t indent="0" pn="section-5.1-1">
           This section defines the SDP offer/answer <xref target="RFC3264" format="default" sectionFormat="of" derivedContent="RFC3264"/> considerations for the SDP
           "identity" attribute.
        </t>
        <t indent="0" pn="section-5.1-2">
           Within this section, 'initial offer' refers to the first offer in the
           SDP session that contains an SDP "identity" attribute.
        </t>
        <section anchor="sec.sdp-id-attr-oa-inio" numbered="true" toc="include" removeInRFC="false" pn="section-5.1.1">
          <name slugifiedName="name-generating-the-initial-sdp-">Generating the Initial SDP Offer</name>
          <t indent="0" pn="section-5.1.1-1">
           When an offerer sends an offer, in order to provide its
           identity assertion to the peer, it includes an "identity" attribute in
           the offer. In addition, the offerer includes one or more SDP
           "fingerprint" attributes.  The "identity" attribute <bcp14>MUST</bcp14> be bound to
           all the "fingerprint" attributes in the session
           description.
          </t>
        </section>
        <section anchor="sec.sdp-id-attr-oa-ansa" numbered="true" toc="include" removeInRFC="false" pn="section-5.1.2">
          <name slugifiedName="name-generating-an-sdp-answer">Generating an SDP Answer</name>
          <t indent="0" pn="section-5.1.2-1">
             If the answerer elects to include an "identity" attribute, it follows
             the same steps as those in <xref target="sec.sdp-id-attr-oa-inio" format="default" sectionFormat="of" derivedContent="Section 5.1.1"/>.
             The answerer can choose to include or omit an "identity" attribute independently,
             regardless of whether the offerer did so.
          </t>
        </section>
        <section anchor="sec.sdp-id-attr-oa-offa" numbered="true" toc="include" removeInRFC="false" pn="section-5.1.3">
          <name slugifiedName="name-processing-an-sdp-offer-or-">Processing an SDP Offer or Answer</name>
          <t indent="0" pn="section-5.1.3-1">
             When an endpoint receives an offer or answer that contains an "identity"
             attribute, the answerer can use the attribute information to
             contact the IdP and verify the identity of the peer. If the identity
             requires a third-party IdP as described in <xref target="sec.trust-relationships" format="default" sectionFormat="of" derivedContent="Section 7.1"/>,
             then that IdP will need to have been specifically configured.
             If the identity verification fails, the answerer <bcp14>MUST</bcp14> discard the
             offer or answer as malformed.
          </t>
        </section>
        <section anchor="sec.sdp-id-attr-oa-modi" numbered="true" toc="include" removeInRFC="false" pn="section-5.1.4">
          <name slugifiedName="name-modifying-the-session">Modifying the Session</name>
          <t indent="0" pn="section-5.1.4-1">
             When modifying a session, if the set of fingerprints is
             unchanged, then the sender <bcp14>MAY</bcp14> send the same "identity" attribute. In
             this case, the established identity <bcp14>MUST</bcp14> be applied to existing DTLS
             connections as well as new connections established using one of those
             fingerprints. Note that <xref target="RFC8829" sectionFormat="comma" section="5.2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8829#section-5.2.1" derivedContent="RFC8829"/> requires that each media section use the same set of fingerprints.
             If a new "identity" attribute is received, then the receiver <bcp14>MUST</bcp14>
             apply that identity to all existing connections.
          </t>
          <t indent="0" pn="section-5.1.4-2">
             If the set of fingerprints changes, then the sender <bcp14>MUST</bcp14>
             either send a new "identity" attribute or none at all.
             Because a change in fingerprints also causes a new DTLS
             connection to be established, the receiver <bcp14>MUST</bcp14> discard
             all previously established identities.
          </t>
        </section>
      </section>
    </section>
    <section anchor="sec.proposal.detailed" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-detailed-technical-descript">Detailed Technical Description</name>
      <section anchor="sec.proposal.origin" numbered="true" toc="include" removeInRFC="false" pn="section-6.1">
        <name slugifiedName="name-origin-and-web-security-iss">Origin and Web Security Issues</name>
        <t indent="0" pn="section-6.1-1">
          The basic unit of permissions for WebRTC is the origin <xref target="RFC6454" format="default" sectionFormat="of" derivedContent="RFC6454"/>. Because the security of the origin depends on
          being able to authenticate content from that origin, the origin can
          only be securely established if data is transferred over HTTPS <xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818"/>. Thus, clients <bcp14>MUST</bcp14> treat HTTP and HTTPS origins as
          different permissions domains. Note: This follows directly from the
          origin security model and is stated here merely for clarity.
        </t>
        <t indent="0" pn="section-6.1-2">
          Many Web browsers currently forbid by default any active mixed content
          on HTTPS pages. That is, when JavaScript is loaded from an HTTP origin
          onto an HTTPS page, an error is displayed and the HTTP content is not
          executed unless the user overrides the error. Any browser which
          enforces such a policy will also not permit access to WebRTC
          functionality from mixed content pages (because they never display
          mixed content).  Browsers which allow active mixed content <bcp14>MUST</bcp14>
          nevertheless disable WebRTC functionality in mixed content settings.
        </t>
        <t indent="0" pn="section-6.1-3">
          Note that it is possible for a page which was not mixed content to
          become mixed content during the duration of the call.  The major risk
          here is that the newly arrived insecure JS might redirect media to a
          location controlled by the attacker.  Implementations <bcp14>MUST</bcp14> either
          choose to terminate the call or display a warning at that point.
        </t>
        <t indent="0" pn="section-6.1-4">
          Also note that the security architecture depends on the keying material
          not being available to move between origins.  However, it is assumed that
          the identity assertion can be passed to anyone that the page cares to.
        </t>
      </section>
      <section anchor="sec.proposal.device.permissions" numbered="true" toc="include" removeInRFC="false" pn="section-6.2">
        <name slugifiedName="name-device-permissions-model">Device Permissions Model</name>
        <t indent="0" pn="section-6.2-1">
          Implementations <bcp14>MUST</bcp14> obtain explicit user consent prior to providing
          access to the camera and/or microphone. Implementations <bcp14>MUST</bcp14> at
          minimum support the following two permissions models for HTTPS
          origins.
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.2-2">
          <li pn="section-6.2-2.1">
              Requests for one-time camera/microphone access.
          </li>
          <li pn="section-6.2-2.2">
              Requests for permanent access.
          </li>
        </ul>
        <t indent="0" pn="section-6.2-3">
          Because HTTP origins cannot be securely established against network
          attackers, implementations <bcp14>MUST</bcp14> refuse all permissions grants for
          HTTP origins.
        </t>
        <t indent="0" pn="section-6.2-4">
          In addition, they <bcp14>SHOULD</bcp14> support requests for access that promise that
          media from this grant will be sent to a single communicating peer
          (obviously there could be other requests for other peers), e.g.,
          "Call customerservice@example.org".  The semantics of this request are
          that the media stream from the camera and microphone will only be
          routed through a connection which has been cryptographically verified
          (through the IdP mechanism or an X.509 certificate in the DTLS-SRTP
          handshake) as being associated with the stated identity. Note that it
          is unlikely that browsers would have X.509 certificates, but servers
          might.  Browsers servicing such requests <bcp14>SHOULD</bcp14> clearly indicate that
          identity to the user when asking for permission.  The idea behind this
          type of permissions is that a user might have a fairly narrow list of
          peers they are willing to communicate with, e.g., "my mother" rather than
          "anyone on Facebook". Narrow permissions grants allow the browser to
          do that enforcement.
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.2-5">
          <dt pn="section-6.2-5.1">API Requirement:</dt>
          <dd pn="section-6.2-5.2">
              The API <bcp14>MUST</bcp14> provide a mechanism for the requesting JS to
              relinquish the ability to see or modify the media (e.g., via
              MediaStream.record()).  Combined with secure authentication of the
              communicating peer, this allows a user to be sure that the calling
              site is not accessing or modifying their conversion.
          </dd>
        </dl>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.2-6">
          <dt pn="section-6.2-6.1">UI Requirement:</dt>
          <dd pn="section-6.2-6.2">
              The UI <bcp14>MUST</bcp14> clearly indicate when the user's camera and microphone
              are in use.  This indication <bcp14>MUST NOT</bcp14> be suppressible by the JS
              and <bcp14>MUST</bcp14> clearly indicate how to terminate device access, and
              provide a UI means to immediately stop camera/microphone input
              without the JS being able to prevent it.
          </dd>
        </dl>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.2-7">
          <dt pn="section-6.2-7.1">UI Requirement:</dt>
          <dd pn="section-6.2-7.2">
              If the UI indication of camera/microphone use is displayed in the
              browser such that minimizing the browser window would hide the
              indication, or the JS creating an overlapping window would hide
              the indication, then the browser <bcp14>SHOULD</bcp14> stop camera and microphone
              input when the indication is hidden.  (Note: This may not be
              necessary in systems that are non-windows-based but that have good
              notifications support, such as phones.)
          </dd>
        </dl>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.2-8">
          <li pn="section-6.2-8.1">
              Browsers <bcp14>MUST NOT</bcp14> permit permanent screen or application sharing
              permissions to be installed as a response to a JS request for
              permissions. Instead, they must require some other user action
              such as a permissions setting or an application install experience
              to grant permission to a site.
          </li>
          <li pn="section-6.2-8.2">
              Browsers <bcp14>MUST</bcp14> provide a separate dialog request for
              screen/application sharing permissions even if the media request
              is made at the same time as the request for camera and microphone
              permissions.
          </li>
          <li pn="section-6.2-8.3">
              The browser <bcp14>MUST</bcp14> indicate any windows which are currently being
              shared in some unambiguous way. Windows which are not visible <bcp14>MUST NOT</bcp14> be shared even if the application is being shared.  If the
              screen is being shared, then that <bcp14>MUST</bcp14> be indicated.
          </li>
        </ul>
        <t indent="0" pn="section-6.2-9">
          Browsers <bcp14>MAY</bcp14> permit the formation of data channels without any direct
          user approval. Because sites can always tunnel data through the
          server, further restrictions on the data channel do not provide any
          additional security.  (See <xref target="sec.proposal.communications.consent" format="default" sectionFormat="of" derivedContent="Section 6.3"/> for a related issue.)
        </t>
        <t indent="0" pn="section-6.2-10">
          Implementations which support some form of direct user authentication
          <bcp14>SHOULD</bcp14> also provide a policy by which a user can authorize calls only
          to specific communicating peers. Specifically, the implementation
          <bcp14>SHOULD</bcp14> provide the following interfaces/controls:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.2-11">
          <li pn="section-6.2-11.1">
              Allow future calls to this verified user.
          </li>
          <li pn="section-6.2-11.2">
              Allow future calls to any verified user who is in my system
              address book (this only works with address book integration, of
              course).
          </li>
        </ul>
        <t indent="0" pn="section-6.2-12">
          Implementations <bcp14>SHOULD</bcp14> also provide a different user interface
          indication when calls are in progress to users whose identities are
          directly verifiable.  <xref target="sec.proposal.comsec" format="default" sectionFormat="of" derivedContent="Section 6.5"/> provides
          more on this.
        </t>
      </section>
      <section anchor="sec.proposal.communications.consent" numbered="true" toc="include" removeInRFC="false" pn="section-6.3">
        <name slugifiedName="name-communications-consent">Communications Consent</name>
        <t indent="0" pn="section-6.3-1">
          Browser client implementations of WebRTC <bcp14>MUST</bcp14> implement ICE.  Server
          gateway implementations which operate only at public IP addresses <bcp14>MUST</bcp14>
          implement either full ICE or ICE-Lite <xref target="RFC8445" format="default" sectionFormat="of" derivedContent="RFC8445"/>.
        </t>
        <t indent="0" pn="section-6.3-2">
          Browser implementations <bcp14>MUST</bcp14> verify reachability via ICE prior to
          sending any non-ICE packets to a given destination.  Implementations
          <bcp14>MUST NOT</bcp14> provide the ICE transaction ID to JavaScript during the
          lifetime of the transaction (i.e., during the period when the ICE
          stack would accept a new response for that transaction).  The JS <bcp14>MUST NOT</bcp14> be permitted to control the local ufrag and password, though it of
          course knows it.
        </t>
        <t indent="0" pn="section-6.3-3">
          While continuing consent is required, the ICE <xref target="RFC8445" sectionFormat="comma" section="11" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8445#section-11" derivedContent="RFC8445"/> keepalives use STUN Binding Indications, which are
          one-way and therefore not sufficient.  The current WG consensus is to
          use ICE Binding Requests for continuing consent freshness. ICE already
          requires that implementations respond to such requests, so this
          approach is maximally compatible. A separate document will profile the
          ICE timers to be used; see <xref target="RFC7675" format="default" sectionFormat="of" derivedContent="RFC7675"/>.
        </t>
      </section>
      <section anchor="sec.proposal.ip.location.privacy" numbered="true" toc="include" removeInRFC="false" pn="section-6.4">
        <name slugifiedName="name-ip-location-privacy">IP Location Privacy</name>
        <t indent="0" pn="section-6.4-1">
          A side effect of the default ICE behavior is that the peer learns
          one's IP address, which leaks large amounts of location
          information. This has negative privacy consequences in some
          circumstances. The API requirements in this section are intended to
          mitigate this issue. Note that these requirements are not intended to
          protect the user's IP address from a malicious site. In general, the
          site will learn at least a user's server-reflexive address from any
          HTTP transaction.  Rather, these requirements are intended to allow a
          site to cooperate with the user to hide the user's IP address from the
          other side of the call. Hiding the user's IP address from the server
          requires some sort of explicit privacy-preserving mechanism on the
          client (e.g., Tor Browser <eref brackets="angle" target="https://www.torproject.org/projects/torbrowser.html.en"/>) and
          is out of scope for this specification.
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.4-2">
          <dt pn="section-6.4-2.1">API Requirement:</dt>
          <dd pn="section-6.4-2.2">
              The API <bcp14>MUST</bcp14> provide a mechanism to allow the JS to suppress ICE
              negotiation (though perhaps to allow candidate gathering) until
              the user has decided to answer the call. (Note: Determining when
              the call has been answered is a question for the JS.)  This
              enables a user to prevent a peer from learning their IP address if
              they elect not to answer a call and also from learning whether the
              user is online.
          </dd>
        </dl>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.4-3">
          <dt pn="section-6.4-3.1">API Requirement:</dt>
          <dd pn="section-6.4-3.2">
              The API <bcp14>MUST</bcp14> provide a mechanism for the calling application JS to
              indicate that only TURN candidates are to be used. This prevents
              the peer from learning one's IP address at all.  This mechanism
              <bcp14>MUST</bcp14> also permit suppression of the related address field, since
              that leaks local addresses.
          </dd>
        </dl>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.4-4">
          <dt pn="section-6.4-4.1">API Requirement:</dt>
          <dd pn="section-6.4-4.2">
              The API <bcp14>MUST</bcp14> provide a mechanism for the calling application to
              reconfigure an existing call to add non-TURN candidates.  Taken
              together, this and the previous requirement allow ICE negotiation
              to start immediately on incoming call notification, thus reducing
              post-dial delay, but also to avoid disclosing the user's IP
              address until they have decided to answer. They also allow users
              to completely hide their IP address for the duration of the
              call. Finally, they allow a mechanism for the user to optimize
              performance by reconfiguring to allow non-TURN candidates during
              an active call if the user decides they no longer need to hide
              their IP address.
          </dd>
        </dl>
        <t indent="0" pn="section-6.4-5">
          Note that some enterprises may operate proxies and/or NATs designed to
          hide internal IP addresses from the outside world. WebRTC provides no
          explicit mechanism to allow this function. Either such enterprises
          need to proxy the HTTP/HTTPS and modify the SDP and/or the JS, or
          there needs to be browser support to set the "TURN-only" policy
          regardless of the site's preferences.
        </t>
        <t indent="0" pn="section-6.4-6">
          Note: These requirements are intended to allow sites to conceal the
          user's IP address from the peer. For guidance on concealing the
          user's IP address from the calling site see <xref target="RFC8828" format="default" sectionFormat="of" derivedContent="RFC8828"/>.
        </t>
      </section>
      <section anchor="sec.proposal.comsec" numbered="true" toc="include" removeInRFC="false" pn="section-6.5">
        <name slugifiedName="name-communications-security">Communications Security</name>
        <t indent="0" pn="section-6.5-1">
          Implementations <bcp14>MUST</bcp14> support SRTP <xref target="RFC3711" format="default" sectionFormat="of" derivedContent="RFC3711"/>.
          Implementations <bcp14>MUST</bcp14> support DTLS <xref target="RFC6347" format="default" sectionFormat="of" derivedContent="RFC6347"/> and
          DTLS-SRTP <xref target="RFC5763" format="default" sectionFormat="of" derivedContent="RFC5763"/> <xref target="RFC5764" format="default" sectionFormat="of" derivedContent="RFC5764"/> for SRTP
          keying. Implementations <bcp14>MUST</bcp14> support SCTP over DTLS <xref target="RFC8261" format="default" sectionFormat="of" derivedContent="RFC8261"/>.
        </t>
        <t indent="0" pn="section-6.5-2">
          All media channels <bcp14>MUST</bcp14> be secured via SRTP and the
          Secure Real-time Transport Control Protocol (SRTCP).  Media traffic <bcp14>MUST NOT</bcp14>
          be sent over plain (unencrypted) RTP or RTCP; that is, implementations <bcp14>MUST NOT</bcp14> negotiate cipher suites with NULL encryption modes.  DTLS-SRTP
          <bcp14>MUST</bcp14> be offered for every media channel.  WebRTC implementations <bcp14>MUST NOT</bcp14>
          offer SDP security descriptions <xref target="RFC4568" format="default" sectionFormat="of" derivedContent="RFC4568"/> or select it if offered.
          An SRTP Master Key Identifier (MKI) <bcp14>MUST NOT</bcp14> be used.
        </t>
        <t indent="0" pn="section-6.5-3">
          All data channels <bcp14>MUST</bcp14> be secured via DTLS.
        </t>
        <t indent="0" pn="section-6.5-4">
         All implementations <bcp14>MUST</bcp14> support DTLS 1.2 with the
          TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 cipher suite and the
          <xref target="FIPS186" format="default" sectionFormat="of" derivedContent="FIPS186">P-256 curve</xref>.
          Earlier drafts of this specification required
          DTLS 1.0 with the cipher suite
          TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, and at the time of this
          writing some implementations do not support DTLS 1.2;
          endpoints which support only DTLS 1.2 might encounter
          interoperability issues.
          The DTLS-SRTP protection profile
          SRTP_AES128_CM_HMAC_SHA1_80 <bcp14>MUST</bcp14> be supported for
          SRTP.
          Implementations
          <bcp14>MUST</bcp14> favor cipher suites which support Forward Secrecy (FS)
          over non-FS cipher suites and <bcp14>SHOULD</bcp14> favor
          Authenticated Encryption with Associated Data (AEAD) over non-AEAD cipher suites.
          Note: the IETF is in the process of standardizing DTLS 1.3
          <xref target="I-D.ietf-tls-dtls13" format="default" sectionFormat="of" derivedContent="TLS-DTLS13"/>.
        </t>
        <t indent="0" pn="section-6.5-5">
          Implementations <bcp14>MUST NOT</bcp14> implement DTLS renegotiation and <bcp14>MUST</bcp14> reject
          it with a "no_renegotiation" alert if offered.</t>
        <t indent="0" pn="section-6.5-6">
          Endpoints <bcp14>MUST NOT</bcp14> implement TLS False Start <xref target="RFC7918" format="default" sectionFormat="of" derivedContent="RFC7918"/>.</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.5-7">
          <dt pn="section-6.5-7.1">API Requirement:</dt>
          <dd pn="section-6.5-7.2">
              The API <bcp14>MUST</bcp14> generate a new authentication key pair for every new
              call by default.  This is intended to allow for unlinkability.
          </dd>
          <dt pn="section-6.5-7.3">API Requirement:</dt>
          <dd pn="section-6.5-7.4">
              The API <bcp14>MUST</bcp14> provide a means to reuse a key pair for calls.  This
              can be used to enable key continuity-based authentication, and
              could be used to amortize key generation costs.
          </dd>
          <dt pn="section-6.5-7.5">API Requirement:</dt>
          <dd pn="section-6.5-7.6">
              Unless
              the user specifically configures an external key pair, different
              key pairs <bcp14>MUST</bcp14> be used for each origin. (This avoids creating a
              super-cookie.)
          </dd>
          <dt pn="section-6.5-7.7">API Requirement:</dt>
          <dd pn="section-6.5-7.8">
              When DTLS-SRTP is used, the API <bcp14>MUST NOT</bcp14> permit the JS to obtain
              the negotiated keying material. This requirement preserves the
              end-to-end security of the media.
          </dd>
        </dl>
        <dl newline="false" spacing="normal" indent="3" pn="section-6.5-8">
          <dt pn="section-6.5-8.1">UI Requirements:</dt>
          <dd pn="section-6.5-8.2">
              A user-oriented client <bcp14>MUST</bcp14> provide an "inspector" interface which
              allows the user to determine the "security characteristics" of the
              media.
          </dd>
          <dt pn="section-6.5-8.3"/>
          <dd pn="section-6.5-8.4">
              The following properties <bcp14>SHOULD</bcp14> be displayed "up-front" in the
              browser chrome, i.e., without requiring the user to ask for them:
          </dd>
          <dt pn="section-6.5-8.5"/>
          <dd pn="section-6.5-8.6">
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.5-8.6.1">
              <li pn="section-6.5-8.6.1.1">
                  A client <bcp14>MUST</bcp14> provide a user interface through which a user
                  may determine the "security characteristics" for
                  currently displayed audio and video stream(s).
              </li>
              <li pn="section-6.5-8.6.1.2">
                  A client <bcp14>MUST</bcp14> provide a user interface through which a user
                  may determine the "security characteristics" for transmissions
                  of their microphone audio and camera video.
              </li>
              <li pn="section-6.5-8.6.1.3">
                  If the far endpoint was directly verified, either via a
                  third-party verifiable X.509 certificate or via a Web IdP
                  mechanism (see <xref target="sec.generic.idp" format="default" sectionFormat="of" derivedContent="Section 7"/>), the "security
                  characteristics" <bcp14>MUST</bcp14> include the verified information.  X.509
                  identities and Web IdP identities have similar semantics and
                  should be displayed in a similar way.
              </li>
            </ul>
          </dd>
          <dt pn="section-6.5-8.7"/>
          <dd pn="section-6.5-8.8">
              The following properties are more likely to require some
              "drill-down" from the user:
          </dd>
          <dt pn="section-6.5-8.9"/>
          <dd pn="section-6.5-8.10">
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.5-8.10.1">
              <li pn="section-6.5-8.10.1.1">
                  The "security characteristics" <bcp14>MUST</bcp14> indicate the cryptographic
                  algorithms in use (for example, "AES-CBC").
              </li>
              <li pn="section-6.5-8.10.1.2">
                  The "security characteristics" <bcp14>MUST</bcp14> indicate whether FS is
                  provided.
              </li>
              <li pn="section-6.5-8.10.1.3">
                  The "security characteristics" <bcp14>MUST</bcp14> include some mechanism to
                  allow an out-of-band verification of the peer, such as a
                  certificate fingerprint or a Short Authentication String (SAS).
                  These are compared by the peers to authenticate one another.
              </li>
            </ul>
          </dd>
        </dl>
      </section>
    </section>
    <section anchor="sec.generic.idp" numbered="true" toc="include" removeInRFC="false" pn="section-7">
      <name slugifiedName="name-web-based-peer-authenticati">Web-Based Peer Authentication</name>
      <t indent="0" pn="section-7-1">
        NOTE: The mechanism described in this section was designed relatively
        early in the RTCWEB process. In retrospect, the WG was too optimistic
        about the enthusiasm for this kind of mechanism. At the time of publication,
        it has not been widely adopted or implemented. It appears in this document
        as a description of the state of the art as of this writing.
      </t>
      <t indent="0" pn="section-7-2">
          In a number of cases, it is desirable for the endpoint (i.e., the
          browser) to be able to directly identify the endpoint on the other
          side without trusting the signaling service to which they are
          connected. For instance, users may be making a call via a federated
          system where they wish to get direct authentication of the other
          side. Alternately, they may be making a call on a site which they
          minimally trust (such as a poker site) but to someone who has an
          identity on a site they do trust (such as a social network).
      </t>
      <t indent="0" pn="section-7-3">
          Recently, a number of Web-based identity technologies (OAuth,
          Facebook Connect, etc.) have been developed. While the
          details vary, what these technologies share is that they have a
          Web-based (i.e., HTTP/HTTPS) IdP which attests to Alice's
          identity. For instance, if Alice has an account at example.org, Alice could
          use the example.org IdP to prove to others that Alice is
          alice@example.org.  The development of these technologies allows us to
          separate calling from identity provision: Alice could call you on a
          poker site but identify herself as alice@example.org.
      </t>
      <t indent="0" pn="section-7-4">
          Whatever the underlying technology, the general principle is that the
          party which is being authenticated is NOT the signaling site but
          rather the user (and their browser). Similarly, the Relying Party is
          the browser and not the signaling site.  Thus, the browser <bcp14>MUST</bcp14>
          generate the input to the IdP assertion process and
          display the results of the verification process to the user
          in a way which cannot be imitated by the calling site.
      </t>
      <t indent="0" pn="section-7-5">
          The mechanisms defined in this document do not require the browser to
          implement any particular identity protocol or to support any
          particular IdP. Instead, this document provides a generic interface
          which any IdP can implement. Thus, new IdPs and protocols can be
          introduced without change to either the browser or the calling
          service. This avoids the need to make a commitment to any particular
          identity protocol, although browsers may opt to directly implement
          some identity protocols in order to provide superior performance or UI
          properties.
      </t>
      <section anchor="sec.trust-relationships" numbered="true" toc="include" removeInRFC="false" pn="section-7.1">
        <name slugifiedName="name-trust-relationships-idps-ap">Trust Relationships: IdPs, APs, and RPs</name>
        <t indent="0" pn="section-7.1-1">
            Any federated identity protocol has three major participants:
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-7.1-2">
          <dt pn="section-7.1-2.1">Authenticating Party (AP):</dt>
          <dd pn="section-7.1-2.2">
                The entity which is trying to establish its identity.
          </dd>
          <dt pn="section-7.1-2.3">Identity Provider (IdP):</dt>
          <dd pn="section-7.1-2.4">
                The entity which is vouching for the AP's identity.
          </dd>
          <dt pn="section-7.1-2.5">Relying Party (RP):</dt>
          <dd pn="section-7.1-2.6">
                The entity which is trying to verify the AP's identity.
          </dd>
        </dl>
        <t indent="0" pn="section-7.1-3">
            The AP and the IdP have an account relationship of some kind: the AP
            registers with the IdP and is able to subsequently authenticate
            directly to the IdP (e.g., with a password). This means that the
            browser must somehow know which IdP(s) the user has an account
            relationship with.  This can either be something that the user
            configures into the browser or that is configured at the calling
            site and then provided to the PeerConnection by the Web application
            at the calling site. The use case for having this information
            configured into the browser is that the user may "log into" the
            browser to bind it to some identity. This is becoming common in new
            browsers. However, it should also be possible for the IdP
            information to simply be provided by the calling application.
        </t>
        <t indent="0" pn="section-7.1-4">
            At a high level, there are two kinds of IdPs:
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-7.1-5">
          <dt pn="section-7.1-5.1">Authoritative:</dt>
          <dd pn="section-7.1-5.2">
                IdPs which have verifiable control of some section of the
                identity space. For instance, in the realm of email, the
                operator of "example.com" has complete control of the namespace
                ending in "@example.com". Thus, "alice@example.com" is whoever
                the operator says it is. Examples of systems with authoritative
                IdPs include DNSSEC, an identity system for SIP
                (see <xref target="RFC8224" format="default" sectionFormat="of" derivedContent="RFC8224"/>), and Facebook
                Connect (Facebook identities only make sense within the context
                of the Facebook system).
          </dd>
          <dt pn="section-7.1-5.3">Third-Party:</dt>
          <dd pn="section-7.1-5.4">
                IdPs which don't have control of their section of the identity
                space but instead verify users' identities via some unspecified
                mechanism and then attest to it. Because the IdP doesn't
                actually control the namespace, RPs need to trust that the IdP
                is correctly verifying AP identities, and there can potentially
                be multiple IdPs attesting to the same section of the identity
                space. Probably the best-known example of a third-party IdP
                is SSL/TLS certificates, where there are a large number of
                certificate authorities (CAs) all of whom can attest to any domain name.
          </dd>
        </dl>
        <t indent="0" pn="section-7.1-6">
            If an AP is authenticating via an authoritative IdP, then the RP
            does not need to explicitly configure trust in the IdP at all.  The
            identity mechanism can directly verify that the IdP indeed made the
            relevant identity assertion (a function provided by the mechanisms
            in this document), and any assertion it makes about an identity for
            which it is authoritative is directly verifiable. Note that this
            does not mean that the IdP might not lie, but that is a
            trustworthiness judgement that the user can make at the time they
            look at the identity.
        </t>
        <t indent="0" pn="section-7.1-7">
            By contrast, if an AP is authenticating via a third-party IdP, the
            RP needs to explicitly trust that IdP (hence the need for an
            explicit trust anchor list in PKI-based SSL/TLS clients). The list
            of trustable IdPs needs to be configured directly into the browser,
            either by the user or potentially by the browser manufacturer. This
            is a significant advantage of authoritative IdPs and implies that if
            third-party IdPs are to be supported, the potential number needs to
            be fairly small.
        </t>
      </section>
      <section anchor="sec.overview" numbered="true" toc="include" removeInRFC="false" pn="section-7.2">
        <name slugifiedName="name-overview-of-operation">Overview of Operation</name>
        <t indent="0" pn="section-7.2-1">
            In order to provide security without trusting the calling site, the
            PeerConnection component of the browser must interact directly with
            the IdP. The details of the mechanism are described in the W3C API
            specification, but the general idea is that the PeerConnection
            component downloads JS from a specific location on the IdP dictated
            by the IdP domain name. That JS (the "IdP proxy") runs in an
            isolated security context within the browser, and the PeerConnection
            talks to it via a secure message passing channel.
        </t>
        <t indent="0" pn="section-7.2-2">
            Note that there are two logically separate functions here:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7.2-3">
          <li pn="section-7.2-3.1">
                Identity assertion generation.
          </li>
          <li pn="section-7.2-3.2">
                Identity assertion verification.
          </li>
        </ul>
        <t indent="0" pn="section-7.2-4">
            The same IdP JS "endpoint" is used for both functions, but of course
            a given IdP might behave differently and load new JS to perform one
            function or the other.
        </t>
        <artwork name="" type="" align="left" alt="" pn="section-7.2-5">
     +--------------------------------------+
     | Browser                              |
     |                                      |
     | +----------------------------------+ |
     | | https://calling-site.example.com | |
     | |                                  | |
     | |        Calling JS Code           | |
     | |               ^                  | |
     | +---------------|------------------+ |
     |                 | API Calls          |
     |                 v                    |
     |          PeerConnection              |
     |                 ^                    |
     |                 | API Calls          |
     |     +-----------|-------------+      |   +---------------+
     |     |           v             |      |   |               |
     |     |       IdP Proxy         |&lt;--------&gt;|   Identity    |
     |     |                         |      |   |   Provider    |
     |     | https://idp.example.org |      |   |               |
     |     +-------------------------+      |   +---------------+
     |                                      |
     +--------------------------------------+ </artwork>
        <t indent="0" pn="section-7.2-6">
            When the PeerConnection object wants to interact with the IdP, the
            sequence of events is as follows:
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-7.2-7">
          <li pn="section-7.2-7.1" derivedCounter="1.">
                The browser (the PeerConnection component) instantiates an IdP
                proxy. This allows the IdP to load whatever JS is necessary into
                the proxy.  The resulting code runs in the IdP's security
                context.
          </li>
          <li pn="section-7.2-7.2" derivedCounter="2.">
                The IdP registers an object with the browser that conforms to
                the API defined in <xref target="webrtc-api" format="default" sectionFormat="of" derivedContent="webrtc-api"/>.
          </li>
          <li pn="section-7.2-7.3" derivedCounter="3.">
                The browser invokes methods on the object registered by the IdP
                proxy to create or verify identity assertions.
          </li>
        </ol>
        <t indent="0" pn="section-7.2-8">
            This approach allows us to decouple the browser from any particular
            IdP; the browser need only know how to load the IdP's
            JavaScript -- the location of which is determined based on the IdP's
            identity -- and to call the generic API for requesting and verifying
            identity assertions. The IdP provides whatever logic is necessary to
            bridge the generic protocol to the IdP's specific
            requirements. Thus, a single browser can support any number of
            identity protocols, including being forward compatible with IdPs
            which did not exist at the time the browser was written.
        </t>
      </section>
      <section anchor="sec.standardized" numbered="true" toc="include" removeInRFC="false" pn="section-7.3">
        <name slugifiedName="name-items-for-standardization">Items for Standardization</name>
        <t indent="0" pn="section-7.3-1">
            There are two parts to this work:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7.3-2">
          <li pn="section-7.3-2.1">
                The precise information from the signaling message that must be
                cryptographically bound to the user's identity and a mechanism
                for carrying assertions in JavaScript Session Establishment
                Protocol (JSEP) messages. This is specified in
                <xref target="sec.jsep-binding" format="default" sectionFormat="of" derivedContent="Section 7.4"/>.
          </li>
          <li pn="section-7.3-2.2">
                The interface to the IdP, which is defined in the companion W3C
                WebRTC API specification <xref target="webrtc-api" format="default" sectionFormat="of" derivedContent="webrtc-api"/>.
          </li>
        </ul>
        <t indent="0" pn="section-7.3-3">
            The WebRTC API specification also defines JavaScript interfaces that
            the calling application can use to specify which IdP to use.  That
            API also provides access to the assertion-generation capability and
            the status of the validation process.
        </t>
      </section>
      <section anchor="sec.jsep-binding" numbered="true" toc="include" removeInRFC="false" pn="section-7.4">
        <name slugifiedName="name-binding-identity-assertions">Binding Identity Assertions to JSEP Offer/Answer Transactions</name>
        <t indent="0" pn="section-7.4-1">
            An identity assertion binds the user's identity (as asserted by the
            IdP) to the SDP offer/answer exchange and specifically to the
            media. In order to achieve this, the PeerConnection must provide the
            DTLS-SRTP fingerprint to be bound to the identity. This is provided
            as a JavaScript object (also known as a dictionary or hash) with a
            single "fingerprint" key, as shown below:
        </t>
        <sourcecode name="json-1" type="json" markers="false" pn="section-7.4-2">
{
  "fingerprint":
    [
      { "algorithm": "sha-256",
        "digest": "4A:AD:B9:B1:3F:...:E5:7C:AB" },
      { "algorithm": "sha-1",
        "digest": "74:E9:76:C8:19:...:F4:45:6B" }
    ]
}</sourcecode>
        <t indent="0" pn="section-7.4-3">
            The "fingerprint" value is an array of
            objects.  Each object in the array contains "algorithm" and "digest" values, which correspond directly to
            the algorithm and digest values in the "fingerprint" attribute of the SDP <xref target="RFC8122" format="default" sectionFormat="of" derivedContent="RFC8122"/>.
        </t>
        <t indent="0" pn="section-7.4-4">
            This object is encoded in a <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259">JSON</xref>
            string for passing to the IdP.  The identity assertion returned by
            the IdP, which is encoded in the "identity" attribute, is a JSON object that is
            encoded as described in <xref target="sec.carry-assertion" format="default" sectionFormat="of" derivedContent="Section 7.4.1"/>.
        </t>
        <t indent="0" pn="section-7.4-5">
            This structure does not need to be interpreted by the IdP or the
            IdP proxy. It is consumed solely by the RP's browser.  The IdP
            merely treats it as an opaque value to be attested to.  Thus, new
            parameters can be added to the assertion without modifying the
            IdP.
        </t>
        <section anchor="sec.carry-assertion" numbered="true" toc="include" removeInRFC="false" pn="section-7.4.1">
          <name slugifiedName="name-carrying-identity-assertion">Carrying Identity Assertions</name>
          <t indent="0" pn="section-7.4.1-1">
              Once an IdP has generated an assertion (see <xref target="sec.request-assert" format="default" sectionFormat="of" derivedContent="Section 7.6"/>), it is attached to the SDP
              offer/answer message. This is done by adding a new "identity"
              attribute to the SDP. The sole contents of this value is the
              identity assertion.  The identity assertion produced by the IdP is
              encoded into a UTF-8 JSON text, then <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648">base64-encoded</xref> to produce this string.
              For example:
          </t>
          <sourcecode name="sdp-1" type="sdp" markers="false" pn="section-7.4.1-2">
v=0
o=- 1181923068 1181923196 IN IP4 ua1.example.com
s=example1
c=IN IP4 ua1.example.com
a=fingerprint:sha-1 \
  4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB
a=identity:\
  eyJpZHAiOnsiZG9tYWluIjoiZXhhbXBsZS5vcmciLCJwcm90b2NvbCI6ImJvZ3Vz\
  In0sImFzc2VydGlvbiI6IntcImlkZW50aXR5XCI6XCJib2JAZXhhbXBsZS5vcmdc\
  IixcImNvbnRlbnRzXCI6XCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3l6XCIsXCJz\
  aWduYXR1cmVcIjpcIjAxMDIwMzA0MDUwNlwifSJ9
a=...
t=0 0
m=audio 6056 RTP/SAVP 0
a=sendrecv
...</sourcecode>
          <aside pn="section-7.4.1-3">
            <t indent="0" pn="section-7.4.1-3.1">Note that long lines in the example are folded to meet the column
  width constraints of this document; the backslash ("\") at the end of
  a line, the carriage return that follows, and whitespace shall be ignored.</t>
          </aside>
          <t indent="0" pn="section-7.4.1-4">
              The "identity" attribute attests to all "fingerprint" attributes in the session
              description. It is therefore a session-level attribute.
          </t>
          <t indent="0" pn="section-7.4.1-5">
              Multiple "fingerprint" values can be
              used to offer alternative certificates for a peer.  The "identity" attribute <bcp14>MUST</bcp14> include all
              "fingerprint" values that are included in "fingerprint" attributes of the session
              description.
          </t>
          <t indent="0" pn="section-7.4.1-6">
              The RP browser <bcp14>MUST</bcp14> verify that the in-use certificate for a DTLS
              connection is in the set of fingerprints returned from the IdP
              when verifying an assertion.
          </t>
        </section>
      </section>
      <section anchor="sec.idp-uri" numbered="true" toc="include" removeInRFC="false" pn="section-7.5">
        <name slugifiedName="name-determining-the-idp-uri">Determining the IdP URI</name>
        <t indent="0" pn="section-7.5-1">
                In order to ensure that the IdP is under control of the domain
                owner rather than someone who merely has an account on the
                domain owner's server (e.g., in shared hosting scenarios), the
                IdP JavaScript is hosted at a deterministic location based on
                the IdP's domain name.  Each IdP proxy instance is associated
                with two values:
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-7.5-2">
          <dt pn="section-7.5-2.1">authority:</dt>
          <dd pn="section-7.5-2.2">
                       The <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"> authority</xref> at which the
                       IdP's service is hosted.
          </dd>
          <dt pn="section-7.5-2.3">protocol:</dt>
          <dd pn="section-7.5-2.4">
                    The specific IdP protocol which the IdP is using. This is a
                    completely opaque IdP-specific string, but allows an IdP to
                    implement two protocols in parallel. This value may be the
                    empty string.  If no value for protocol is provided, a value
                    of "default" is used.
          </dd>
        </dl>
        <t indent="0" pn="section-7.5-3">
                Each IdP <bcp14>MUST</bcp14> serve its initial entry page (i.e., the one loaded
                by the IdP proxy) from a <xref target="RFC8615" format="default" sectionFormat="of" derivedContent="RFC8615">well-known
                URI</xref>.
  The well-known URI for an IdP proxy is formed from
                the following URI components:
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-7.5-4">
          <li pn="section-7.5-4.1" derivedCounter="1.">
                    The scheme, "https:".  An IdP <bcp14>MUST</bcp14> be loaded using <xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818">HTTPS</xref>.
          </li>
          <li pn="section-7.5-4.2" derivedCounter="2.">
                    The <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986">authority</xref>.  As noted above,
                    the authority <bcp14>MAY</bcp14> contain a  non-default port number or
                    userinfo sub-component.  Both are removed when determining
                    if an asserted identity matches the name of the IdP.
          </li>
          <li pn="section-7.5-4.3" derivedCounter="3.">
                    The path, starting with "/.well-known/idp-proxy/" and
                    appended with the IdP protocol.  Note that the separator
                    characters '/' (%2F) and '\' (%5C) <bcp14>MUST NOT</bcp14> be permitted in
                    the protocol field, lest an attacker be able to direct
                    requests outside of the controlled "/.well-known/" prefix.
                    Query and fragment values <bcp14>MAY</bcp14> be used by including '?' or
                    '#' characters.
          </li>
        </ol>
        <t indent="0" pn="section-7.5-5">
                For example, for the IdP "identity.example.com" and the protocol
                "example", the URL would be:
        </t>
        <artwork align="left" pn="section-7.5-6">https://identity.example.com/.well-known/idp-proxy/example</artwork>
        <t indent="0" pn="section-7.5-7">
                The IdP <bcp14>MAY</bcp14> redirect requests to this URL, but they <bcp14>MUST</bcp14> retain
                the "https:" scheme.  This changes the effective origin of the
                IdP, but not the domain of the identities that the IdP is
                permitted to assert and validate. I.e., the IdP is still
                regarded as authoritative for the original domain.
        </t>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-7.5.1">
          <name slugifiedName="name-authenticating-party">Authenticating Party</name>
          <t indent="0" pn="section-7.5.1-1">
                  How an AP determines the appropriate IdP domain is out of
                  scope of this specification. In general, however, the AP has
                  some actual account relationship with the IdP, as this
                  identity is what the IdP is attesting to. Thus, the AP somehow
                  supplies the IdP information to the browser. Some potential
                  mechanisms include:
          </t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7.5.1-2">
            <li pn="section-7.5.1-2.1">
                      Provided by the user directly.
            </li>
            <li pn="section-7.5.1-2.2">
                      Selected from some set of IdPs known to the calling site
                      (e.g., a button that shows "Authenticate via Facebook
                      Connect").
            </li>
          </ul>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-7.5.2">
          <name slugifiedName="name-relying-party">Relying Party</name>
          <t indent="0" pn="section-7.5.2-1">
                  Unlike the AP, the RP need not have any particular
                  relationship with the IdP. Rather, it needs to be able to
                  process whatever assertion is provided by the AP.  As the
                  assertion contains the IdP's identity in the "idp" field of the JSON-encoded object (see
                  <xref target="sec.request-assert" format="default" sectionFormat="of" derivedContent="Section 7.6"/>), the URI can be
                  constructed directly from the assertion, and thus the RP can
                  directly verify the technical validity of the assertion with
                  no user interaction. Authoritative assertions need only be
                  verifiable. Third-party assertions also <bcp14>MUST</bcp14> be verified
                  against local policy, as described in <xref target="sec.id-format" format="default" sectionFormat="of" derivedContent="Section 8.1"/>.
          </t>
        </section>
      </section>
      <section anchor="sec.request-assert" numbered="true" toc="include" removeInRFC="false" pn="section-7.6">
        <name slugifiedName="name-requesting-assertions">Requesting Assertions</name>
        <t indent="0" pn="section-7.6-1">
                The input to the identity assertion generation process is the JSON-encoded object
                described in <xref target="sec.jsep-binding" format="default" sectionFormat="of" derivedContent="Section 7.4"/> that contains the
                set of certificate fingerprints the browser intends to use.
                This string is treated as opaque from the perspective of the
                IdP.
        </t>
        <t indent="0" pn="section-7.6-2">
                The browser also identifies the origin that the PeerConnection
                is run in, which allows the IdP to make decisions based on who
                is requesting the assertion.
        </t>
        <t indent="0" pn="section-7.6-3">
                An application can optionally provide a user identifier hint
                when specifying an IdP.  This value is a hint that the IdP can
                use to select amongst multiple identities, or to avoid providing
                assertions for unwanted identities.  The "username" is a string that has no meaning to
                any entity other than the IdP; it can contain any data the IdP
                needs in order to correctly generate an assertion.
        </t>
        <t indent="0" pn="section-7.6-4">
                An identity assertion that is successfully provided by the IdP
                consists of the following information:
        </t>
        <dl newline="false" spacing="normal" indent="3" pn="section-7.6-5">
          <dt pn="section-7.6-5.1">idp:</dt>
          <dd pn="section-7.6-5.2">
                    The domain name of an IdP and the protocol string.  This <bcp14>MAY</bcp14>
                    identify a different IdP or protocol from the one that
                    generated the assertion.
          </dd>
          <dt pn="section-7.6-5.3">assertion:</dt>
          <dd pn="section-7.6-5.4">
                    An opaque value containing the assertion itself. This is
                    only interpretable by the identified IdP or the IdP code
                    running in the client.
          </dd>
        </dl>
        <t indent="0" pn="section-7.6-6">
                <xref target="fig.assert-ex" format="default" sectionFormat="of" derivedContent="Figure 5"/> shows an example assertion
                formatted as JSON.  In this case, the message has presumably
                been digitally signed/MACed in some way that the IdP can later
                verify it, but this is an implementation detail and out of scope
                of this document.              </t>
        <figure anchor="fig.assert-ex" align="left" suppress-title="false" pn="figure-5">
          <name slugifiedName="name-example-assertion">Example Assertion</name>
          <sourcecode name="json-2" type="json" markers="false" pn="section-7.6-7.1">
{
  "idp":{
    "domain": "example.org",
    "protocol": "bogus"
  },
  "assertion": "{\"identity\":\"bob@example.org\",
                 \"contents\":\"abcdefghijklmnopqrstuvwyz\",
                 \"signature\":\"010203040506\"}"
}</sourcecode>
        </figure>
        <t indent="0" pn="section-7.6-8">
                For use in signaling, the assertion is serialized into JSON,
                <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648">base64-encoded</xref>, and used as the
                value of the "identity" attribute.
                IdPs <bcp14>SHOULD</bcp14> ensure that any assertions they
                generate cannot be interpreted in a different context. E.g.,
                they should use a distinct format or have separate cryptographic
                keys for assertion generation and other purposes.
                Line breaks are inserted solely for
                readability.
        </t>
      </section>
      <section anchor="sec.user-login" numbered="true" toc="include" removeInRFC="false" pn="section-7.7">
        <name slugifiedName="name-managing-user-login">Managing User Login</name>
        <t indent="0" pn="section-7.7-1">
                In order to generate an identity assertion, the IdP needs proof of
                the user's identity.  It is common practice to authenticate users
                (using passwords or multi-factor authentication), then use <xref target="RFC6265" format="default" sectionFormat="of" derivedContent="RFC6265">cookies</xref> or <xref target="RFC7617" format="default" sectionFormat="of" derivedContent="RFC7617">HTTP
                authentication</xref> for subsequent exchanges.
        </t>
        <t indent="0" pn="section-7.7-2">
                The IdP proxy is able to access cookies, HTTP authentication data, or
                other persistent session data because it operates in the security
                context of the IdP origin.  Therefore, if a user is logged in, the
                IdP could have all the information needed to generate an
                assertion.
        </t>
        <t indent="0" pn="section-7.7-3">
                An IdP proxy is unable to generate an assertion if the user is
                not logged in, or the IdP wants to interact with the user to
                acquire more information before generating the assertion.  If
                the IdP wants to interact with the user before generating an
                assertion, the IdP proxy can fail to generate an assertion and
                instead indicate a URL where login should proceed.
        </t>
        <t indent="0" pn="section-7.7-4">
                The application can then load the provided URL to enable the
                user to enter credentials.  The communication between the
                application and the IdP is described in <xref target="webrtc-api" format="default" sectionFormat="of" derivedContent="webrtc-api"/>.
        </t>
      </section>
    </section>
    <section anchor="sec.verify-assert" numbered="true" toc="include" removeInRFC="false" pn="section-8">
      <name slugifiedName="name-verifying-assertions">Verifying Assertions</name>
      <t indent="0" pn="section-8-1">
                The input to identity validation is the assertion string taken
                from a decoded "identity" attribute.
      </t>
      <t indent="0" pn="section-8-2">
                The IdP proxy verifies the assertion. Depending on the identity
                protocol, the proxy might contact the IdP server or other
                servers.  For instance, an OAuth-based protocol will likely
                require using the IdP as an oracle, whereas with a
                signature-based scheme it might be able to verify the assertion
                without contacting the IdP, provided that it has cached the
                relevant public key.
      </t>
      <t indent="0" pn="section-8-3">
                Regardless of the mechanism, if verification succeeds, a
                successful response from the IdP proxy consists of the following
                information:
      </t>
      <dl newline="false" spacing="normal" indent="3" pn="section-8-4">
        <dt pn="section-8-4.1">identity:</dt>
        <dd pn="section-8-4.2">
                    The identity of the AP from the IdP's perspective. Details
                    of this are provided in <xref target="sec.id-format" format="default" sectionFormat="of" derivedContent="Section 8.1"/>.
        </dd>
        <dt pn="section-8-4.3">contents:</dt>
        <dd pn="section-8-4.4">
                    The original unmodified string provided by the AP as input
                    to the assertion generation process.
        </dd>
      </dl>
      <t indent="0" pn="section-8-5">
                <xref target="fig.verify-ex" format="default" sectionFormat="of" derivedContent="Figure 6"/> shows an example response,
                which is JSON-formatted.
      </t>
      <figure anchor="fig.verify-ex" align="left" suppress-title="false" pn="figure-6">
        <name slugifiedName="name-example-verification-result">Example Verification Result</name>
        <sourcecode name="json-3" type="json" markers="false" pn="section-8-6.1">
{
  "identity": "bob@example.org",
  "contents": "{\"fingerprint\":[ ... ]}"
}</sourcecode>
      </figure>
      <section anchor="sec.id-format" numbered="true" toc="include" removeInRFC="false" pn="section-8.1">
        <name slugifiedName="name-identity-formats">Identity Formats</name>
        <t indent="0" pn="section-8.1-1">
                  The identity provided from the IdP to the RP browser <bcp14>MUST</bcp14>
                  consist of a string representing the user's identity.  This
                  string is in the form "&lt;user&gt;@&lt;domain&gt;", where "user" consists of any character,
                  and domain is an internationalized
                  domain name <xref target="RFC5890" format="default" sectionFormat="of" derivedContent="RFC5890"/> encoded as a sequence of U-labels.
        </t>
        <t indent="0" pn="section-8.1-2">
                  The PeerConnection API <bcp14>MUST</bcp14> check this string as follows:
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-8.1-3">
          <li pn="section-8.1-3.1" derivedCounter="1.">
                      If the "domain" portion of the string is equal to the domain
                      name of the IdP proxy, then the assertion is valid, as the
                      IdP is authoritative for this domain.  Comparison of
                      domain names is done using the label equivalence rule
                      defined in <xref target="RFC5890" sectionFormat="of" section="2.3.2.4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc5890#section-2.3.2.4" derivedContent="RFC5890"/>.
          </li>
          <li pn="section-8.1-3.2" derivedCounter="2.">
            <t indent="0" pn="section-8.1-3.2.1">
                      If the "domain" portion of the string is not equal to the
                      domain name of the IdP proxy, then the PeerConnection
                      object <bcp14>MUST</bcp14> reject the assertion unless both:
            </t>
            <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-8.1-3.2.2">
              <li pn="section-8.1-3.2.2.1" derivedCounter="1.">
                          the IdP domain is trusted as an acceptable third-party
                          IdP; and
              </li>
              <li pn="section-8.1-3.2.2.2" derivedCounter="2.">
                          local policy is configured to trust this IdP domain
                          for the domain portion of the identity string.
              </li>
            </ol>
          </li>
        </ol>
        <t indent="0" pn="section-8.1-4">
                  Any '@' or '%' characters in the "user" portion of the
                  identity <bcp14>MUST</bcp14> be escaped according to the "percent-encoding"
                  rules defined in <xref target="RFC3986" sectionFormat="of" section="2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc3986#section-2.1" derivedContent="RFC3986"/>. Characters other than '@' and '%' <bcp14>MUST NOT</bcp14>
                  be percent-encoded. For example, with a "user" of "user@133" and
                  a "domain" of "identity.example.com", the resulting string will
                  be encoded as "user%40133@identity.example.com".
        </t>
        <t indent="0" pn="section-8.1-5">
                  Implementations are cautioned to take care when displaying
                  user identities containing escaped '@' characters. If such
                  characters are unescaped prior to display, implementations
                  <bcp14>MUST</bcp14> distinguish between the domain of the IdP proxy and any
                  domain that might be implied by the portion of the
                  "&lt;user&gt;" portion that appears after the escaped "@"
                  sign.
        </t>
      </section>
    </section>
    <section anchor="sec.sec-cons" numbered="true" toc="include" removeInRFC="false" pn="section-9">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-9-1">
          Much of the security analysis of RTCWEB is contained in <xref target="RFC8826" format="default" sectionFormat="of" derivedContent="RFC8826"/> or in the discussion of the
          particular issues above. In order to avoid repetition, this section
          focuses on (a) residual threats that are not addressed by this
          document and (b) threats produced by failure/misbehavior of one of the
          components in the system.
      </t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-9.1">
        <name slugifiedName="name-communications-security-2">Communications Security</name>
        <t indent="0" pn="section-9.1-1">
            If HTTPS is not used to secure communications to the signaling
            server, and the identity mechanism used in
            <xref target="sec.generic.idp" format="default" sectionFormat="of" derivedContent="Section 7"/> is not used,
            then any on-path attacker can replace the DTLS-SRTP fingerprints
            in the handshake and thus substitute its own identity for that
            of either endpoint.
        </t>
        <t indent="0" pn="section-9.1-2">
            Even if HTTPS is used, the signaling server can
            potentially mount a man-in-the-middle attack unless implementations
            have some mechanism for independently verifying keys. The UI
            requirements in <xref target="sec.proposal.comsec" format="default" sectionFormat="of" derivedContent="Section 6.5"/> are designed to
            provide such a mechanism for motivated/security conscious users, but
            are not suitable for general use.  The identity service mechanisms
            in <xref target="sec.generic.idp" format="default" sectionFormat="of" derivedContent="Section 7"/> are more suitable for general
            use. Note, however, that a malicious signaling service can strip off
            any such identity assertions, though it cannot forge new ones.  Note
            that all of the third-party security mechanisms available (whether
            X.509 certificates or a third-party IdP) rely on the security of the
            third party -- this is of course also true of the user's connection to the
            Web site itself. Users who wish to assure themselves of security
            against a malicious IdP can only do so by verifying
            peer credentials directly, e.g., by checking the peer's fingerprint
            against a value delivered out of band.
        </t>
        <t indent="0" pn="section-9.1-3">
            In order to protect against malicious content JavaScript, that
            JavaScript <bcp14>MUST NOT</bcp14> be allowed to have direct
            access to -- or perform
            computations with -- DTLS keys. For instance, if content JS were able
            to compute digital signatures, then it would be possible for content
            JS to get an identity assertion for a browser's generated key and
            then use that assertion plus a signature by the key to authenticate
            a call protected under an ephemeral Diffie-Hellman (DH) key controlled by the content
            JS, thus violating the security guarantees otherwise provided by the
            IdP mechanism. Note that it is not sufficient merely to deny the
            content JS direct access to the keys, as some have suggested doing
            with the WebCrypto API <xref target="webcrypto" format="default" sectionFormat="of" derivedContent="webcrypto"/>.  The JS must
            also not be allowed to perform operations that would be valid for a
            DTLS endpoint. By far the safest approach is simply to deny the
            ability to perform any operations that depend on secret information
            associated with the key. Operations that depend on public
            information, such as exporting the public key, are of course safe.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-9.2">
        <name slugifiedName="name-privacy">Privacy</name>
        <t indent="0" pn="section-9.2-1">
            The requirements in this document are intended to allow:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-9.2-2">
          <li pn="section-9.2-2.1">
                Users to participate in calls without revealing their location.
          </li>
          <li pn="section-9.2-2.2">
                Potential callees to avoid revealing their location and even
                presence status prior to agreeing to answer a call.
          </li>
        </ul>
        <t indent="0" pn="section-9.2-3">
            However, these privacy protections come at a performance cost in
            terms of using TURN relays and, in the latter case, delaying
            ICE. Sites <bcp14>SHOULD</bcp14> make users aware of these tradeoffs.
        </t>
        <t indent="0" pn="section-9.2-4">
            Note that the protections provided here assume a non-malicious
            calling service. As the calling service always knows the user's
            status and (absent the use of a technology like Tor) their IP
            address, they can violate the user's privacy at will.  Users who wish
            privacy against the calling sites they are using must use separate
            privacy-enhancing technologies such as Tor. Combined WebRTC/Tor
            implementations <bcp14>SHOULD</bcp14> arrange to route the media as well as the
            signaling through Tor. Currently this will produce very suboptimal
            performance.
        </t>
        <t indent="0" pn="section-9.2-5">
            Additionally, any identifier which persists across multiple calls is
            potentially a problem for privacy, especially for anonymous calling
            services. Such services <bcp14>SHOULD</bcp14> instruct the browser to use separate
            DTLS keys for each call and also to use TURN throughout the
            call. Otherwise, the other side will learn linkable information that
            would allow them to correlate the browser across multiple calls.
            Additionally, browsers <bcp14>SHOULD</bcp14> implement the privacy-preserving CNAME
            generation mode of <xref target="RFC7022" format="default" sectionFormat="of" derivedContent="RFC7022"/>.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-9.3">
        <name slugifiedName="name-denial-of-service">Denial of Service</name>
        <t indent="0" pn="section-9.3-1">
            The consent mechanisms described in this document are intended to
            mitigate denial-of-service (DoS) attacks in which an attacker uses clients
            to send large amounts of traffic to a victim without the consent of
            the victim. While these mechanisms are sufficient to protect victims
            who have not implemented WebRTC at all, WebRTC implementations need
            to be more careful.
        </t>
        <t indent="0" pn="section-9.3-2">
            Consider the case of a call center which accepts calls via
            WebRTC. An attacker proxies the call center's front-end and arranges
            for multiple clients to initiate calls to the call center. Note that
            this requires user consent in many cases, but because the data
            channel does not need consent, they can use that directly. Since ICE
            will complete, browsers can then be induced to send large amounts of
            data to the victim call center if it supports the data channel at
            all. Preventing this attack requires that automated WebRTC
            implementations implement sensible flow control and have the ability
            to triage out (i.e., stop responding to ICE probes on) calls which
            are behaving badly, and especially to be prepared to remotely
            throttle the data channel in the absence of plausible audio and
            video (which the attacker cannot control).
        </t>
        <t indent="0" pn="section-9.3-3">
            Another related attack is for the signaling service to swap the ICE
            candidates for the audio and video streams, thus forcing a browser
            to send video to the sink that the other victim expects will contain
            audio (perhaps it is only expecting audio!), potentially causing
            overload.  Muxing multiple media flows over a single transport makes
            it harder to individually suppress a single flow by denying ICE
            keepalives. Either media-level (RTCP) mechanisms must be used or the
            implementation must deny responses entirely, thus terminating the
            call.
        </t>
        <t indent="0" pn="section-9.3-4">
            Yet another attack, suggested by Magnus Westerlund, is for the
            attacker to cross-connect offers and answers as follows. It induces
            the victim to make a call and then uses its control of other users'
            browsers to get them to attempt a call to someone. It then
            translates their offers into apparent answers to the victim, which
            looks like large-scale parallel forking.  The victim still responds
            to ICE responses, and now the browsers all try to send media to the
            victim.  Implementations can defend themselves from this attack by
            only responding to ICE Binding Requests for a limited number of
            remote ufrags (this is the reason for the requirement that the JS
            not be able to control the ufrag and password).
            <xref target="RFC8834" sectionFormat="comma" section="13" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8834#section-13" derivedContent="RFC8834"/> documents a number
            of potential RTCP-based DoS attacks and countermeasures.
        </t>
        <t indent="0" pn="section-9.3-5">
            Note that attacks based on confusing one end or the other about
            consent are possible even in the face of the third-party identity
            mechanism as long as major parts of the signaling messages are not
            signed. On the other hand, signing the entire message severely
            restricts the capabilities of the calling application, so there are
            difficult tradeoffs here.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-9.4">
        <name slugifiedName="name-idp-authentication-mechanis">IdP Authentication Mechanism</name>
        <t indent="0" pn="section-9.4-1">
            This mechanism relies for its security on the IdP and on the
            PeerConnection correctly enforcing the security invariants described
            above. At a high level, the IdP is attesting that the user
            identified in the assertion wishes to be associated with the
            assertion. Thus, it must not be possible for arbitrary third parties
            to get assertions tied to a user or to produce assertions that RPs
            will accept.
        </t>
        <section anchor="sec.pc-origin" numbered="true" toc="include" removeInRFC="false" pn="section-9.4.1">
          <name slugifiedName="name-peerconnection-origin-check">PeerConnection Origin Check</name>
          <t indent="0" pn="section-9.4.1-1">
              Fundamentally, the IdP proxy is just a piece of HTML and JS loaded
              by the browser, so nothing stops a Web attacker from creating
              their own IFRAME, loading the IdP proxy HTML/JS, and requesting a
              signature over their own keys rather than those generated in
              the browser. However, that proxy would be in the
              attacker's origin, not the IdP's origin. Only the
              browser itself can instantiate a context that (a) is in the IdP's origin and
              (b) exposes the correct API surface. Thus, the IdP proxy on
              the sender's side <bcp14>MUST</bcp14> ensure that it is running in the IdP's origin
              prior to issuing assertions.
          </t>
          <t indent="0" pn="section-9.4.1-2">
              Note that this check only asserts that the browser (or some other
              entity with access to the user's authentication data) attests to
              the request and hence to the fingerprint.  It does not demonstrate
              that the browser has access to the associated private
              key, and therefore an attacker can attach their own identity
              to another party's keying material, thus making a call which
              comes from Alice appear to come from the attacker.
              See <xref target="RFC8844" format="default" sectionFormat="of" derivedContent="RFC8844"/> for defenses against this
              form of attack.
          </t>
        </section>
        <section anchor="sec.sec-idp-uri" numbered="true" toc="include" removeInRFC="false" pn="section-9.4.2">
          <name slugifiedName="name-idp-well-known-uri">IdP Well-Known URI</name>
          <t indent="0" pn="section-9.4.2-1">
              As described in <xref target="sec.idp-uri" format="default" sectionFormat="of" derivedContent="Section 7.5"/>, the IdP proxy HTML/JS
              landing page is located at a well-known URI based on the IdP's
              domain name. This requirement prevents an attacker who can write
              some resources at the IdP (e.g., on one's Facebook wall) from
              being able to impersonate the IdP.
          </t>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-9.4.3">
          <name slugifiedName="name-privacy-of-idp-generated-id">Privacy of IdP-Generated Identities and the Hosting Site</name>
          <t indent="0" pn="section-9.4.3-1">
              Depending on the structure of the IdP's assertions, the calling
              site may learn the user's identity from the perspective of the
              IdP.  In many cases, this is not an issue because the user is
              authenticating to the site via the IdP in any case -- for instance,
              when the user has logged in with Facebook Connect and is then
              authenticating their call with a Facebook identity.  However, in
              other cases, the user may not have already revealed their identity
              to the site.  In general, IdPs <bcp14>SHOULD</bcp14> either verify that the user
              is willing to have their identity revealed to the site (e.g.,
              through the usual IdP permissions dialog) or arrange that the
              identity information is only available to known RPs (e.g., social
              graph adjacencies) but not to the calling site. The "domain" field
              of the assertion request can be used to check that the user has
              agreed to disclose their identity to the calling site; because it
              is supplied by the PeerConnection it can be trusted to be correct.
          </t>
        </section>
        <section anchor="sec.sec-third-party" numbered="true" toc="include" removeInRFC="false" pn="section-9.4.4">
          <name slugifiedName="name-security-of-third-party-idp">Security of Third-Party IdPs</name>
          <t indent="0" pn="section-9.4.4-1">
              As discussed above, each third-party IdP represents a new
              universal trust point and therefore the number of these IdPs needs
              to be quite limited. Most IdPs, even those which issue unqualified
              identities such as Facebook, can be recast as authoritative IdPs
              (e.g., 123456@facebook.com). However, in such cases, the user
              interface implications are not entirely desirable.  One
              intermediate approach is to have special (potentially user
              configurable) UI for large authoritative IdPs, thus allowing the
              user to instantly grasp that the call is being authenticated by
              Facebook, Google, etc.
          </t>
          <section numbered="true" toc="include" removeInRFC="false" pn="section-9.4.4.1">
            <name slugifiedName="name-confusable-characters">Confusable Characters</name>
            <t indent="0" pn="section-9.4.4.1-1">
                Because a broad range of characters are permitted in identity
                strings, it may be possible for attackers to craft identities
                which are confusable with other identities (see
                <xref target="RFC6943" format="default" sectionFormat="of" derivedContent="RFC6943"/> for more on this topic). This is
                a problem with any identifier space of this type
                (e.g., email addresses).
                Those minting identifiers should avoid mixed scripts and similar
                confusable characters. Those presenting these identifiers to a
                user should consider highlighting cases of mixed script usage
                (see <xref target="RFC5890" sectionFormat="comma" section="4.4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc5890#section-4.4" derivedContent="RFC5890"/>). Other best practices are still in development.
            </t>
          </section>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-9.4.5">
          <name slugifiedName="name-web-security-feature-intera">Web Security Feature Interactions</name>
          <t indent="0" pn="section-9.4.5-1">
              A number of optional Web security features have the potential to
              cause issues for this mechanism, as discussed below.
          </t>
          <section anchor="sec.popup-blocking" numbered="true" toc="include" removeInRFC="false" pn="section-9.4.5.1">
            <name slugifiedName="name-popup-blocking">Popup Blocking</name>
            <t indent="0" pn="section-9.4.5.1-1">
                When popup blocking is in use, the IdP proxy is unable to generate popup windows, dialogs, or
                any other form of user interactions.  This prevents the IdP
                proxy from being used to circumvent user interaction.  The
                "LOGINNEEDED" message allows the IdP proxy to inform the calling
                site of a need for user login, providing the information
                necessary to satisfy this requirement without resorting to
                direct user interaction from the IdP proxy itself.
            </t>
          </section>
          <section anchor="sec.3rd-party-cookies" numbered="true" toc="include" removeInRFC="false" pn="section-9.4.5.2">
            <name slugifiedName="name-third-party-cookies">Third Party Cookies</name>
            <t indent="0" pn="section-9.4.5.2-1">
                Some browsers allow users to block third party cookies (cookies
                associated with origins other than the top-level page) for
                privacy reasons.  Any IdP which uses cookies to persist logins
                will be broken by third-party cookie blocking. One option is to
                accept this as a limitation; another is to have the
                PeerConnection object disable third-party cookie blocking for
                the IdP proxy.
            </t>
          </section>
        </section>
      </section>
    </section>
    <section anchor="sec.iana-cons" numbered="true" toc="include" removeInRFC="false" pn="section-10">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-10-1">
          This specification defines the "identity"
          SDP attribute per the procedures of <xref target="RFC4566" sectionFormat="of" section="8.2.4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4566#section-8.2.4" derivedContent="RFC4566"/>.  The required information for the registration is
          included here:
      </t>
      <dl newline="false" spacing="normal" indent="3" pn="section-10-2">
        <dt pn="section-10-2.1">Contact Name:</dt>
        <dd pn="section-10-2.2">IESG (iesg@ietf.org)</dd>
        <dt pn="section-10-2.3">Attribute Name:</dt>
        <dd pn="section-10-2.4">identity</dd>
        <dt pn="section-10-2.5">Long Form:</dt>
        <dd pn="section-10-2.6">identity</dd>
        <dt pn="section-10-2.7">Type of Attribute:</dt>
        <dd pn="section-10-2.8">session</dd>
        <dt pn="section-10-2.9">Charset Considerations:</dt>
        <dd pn="section-10-2.10">This attribute is not subject
            to the charset attribute.</dd>
        <dt pn="section-10-2.11">Purpose:</dt>
        <dd pn="section-10-2.12">This attribute carries an identity assertion,
            binding an identity to the transport-level security session.</dd>
        <dt pn="section-10-2.13">Appropriate Values:</dt>
        <dd pn="section-10-2.14">See <xref target="sec.sdp-id-attr" format="default" sectionFormat="of" derivedContent="Section 5"/> of RFC 8827.</dd>
        <dt pn="section-10-2.15">Mux Category:</dt>
        <dd pn="section-10-2.16">NORMAL</dd>
      </dl>
      <t indent="0" pn="section-10-3">
          This section registers the "idp-proxy" well-known
          URI from <xref target="RFC8615" format="default" sectionFormat="of" derivedContent="RFC8615"/>.
      </t>
      <dl newline="false" spacing="normal" indent="3" pn="section-10-4">
        <dt pn="section-10-4.1">URI suffix:</dt>
        <dd pn="section-10-4.2">idp-proxy</dd>
        <dt pn="section-10-4.3">Change controller:</dt>
        <dd pn="section-10-4.4">IETF</dd>
      </dl>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-tls-dtls13" to="TLS-DTLS13"/>
    <references pn="section-11">
      <name slugifiedName="name-references">References</name>
      <references pn="section-11.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="FIPS186" quoteTitle="true" target="https://doi.org/10.6028/NIST.FIPS.186-4" derivedAnchor="FIPS186">
          <front>
            <title>Digital Signature Standard (DSS)</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date year="2013" month="July"/>
          </front>
          <seriesInfo name="NIST PUB" value="186-4"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.186-4"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818" quoteTitle="true" derivedAnchor="RFC2818">
          <front>
            <title>HTTP Over TLS</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2000" month="May"/>
            <abstract>
              <t indent="0">This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2818"/>
          <seriesInfo name="DOI" value="10.17487/RFC2818"/>
        </reference>
        <reference anchor="RFC3264" target="https://www.rfc-editor.org/info/rfc3264" quoteTitle="true" derivedAnchor="RFC3264">
          <front>
            <title>An Offer/Answer Model with Session Description Protocol (SDP)</title>
            <author initials="J." surname="Rosenberg" fullname="J. Rosenberg">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Schulzrinne" fullname="H. Schulzrinne">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="June"/>
            <abstract>
              <t indent="0">This document defines a mechanism by which two entities can make use of the Session Description Protocol (SDP) to arrive at a common view of a multimedia session between them.  In the model, one participant offers the other a description of the desired session from their perspective, and the other participant answers with the desired session from their perspective.  This offer/answer model is most useful in unicast sessions where information from both participants is needed for the complete view of the session.  The offer/answer model is used by protocols like the Session Initiation Protocol (SIP).  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3264"/>
          <seriesInfo name="DOI" value="10.17487/RFC3264"/>
        </reference>
        <reference anchor="RFC3711" target="https://www.rfc-editor.org/info/rfc3711" quoteTitle="true" derivedAnchor="RFC3711">
          <front>
            <title>The Secure Real-time Transport Protocol (SRTP)</title>
            <author initials="M." surname="Baugher" fullname="M. Baugher">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="McGrew" fullname="D. McGrew">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Naslund" fullname="M. Naslund">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Carrara" fullname="E. Carrara">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Norrman" fullname="K. Norrman">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2004" month="March"/>
            <abstract>
              <t indent="0">This document describes the Secure Real-time Transport Protocol (SRTP), a profile of the Real-time Transport Protocol (RTP), which can provide confidentiality, message authentication, and replay protection to the RTP traffic and to the control traffic for RTP, the Real-time Transport Control Protocol (RTCP).   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3711"/>
          <seriesInfo name="DOI" value="10.17487/RFC3711"/>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986" quoteTitle="true" derivedAnchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2005" month="January"/>
            <abstract>
              <t indent="0">A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC4566" target="https://www.rfc-editor.org/info/rfc4566" quoteTitle="true" derivedAnchor="RFC4566">
          <front>
            <title>SDP: Session Description Protocol</title>
            <author initials="M." surname="Handley" fullname="M. Handley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Jacobson" fullname="V. Jacobson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Perkins" fullname="C. Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t indent="0">This memo defines the Session Description Protocol (SDP).  SDP is intended for describing multimedia sessions for the purposes of session announcement, session invitation, and other forms of multimedia session initiation.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4566"/>
          <seriesInfo name="DOI" value="10.17487/RFC4566"/>
        </reference>
        <reference anchor="RFC4568" target="https://www.rfc-editor.org/info/rfc4568" quoteTitle="true" derivedAnchor="RFC4568">
          <front>
            <title>Session Description Protocol (SDP) Security Descriptions for Media Streams</title>
            <author initials="F." surname="Andreasen" fullname="F. Andreasen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Baugher" fullname="M. Baugher">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t indent="0">This document defines a Session Description Protocol (SDP) cryptographic attribute for unicast media streams.  The attribute describes a cryptographic key and other parameters that serve to configure security for a unicast media stream in either a single message or a roundtrip exchange.  The attribute can be used with a variety of SDP media transports, and this document defines how to use it for the Secure Real-time Transport Protocol (SRTP) unicast media streams.  The SDP crypto attribute requires the services of a data security protocol to secure the SDP message.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4568"/>
          <seriesInfo name="DOI" value="10.17487/RFC4568"/>
        </reference>
        <reference anchor="RFC4648" target="https://www.rfc-editor.org/info/rfc4648" quoteTitle="true" derivedAnchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author initials="S." surname="Josefsson" fullname="S. Josefsson">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="October"/>
            <abstract>
              <t indent="0">This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC5763" target="https://www.rfc-editor.org/info/rfc5763" quoteTitle="true" derivedAnchor="RFC5763">
          <front>
            <title>Framework for Establishing a Secure Real-time Transport Protocol (SRTP) Security Context Using Datagram Transport Layer Security (DTLS)</title>
            <author initials="J." surname="Fischl" fullname="J. Fischl">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="May"/>
            <abstract>
              <t indent="0">This document specifies how to use the Session Initiation Protocol (SIP) to establish a Secure Real-time Transport Protocol (SRTP) security context using the Datagram Transport Layer Security (DTLS) protocol.  It describes a mechanism of transporting a fingerprint attribute in the Session Description Protocol (SDP) that identifies the key that will be presented during the DTLS handshake.  The key exchange travels along the media path as opposed to the signaling path.  The SIP Identity mechanism can be used to protect the integrity of the fingerprint attribute from modification by intermediate proxies.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5763"/>
          <seriesInfo name="DOI" value="10.17487/RFC5763"/>
        </reference>
        <reference anchor="RFC5764" target="https://www.rfc-editor.org/info/rfc5764" quoteTitle="true" derivedAnchor="RFC5764">
          <front>
            <title>Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP)</title>
            <author initials="D." surname="McGrew" fullname="D. McGrew">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="May"/>
            <abstract>
              <t indent="0">This document describes a Datagram Transport Layer Security (DTLS) extension to establish keys for Secure RTP (SRTP) and Secure RTP Control Protocol (SRTCP) flows.  DTLS keying happens on the media path, independent of any out-of-band signalling channel present. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5764"/>
          <seriesInfo name="DOI" value="10.17487/RFC5764"/>
        </reference>
        <reference anchor="RFC5890" target="https://www.rfc-editor.org/info/rfc5890" quoteTitle="true" derivedAnchor="RFC5890">
          <front>
            <title>Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework</title>
            <author initials="J." surname="Klensin" fullname="J. Klensin">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="August"/>
            <abstract>
              <t indent="0">This document is one of a collection that, together, describe the protocol and usage context for a revision of Internationalized Domain Names for Applications (IDNA), superseding the earlier version.  It describes the document collection and provides definitions and other material that are common to the set.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5890"/>
          <seriesInfo name="DOI" value="10.17487/RFC5890"/>
        </reference>
        <reference anchor="RFC6347" target="https://www.rfc-editor.org/info/rfc6347" quoteTitle="true" derivedAnchor="RFC6347">
          <front>
            <title>Datagram Transport Layer Security Version 1.2</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Modadugu" fullname="N. Modadugu">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="January"/>
            <abstract>
              <t indent="0">This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6347"/>
          <seriesInfo name="DOI" value="10.17487/RFC6347"/>
        </reference>
        <reference anchor="RFC6454" target="https://www.rfc-editor.org/info/rfc6454" quoteTitle="true" derivedAnchor="RFC6454">
          <front>
            <title>The Web Origin Concept</title>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="December"/>
            <abstract>
              <t indent="0">This document defines the concept of an "origin", which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named "Origin", that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6454"/>
          <seriesInfo name="DOI" value="10.17487/RFC6454"/>
        </reference>
        <reference anchor="RFC7022" target="https://www.rfc-editor.org/info/rfc7022" quoteTitle="true" derivedAnchor="RFC7022">
          <front>
            <title>Guidelines for Choosing RTP Control Protocol (RTCP) Canonical Names (CNAMEs)</title>
            <author initials="A." surname="Begen" fullname="A. Begen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Perkins" fullname="C. Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="September"/>
            <abstract>
              <t indent="0">The RTP Control Protocol (RTCP) Canonical Name (CNAME) is a persistent transport-level identifier for an RTP endpoint.  While the Synchronization Source (SSRC) identifier of an RTP endpoint may change if a collision is detected or when the RTP application is restarted, its RTCP CNAME is meant to stay unchanged, so that RTP endpoints can be uniquely identified and associated with their RTP media streams.</t>
              <t indent="0">For proper functionality, RTCP CNAMEs should be unique within the participants of an RTP session.  However, the existing guidelines for choosing the RTCP CNAME provided in the RTP standard (RFC 3550) are insufficient to achieve this uniqueness.  RFC 6222 was published to update those guidelines to allow endpoints to choose unique RTCP CNAMEs.  Unfortunately, later investigations showed that some parts of the new algorithms were unnecessarily complicated and/or ineffective.  This document addresses these concerns and replaces RFC 6222.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7022"/>
          <seriesInfo name="DOI" value="10.17487/RFC7022"/>
        </reference>
        <reference anchor="RFC7675" target="https://www.rfc-editor.org/info/rfc7675" quoteTitle="true" derivedAnchor="RFC7675">
          <front>
            <title>Session Traversal Utilities for NAT (STUN) Usage for Consent Freshness</title>
            <author initials="M." surname="Perumal" fullname="M. Perumal">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Ravindranath" fullname="R. Ravindranath">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Reddy" fullname="T. Reddy">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Thomson" fullname="M. Thomson">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="October"/>
            <abstract>
              <t indent="0">To prevent WebRTC applications, such as browsers, from launching attacks by sending traffic to unwilling victims, periodic consent to send needs to be obtained from remote endpoints.</t>
              <t indent="0">This document describes a consent mechanism using a new Session Traversal Utilities for NAT (STUN) usage.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7675"/>
          <seriesInfo name="DOI" value="10.17487/RFC7675"/>
        </reference>
        <reference anchor="RFC7918" target="https://www.rfc-editor.org/info/rfc7918" quoteTitle="true" derivedAnchor="RFC7918">
          <front>
            <title>Transport Layer Security (TLS) False Start</title>
            <author initials="A." surname="Langley" fullname="A. Langley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Modadugu" fullname="N. Modadugu">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Moeller" fullname="B. Moeller">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2016" month="August"/>
            <abstract>
              <t indent="0">This document specifies an optional behavior of Transport Layer Security (TLS) client implementations, dubbed "False Start".  It affects only protocol timing, not on-the-wire protocol data, and can be implemented unilaterally.  A TLS False Start reduces handshake latency to one round trip.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7918"/>
          <seriesInfo name="DOI" value="10.17487/RFC7918"/>
        </reference>
        <reference anchor="RFC8122" target="https://www.rfc-editor.org/info/rfc8122" quoteTitle="true" derivedAnchor="RFC8122">
          <front>
            <title>Connection-Oriented Media Transport over the Transport Layer Security (TLS) Protocol in the Session Description Protocol (SDP)</title>
            <author initials="J." surname="Lennox" fullname="J. Lennox">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Holmberg" fullname="C. Holmberg">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="March"/>
            <abstract>
              <t indent="0">This document specifies how to establish secure connection-oriented media transport sessions over the Transport Layer Security (TLS) protocol using the Session Description Protocol (SDP).  It defines the SDP protocol identifier, 'TCP/TLS'.  It also defines the syntax and semantics for an SDP 'fingerprint' attribute that identifies the certificate that will be presented for the TLS session.  This mechanism allows media transport over TLS connections to be established securely, so long as the integrity of session descriptions is assured.</t>
              <t indent="0">This document obsoletes RFC 4572 by clarifying the usage of multiple fingerprints.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8122"/>
          <seriesInfo name="DOI" value="10.17487/RFC8122"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author initials="T." surname="Bray" fullname="T. Bray" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t indent="0">JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t indent="0">This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8261" target="https://www.rfc-editor.org/info/rfc8261" quoteTitle="true" derivedAnchor="RFC8261">
          <front>
            <title>Datagram Transport Layer Security (DTLS) Encapsulation of SCTP Packets</title>
            <author initials="M." surname="Tuexen" fullname="M. Tuexen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Stewart" fullname="R. Stewart">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Jesup" fullname="R. Jesup">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Loreto" fullname="S. Loreto">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="November"/>
            <abstract>
              <t indent="0">The Stream Control Transmission Protocol (SCTP) is a transport protocol originally defined to run on top of the network protocols IPv4 or IPv6.  This document specifies how SCTP can be used on top of the Datagram Transport Layer Security (DTLS) protocol.  Using the encapsulation method described in this document, SCTP is unaware of the protocols being used below DTLS; hence, explicit IP addresses cannot be used in the SCTP control chunks.  As a consequence, the SCTP associations carried over DTLS can only be single-homed.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8261"/>
          <seriesInfo name="DOI" value="10.17487/RFC8261"/>
        </reference>
        <reference anchor="RFC8445" target="https://www.rfc-editor.org/info/rfc8445" quoteTitle="true" derivedAnchor="RFC8445">
          <front>
            <title>Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal</title>
            <author initials="A." surname="Keranen" fullname="A. Keranen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Holmberg" fullname="C. Holmberg">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Rosenberg" fullname="J. Rosenberg">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="July"/>
            <abstract>
              <t indent="0">This document describes a protocol for Network Address Translator (NAT) traversal for UDP-based communication.  This protocol is called Interactive Connectivity Establishment (ICE).  ICE makes use of the Session Traversal Utilities for NAT (STUN) protocol and its extension, Traversal Using Relay NAT (TURN).</t>
              <t indent="0">This document obsoletes RFC 5245.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8445"/>
          <seriesInfo name="DOI" value="10.17487/RFC8445"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="RFC8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC8615" target="https://www.rfc-editor.org/info/rfc8615" quoteTitle="true" derivedAnchor="RFC8615">
          <front>
            <title>Well-Known Uniform Resource Identifiers (URIs)</title>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2019" month="May"/>
            <abstract>
              <t indent="0">This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
              <t indent="0">In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space.  It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8615"/>
          <seriesInfo name="DOI" value="10.17487/RFC8615"/>
        </reference>
        <reference anchor="RFC8825" target="https://www.rfc-editor.org/info/rfc8825" quoteTitle="true" derivedAnchor="RFC8825">
          <front>
            <title>Overview: Real-Time Protocols for Browser-Based Applications</title>
            <author initials="H." surname="Alvestrand" fullname="Harald T. Alvestrand">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8825"/>
          <seriesInfo name="DOI" value="10.17487/RFC8825"/>
        </reference>
        <reference anchor="RFC8826" target="https://www.rfc-editor.org/info/rfc8826" quoteTitle="true" derivedAnchor="RFC8826">
          <front>
            <title>Security Considerations for WebRTC</title>
            <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8826"/>
          <seriesInfo name="DOI" value="10.17487/RFC8826"/>
        </reference>
        <reference anchor="RFC8829" target="https://www.rfc-editor.org/info/rfc8829" quoteTitle="true" derivedAnchor="RFC8829">
          <front>
            <title>JavaScript Session Establishment Protocol (JSEP)</title>
            <author initials="J." surname="Uberti" fullname="Justin Uberti">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Jennings" fullname="Cullen Jennings">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="Eric Rescorla" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8829"/>
          <seriesInfo name="DOI" value="10.17487/RFC8829"/>
        </reference>
        <reference anchor="RFC8834" target="https://www.rfc-editor.org/info/rfc8834" quoteTitle="true" derivedAnchor="RFC8834">
          <front>
            <title>Media Transport and Use of RTP in WebRTC</title>
            <author initials="C." surname="Perkins" fullname="Colin Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Westerlund" fullname="Magnus Westerlund">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Ott" fullname="Jörg Ott">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8834"/>
          <seriesInfo name="DOI" value="10.17487/RFC8834"/>
        </reference>
        <reference anchor="RFC8844" target="https://www.rfc-editor.org/info/rfc8844" quoteTitle="true" derivedAnchor="RFC8844">
          <front>
            <title>Unknown Key-Share Attacks on Uses of TLS with the Session Description Protocol (SDP)</title>
            <author initials="M" surname="Thomson" fullname="Martin Thomson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E" surname="Rescorla" fullname="Eric Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8844"/>
          <seriesInfo name="DOI" value="10.17487/RFC8844"/>
        </reference>
        <reference anchor="webcrypto" target="https://www.w3.org/TR/2017/REC-WebCryptoAPI-20170126/" quoteTitle="true" derivedAnchor="webcrypto">
          <front>
            <title>Web Cryptography API</title>
            <author initials="M" surname="Watson" fullname="Mark Watson">
            </author>
            <date month="January" year="2017" day="26"/>
          </front>
          <refcontent>W3C Recommendation</refcontent>
        </reference>
        <reference anchor="webrtc-api" target="https://www.w3.org/TR/webrtc/" quoteTitle="true" derivedAnchor="webrtc-api">
          <front>
            <title>WebRTC 1.0: Real-time Communication Between Browsers</title>
            <author initials="C." surname="Jennings" fullname="Cullen Jennings">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Boström" fullname="Henrik Boström">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J-I." surname="Bruaroey" fullname="Jan-Ivar Bruaroey">
              <organization showOnFrontPage="true"/>
            </author>
            <date/>
          </front>
          <refcontent>W3C Proposed Recommendation</refcontent>
        </reference>
      </references>
      <references pn="section-11.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="fetch" target="https://fetch.spec.whatwg.org/" quoteTitle="true" derivedAnchor="fetch">
          <front>
            <title>Fetch</title>
            <author initials="A." surname="van Kesteren">
              <organization showOnFrontPage="true"/>
            </author>
          </front>
        </reference>
        <reference anchor="RFC3261" target="https://www.rfc-editor.org/info/rfc3261" quoteTitle="true" derivedAnchor="RFC3261">
          <front>
            <title>SIP: Session Initiation Protocol</title>
            <author initials="J." surname="Rosenberg" fullname="J. Rosenberg">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Schulzrinne" fullname="H. Schulzrinne">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G." surname="Camarillo" fullname="G. Camarillo">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Johnston" fullname="A. Johnston">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Peterson" fullname="J. Peterson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Sparks" fullname="R. Sparks">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Handley" fullname="M. Handley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Schooler" fullname="E. Schooler">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="June"/>
            <abstract>
              <t indent="0">This document describes Session Initiation Protocol (SIP), an application-layer control (signaling) protocol for creating, modifying, and terminating sessions with one or more participants.  These sessions include Internet telephone calls, multimedia distribution, and multimedia conferences.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3261"/>
          <seriesInfo name="DOI" value="10.17487/RFC3261"/>
        </reference>
        <reference anchor="RFC5705" target="https://www.rfc-editor.org/info/rfc5705" quoteTitle="true" derivedAnchor="RFC5705">
          <front>
            <title>Keying Material Exporters for Transport Layer Security (TLS)</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="March"/>
            <abstract>
              <t indent="0">A number of protocols wish to leverage Transport Layer Security (TLS) to perform key establishment but then use some of the keying material for their own purposes.  This document describes a general mechanism for allowing that.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5705"/>
          <seriesInfo name="DOI" value="10.17487/RFC5705"/>
        </reference>
        <reference anchor="RFC6120" target="https://www.rfc-editor.org/info/rfc6120" quoteTitle="true" derivedAnchor="RFC6120">
          <front>
            <title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
            <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="March"/>
            <abstract>
              <t indent="0">The Extensible Messaging and Presence Protocol (XMPP) is an application profile of the Extensible Markup Language (XML) that enables the near-real-time exchange of structured yet extensible data between any two or more network entities.  This document defines XMPP's core protocol methods: setup and teardown of XML streams, channel encryption, authentication, error handling, and communication primitives for messaging, network availability ("presence"), and request-response interactions.  This document obsoletes RFC 3920.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6120"/>
          <seriesInfo name="DOI" value="10.17487/RFC6120"/>
        </reference>
        <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265" quoteTitle="true" derivedAnchor="RFC6265">
          <front>
            <title>HTTP State Management Mechanism</title>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t indent="0">This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6265"/>
          <seriesInfo name="DOI" value="10.17487/RFC6265"/>
        </reference>
        <reference anchor="RFC6455" target="https://www.rfc-editor.org/info/rfc6455" quoteTitle="true" derivedAnchor="RFC6455">
          <front>
            <title>The WebSocket Protocol</title>
            <author initials="I." surname="Fette" fullname="I. Fette">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Melnikov" fullname="A. Melnikov">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="December"/>
            <abstract>
              <t indent="0">The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6455"/>
          <seriesInfo name="DOI" value="10.17487/RFC6455"/>
        </reference>
        <reference anchor="RFC6943" target="https://www.rfc-editor.org/info/rfc6943" quoteTitle="true" derivedAnchor="RFC6943">
          <front>
            <title>Issues in Identifier Comparison for Security Purposes</title>
            <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="May"/>
            <abstract>
              <t indent="0">Identifiers such as hostnames, URIs, IP addresses, and email addresses are often used in security contexts to identify security principals and resources.  In such contexts, an identifier presented via some protocol is often compared using some policy to make security decisions such as whether the security principal may access the resource, what level of authentication or encryption is required, etc.  If the parties involved in a security decision use different algorithms to compare identifiers, then failure scenarios ranging from denial of service to elevation of privilege can result.  This document provides a discussion of these issues that designers should consider when defining identifiers and protocols, and when constructing architectures that use multiple protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6943"/>
          <seriesInfo name="DOI" value="10.17487/RFC6943"/>
        </reference>
        <reference anchor="RFC7617" target="https://www.rfc-editor.org/info/rfc7617" quoteTitle="true" derivedAnchor="RFC7617">
          <front>
            <title>The 'Basic' HTTP Authentication Scheme</title>
            <author initials="J." surname="Reschke" fullname="J. Reschke">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t indent="0">This document defines the "Basic" Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7617"/>
          <seriesInfo name="DOI" value="10.17487/RFC7617"/>
        </reference>
        <reference anchor="RFC8224" target="https://www.rfc-editor.org/info/rfc8224" quoteTitle="true" derivedAnchor="RFC8224">
          <front>
            <title>Authenticated Identity Management in the Session Initiation Protocol (SIP)</title>
            <author initials="J." surname="Peterson" fullname="J. Peterson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Jennings" fullname="C. Jennings">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Wendt" fullname="C. Wendt">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="February"/>
            <abstract>
              <t indent="0">The baseline security mechanisms in the Session Initiation Protocol (SIP) are inadequate for cryptographically assuring the identity of the end users that originate SIP requests, especially in an interdomain context.  This document defines a mechanism for securely identifying originators of SIP requests.  It does so by defining a SIP header field for conveying a signature used for validating the identity and for conveying a reference to the credentials of the signer.</t>
              <t indent="0">This document obsoletes RFC 4474.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8224"/>
          <seriesInfo name="DOI" value="10.17487/RFC8224"/>
        </reference>
        <reference anchor="RFC8828" target="https://www.rfc-editor.org/info/rfc8828" quoteTitle="true" derivedAnchor="RFC8828">
          <front>
            <title>WebRTC IP Address Handling Requirements</title>
            <author initials="J" surname="Uberti" fullname="Justin Uberti">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G" surname="Shieh" fullname="Guo-wei Shieh">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8828"/>
          <seriesInfo name="DOI" value="10.17487/RFC8828"/>
        </reference>
        <reference anchor="I-D.ietf-tls-dtls13" quoteTitle="true" target="https://tools.ietf.org/html/draft-ietf-tls-dtls13-39" derivedAnchor="TLS-DTLS13">
          <front>
            <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
            <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
              <organization showOnFrontPage="true">RTFM, Inc.</organization>
            </author>
            <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
              <organization showOnFrontPage="true">Arm Limited</organization>
            </author>
            <author initials="N." surname="Modadugu" fullname="Nagendra Modadugu">
              <organization showOnFrontPage="true">Google, Inc.</organization>
            </author>
            <date month="November" day="2" year="2020"/>
            <abstract>
              <t indent="0">   This document specifies Version 1.3 of the Datagram Transport Layer
   Security (DTLS) protocol.  DTLS 1.3 allows client/server applications
   to communicate over the Internet in a way that is designed to prevent
   eavesdropping, tampering, and message forgery.

   The DTLS 1.3 protocol is intentionally based on the Transport Layer
   Security (TLS) 1.3 protocol and provides equivalent security
   guarantees with the exception of order protection/non-replayability.
   Datagram semantics of the underlying transport are preserved by the
   DTLS protocol.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-tls-dtls13-39"/>
          <format type="TXT" target="https://www.ietf.org/internet-drafts/draft-ietf-tls-dtls13-39.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
      </references>
    </references>
    <section numbered="false" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">
        <contact fullname="Bernard Aboba"/>, <contact fullname="Harald         Alvestrand"/>, <contact fullname="Richard Barnes"/>, <contact fullname="Dan Druta"/>, <contact fullname="Cullen         Jennings"/>, <contact fullname="Hadriel Kaplan"/>, <contact fullname="Matthew Kaufman"/>, <contact fullname="Jim McEachern"/>,
        <contact fullname="Martin Thomson"/>, <contact fullname="Magnus         Westerlund"/>.  <contact fullname="Matthew Kaufman"/> provided the UI material in
        <xref target="sec.proposal.comsec" format="default" sectionFormat="of" derivedContent="Section 6.5"/>. <contact fullname="Christer Holmberg"/> provided
        the initial version of <xref target="sec.sdp-id-attr-oa" format="default" sectionFormat="of" derivedContent="Section 5.1"/>.
      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-address">Author's Address</name>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
        <organization showOnFrontPage="true">Mozilla</organization>
        <address>
          <email>ekr@rtfm.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
