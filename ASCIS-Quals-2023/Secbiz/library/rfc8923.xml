<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="info" consensus="true" docName="draft-ietf-taps-minset-11" indexInclude="true" ipr="trust200902" number="8923" prepTime="2020-10-21T15:53:38" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-taps-minset-11" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8923" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="Minimal Transport Services">A Minimal Set of Transport Services for End Systems</title>
    <seriesInfo name="RFC" value="8923" stream="IETF"/>
    <author fullname="Michael Welzl" initials="M." surname="Welzl">
      <organization showOnFrontPage="true">University of Oslo</organization>
      <address>
        <postal>
          <pobox>PO Box 1080 Blindern</pobox>
          <code>N-0316</code>
          <city>Oslo</city>
          <country>Norway</country>
        </postal>
        <phone>+47 22 85 24 20</phone>
        <email>michawe@ifi.uio.no</email>
      </address>
    </author>
    <author fullname="Stein Gjessing" initials="S." surname="Gjessing">
      <organization showOnFrontPage="true">University of Oslo</organization>
      <address>
        <postal>
          <pobox>PO Box 1080 Blindern</pobox>
          <code>N-0316</code>
          <city>Oslo</city>
          <country>Norway</country>
        </postal>
        <phone>+47 22 85 24 44</phone>
        <email>steing@ifi.uio.no</email>
      </address>
    </author>
    <date month="10" year="2020"/>
    <area>Transport</area>
    <workgroup>TAPS</workgroup>
    <keyword>taps</keyword>
    <keyword>transport services</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document recommends a minimal set of Transport Services offered
      by end systems and gives guidance on choosing among the available
      mechanisms and protocols. It is based on the set of transport features
      in RFC 8303.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for informational purposes.  
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by the
            Internet Engineering Steering Group (IESG).  Not all documents
            approved by the IESG are candidates for any level of Internet
            Standard; see Section 2 of RFC 7841. 
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8923" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2020 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-deriving-the-minimal-set">Deriving the Minimal Set</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-reduced-set-of-transpor">The Reduced Set of Transport Features</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-connection-related-transpor">CONNECTION-Related Transport Features</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-transfer-related-trans">DATA-Transfer-Related Transport Features</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.2.2">
                  <li pn="section-toc.1-1.4.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.1.1"><xref derivedContent="4.2.1" format="counter" sectionFormat="of" target="section-4.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sending-data">Sending Data</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.2.1"><xref derivedContent="4.2.2" format="counter" sectionFormat="of" target="section-4.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-receiving-data">Receiving Data</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.3.1"><xref derivedContent="4.2.3" format="counter" sectionFormat="of" target="section-4.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-errors">Errors</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-discussion">Discussion</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sending-messages-receiving-">Sending Messages, Receiving Bytes</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-stream-schedulers-without-s">Stream Schedulers without Streams</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-early-data-transmission">Early Data Transmission</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.4">
                <t indent="0" pn="section-toc.1-1.5.2.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sender-running-dry">Sender Running Dry</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.5">
                <t indent="0" pn="section-toc.1-1.5.2.5.1"><xref derivedContent="5.5" format="counter" sectionFormat="of" target="section-5.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-capacity-profile">Capacity Profile</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.6">
                <t indent="0" pn="section-toc.1-1.5.2.6.1"><xref derivedContent="5.6" format="counter" sectionFormat="of" target="section-5.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security">Security</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.7">
                <t indent="0" pn="section-toc.1-1.5.2.7.1"><xref derivedContent="5.7" format="counter" sectionFormat="of" target="section-5.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-packet-size">Packet Size</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-minimal-set-of-transpor">The Minimal Set of Transport Features</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-establishment-availability-">ESTABLISHMENT, AVAILABILITY, and TERMINATION</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-maintenance">MAINTENANCE</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2.2.2">
                  <li pn="section-toc.1-1.6.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.6.2.2.2.1.1"><xref derivedContent="6.2.1" format="counter" sectionFormat="of" target="section-6.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-connection-groups">Connection Groups</xref></t>
                  </li>
                  <li pn="section-toc.1-1.6.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.6.2.2.2.2.1"><xref derivedContent="6.2.2" format="counter" sectionFormat="of" target="section-6.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-individual-connections">Individual Connections</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-transfer">DATA Transfer</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2.3.2">
                  <li pn="section-toc.1-1.6.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.6.2.3.2.1.1"><xref derivedContent="6.3.1" format="counter" sectionFormat="of" target="section-6.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sending-data-2">Sending Data</xref></t>
                  </li>
                  <li pn="section-toc.1-1.6.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.6.2.3.2.2.1"><xref derivedContent="6.3.2" format="counter" sectionFormat="of" target="section-6.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-receiving-data-2">Receiving Data</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-superset-of-transport-f">The Superset of Transport Features</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-connection-related-transport">CONNECTION-Related Transport Features</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t indent="0" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-transfer-related-transp">DATA-Transfer-Related Transport Features</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2.2.2">
                  <li pn="section-toc.1-1.10.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.10.2.2.2.1.1"><xref derivedContent="A.2.1" format="counter" sectionFormat="of" target="section-a.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sending-data-3">Sending Data</xref></t>
                  </li>
                  <li pn="section-toc.1-1.10.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.10.2.2.2.2.1"><xref derivedContent="A.2.2" format="counter" sectionFormat="of" target="section-a.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-receiving-data-3">Receiving Data</xref></t>
                  </li>
                  <li pn="section-toc.1-1.10.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.10.2.2.2.3.1"><xref derivedContent="A.2.3" format="counter" sectionFormat="of" target="section-a.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-errors-2">Errors</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="sec-intro" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">Currently, the set of Transport Services that most applications use
      is based on TCP and UDP (and protocols that are layered on top of them);
      this limits the ability for the network stack to make use of features of
      other transport protocols. For example, if a protocol supports
      out-of-order message delivery but applications always assume that the
      network provides an ordered byte stream, then the network stack can not
      immediately deliver a message that arrives out of order; doing so would
      break a fundamental assumption of the application. The net result is
      unnecessary head-of-line blocking delay.</t>
      <t indent="0" pn="section-1-2">By exposing the Transport Services of multiple transport protocols, a
      transport system can make it possible for applications to use these
      services without being statically bound to a specific transport
      protocol.  The first step towards the design of such a system was taken
      by <xref target="RFC8095" format="default" sectionFormat="of" derivedContent="RFC8095"/>, which surveys a large
      number of transports, and <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/> as
      well as <xref target="RFC8304" format="default" sectionFormat="of" derivedContent="RFC8304"/>, which identify the
      specific transport features that are exposed to applications by the
      protocols TCP, Multipath TCP (MPTCP), UDP(-Lite), and Stream Control
      Transmission Protocol (SCTP), as well as the Low Extra Delay Background
      Transport (LEDBAT) congestion control mechanism. LEDBAT was included as
      the only congestion control mechanism in this list because the "low
      extra delay background transport" service that it offers is
      significantly different from the typical service provided by other
      congestion control mechanisms.  This memo is based on these documents
      and follows the same terminology (also listed below).  Because the
      considered transport protocols conjointly cover a wide range of
      transport features, there is reason to hope that the resulting set (and
      the reasoning that led to it) will also apply to many aspects of other
      transport protocols that may be in use today or may be designed in the
      future.
      </t>
      <t indent="0" pn="section-1-3">By decoupling applications from transport protocols, a transport
      system provides a different abstraction level than the Berkeley sockets
      interface <xref target="POSIX" format="default" sectionFormat="of" derivedContent="POSIX"/>. As with high-
      vs. low-level programming languages, a higher abstraction level allows
      more freedom for automation below the interface, yet it takes some
      control away from the application programmer. This is the design
      trade-off that a transport system developer is facing, and this document
      provides guidance on the design of this abstraction level. Some
      transport features are currently rarely offered by APIs, yet they must
      be offered or they can never be used.  Other transport features are
      offered by the APIs of the protocols covered here, but not exposing them
      in an API would allow for more freedom to automate protocol usage in a
      transport system.  The minimal set presented here is an effort to find a
      middle ground that can be recommended for transport systems to
      implement, on the basis of the transport features discussed in <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>.</t>
      <t indent="0" pn="section-1-4">Applications use a wide variety of APIs today. While this document
      was created to ensure the API developed in the Transport Services (TAPS)
      Working Group <xref target="I-D.ietf-taps-interface" format="default" sectionFormat="of" derivedContent="TAPS-INTERFACE"/> includes the most important transport features, the
      minimal set presented here must be reflected in *all* network APIs in
      order for the underlying functionality to become usable everywhere. For
      example, it does not help an application that talks to a library that
      offers its own communication interface if the underlying Berkeley
      Sockets API is extended to offer "unordered message delivery", but the
      library only exposes an ordered byte stream. Both the Berkeley Sockets
      API and the library would have to expose the "unordered message
      delivery" transport feature (alternatively, there may be ways for
      certain types of libraries to use this transport feature without
      exposing it, based on knowledge about the applications, but this is not
      the general case). Similarly, transport protocols such as the Stream
      Control Transmission Protocol (SCTP) offer multi-streaming, which cannot
      be utilized, e.g., to prioritize messages between streams, unless
      applications communicate the priorities and the group of connections
      upon which these priorities should be applied.  In most situations, in
      the interest of being as flexible and efficient as possible, the best
      choice will be for a library to expose at least all of the transport
      features that are recommended as a "minimal set" here.

      </t>
      <t indent="0" pn="section-1-5">
                This "minimal set" can be implemented "one-sided" over TCP.  This means
                that a sender-side transport system can talk to a standard TCP receiver,
                and a receiver-side transport system can talk to a standard TCP sender.
                If certain limitations are put in place, the "minimal set" can also be
                implemented "one-sided" over UDP. While the possibility of such "one-sided"
                implementation may help deployment, it comes at the cost of limiting the
                set to services that can also be provided by TCP (or, with further
                limitations, UDP). Thus, the minimal set of transport features here is
                applicable for many, but not all, applications; some application
                protocols have requirements that are not met by this "minimal set".
      </t>
      <t indent="0" pn="section-1-6">
                Note that, throughout this document, protocols are meant to be used
                natively. For example, when transport features of TCP, or "implementation over"
                TCP is discussed, this refers to native usage of TCP rather
		than TCP being encapsulated in some other transport protocol
		such as UDP.
      </t>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <dl newline="false" indent="3" spacing="normal" pn="section-2-1">
        <dt pn="section-2-1.1">Transport Feature:</dt>
        <dd pn="section-2-1.2">
                    A specific end-to-end feature that the transport layer
                    provides to an application. Examples include
                    confidentiality, reliable delivery, ordered delivery,
                    message-versus-stream orientation, etc.</dd>
        <dt pn="section-2-1.3">Transport Service:</dt>
        <dd pn="section-2-1.4">
                    A set of Transport Features, without an association to any given
                    framing protocol, that provides a complete service to an application.</dd>
        <dt pn="section-2-1.5">Transport Protocol:</dt>
        <dd pn="section-2-1.6">
                    An implementation that provides one or more different Transport Services
                    using a specific framing and header format on the wire.</dd>
        <dt pn="section-2-1.7">Application:</dt>
        <dd pn="section-2-1.8">
                    An entity that uses a transport-layer interface for end-to-end delivery of data
                    across the network (this may also be an upper-layer protocol or tunnel
                    encapsulation).</dd>
        <dt pn="section-2-1.9">Application-specific knowledge:</dt>
        <dd pn="section-2-1.10">
                    Knowledge that only applications have.</dd>
        <dt pn="section-2-1.11">End system:</dt>
        <dd pn="section-2-1.12">
                    An entity that communicates with one or more other end systems using
                    a transport protocol. An end system provides a transport-layer interface
                    to applications.
                </dd>
        <dt pn="section-2-1.13">Connection:</dt>
        <dd pn="section-2-1.14">
                    Shared state of two or more end systems that persists
                    across messages that are transmitted between these end systems.</dd>
        <dt pn="section-2-1.15">Connection Group:</dt>
        <dd pn="section-2-1.16">
                    A set of connections that share the same configuration
                    (configuring one of them causes all other connections in
                    the same group to be configured in the same way). We call
                    connections that belong to a connection group "grouped",
                    while "ungrouped" connections are not a part of a
                    connection group.</dd>
        <dt pn="section-2-1.17">Socket:</dt>
        <dd pn="section-2-1.18">
                    The combination of a destination IP address and a destination port number.</dd>
      </dl>
      <t indent="0" pn="section-2-2">Moreover, throughout the document, the protocol name "UDP(-Lite)" is used when
                discussing transport features that are equivalent for UDP and UDP-Lite; similarly,
                the protocol name "TCP" refers to both TCP and MPTCP.
      </t>
    </section>
    <section anchor="deriving" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-deriving-the-minimal-set">Deriving the Minimal Set</name>
      <t indent="0" pn="section-3-1">

                We assume that applications have no specific requirements that
                need knowledge about the network, e.g., regarding the choice of
                network interface or the end-to-end path.  Even with these
                assumptions, there are certain requirements that are strictly
                kept by transport protocols today, and these must also be kept
                by a transport system.  Some of these requirements relate to
                transport features that we call "Functional".
      </t>
      <t indent="0" pn="section-3-2">Functional transport features provide functionality that cannot be
      used without the application knowing about them, or else they violate
      assumptions that might cause the application to fail.  For example,
      ordered message delivery is a functional transport feature: it cannot be
      configured without the application knowing about it because the
      application's assumption could be that messages always arrive in
      order. Failure includes any change of the application behavior that is
      not performance oriented, e.g., security.
      </t>
      <t indent="0" pn="section-3-3">"Change DSCP" and "Disable Nagle algorithm" are examples of transport
      features that we call "Optimizing"; if a transport system autonomously
      decides to enable or disable them, an application will not fail, but a
      transport system may be able to communicate more efficiently if the
      application is in control of this optimizing transport feature. These
      transport features require application-specific knowledge (e.g., about
      delay/bandwidth requirements or the length of future data blocks that
      are to be transmitted).
      </t>
      <t indent="0" pn="section-3-4">
                The transport features of IETF transport protocols that do not
                require application-specific knowledge and could therefore be
                utilized by a transport system on its own without involving
                the application are called "Automatable".
      </t>
      <t indent="0" pn="section-3-5">We approach the construction of a minimal set of transport features
      in the following way:
      </t>
      <ol type="1" indent="adaptive" spacing="normal" start="1" pn="section-3-6">
        <li pn="section-3-6.1" derivedCounter="1.">Categorization (<xref target="super" format="default" sectionFormat="of" derivedContent="Appendix A"/>): The
        superset of transport features from <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/> is presented, and transport features are
        categorized as Functional, Optimizing, or Automatable for later
        reduction.</li>
        <li pn="section-3-6.2" derivedCounter="2.">Reduction (<xref target="Reduction" format="default" sectionFormat="of" derivedContent="Section 4"/>): A shorter
        list of transport features is derived from the categorization in the
        first step. This removes all transport features that do not require
        application-specific knowledge or would result in semantically
        incorrect behavior if they were implemented over TCP or UDP.</li>
        <li pn="section-3-6.3" derivedCounter="3.">Discussion (<xref target="Discussion" format="default" sectionFormat="of" derivedContent="Section 5"/>): The
        resulting list shows a number of peculiarities that are discussed, to
        provide a basis for constructing the minimal set.</li>
        <li pn="section-3-6.4" derivedCounter="4.">Construction (<xref target="minset" format="default" sectionFormat="of" derivedContent="Section 6"/>): Based on
        the reduced set and the discussion of the transport features therein,
        a minimal set is constructed.</li>
      </ol>
      <t indent="0" pn="section-3-7">Following <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/> and retaining its
      terminology, we divide the transport features into two main groups as
      follows:
      </t>
      <ol type="1" indent="adaptive" spacing="normal" start="1" pn="section-3-8">
        <li pn="section-3-8.1" derivedCounter="1.">
          <t indent="0" pn="section-3-8.1.1">CONNECTION-related transport features</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-3-8.1.2">
            <li pn="section-3-8.1.2.1">ESTABLISHMENT</li>
            <li pn="section-3-8.1.2.2">AVAILABILITY</li>
            <li pn="section-3-8.1.2.3">MAINTENANCE</li>
            <li pn="section-3-8.1.2.4">TERMINATION</li>
          </ul>
        </li>
        <li pn="section-3-8.2" derivedCounter="2.">
          <t indent="0" pn="section-3-8.2.1">DATA-Transfer-related transport features</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-3-8.2.2">
            <li pn="section-3-8.2.2.1">Sending Data</li>
            <li pn="section-3-8.2.2.2">Receiving Data</li>
            <li pn="section-3-8.2.2.3">Errors</li>
          </ul>
        </li>
      </ol>
    </section>
    <section anchor="Reduction" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-the-reduced-set-of-transpor">The Reduced Set of Transport Features</name>
      <t indent="0" pn="section-4-1">By hiding automatable transport features from the application, a transport system can
                gain opportunities to automate the usage of network-related functionality. This can facilitate
                using the transport system
                for the application programmer and it allows for optimizations that may not be possible
                for an application. For instance, system-wide configurations
                regarding the usage of multiple interfaces can better be exploited if the choice of the
                interface is not entirely up to the application. Therefore, since they are not strictly
                necessary to expose in a transport system,
                we do not include automatable transport features in the reduced set of transport
                features. This leaves us with only the transport features that
                are either optimizing or functional.
      </t>
      <t indent="0" pn="section-4-2">A transport system should be able to communicate via TCP or UDP if
      alternative transport protocols are found not to work. For many
      transport features, this is possible, often by simply not doing
      anything when a specific request is made.  For some transport features,
      however, it was identified that direct usage of neither TCP nor UDP is
      possible; in these cases, even not doing anything would incur
      semantically incorrect behavior.  Whenever an application would make use
      of one of these transport features, this would eliminate the possibility
      to use TCP or UDP. Thus, we only keep the functional and optimizing
      transport features for which an implementation over either TCP or UDP is
      possible in our reduced set.
      </t>
      <t indent="0" pn="section-4-3">The following list contains the transport features from <xref target="super" format="default" sectionFormat="of" derivedContent="Appendix A"/>, reduced using these rules. The
      "minimal set" derived in this document is meant to be implementable
      "one-sided" over TCP and, with limitations, UDP. In the list, we
      therefore precede a transport feature with "T:" if an implementation
      over TCP is possible, "U:" if an implementation over UDP is possible,
      and "T,U:" if an implementation over either TCP or UDP is possible.
      </t>
      <section anchor="conn-reduced" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-connection-related-transpor">CONNECTION-Related Transport Features</name>
        <t indent="0" pn="section-4.1-1">ESTABLISHMENT: 
        </t>
        <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.1-2">
          <li pn="section-4.1-2.1">T,U: Connect</li>
          <li pn="section-4.1-2.2">T,U: Specify number of attempts and/or timeout for the first establishment message</li>
          <li pn="section-4.1-2.3">T,U: Disable MPTCP</li>
          <li pn="section-4.1-2.4">T: Configure authentication</li>
          <li pn="section-4.1-2.5">T: Hand over a message to reliably transfer (possibly multiple
          times) before connection establishment</li>
          <li pn="section-4.1-2.6">T: Hand over a message to reliably transfer during connection establishment</li>
        </ul>
        <t indent="0" pn="section-4.1-3">AVAILABILITY: 
        </t>
        <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.1-4">
          <li pn="section-4.1-4.1">T,U: Listen</li>
          <li pn="section-4.1-4.2">T,U: Disable MPTCP</li>
          <li pn="section-4.1-4.3">T: Configure authentication</li>
        </ul>
        <t indent="0" pn="section-4.1-5">MAINTENANCE: 
        </t>
        <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.1-6">
          <li pn="section-4.1-6.1">T: Change timeout for aborting connection (using retransmit limit or time value)</li>
          <li pn="section-4.1-6.2">T: Suggest timeout to the peer</li>
          <li pn="section-4.1-6.3">T,U: Disable Nagle algorithm</li>
          <li pn="section-4.1-6.4">T,U: Notification of Excessive Retransmissions (early warning below abortion threshold)</li>
          <li pn="section-4.1-6.5">T,U: Specify DSCP field</li>
          <li pn="section-4.1-6.6">T,U: Notification of ICMP error message arrival</li>
          <li pn="section-4.1-6.7">T: Change authentication parameters</li>
          <li pn="section-4.1-6.8">T: Obtain authentication information</li>
          <li pn="section-4.1-6.9">T,U: Set Cookie life value</li>
          <li pn="section-4.1-6.10">T,U: Choose a scheduler to operate between streams of an association</li>
          <li pn="section-4.1-6.11">T,U: Configure priority or weight for a scheduler</li>
          <li pn="section-4.1-6.12">T,U: Disable checksum when sending</li>
          <li pn="section-4.1-6.13">T,U: Disable checksum requirement when receiving</li>
          <li pn="section-4.1-6.14">T,U: Specify checksum coverage used by the sender</li>
          <li pn="section-4.1-6.15">T,U: Specify minimum checksum coverage required by receiver</li>
          <li pn="section-4.1-6.16">T,U: Specify DF field</li>
          <li pn="section-4.1-6.17">T,U: Get max. transport-message size that may be sent using a non-fragmented IP packet from the configured interface</li>
          <li pn="section-4.1-6.18">T,U: Get max. transport-message size that may be received from the configured interface</li>
          <li pn="section-4.1-6.19">T,U: Obtain ECN field</li>
          <li pn="section-4.1-6.20">T,U: Enable and configure a "Low Extra Delay Background Transfer"</li>
        </ul>
        <t indent="0" pn="section-4.1-7">TERMINATION: 
        </t>
        <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.1-8">
          <li pn="section-4.1-8.1">T: Close after reliably delivering all remaining data, causing
          an event informing the application on the other side</li>
          <li pn="section-4.1-8.2">T: Abort without delivering remaining data, causing an event
          informing the application on the other side</li>
          <li pn="section-4.1-8.3">T,U: Abort without delivering remaining data, not causing an
          event informing the application on the other side</li>
          <li pn="section-4.1-8.4">T,U: Timeout event when data could not be delivered for too long</li>
        </ul>
      </section>
      <section anchor="data-reduced" numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-data-transfer-related-trans">DATA-Transfer-Related Transport Features</name>
        <section anchor="data-sending-reduced" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.1">
          <name slugifiedName="name-sending-data">Sending Data</name>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.2.1-1">
            <li pn="section-4.2.1-1.1">T: Reliably transfer data, with congestion control</li>
            <li pn="section-4.2.1-1.2">T: Reliably transfer a message, with congestion control</li>
            <li pn="section-4.2.1-1.3">T,U: Unreliably transfer a message</li>
            <li pn="section-4.2.1-1.4">T: Configurable Message Reliability</li>
            <li pn="section-4.2.1-1.5">T: Ordered message delivery (potentially slower than unordered)</li>
            <li pn="section-4.2.1-1.6">T,U: Unordered message delivery (potentially faster than ordered)</li>
            <li pn="section-4.2.1-1.7">T,U: Request not to bundle messages</li>
            <li pn="section-4.2.1-1.8">T: Specifying a key id to be used to authenticate a message</li>
            <li pn="section-4.2.1-1.9">T,U: Request not to delay the acknowledgement (SACK) of a message</li>
          </ul>
        </section>
        <section anchor="data-receiving-reduced" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.2">
          <name slugifiedName="name-receiving-data">Receiving Data</name>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.2.2-1">
            <li pn="section-4.2.2-1.1">T,U: Receive data (with no message delimiting)</li>
            <li pn="section-4.2.2-1.2">U: Receive a message</li>
            <li pn="section-4.2.2-1.3">T,U: Information about partial message arrival</li>
          </ul>
        </section>
        <section anchor="data-errors-reduced" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.3">
          <name slugifiedName="name-errors">Errors</name>
          <t indent="0" pn="section-4.2.3-1">This section describes sending failures that are associated with
          a specific call to in the "Sending Data" category (<xref target="data-sending-pass3" format="default" sectionFormat="of" derivedContent="Appendix A.2.1"/>).</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.2.3-2">
            <li pn="section-4.2.3-2.1">T,U: Notification of send failures</li>
            <li pn="section-4.2.3-2.2">T,U: Notification that the stack has no more user data to send</li>
            <li pn="section-4.2.3-2.3">T,U: Notification to a receiver that a partial message delivery has been aborted</li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="Discussion" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-discussion">Discussion</name>
      <t indent="0" pn="section-5-1">The reduced set in the previous section exhibits a number of
      peculiarities, which we will discuss in the following. This section
      focuses on TCP because, with the exception of one particular transport
      feature ("Receive a message"; we will discuss this in <xref target="sendmsg" format="default" sectionFormat="of" derivedContent="Section 5.1"/>), the list shows that UDP is
      strictly a subset of TCP. We can first try to understand how to build a
      transport system that can run over TCP, and then narrow down the result
      further to allow that the system can always run over either TCP or UDP
      (which effectively means removing everything related to reliability,
      ordering, authentication, and closing/aborting with a notification to the
      peer).
      </t>
      <t indent="0" pn="section-5-2">Note that, because the functional transport features of UDP are, with
      the exception of "Receive a message", a subset of TCP, TCP can be used
      as a replacement for UDP whenever an application does not need message
      delimiting (e.g., because the application-layer protocol already does
      it).  This has been recognized by many applications that already do this
      in practice, by trying to communicate with UDP at first and falling
      back to TCP in case of a connection failure.
      </t>
      <section anchor="sendmsg" numbered="true" toc="include" removeInRFC="false" pn="section-5.1">
        <name slugifiedName="name-sending-messages-receiving-">Sending Messages, Receiving Bytes</name>
        <t indent="0" pn="section-5.1-1">For implementing a transport system over TCP, there are several
        transport features related to sending, but only a single transport
        feature related to receiving: "Receive data (with no message
        delimiting)" (and, strangely, "information about partial message
        arrival"). Notably, the transport feature "Receive a message" is also
        the only non-automatable transport feature of UDP(-Lite) for which no
        implementation over TCP is possible.</t>
        <t indent="0" pn="section-5.1-2">To support these TCP receiver semantics, we define an
                "Application-Framed Byte Stream" (AFra Byte Stream).
                AFra Byte Streams allow senders to operate on messages while
                minimizing changes to the TCP socket API. In particular,
                nothing changes on the receiver side; data can be accepted
                via a normal TCP socket.
        </t>
        <t indent="0" pn="section-5.1-3">In an AFra Byte Stream, the sending application can optionally
        inform the transport about message boundaries and required properties
        per message (configurable order and reliability, or embedding a
        request not to delay the acknowledgement of a message). Whenever the
        sending application specifies per-message properties that relax the
        notion of reliable in-order delivery of bytes, it must assume that the
        receiving application is 1) able to determine message boundaries,
        provided that messages are always kept intact, and 2) able to accept
        these relaxed per-message properties.  Any signaling of such
        information to the peer is up to an application-layer protocol and
        considered out of scope of this document.
        </t>
        <t indent="0" pn="section-5.1-4">For example, if an application requests to transfer
                fixed-size messages of 100 bytes with partial reliability,
                this needs the receiving application to be prepared to accept
                data in chunks of 100 bytes. Then, if some of these 100-byte
                messages are missing (e.g., if SCTP with Configurable
                Reliability is used), this is the expected application
                behavior. With TCP, no messages would be missing, but this is
                also correct for the application, and the possible
                retransmission delay is acceptable within the best-effort
                service model (see <xref target="RFC7305" sectionFormat="of" section="3.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7305#section-3.5" derivedContent="RFC7305"/>). Still, the receiving application would
                separate the byte stream into 100-byte chunks.
        </t>
        <t indent="0" pn="section-5.1-5">Note that this usage of messages does not require all messages to
        be equal in size.  Many application protocols use some form of
        Type-Length-Value (TLV) encoding, e.g., by defining a header including
        length fields; another alternative is the use of byte stuffing methods
        such as Consistent Overhead Byte Stuffing (COBS) <xref target="COBS" format="default" sectionFormat="of" derivedContent="COBS"/>. If an application
        needs message numbers, e.g., to restore the correct sequence of
        messages, these must also be encoded by the application itself, as SCTP's
        transport features that are related to the sequence number are not provided by
        the "minimum set" (in the interest of enabling usage of TCP).
        </t>
      </section>
      <section anchor="nostream" numbered="true" toc="include" removeInRFC="false" pn="section-5.2">
        <name slugifiedName="name-stream-schedulers-without-s">Stream Schedulers without Streams</name>
        <t indent="0" pn="section-5.2-1">We have already stated that multi-streaming does not require application-specific knowledge.
                    Potential benefits or disadvantages of, e.g., using two streams of an SCTP association
                    versus using two separate SCTP associations or TCP connections are related to knowledge
                    about the network and the particular transport protocol in use, not the application.
                    However, the transport features "Choose a scheduler to operate between streams of
                    an association" and "Configure priority or weight for a scheduler" operate on streams.
                    Here, streams identify communication channels between which a scheduler operates, and
                    they can be assigned a priority. Moreover, the transport features in the MAINTENANCE
                    category all operate on associations in case of SCTP, i.e., they apply to all streams in
                    that association.
        </t>
        <t indent="0" pn="section-5.2-2">With only these semantics necessary to represent, the interface to
        a transport system becomes easier if we assume that connections may be
        not only a transport protocol's connection or association, but could
        also be a stream of an existing SCTP association, for example. We only
        need to allow for a way to define a possible grouping of
        connections. Then, all MAINTENANCE transport features can be said to
        operate on connection groups, not connections, and a scheduler
        operates on the connections within a group.
        </t>
        <t indent="0" pn="section-5.2-3">To be compatible with multiple transport protocols and uniformly
        allow access to both transport connections and streams of a
        multi-streaming protocol, the semantics of opening and closing need to
        be the most restrictive subset of all of the underlying options. For
        example, TCP's support of half-closed connections can be seen as a
        feature on top of the more restrictive "ABORT"; this feature cannot be
        supported because not all protocols used by a transport system
        (including streams of an association) support half-closed connections.
        </t>
      </section>
      <section anchor="earlydata" numbered="true" toc="include" removeInRFC="false" pn="section-5.3">
        <name slugifiedName="name-early-data-transmission">Early Data Transmission</name>
        <t indent="0" pn="section-5.3-1">There are two transport features related to transferring a message
        early: "Hand over a message to reliably transfer (possibly multiple
        times) before connection establishment", which relates to TCP Fast
        Open <xref target="RFC7413" format="default" sectionFormat="of" derivedContent="RFC7413"/>, and "Hand over a
        message to reliably transfer during connection establishment", which
        relates to SCTP's ability to transfer data together with the
        COOKIE-Echo chunk. Also without TCP Fast Open, TCP can transfer data
        during the handshake, together with the SYN packet; however, the
        receiver of this data may not hand it over to the application until
        the handshake has completed. Also, different from TCP Fast Open, this
        data is not delimited as a message by TCP (thus, not visible as a
        "message").  This functionality is commonly available in TCP and
        supported in several implementations, even though the TCP
        specification does not explain how to provide it to applications.
        </t>
        <t indent="0" pn="section-5.3-2">A transport system could differentiate between the cases of
        transmitting data "before" (possibly multiple times) or "during" the
        handshake. Alternatively, it could also assume that data that are
        handed over early will be transmitted as early as possible, and
        "before" the handshake would only be used for messages that are
        explicitly marked as "idempotent" (i.e., it would be acceptable to
        transfer them multiple times).
        </t>
        <t indent="0" pn="section-5.3-3">The amount of data that can successfully be transmitted before or
        during the handshake depends on various factors: the transport
        protocol, the use of header options, the choice of IPv4 and IPv6, and
        the Path MTU. A transport system should therefore allow a sending
        application to query the maximum amount of data it can possibly
        transmit before (or, if exposed, during) connection establishment.
        </t>
      </section>
      <section anchor="rundry" numbered="true" toc="include" removeInRFC="false" pn="section-5.4">
        <name slugifiedName="name-sender-running-dry">Sender Running Dry</name>
        <t indent="0" pn="section-5.4-1">The transport feature "Notification that the stack has no more user
        data to send" relates to SCTP's "SENDER DRY" notification. Such
        notifications can, in principle, be used to avoid having an
        unnecessarily large send buffer, yet ensure that the transport sender
        always has data available when it has an opportunity to transmit it.
        This has been found to be very beneficial for some applications <xref target="WWDC2015" format="default" sectionFormat="of" derivedContent="WWDC2015"/>. However, "SENDER DRY" truly
        means that the entire send buffer (including both unsent and
        unacknowledged data) has emptied, i.e., when it notifies the sender,
        it is already too late; the transport protocol already missed an
        opportunity to send data. Some modern TCP implementations now include
        the unspecified "TCP_NOTSENT_LOWAT" socket option that was proposed in
        <xref target="WWDC2015" format="default" sectionFormat="of" derivedContent="WWDC2015"/>, which limits the amount of
        unsent data that TCP can keep in the socket buffer; this allows
        specifying at which buffer filling level the socket becomes writable,
        rather than waiting for the buffer to run empty.
        </t>
        <t indent="0" pn="section-5.4-2">SCTP allows configuring the sender-side buffer too; the
        automatable Transport Feature "Configure send buffer size" provides
        this functionality, but only for the complete buffer, which includes
        both unsent and unacknowledged data. SCTP does not allow to control
        these two sizes separately. It therefore makes sense for a transport
        system to allow for uniform access to "TCP_NOTSENT_LOWAT" as well as
        the "SENDER DRY" notification.
        </t>
      </section>
      <section anchor="profile" numbered="true" toc="include" removeInRFC="false" pn="section-5.5">
        <name slugifiedName="name-capacity-profile">Capacity Profile</name>
        <t indent="0" pn="section-5.5-1">The transport features:
        </t>
        <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-5.5-2">
          <li pn="section-5.5-2.1">Disable Nagle algorithm</li>
          <li pn="section-5.5-2.2">Enable and configure a "Low Extra Delay Background Transfer"</li>
          <li pn="section-5.5-2.3">Specify DSCP field</li>
        </ul>
        <t indent="0" pn="section-5.5-3">
                    All relate to a QoS-like application need such as "low
                    latency" or "scavenger". In the interest of flexibility of
                    a transport system, they could therefore be offered in a
                    uniform, more abstract way, where a transport system
                    could, e.g., decide by itself how to use combinations of
                    LEDBAT-like congestion control and certain DSCP values,
                    and an application would only specify a general "capacity
                    profile" (a description of how it wants to use the
                    available capacity).  A need for "lowest possible latency
                    at the expense of overhead" could then translate into
                    automatically disabling the Nagle algorithm.
        </t>
        <t indent="0" pn="section-5.5-4">In some cases, the Nagle algorithm is best controlled directly by
        the application because it is not only related to a general profile
        but also to knowledge about the size of future messages.  For
        fine-grain control over Nagle-like functionality, the "Request not to
        bundle messages" is available.
        </t>
      </section>
      <section anchor="security" numbered="true" toc="include" removeInRFC="false" pn="section-5.6">
        <name slugifiedName="name-security">Security</name>
        <t indent="0" pn="section-5.6-1">Both TCP and SCTP offer authentication. TCP authenticates complete
        segments.  SCTP allows configuring which of SCTP's chunk types must
        always be authenticated; if this is exposed as such, it creates an
        undesirable dependency on the transport protocol. For compatibility
        with TCP, a transport system should only allow to configure complete
        transport layer packets, including headers, IP pseudo-header (if any)
        and payload.
        </t>
        <t indent="0" pn="section-5.6-2">Security is discussed in a separate document <xref target="RFC8922" format="default" sectionFormat="of" derivedContent="RFC8922"/>.  The minimal set presented in the present document
        excludes all security-related transport features from <xref target="super" format="default" sectionFormat="of" derivedContent="Appendix A"/>: "Configure authentication", "Change
        authentication parameters", "Obtain authentication information", and
        "Set Cookie life value", as well as "Specifying a key id to be used to
        authenticate a message".  It also excludes security transport features
        not listed in <xref target="super" format="default" sectionFormat="of" derivedContent="Appendix A"/>, including
        content privacy to in-path devices.
        </t>
      </section>
      <section anchor="packetsize" numbered="true" toc="include" removeInRFC="false" pn="section-5.7">
        <name slugifiedName="name-packet-size">Packet Size</name>
        <t indent="0" pn="section-5.7-1">UDP(-Lite) has a transport feature called "Specify DF field". This
        yields an error message in the case of sending a message that exceeds the
        Path MTU, which is necessary for a UDP-based application to be able to
        implement Path MTU Discovery (a function that UDP-based applications
        must do by themselves).  The "Get max. transport-message size that may
        be sent using a non-fragmented IP packet from the configured
        interface" transport feature yields an upper limit for the Path MTU
        (minus headers) and can therefore help to implement Path MTU Discovery
        more efficiently.</t>
      </section>
    </section>
    <section anchor="minset" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-the-minimal-set-of-transpor">The Minimal Set of Transport Features</name>
      <t indent="0" pn="section-6-1"> Based on the categorization, reduction, and discussion in <xref target="deriving" format="default" sectionFormat="of" derivedContent="Section 3"/>, this section describes a minimal
      set of transport features that end systems should offer.  Any
      configuration based on the described minimum set of transport feature can
      always be realized over TCP but also gives the transport system
      flexibility to choose another transport if implemented.  In the text of
      this section, "not UDP" is used to indicate elements of the system that
      cannot be implemented over UDP. Conversely, all elements of the system
      that are not marked with "not UDP" can also be implemented over UDP.
      </t>
      <t indent="0" pn="section-6-2"> The arguments laid out in <xref target="Discussion" format="default" sectionFormat="of" derivedContent="Section 5"/> ("discussion") were used to make the final
      representation of the minimal set as short, simple, and general as
      possible. There may be situations where these arguments do not apply,
      e.g., implementers may have specific reasons to expose multi-streaming
      as a visible functionality to applications, or the restrictive
      open/close semantics may be problematic under some circumstances.  In
      such cases, the representation in <xref target="Reduction" format="default" sectionFormat="of" derivedContent="Section 4"/> ("reduction") should be considered.
      </t>
      <t indent="0" pn="section-6-3"> As in <xref target="deriving" format="default" sectionFormat="of" derivedContent="Section 3"/>, <xref target="Reduction" format="default" sectionFormat="of" derivedContent="Section 4"/>, and <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>, we categorize the minimal set of transport features
      as 1) CONNECTION related (ESTABLISHMENT, AVAILABILITY, MAINTENANCE,
      TERMINATION) and 2) DATA Transfer related (Sending Data, Receiving Data,
      Errors). Here, the focus is on connections that the transport system
      offers as an abstraction to the application, as opposed to connections
      of transport protocols that the transport system uses.

      </t>
      <section anchor="minset-init" numbered="true" toc="include" removeInRFC="false" pn="section-6.1">
        <name slugifiedName="name-establishment-availability-">ESTABLISHMENT, AVAILABILITY, and TERMINATION</name>
        <t indent="0" pn="section-6.1-1">A connection must first be "created" to allow for some initial
        configuration to be carried out before the transport system can
        actively or passively establish communication with a remote end
        system. As a configuration of the newly created connection, an
        application can choose to disallow usage of MPTCP. Furthermore, all
        configuration parameters in <xref target="minset-groupconfig" format="default" sectionFormat="of" derivedContent="Section 6.2"/> can be used initially, although some of them may
        only take effect when a connection has been established with a chosen
        transport protocol. Configuring a connection early helps a transport
        system make the right decisions. For example, grouping information can
        influence whether or not the transport system implements a connection as a stream
        of a multi-streaming protocol's existing association.
        </t>
        <t indent="0" pn="section-6.1-2">
                    For ungrouped connections, early configuration is
                    necessary because it allows the transport system to know
                    which protocols it should try to use.  In particular, a
                    transport system that only makes a one-time choice for a
                    particular protocol must know early about strict
                    requirements that must be kept, or it can end up in a
                    deadlock situation (e.g., having chosen UDP and later be
                    asked to support reliable transfer). As an example
                    description of how to correctly handle these cases, we
                    provide the following decision tree (this is derived from
                    <xref target="conn-reduced" format="default" sectionFormat="of" derivedContent="Section 4.1"/> excluding
                    authentication, as explained in <xref target="Security" format="default" sectionFormat="of" derivedContent="Section 8"/>):

        </t>
        <artwork align="left" pn="section-6.1-3">
      +----------------------------------------------------------+
      | Will it ever be necessary to offer any of the following? | 
      | * Reliably transfer data                                 |
      | * Notify the peer of closing/aborting                    |
      | * Preserve data ordering                                 |     
      +----------------------------------------------------------+     
                |                                    |
                |Yes                                 |No
                | (SCTP or TCP)                      | (All protocols
                |  can be used.)                     |  can be used.)
                V                                    V 
+--------------------------------------+ +-----------------------------+
| Is any of the following useful to    | | Is any of the following     |
| the application?                     | | useful to the application?  |
| * Choosing a scheduler to operate    | | * Specify checksum coverage |
|   between connections in a group,    | |   used by the sender        |
|   with the possibility to configure  | | * Specify minimum checksum  |
|   a priority or weight per connection| |   coverage required by the  |
| * Configurable message reliability   | |   receiver                  |
| * Unordered message delivery	       | +-----------------------------+
| * Request not to delay the 	       |         |             |
|   acknowledgement (SACK) of a message|         |Yes          |No
+--------------------------------------+         |             |
          |                |                     |             |
          |Yes             |No                   |             |
          V                |                     V             V
        SCTP is            |                UDP-Lite is    UDP is        
        preferred.         |                preferred.     preferred. 
                           V
+------------------------------------------------------+
| Is any of the following useful to the application?   |
| * Hand over a message to reliably transfer (possibly |
|   multiple times) before connection establishment    |
| * Suggest timeout to the peer                        |
| * Notification of Excessive Retransmissions (early   |
|   warning below abortion threshold)                  |
| * Notification of ICMP error message arrival         |
+------------------------------------------------------+
          |                            |
          |Yes                         |No
          V                            V
    TCP is preferred.             SCTP and TCP           
                                  are equally preferable.
</artwork>
        <t indent="0" pn="section-6.1-4">Note that this decision tree is not optimal for all cases.  For
        example, if an application wants to use "Specify checksum coverage
        used by the sender", which is only offered by UDP-Lite, and "Configure
        priority or weight for a scheduler", which is only offered by SCTP,
        the above decision tree will always choose UDP-Lite, making it
        impossible to use SCTP's schedulers with priorities between grouped
        connections. Also, several other factors may influence the decisions
        for or against a protocol, e.g.,  penetration rates, the ability to
        work through NATs, etc.  We caution implementers to be aware of the
        full set of trade-offs, for which we recommend consulting the list in
        <xref target="conn-reduced" format="default" sectionFormat="of" derivedContent="Section 4.1"/> when deciding how to
        initialize a connection.
        </t>
        <t indent="0" pn="section-6.1-5">To summarize, the following parameters serve as input for the
        transport system to help it choose and configure a suitable
        protocol:</t>
        <dl indent="3" newline="false" spacing="normal" pn="section-6.1-6">
          <dt pn="section-6.1-6.1">Reliability:
</dt>
          <dd pn="section-6.1-6.2">a boolean that should be set to true when any of the following will be
useful to the application: reliably transfer data; notify the peer of
closing/aborting; or preserve data ordering.
</dd>
          <dt pn="section-6.1-6.3">Checksum coverage:
</dt>
          <dd pn="section-6.1-6.4">a boolean to specify whether it will be useful to the application to
specify checksum coverage when sending or receiving.
</dd>
          <dt pn="section-6.1-6.5">Configure message priority:
</dt>
          <dd pn="section-6.1-6.6">a boolean that should be set to true when any of the following
per-message configuration or prioritization mechanisms will be useful to the
application: choosing a scheduler to operate between grouped connections, with
the possibility to configure a priority or weight per connection; configurable
message reliability; unordered message delivery; or requesting not to delay the
acknowledgement (SACK) of a message.
</dd>
          <dt pn="section-6.1-6.7">Early message timeout notifications: 
</dt>
          <dd pn="section-6.1-6.8">a boolean that should be set to true when any of the following will be
useful to the application: hand over a message to reliably transfer (possibly
multiple times) before connection establishment; suggest timeout to the peer;
notification of excessive retransmissions (early warning below abortion
threshold); or notification of ICMP error message arrival.
</dd>
        </dl>
        <t indent="0" pn="section-6.1-7">Once a connection is created, it can be queried for the maximum
        amount of data that an application can possibly expect to have
        reliably transmitted before or during transport connection
        establishment (with zero being a possible answer) (see <xref target="minset-maintenance-grouped" format="default" sectionFormat="of" derivedContent="Section 6.2.1"/>).  An
        application can also give the connection a message for reliable
        transmission before or during connection establishment (not UDP); the
        transport system will then try to transmit it as early as possible. An
        application can facilitate sending a message particularly early by
        marking it as "idempotent" (see <xref target="minset-datatrans-sending" format="default" sectionFormat="of" derivedContent="Section 6.3.1"/>); in this case,
        the receiving application must be prepared to potentially receive
        multiple copies of the message (because idempotent messages are
        reliably transferred, asking for idempotence is not necessary for
        systems that support UDP).
        </t>
        <t indent="0" pn="section-6.1-8">
                    After creation, a transport system can actively establish
                    communication with a peer, or it can passively listen for
                    incoming connection requests. Note that active
                    establishment may or may not trigger a notification on the
                    listening side. It is possible that the first notification
                    on the listening side is the arrival of the first data
                    that the active side sends (a receiver-side transport
                    system could handle this by continuing to block a "Listen"
                    call, immediately followed, for example, by issuing
                    "Receive"; callback-based implementations could simply
                    skip the equivalent of "Listen"). This also means that the
                    active opening side is assumed to be the first side
                    sending data.
        </t>
        <t indent="0" pn="section-6.1-9">A transport system can actively close a connection, i.e., terminate
        it after reliably delivering all remaining data to the peer (if
        reliable data delivery was requested earlier (not UDP)), in which case
        the peer is notified that the connection is closed. Alternatively, a
        connection can be aborted without delivering outstanding data to the
        peer. In case reliable or partially reliable data delivery was
        requested earlier (not UDP), the peer is notified that the connection
        is aborted.  A timeout can be configured to abort a connection when
        data could not be delivered for too long (not UDP); however,
        timeout-based abortion does not notify the peer application that the
        connection has been aborted. Because half-closed connections are not
        supported, when a host implementing a transport system receives a
        notification that the peer is closing or aborting the connection (not
        UDP), its peer may not be able to read outstanding data. This means
        that unacknowledged data residing in a transport system's send buffer
        may have to be dropped from that buffer upon arrival of a "close" or
        "abort" notification from the peer.
        </t>
      </section>
      <section anchor="minset-groupconfig" numbered="true" toc="include" removeInRFC="false" pn="section-6.2">
        <name slugifiedName="name-maintenance">MAINTENANCE</name>
        <t indent="0" pn="section-6.2-1">A transport system must offer means to group connections, but it
        cannot guarantee truly grouping them using the transport protocols
        that it uses (e.g., it cannot be guaranteed that connections become
        multiplexed as streams on a single SCTP association when SCTP may not
        be available).  The transport system must therefore ensure that group-
        versus non-group-configurations are handled correctly in some way
        (e.g., by applying the configuration to all grouped connections even
        when they are not multiplexed, or informing the application about
        grouping success or failure).
        </t>
        <t indent="0" pn="section-6.2-2">As a general rule, any configuration described below should be carried
                    out as early as possible to aid the transport system's decision making.
        </t>
        <section anchor="minset-maintenance-grouped" numbered="true" toc="include" removeInRFC="false" pn="section-6.2.1">
          <name slugifiedName="name-connection-groups">Connection Groups</name>
          <t indent="0" pn="section-6.2.1-1">The following transport features and notifications (some directly
          from <xref target="Reduction" format="default" sectionFormat="of" derivedContent="Section 4"/>; some new or
          changed, based on the discussion in <xref target="Discussion" format="default" sectionFormat="of" derivedContent="Section 5"/>) automatically apply to all grouped connections:
          </t>
          <t indent="0" pn="section-6.2.1-2">Configure a timeout (not UDP)<br/>This can be done with the following parameters:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-6.2.1-3">
            <li pn="section-6.2.1-3.1">A timeout value for aborting connections, in seconds.</li>
            <li pn="section-6.2.1-3.2">A timeout value to be suggested to the peer (if possible), in seconds.</li>
            <li pn="section-6.2.1-3.3">The number of retransmissions after which the application
            should be notified of "Excessive Retransmissions".</li>
          </ul>
          <t indent="0" pn="section-6.2.1-4">Configure urgency<br/>This can be done with the following parameters:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-6.2.1-5">
            <li pn="section-6.2.1-5.1">A number to identify the type of scheduler that should be used
            to operate between connections in the group (no guarantees
            given). Schedulers are defined in <xref target="RFC8260" format="default" sectionFormat="of" derivedContent="RFC8260"/>.</li>
            <li pn="section-6.2.1-5.2">A "capacity profile" number to identify how an application
            wants to use its available capacity.  Choices can be "lowest
            possible latency at the expense of overhead" (which would disable
            any Nagle-like algorithm), "scavenger", or values that help
            determine the DSCP value for a connection.</li>
            <li pn="section-6.2.1-5.3">A buffer limit (in bytes); when the sender has less than the
            provided limit of bytes in the buffer, the application may be
            notified. Notifications are not guaranteed, and it is optional for
            a transport system to support buffer limit values greater than 0.
            Note that this limit and its notification should operate across
            the buffers of the whole transport system, i.e.,  also any
            potential buffers that the transport system itself may use on top
            of the transport's send buffer.</li>
          </ul>
          <t indent="0" pn="section-6.2.1-6">Following <xref target="packetsize" format="default" sectionFormat="of" derivedContent="Section 5.7"/>, these properties can be queried:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-6.2.1-7">
            <li pn="section-6.2.1-7.1">The maximum message size that may be sent without
            fragmentation via the configured interface. This is optional for a
            transport system to offer and may return an error ("not
            available"). It can aid applications implementing Path MTU
            Discovery.</li>
            <li pn="section-6.2.1-7.2">The maximum transport message size that can be sent, in
            bytes. Irrespective of fragmentation, there is a size limit for
            the messages that can be handed over to SCTP or UDP(-Lite);
            because the service provided by a transport system is independent
            of the transport protocol, it must allow an application to query
            this value: the maximum size of a message in an
            Application-Framed Byte Stream (see <xref target="sendmsg" format="default" sectionFormat="of" derivedContent="Section 5.1"/>). This may also return an error when data is
            not delimited ("not available").</li>
            <li pn="section-6.2.1-7.3">The maximum transport message size that can be received from
            the configured interface, in bytes (or "not available").</li>
            <li pn="section-6.2.1-7.4">The maximum amount of data that can possibly be sent before or
            during connection establishment, in bytes.</li>
          </ul>
          <t indent="0" pn="section-6.2.1-8">In addition to the already mentioned closing/aborting
          notifications and possible send errors, the following notifications
          can occur:</t>
          <dl indent="3" newline="false" spacing="normal" pn="section-6.2.1-9">
            <dt pn="section-6.2.1-9.1">Excessive Retransmissions:
            </dt>
            <dd pn="section-6.2.1-9.2">The configured (or a default) number of retransmissions has been
    reached, yielding this early warning below an abortion threshold.
    </dd>
            <dt pn="section-6.2.1-9.3">ICMP Arrival (parameter: ICMP message):
            </dt>
            <dd pn="section-6.2.1-9.4">An ICMP packet carrying the conveyed ICMP message has arrived.
    </dd>
            <dt pn="section-6.2.1-9.5">ECN Arrival (parameter: ECN value): 
            </dt>
            <dd pn="section-6.2.1-9.6">A packet carrying the conveyed Explicit Congestion Notification (ECN) value has arrived. This can be
    useful for applications implementing congestion control.
    </dd>
            <dt pn="section-6.2.1-9.7">Timeout (parameter: s seconds):
            </dt>
            <dd pn="section-6.2.1-9.8">Data could not be delivered for s seconds.
    </dd>
            <dt pn="section-6.2.1-9.9">Drain:
            </dt>
            <dd pn="section-6.2.1-9.10">The send buffer has either drained below the configured buffer limit
    or it has become completely empty. This is a generic notification that
    tries to enable uniform access to "TCP_NOTSENT_LOWAT" as well as the
    "SENDER DRY" notification (as discussed in <xref target="rundry" format="default" sectionFormat="of" derivedContent="Section 5.4"/>; SCTP's "SENDER
    DRY" is a special case where the threshold (for unsent data) is 0 and
    there is also no more unacknowledged data in the send buffer).
    </dd>
          </dl>
        </section>
        <section anchor="minset-maintenance-individual" numbered="true" toc="include" removeInRFC="false" pn="section-6.2.2">
          <name slugifiedName="name-individual-connections">Individual Connections</name>
          <t indent="0" pn="section-6.2.2-1">Configure priority or weight for a scheduler, as described in
          <xref target="RFC8260" format="default" sectionFormat="of" derivedContent="RFC8260"/>.</t>
          <t indent="0" pn="section-6.2.2-2">Configure checksum usage: This can be done with the following
          parameters, but there is no guarantee that any checksum limitations
          will indeed be enforced (the default behavior is "full coverage,
          checksum enabled"):</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-6.2.2-3">
            <li pn="section-6.2.2-3.1">a boolean to enable/disable usage of a checksum when sending</li>
            <li pn="section-6.2.2-3.2">the desired coverage (in bytes) of the checksum used when sending</li>
            <li pn="section-6.2.2-3.3">a boolean to enable/disable requiring a checksum when receiving</li>
            <li pn="section-6.2.2-3.4">the required minimum coverage (in bytes) of the checksum when receiving</li>
          </ul>
        </section>
      </section>
      <section anchor="minset-datatrans" numbered="true" toc="include" removeInRFC="false" pn="section-6.3">
        <name slugifiedName="name-data-transfer">DATA Transfer</name>
        <section anchor="minset-datatrans-sending" numbered="true" toc="include" removeInRFC="false" pn="section-6.3.1">
          <name slugifiedName="name-sending-data-2">Sending Data</name>
          <t indent="0" pn="section-6.3.1-1">When sending a message, no guarantees are given about the
          preservation of message boundaries to the peer; if message
          boundaries are needed, the receiving application at the peer must
          know about them beforehand (or the transport system cannot use
          TCP). Note that an application should already be able to hand over
          data before the transport system establishes a connection with a
          chosen transport protocol. Regarding the message that is being
          handed over, the following parameters can be used:</t>
          <dl indent="3" newline="false" spacing="normal" pn="section-6.3.1-2">
            <dt pn="section-6.3.1-2.1">Reliability:
            </dt>
            <dd pn="section-6.3.1-2.2">This parameter is used to convey a choice of: fully reliable with
    congestion control (not UDP), unreliable without congestion control,
    unreliable with congestion control (not UDP), and partially reliable with
    congestion control (see <xref target="RFC3758" format="default" sectionFormat="of" derivedContent="RFC3758"/> and
    <xref target="RFC7496" format="default" sectionFormat="of" derivedContent="RFC7496"/> for details on how to specify
    partial reliability) (not UDP). The latter two choices are optional for a
    transport system to offer and may result in full reliability. Note that
    applications sending unreliable data without congestion control should
    themselves perform congestion control in accordance with <xref target="RFC8085" format="default" sectionFormat="of" derivedContent="RFC8085"/>.
    </dd>
            <dt pn="section-6.3.1-2.3">Ordered (not UDP): 
            </dt>
            <dd pn="section-6.3.1-2.4">This boolean lets an application choose between ordered
    message delivery (true) and possibly unordered, potentially faster message
    delivery (false).
    </dd>
            <dt pn="section-6.3.1-2.5">Bundle:
            </dt>
            <dd pn="section-6.3.1-2.6">This boolean expresses a preference for allowing to bundle messages
    (true) or not (false). No guarantees are given.
    </dd>
            <dt pn="section-6.3.1-2.7">DelAck:
            </dt>
            <dd pn="section-6.3.1-2.8">This boolean, if false, lets an application request that the peer not
    delay the acknowledgement for this message.
    </dd>
            <dt pn="section-6.3.1-2.9">Fragment: 
            </dt>
            <dd pn="section-6.3.1-2.10">This boolean expresses a preference for allowing to fragment
    messages (true) or not (false), at the IP level. No guarantees are given.
    </dd>
            <dt pn="section-6.3.1-2.11">Idempotent (not UDP):
            </dt>
            <dd pn="section-6.3.1-2.12">This boolean expresses whether a message is idempotent (true) or not
    (false). Idempotent messages may arrive multiple times at the receiver
    (but they will arrive at least once). When data is idempotent, it can be
    used by the receiver immediately on a connection establishment
    attempt. Thus, if data is handed over before the transport system
    establishes a connection with a chosen transport protocol, stating that a
    message is idempotent facilitates transmitting it to the peer application
    particularly early.
    </dd>
          </dl>
          <t indent="0" pn="section-6.3.1-3">An application can be notified of a failure to send a specific
          message. There is no guarantee of such notifications, i.e., send
          failures can also silently occur.</t>
        </section>
        <section anchor="minset-datatrans-receiving" numbered="true" toc="include" removeInRFC="false" pn="section-6.3.2">
          <name slugifiedName="name-receiving-data-2">Receiving Data</name>
          <t indent="0" pn="section-6.3.2-1">A receiving application obtains an "Application-Framed
          Byte Stream" (AFra Byte Stream); this concept is further described in
          <xref target="sendmsg" format="default" sectionFormat="of" derivedContent="Section 5.1"/>. In line with TCP's
          receiver semantics, an AFra Byte Stream is just a stream of bytes to
          the receiver. If message boundaries were specified by the sender, a
          receiver-side transport system implementing only the minimum set of
          Transport Services defined here will still not inform the receiving
          application about them (this limitation is only needed for transport
          systems that are implemented to directly use TCP).</t>
          <t indent="0" pn="section-6.3.2-2">Different from TCP's semantics, if the sending application has
          allowed that messages are not fully reliably transferred, or
          delivered out of order, then such reordering or unreliability may
          be reflected per message in the arriving data. Messages will always
          stay intact, i.e., if an incomplete message is contained at the end
          of the arriving data block, this message is guaranteed to continue
          in the next arriving data block.</t>
        </section>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="include" removeInRFC="false" pn="section-7">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-7-1">This document has no IANA actions.
      </t>
    </section>
    <section anchor="Security" numbered="true" toc="include" removeInRFC="false" pn="section-8">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-8-1">Authentication, confidentiality protection, and integrity protection
      are identified as transport features by <xref target="RFC8095" format="default" sectionFormat="of" derivedContent="RFC8095"/>. Often, these features are provided by a protocol or
      layer on top of the transport protocol; none of the full-featured
      standards-track transport protocols in <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>, which this document is based upon, provide all of
      these transport features on its own. Therefore, they are not considered
      in this document, with the exception of native authentication
      capabilities of TCP and SCTP for which the security considerations in
      <xref target="RFC5925" format="default" sectionFormat="of" derivedContent="RFC5925"/> and <xref target="RFC4895" format="default" sectionFormat="of" derivedContent="RFC4895"/> apply. 



The minimum requirements for a secure transport system are discussed in a
separate document <xref target="RFC8922" format="default" sectionFormat="of" derivedContent="RFC8922"/>.

</t>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-taps-interface" to="TAPS-INTERFACE"/>
    <references pn="section-9">
      <name slugifiedName="name-references">References</name>
      <references pn="section-9.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC8095" target="https://www.rfc-editor.org/info/rfc8095" quoteTitle="true" derivedAnchor="RFC8095">
          <front>
            <title>Services Provided by IETF Transport Protocols and Congestion Control Mechanisms</title>
            <author initials="G." surname="Fairhurst" fullname="G. Fairhurst" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Trammell" fullname="B. Trammell" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Kuehlewind" fullname="M. Kuehlewind" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="March"/>
            <abstract>
              <t indent="0">This document describes, surveys, and classifies the protocol mechanisms provided by existing IETF protocols, as background for determining a common set of transport services.  It examines the Transmission Control Protocol (TCP), Multipath TCP, the Stream Control Transmission Protocol (SCTP), the User Datagram Protocol (UDP), UDP-Lite, the Datagram Congestion Control Protocol (DCCP), the Internet Control Message Protocol (ICMP), the Real-Time Transport Protocol (RTP), File Delivery over Unidirectional Transport / Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK- Oriented Reliable Multicast (NORM), Transport Layer Security (TLS), Datagram TLS (DTLS), and the Hypertext Transport Protocol (HTTP), when HTTP is used as a pseudotransport.  This survey provides background for the definition of transport services within the TAPS working group.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8095"/>
          <seriesInfo name="DOI" value="10.17487/RFC8095"/>
        </reference>
        <reference anchor="RFC8303" target="https://www.rfc-editor.org/info/rfc8303" quoteTitle="true" derivedAnchor="RFC8303">
          <front>
            <title>On the Usage of Transport Features Provided by IETF Transport Protocols</title>
            <author initials="M." surname="Welzl" fullname="M. Welzl">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Tuexen" fullname="M. Tuexen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Khademi" fullname="N. Khademi">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="February"/>
            <abstract>
              <t indent="0">This document describes how the transport protocols Transmission Control Protocol (TCP), MultiPath TCP (MPTCP), Stream Control Transmission Protocol (SCTP), User Datagram Protocol (UDP), and Lightweight User Datagram Protocol (UDP-Lite) expose services to applications and how an application can configure and use the features that make up these services.  It also discusses the service provided by the Low Extra Delay Background Transport (LEDBAT) congestion control mechanism.  The description results in a set of transport abstractions that can be exported in a transport services (TAPS) API.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8303"/>
          <seriesInfo name="DOI" value="10.17487/RFC8303"/>
        </reference>
        <reference anchor="RFC8922" target="https://www.rfc-editor.org/info/rfc8922" quoteTitle="true" derivedAnchor="RFC8922">
          <front>
            <title>A Survey of the Interaction between Security Protocols and Transport Services</title>
            <author initials="T" surname="Enghardt" fullname="Theresa Enghardt">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T" surname="Pauly" fullname="Tommy Pauly">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C" surname="Perkins" fullname="Colin Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K" surname="Rose" fullname="Kyle Rose">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C" surname="Wood" fullname="Christopher Wood">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="October" year="2020"/>
          </front>
          <seriesInfo name="RFC" value="8922"/>
          <seriesInfo name="DOI" value="10.17487/RFC8922"/>
        </reference>
      </references>
      <references pn="section-9.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="COBS" quoteTitle="true" target="https://doi.org/10.1109/90.769765" derivedAnchor="COBS">
          <front>
            <title>Consistent overhead byte stuffing</title>
            <author fullname="Stuart Cheshire" initials="S" surname="Cheshire">
              <organization showOnFrontPage="true">Stanford University</organization>
            </author>
            <author fullname="Mary Baker" initials="M" surname="Baker">
              <organization showOnFrontPage="true">Stanford University</organization>
            </author>
            <date month="April" year="1999"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/90.769765"/>
          <refcontent>IEEE/ACM Transactions on Networking, Volume 7, Issue 2
</refcontent>
        </reference>
        <reference anchor="POSIX" target="https://www.opengroup.org/onlinepubs/9699919799/functions/contents.html" quoteTitle="true" derivedAnchor="POSIX">
          <front>
            <title>IEEE Standard for Information Technology--Portable Operating System Interface (POSIX(R)) Base Specifications, Issue 7</title>
            <author>
              <organization showOnFrontPage="true">The Open Group</organization>
            </author>
            <date month="January" year="2018"/>
          </front>
          <seriesInfo name="IEEE Std" value="1003.1-2017"/>
          <refcontent>(Revision of IEEE Std 1003.1-2008)</refcontent>
        </reference>
        <reference anchor="RFC3758" target="https://www.rfc-editor.org/info/rfc3758" quoteTitle="true" derivedAnchor="RFC3758">
          <front>
            <title>Stream Control Transmission Protocol (SCTP) Partial Reliability Extension</title>
            <author initials="R." surname="Stewart" fullname="R. Stewart">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Ramalho" fullname="M. Ramalho">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="Q." surname="Xie" fullname="Q. Xie">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Tuexen" fullname="M. Tuexen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Conrad" fullname="P. Conrad">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2004" month="May"/>
            <abstract>
              <t indent="0">This memo describes an extension to the Stream Control Transmission Protocol (SCTP) that allows an SCTP endpoint to signal to its peer that it should move the cumulative ack point forward.  When both sides of an SCTP association support this extension, it can be used by an SCTP implementation to provide partially reliable data transmission service to an upper layer protocol.  This memo describes the protocol extensions, which consist of a new parameter for INIT and INIT ACK, and a new FORWARD TSN chunk type, and provides one example of a partially reliable service that can be provided to the upper layer via this mechanism.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3758"/>
          <seriesInfo name="DOI" value="10.17487/RFC3758"/>
        </reference>
        <reference anchor="RFC4895" target="https://www.rfc-editor.org/info/rfc4895" quoteTitle="true" derivedAnchor="RFC4895">
          <front>
            <title>Authenticated Chunks for the Stream Control Transmission Protocol (SCTP)</title>
            <author initials="M." surname="Tuexen" fullname="M. Tuexen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Stewart" fullname="R. Stewart">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Lei" fullname="P. Lei">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2007" month="August"/>
            <abstract>
              <t indent="0">This document describes a new chunk type, several parameters, and procedures for the Stream Control Transmission Protocol (SCTP).  This new chunk type can be used to authenticate SCTP chunks by using shared keys between the sender and receiver.  The new parameters are used to establish the shared keys.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4895"/>
          <seriesInfo name="DOI" value="10.17487/RFC4895"/>
        </reference>
        <reference anchor="RFC4987" target="https://www.rfc-editor.org/info/rfc4987" quoteTitle="true" derivedAnchor="RFC4987">
          <front>
            <title>TCP SYN Flooding Attacks and Common Mitigations</title>
            <author initials="W." surname="Eddy" fullname="W. Eddy">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2007" month="August"/>
            <abstract>
              <t indent="0">This document describes TCP SYN flooding attacks, which have been well-known to the community for several years.  Various countermeasures against these attacks, and the trade-offs of each, are described.  This document archives explanations of the attack and common defense techniques for the benefit of TCP implementers and administrators of TCP servers or networks, but does not make any standards-level recommendations.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4987"/>
          <seriesInfo name="DOI" value="10.17487/RFC4987"/>
        </reference>
        <reference anchor="RFC5925" target="https://www.rfc-editor.org/info/rfc5925" quoteTitle="true" derivedAnchor="RFC5925">
          <front>
            <title>The TCP Authentication Option</title>
            <author initials="J." surname="Touch" fullname="J. Touch">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Mankin" fullname="A. Mankin">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Bonica" fullname="R. Bonica">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="June"/>
            <abstract>
              <t indent="0">This document specifies the TCP Authentication Option (TCP-AO), which obsoletes the TCP MD5 Signature option of RFC 2385 (TCP MD5).  TCP-AO specifies the use of stronger Message Authentication Codes (MACs), protects against replays even for long-lived TCP connections, and provides more details on the association of security with TCP connections than TCP MD5.  TCP-AO is compatible with either a static Master Key Tuple (MKT) configuration or an external, out-of-band MKT management mechanism; in either case, TCP-AO also protects connections when using the same MKT across repeated instances of a connection, using traffic keys derived from the MKT, and coordinates MKT changes between endpoints.  The result is intended to support current infrastructure uses of TCP MD5, such as to protect long-lived connections (as used, e.g., in BGP and LDP), and to support a larger set of MACs with minimal other system and operational changes.  TCP-AO uses a different option identifier than TCP MD5, even though TCP-AO and TCP MD5 are never permitted to be used simultaneously.  TCP-AO supports IPv6, and is fully compatible with the proposed requirements for the replacement of TCP MD5.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5925"/>
          <seriesInfo name="DOI" value="10.17487/RFC5925"/>
        </reference>
        <reference anchor="RFC6897" target="https://www.rfc-editor.org/info/rfc6897" quoteTitle="true" derivedAnchor="RFC6897">
          <front>
            <title>Multipath TCP (MPTCP) Application Interface Considerations</title>
            <author initials="M." surname="Scharf" fullname="M. Scharf">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Ford" fullname="A. Ford">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="March"/>
            <abstract>
              <t indent="0">Multipath TCP (MPTCP) adds the capability of using multiple paths to a regular TCP session.  Even though it is designed to be totally backward compatible to applications, the data transport differs compared to regular TCP, and there are several additional degrees of freedom that applications may wish to exploit.  This document summarizes the impact that MPTCP may have on applications, such as changes in performance.  Furthermore, it discusses compatibility issues of MPTCP in combination with non-MPTCP-aware applications. Finally, the document describes a basic application interface that is a simple extension of TCP's interface for MPTCP-aware applications.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6897"/>
          <seriesInfo name="DOI" value="10.17487/RFC6897"/>
        </reference>
        <reference anchor="RFC7305" target="https://www.rfc-editor.org/info/rfc7305" quoteTitle="true" derivedAnchor="RFC7305">
          <front>
            <title>Report from the IAB Workshop on Internet Technology Adoption and Transition (ITAT)</title>
            <author initials="E." surname="Lear" fullname="E. Lear" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="July"/>
            <abstract>
              <t indent="0">This document provides an overview of a workshop held by the Internet Architecture Board (IAB) on Internet Technology Adoption and Transition (ITAT).  The workshop was hosted by the University of Cambridge on December 4th and 5th of 2013 in Cambridge, UK.  The goal of the workshop was to facilitate adoption of Internet protocols, through examination of a variety of economic models, with particular emphasis at the waist of the hourglass (e.g., the middle of the protocol stack).  This report summarizes contributions and discussions.  As the topics were wide ranging, there is no single set of recommendations for IETF participants to pursue at this time. Instead, in the classic sense of early research, the workshop noted areas that deserve further exploration.</t>
              <t indent="0">Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7305"/>
          <seriesInfo name="DOI" value="10.17487/RFC7305"/>
        </reference>
        <reference anchor="RFC7413" target="https://www.rfc-editor.org/info/rfc7413" quoteTitle="true" derivedAnchor="RFC7413">
          <front>
            <title>TCP Fast Open</title>
            <author initials="Y." surname="Cheng" fullname="Y. Cheng">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Chu" fullname="J. Chu">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Radhakrishnan" fullname="S. Radhakrishnan">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Jain" fullname="A. Jain">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="December"/>
            <abstract>
              <t indent="0">This document describes an experimental TCP mechanism called TCP Fast Open (TFO).  TFO allows data to be carried in the SYN and SYN-ACK packets and consumed by the receiving end during the initial connection handshake, and saves up to one full round-trip time (RTT) compared to the standard TCP, which requires a three-way handshake (3WHS) to complete before data can be exchanged.  However, TFO deviates from the standard TCP semantics, since the data in the SYN could be replayed to an application in some rare circumstances.  Applications should not use TFO unless they can tolerate this issue, as detailed in the Applicability section.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7413"/>
          <seriesInfo name="DOI" value="10.17487/RFC7413"/>
        </reference>
        <reference anchor="RFC7496" target="https://www.rfc-editor.org/info/rfc7496" quoteTitle="true" derivedAnchor="RFC7496">
          <front>
            <title>Additional Policies for the Partially Reliable Stream Control Transmission Protocol Extension</title>
            <author initials="M." surname="Tuexen" fullname="M. Tuexen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Seggelmann" fullname="R. Seggelmann">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Stewart" fullname="R. Stewart">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Loreto" fullname="S. Loreto">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="April"/>
            <abstract>
              <t indent="0">This document defines two additional policies for the Partially Reliable Stream Control Transmission Protocol (PR-SCTP) extension. These policies allow limitation of the number of retransmissions and prioritization of user messages for more efficient usage of the send buffer.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7496"/>
          <seriesInfo name="DOI" value="10.17487/RFC7496"/>
        </reference>
        <reference anchor="RFC8085" target="https://www.rfc-editor.org/info/rfc8085" quoteTitle="true" derivedAnchor="RFC8085">
          <front>
            <title>UDP Usage Guidelines</title>
            <author initials="L." surname="Eggert" fullname="L. Eggert">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G." surname="Fairhurst" fullname="G. Fairhurst">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G." surname="Shepherd" fullname="G. Shepherd">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="March"/>
            <abstract>
              <t indent="0">The User Datagram Protocol (UDP) provides a minimal message-passing transport that has no inherent congestion control mechanisms.  This document provides guidelines on the use of UDP for the designers of applications, tunnels, and other protocols that use UDP.  Congestion control guidelines are a primary focus, but the document also provides guidance on other topics, including message sizes, reliability, checksums, middlebox traversal, the use of Explicit Congestion Notification (ECN), Differentiated Services Code Points (DSCPs), and ports.</t>
              <t indent="0">Because congestion control is critical to the stable operation of the Internet, applications and other protocols that choose to use UDP as an Internet transport must employ mechanisms to prevent congestion collapse and to establish some degree of fairness with concurrent traffic.  They may also need to implement additional mechanisms, depending on how they use UDP.</t>
              <t indent="0">Some guidance is also applicable to the design of other protocols (e.g., protocols layered directly on IP or via IP-based tunnels), especially when these protocols do not themselves provide congestion control.</t>
              <t indent="0">This document obsoletes RFC 5405 and adds guidelines for multicast UDP usage.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="145"/>
          <seriesInfo name="RFC" value="8085"/>
          <seriesInfo name="DOI" value="10.17487/RFC8085"/>
        </reference>
        <reference anchor="RFC8260" target="https://www.rfc-editor.org/info/rfc8260" quoteTitle="true" derivedAnchor="RFC8260">
          <front>
            <title>Stream Schedulers and User Message Interleaving for the Stream Control Transmission Protocol</title>
            <author initials="R." surname="Stewart" fullname="R. Stewart">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Tuexen" fullname="M. Tuexen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Loreto" fullname="S. Loreto">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Seggelmann" fullname="R. Seggelmann">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="November"/>
            <abstract>
              <t indent="0">The Stream Control Transmission Protocol (SCTP) is a message-oriented transport protocol supporting arbitrarily large user messages.  This document adds a new chunk to SCTP for carrying payload data.  This allows a sender to interleave different user messages that would otherwise result in head-of-line blocking at the sender.  The interleaving of user messages is required for WebRTC data channels.</t>
              <t indent="0">Whenever an SCTP sender is allowed to send user data, it may choose from multiple outgoing SCTP streams.  Multiple ways for performing this selection, called stream schedulers, are defined in this document.  A stream scheduler can choose to either implement, or not implement, user message interleaving.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8260"/>
          <seriesInfo name="DOI" value="10.17487/RFC8260"/>
        </reference>
        <reference anchor="RFC8304" target="https://www.rfc-editor.org/info/rfc8304" quoteTitle="true" derivedAnchor="RFC8304">
          <front>
            <title>Transport Features of the User Datagram Protocol (UDP) and Lightweight UDP (UDP-Lite)</title>
            <author initials="G." surname="Fairhurst" fullname="G. Fairhurst">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Jones" fullname="T. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="February"/>
            <abstract>
              <t indent="0">This is an informational document that describes the transport protocol interface primitives provided by the User Datagram Protocol (UDP) and the Lightweight User Datagram Protocol (UDP-Lite) transport protocols.  It identifies the datagram services exposed to applications and how an application can configure and use the features offered by the Internet datagram transport service.  RFC 8303 documents the usage of transport features provided by IETF transport protocols, describing the way UDP, UDP-Lite, and other transport protocols expose their services to applications and how an application can configure and use the features that make up these services.  This document provides input to and context for that document, as well as offers a road map to documentation that may help users of the UDP and UDP-Lite protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8304"/>
          <seriesInfo name="DOI" value="10.17487/RFC8304"/>
        </reference>
        <reference anchor="RFC8622" target="https://www.rfc-editor.org/info/rfc8622" quoteTitle="true" derivedAnchor="RFC8622">
          <front>
            <title>A Lower-Effort Per-Hop Behavior (LE PHB) for Differentiated Services</title>
            <author initials="R." surname="Bless" fullname="R. Bless">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2019" month="June"/>
            <abstract>
              <t indent="0">This document specifies properties and characteristics of a Lower- Effort Per-Hop Behavior (LE PHB).  The primary objective of this LE PHB is to protect Best-Effort (BE) traffic (packets forwarded with the default PHB) from LE traffic in congestion situations, i.e., when resources become scarce, BE traffic has precedence over LE traffic and may preempt it.  Alternatively, packets forwarded by the LE PHB can be associated with a scavenger service class, i.e., they scavenge otherwise-unused resources only.  There are numerous uses for this PHB, e.g., for background traffic of low precedence, such as bulk data transfers with low priority in time, non-time-critical backups, larger software updates, web search engines while gathering information from web servers and so on.  This document recommends a standard Differentiated Services Code Point (DSCP) value for the LE PHB.</t>
              <t indent="0">This specification obsoletes RFC 3662 and updates the DSCP recommended in RFCs 4594 and 8325 to use the DSCP assigned in this specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8622"/>
          <seriesInfo name="DOI" value="10.17487/RFC8622"/>
        </reference>
        <reference anchor="SCTP-STREAM-1" quoteTitle="true" derivedAnchor="SCTP-STREAM-1">
          <front>
            <title>Transparent Flow Mapping for NEAT</title>
            <author fullname="Felix Weinrank" initials="F" surname="Weinrank"/>
            <author fullname="Michael Tuexen" initials="M" surname="Tuexen"/>
            <date month="June" year="2017"/>
          </front>
          <refcontent>IFIP Networking 2017</refcontent>
          <refcontent>Workshop on Future of Internet Transport (FIT 2017)</refcontent>
        </reference>
        <reference anchor="SCTP-STREAM-2" quoteTitle="true" target="https://doi.org/10.1109/GLOCOM.2011.6133554" derivedAnchor="SCTP-STREAM-2">
          <front>
            <title>Beneficial Transparent Deployment of SCTP: The Missing Pieces</title>
            <author fullname="Michael Welzl" initials="M" surname="Welzl"/>
            <author fullname="Florian Niederbacher" initials="F" surname="Niederbacher"/>
            <author fullname="Stein Gjessing" initials="S" surname="Gjessing"/>
            <date month="December" year="2011"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/GLOCOM.2011.6133554"/>
          <refcontent>IEEE GlobeCom 2011</refcontent>
        </reference>
        <reference anchor="I-D.ietf-taps-interface" quoteTitle="true" target="https://tools.ietf.org/html/draft-ietf-taps-interface-09" derivedAnchor="TAPS-INTERFACE">
          <front>
            <title>An Abstract Application Layer Interface to Transport Services</title>
            <author fullname="Brian Trammell">
              <organization showOnFrontPage="true">Google Switzerland GmbH</organization>
            </author>
            <author fullname="Michael Welzl">
              <organization showOnFrontPage="true">University of Oslo</organization>
            </author>
            <author fullname="Theresa Enghardt">
              <organization showOnFrontPage="true">Netflix</organization>
            </author>
            <author fullname="Godred Fairhurst">
              <organization showOnFrontPage="true">University of Aberdeen</organization>
            </author>
            <author fullname="Mirja Kuehlewind">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author fullname="Colin Perkins">
              <organization showOnFrontPage="true">University of Glasgow</organization>
            </author>
            <author fullname="Philipp S. Tiesel">
              <organization showOnFrontPage="true">TU Berlin</organization>
            </author>
            <author fullname="Christopher A. Wood">
              <organization showOnFrontPage="true">Cloudflare</organization>
            </author>
            <author fullname="Tommy Pauly">
              <organization showOnFrontPage="true">Apple Inc.</organization>
            </author>
            <date month="July" day="27" year="2020"/>
            <abstract>
              <t indent="0">   This document describes an abstract application programming
   interface, API, to the transport layer, following the Transport
   Services Architecture.  It supports the asynchronous, atomic
   transmission of messages over transport protocols and network paths
   dynamically selected at runtime.  It is intended to replace the
   traditional BSD sockets API as the common interface to the transport
   layer, in an environment where endpoints could select from multiple
   interfaces and potential transport protocols.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-taps-interface-09"/>
          <format type="TXT" target="https://www.ietf.org/internet-drafts/draft-ietf-taps-interface-09.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="WWDC2015" target="https://developer.apple.com/videos/wwdc/2015/?id=719" quoteTitle="true" derivedAnchor="WWDC2015">
          <front>
            <title>Your App and Next Generation Networks</title>
            <author fullname="Prabhakar Lakhera" initials="P." surname="Lakhera"/>
            <author fullname="Stuart Cheshire" initials="S." surname="Cheshire"/>
            <date month="June" year="2015"/>
          </front>
          <refcontent>Apple Worldwide Developers Conference 2015</refcontent>
          <refcontent>San Francisco, USA</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="super" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-the-superset-of-transport-f">The Superset of Transport Features</name>
      <t indent="0" pn="section-appendix.a-1">
                    In this description, transport features are presented
                    following the nomenclature
                    "CATEGORY.[SUBCATEGORY].FEATURENAME.PROTOCOL", equivalent
                    to "pass 2" in <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>.
                    We also sketch how functional or optimizing transport
                    features can be implemented by a transport system.  The
                    "minimal set" derived in this document is meant to be
                    implementable "one-sided" over TCP and, with limitations,
                    UDP. Hence, for all transport features that are
                    categorized as "functional" or "optimizing", and for which
                    no matching TCP and/or UDP primitive exists in "pass 2" of
                    <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/>, a brief
                    discussion on how to implement them over TCP and/or UDP is
                    included.
      </t>
      <t indent="0" pn="section-appendix.a-2">We designate some transport features as "automatable" on the basis of
      a broader decision that affects multiple transport features:
      </t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.a-3">
        <li pn="section-appendix.a-3.1">Most transport features that are related to multi-streaming were
        designated as "automatable".  This was done because the decision on
        whether or not to use multi-streaming does not depend on
        application-specific knowledge. This means that a connection that is
        exhibited to an application could be implemented by using a single
        stream of an SCTP association instead of mapping it to a complete SCTP
        association or TCP connection. This could be achieved by using more
        than one stream when an SCTP association is first established
        (CONNECT.SCTP parameter "outbound stream count"), maintaining an
        internal stream number, and using this stream number when sending data
        (SEND.SCTP parameter "stream number"). Closing or aborting a
        connection could then simply free the stream number for future use.
        This is discussed further in <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
                        </li>
        <li pn="section-appendix.a-3.2">With the exception of "Disable MPTCP", all transport features that
        are related to using multiple paths or the choice of the network
        interface were designated as "automatable". For example, "Listen"
        could always listen on all available interfaces and "Connect" could
        use the default interface for the destination IP address.
                        </li>
      </ul>
      <t indent="0" pn="section-appendix.a-4">
                    Finally, in three cases, transport features are aggregated
                    and/or slightly changed from <xref target="RFC8303" format="default" sectionFormat="of" derivedContent="RFC8303"/> in the description below.  These
                    transport features are marked as "CHANGED FROM
                    RFC 8303". These do not add any new functionality but just
                    represent a simple refactoring step that helps to
                    streamline the derivation process (e.g., by removing a
                    choice of a parameter for the sake of applications that
                    may not care about this choice).  The corresponding
                    transport features are automatable, and they are listed
                    immediately below the "CHANGED FROM RFC 8303" transport
                    feature.
      </t>
      <section anchor="conn-super" numbered="true" toc="include" removeInRFC="false" pn="section-a.1">
        <name slugifiedName="name-connection-related-transport">CONNECTION-Related Transport Features</name>
        <t indent="0" pn="section-a.1-1">ESTABLISHMENT: 
                        
        </t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-2">
          <li pn="section-a.1-2.1">
            <t indent="0" pn="section-a.1-2.1.1">Connect </t>
            <t indent="0" pn="section-a.1-2.1.2">
                                Protocols: TCP, SCTP, UDP(-Lite) </t>
            <t indent="0" pn="section-a.1-2.1.3">
                                Functional because the notion of a connection
                                is often reflected in applications as an
                                expectation to be able to communicate after a
                                "Connect" succeeded, with a communication
                                sequence relating to this transport feature
                                that is defined by the application
                                protocol.</t>
            <t indent="0" pn="section-a.1-2.1.4">
                                Implementation: via CONNECT.TCP, CONNECT.SCTP or CONNECT.UDP(-Lite).</t>
            <t indent="0" pn="section-a.1-2.1.5"/>
          </li>
          <li pn="section-a.1-2.2">
            <t indent="0" pn="section-a.1-2.2.1">Specify which IP Options must always be used</t>
            <t indent="0" pn="section-a.1-2.2.2">
                                Protocols: TCP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-2.2.3">
                                Automatable because IP Options relate to
                                knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-2.2.4"/>
          </li>
          <li pn="section-a.1-2.3">
            <t indent="0" pn="section-a.1-2.3.1">Request multiple streams</t>
            <t indent="0" pn="section-a.1-2.3.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.3.3">
                                Automatable because using multi-streaming does
                                not require application-specific knowledge
                                (example implementations of using
                                multi-streaming without involving the
                                application are described in <xref target="SCTP-STREAM-1" format="default" sectionFormat="of" derivedContent="SCTP-STREAM-1"/> and
                                <xref target="SCTP-STREAM-2" format="default" sectionFormat="of" derivedContent="SCTP-STREAM-2"/>).</t>
            <t indent="0" pn="section-a.1-2.3.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-2.3.5"/>
          </li>
          <li pn="section-a.1-2.4">
            <t indent="0" pn="section-a.1-2.4.1">Limit the number of inbound streams</t>
            <t indent="0" pn="section-a.1-2.4.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.4.3">
                                Automatable because using multi-streaming does not require application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-2.4.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-2.4.5"/>
          </li>
          <li pn="section-a.1-2.5">
            <t indent="0" pn="section-a.1-2.5.1">Specify number of attempts and/or timeout for the first establishment message</t>
            <t indent="0" pn="section-a.1-2.5.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-2.5.3">
                                Functional because this is closely related to
                                potentially assumed reliable data delivery for
                                data that is sent before or during connection
                                establishment.</t>
            <t indent="0" pn="section-a.1-2.5.4">
                                Implementation: using a parameter of CONNECT.TCP and CONNECT.SCTP.</t>
            <t indent="0" pn="section-a.1-2.5.5">
                                Implementation over UDP: do nothing (this is
                                irrelevant in the case of UDP because there,
                                reliable data delivery is not assumed).
            </t>
            <t indent="0" pn="section-a.1-2.5.6"/>
          </li>
          <li pn="section-a.1-2.6">
            <t indent="0" pn="section-a.1-2.6.1">Obtain multiple sockets</t>
            <t indent="0" pn="section-a.1-2.6.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.6.3">
                                Automatable because the non-parallel usage of multiple paths to communicate between the same end
                                hosts relates to knowledge about
                                the network, not the application.</t>
            <t indent="0" pn="section-a.1-2.6.4"/>
          </li>
          <li pn="section-a.1-2.7">
            <t indent="0" pn="section-a.1-2.7.1">Disable MPTCP</t>
            <t indent="0" pn="section-a.1-2.7.2">
                                Protocols: MPTCP</t>
            <t indent="0" pn="section-a.1-2.7.3">
                                Optimizing because the parallel usage of
                                multiple paths to communicate between the same
                                end hosts can improve performance. Whether or
                                not to use this feature depends on knowledge
                                about the network as well as
                                application-specific knowledge (see <xref target="RFC6897" sectionFormat="of" section="3.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6897#section-3.1" derivedContent="RFC6897"/>).</t>
            <t indent="0" pn="section-a.1-2.7.4">
                                Implementation: via a boolean parameter in CONNECT.MPTCP.</t>
            <t indent="0" pn="section-a.1-2.7.5">
                                Implementation over TCP: do nothing.</t>
            <t indent="0" pn="section-a.1-2.7.6">
                                Implementation over UDP: do nothing.
            </t>
            <t indent="0" pn="section-a.1-2.7.7"/>
          </li>
          <li pn="section-a.1-2.8">
            <t indent="0" pn="section-a.1-2.8.1">Configure authentication</t>
            <t indent="0" pn="section-a.1-2.8.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-2.8.3">
                                Functional because this has a direct influence on security.</t>
            <t indent="0" pn="section-a.1-2.8.4">
                                Implementation: via parameters in CONNECT.TCP
                                and CONNECT.SCTP.  With TCP, this allows
                                configuring Master Key Tuples (MKTs) to
                                authenticate complete segments (including the
                                TCP IPv4 pseudoheader, TCP header, and TCP
                                data).  With SCTP, this allows specifying
                                which chunk types must always be
                                authenticated.  Authenticating only certain
                                chunk types creates a reduced level of
                                security that is not supported by TCP; to be
                                compatible, this should therefore only allow
                                to authenticate all chunk types.  Key material
                                must be provided in a way that is compatible
                                with both <xref target="RFC4895" format="default" sectionFormat="of" derivedContent="RFC4895"/> and <xref target="RFC5925" format="default" sectionFormat="of" derivedContent="RFC5925"/>.</t>
            <t indent="0" pn="section-a.1-2.8.5">
                                Implementation over UDP: not possible (UDP does not offer this functionality).
            </t>
            <t indent="0" pn="section-a.1-2.8.6"/>
          </li>
          <li pn="section-a.1-2.9">
            <t indent="0" pn="section-a.1-2.9.1">Indicate (and/or obtain upon completion) an Adaptation Layer via an adaptation code point</t>
            <t indent="0" pn="section-a.1-2.9.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.9.3">
                                Functional because it allows sending extra
                                data for the sake of identifying an adaptation
                                layer, which by itself is application
                                specific.</t>
            <t indent="0" pn="section-a.1-2.9.4">
                                Implementation: via a parameter in CONNECT.SCTP.</t>
            <t indent="0" pn="section-a.1-2.9.5">
                                Implementation over TCP: not possible. (TCP does not offer this functionality.)</t>
            <t indent="0" pn="section-a.1-2.9.6">
                                Implementation over UDP: not possible. (UDP does not offer this functionality.)</t>
            <t indent="0" pn="section-a.1-2.9.7"/>
          </li>
          <li pn="section-a.1-2.10">
            <t indent="0" pn="section-a.1-2.10.1">Request to negotiate interleaving of user messages</t>
            <t indent="0" pn="section-a.1-2.10.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.10.3">
                                Automatable because it requires using multiple streams, but
                                requesting multiple streams in the CONNECTION.ESTABLISHMENT category is
                                automatable.</t>
            <t indent="0" pn="section-a.1-2.10.4">
                                Implementation: controlled via a parameter in CONNECT.SCTP. One possible
                                implementation is to always try to enable interleaving.</t>
            <t indent="0" pn="section-a.1-2.10.5"/>
          </li>
          <li pn="section-a.1-2.11">
            <t indent="0" pn="section-a.1-2.11.1">Hand over a message to reliably transfer (possibly multiple times) before connection establishment</t>
            <t indent="0" pn="section-a.1-2.11.2">
                                Protocols: TCP</t>
            <t indent="0" pn="section-a.1-2.11.3">
                                Functional because this is closely tied to properties of the data that an application
                                sends or expects to receive.</t>
            <t indent="0" pn="section-a.1-2.11.4">
                                Implementation: via a parameter in CONNECT.TCP.</t>
            <t indent="0" pn="section-a.1-2.11.5">
                                Implementation over UDP: not possible. (UDP does not provide reliability.)
            </t>
            <t indent="0" pn="section-a.1-2.11.6"/>
          </li>
          <li pn="section-a.1-2.12">
            <t indent="0" pn="section-a.1-2.12.1">Hand over a message to reliably transfer during connection establishment</t>
            <t indent="0" pn="section-a.1-2.12.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.12.3">
                                Functional because this can only work if the
                                message is limited in size, making it closely
                                tied to properties of the data that an
                                application sends or expects to receive.</t>
            <t indent="0" pn="section-a.1-2.12.4">
                                Implementation: via a parameter in CONNECT.SCTP.</t>
            <t indent="0" pn="section-a.1-2.12.5">
                                Implementation over TCP: transmit the message
                                with the SYN packet, sacrificing the ability
                                to identify message boundaries.
            </t>
            <t indent="0" pn="section-a.1-2.12.6">
                                Implementation over UDP: not possible. (UDP is
                                unreliable.)
            </t>
            <t indent="0" pn="section-a.1-2.12.7"/>
          </li>
          <li pn="section-a.1-2.13">
            <t indent="0" pn="section-a.1-2.13.1">Enable UDP encapsulation with a specified remote UDP port number</t>
            <t indent="0" pn="section-a.1-2.13.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-2.13.3">
                                Automatable because UDP encapsulation relates
                                to knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-2.13.4"/>
          </li>
        </ul>
        <t indent="0" pn="section-a.1-3">AVAILABILITY: 
                        
        </t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-4">
          <li pn="section-a.1-4.1">
            <t indent="0" pn="section-a.1-4.1.1">Listen</t>
            <t indent="0" pn="section-a.1-4.1.2">
                                Protocols: TCP, SCTP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-4.1.3">
                                Functional because the notion of accepting
                                connection requests is often reflected in
                                applications as an expectation to be able to
                                communicate after a "Listen" succeeded, with a
                                communication sequence relating to this
                                transport feature that is defined by the
                                application protocol.</t>
            <t indent="0" pn="section-a.1-4.1.4">
                                CHANGED FROM RFC 8303. This differs from the 3
                                automatable transport features below in that
                                it leaves the choice of interfaces for
                                listening open.</t>
            <t indent="0" pn="section-a.1-4.1.5">
                                Implementation: by listening on all interfaces
                                via LISTEN.TCP (not providing a local IP
                                address) or LISTEN.SCTP (providing SCTP port
                                number / address pairs for all local IP
                                addresses).  LISTEN.UDP(-Lite) supports both
                                methods.</t>
            <t indent="0" pn="section-a.1-4.1.6"/>
          </li>
          <li pn="section-a.1-4.2">
            <t indent="0" pn="section-a.1-4.2.1">Listen, 1 specified local interface</t>
            <t indent="0" pn="section-a.1-4.2.2">
                                Protocols: TCP, SCTP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-4.2.3">
                                Automatable because decisions about local
                                interfaces relate to knowledge about the
                                network and the Operating System, not the
                                application.</t>
            <t indent="0" pn="section-a.1-4.2.4"/>
          </li>
          <li pn="section-a.1-4.3">
            <t indent="0" pn="section-a.1-4.3.1">Listen, N specified local interfaces</t>
            <t indent="0" pn="section-a.1-4.3.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-4.3.3">
                                Automatable because decisions about local
                                interfaces relate to knowledge about the
                                network and the Operating System, not the
                                application.</t>
            <t indent="0" pn="section-a.1-4.3.4"/>
          </li>
          <li pn="section-a.1-4.4">
            <t indent="0" pn="section-a.1-4.4.1">Listen, all local interfaces</t>
            <t indent="0" pn="section-a.1-4.4.2">
                                Protocols: TCP, SCTP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-4.4.3">
                                Automatable because decisions about local
                                interfaces relate to knowledge about the
                                network and the Operating System, not the
                                application.</t>
            <t indent="0" pn="section-a.1-4.4.4"/>
          </li>
          <li pn="section-a.1-4.5">
            <t indent="0" pn="section-a.1-4.5.1">Specify which IP Options must always be used</t>
            <t indent="0" pn="section-a.1-4.5.2">
                                Protocols: TCP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-4.5.3">
                                Automatable because IP Options relate to
                                knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-4.5.4"/>
          </li>
          <li pn="section-a.1-4.6">
            <t indent="0" pn="section-a.1-4.6.1">Disable MPTCP</t>
            <t indent="0" pn="section-a.1-4.6.2">
                                Protocols: MPTCP</t>
            <t indent="0" pn="section-a.1-4.6.3">
                                Optimizing because the parallel usage of
                                multiple paths to communicate between the same
                                end hosts can improve performance. Whether or
                                not to use this feature depends on knowledge
                                about the network as well as
                                application-specific knowledge (see <xref target="RFC6897" sectionFormat="of" section="3.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6897#section-3.1" derivedContent="RFC6897"/>).</t>
            <t indent="0" pn="section-a.1-4.6.4">
                                Implementation: via a boolean parameter in
                                LISTEN.MPTCP.</t>
            <t indent="0" pn="section-a.1-4.6.5">
                                Implementation over TCP: do nothing.</t>
            <t indent="0" pn="section-a.1-4.6.6">
                                Implementation over UDP: do nothing.
            </t>
            <t indent="0" pn="section-a.1-4.6.7"/>
          </li>
          <li pn="section-a.1-4.7">
            <t indent="0" pn="section-a.1-4.7.1">Configure authentication</t>
            <t indent="0" pn="section-a.1-4.7.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-4.7.3">
                                Functional because this has a direct influence on security.</t>
            <t indent="0" pn="section-a.1-4.7.4">
                                Implementation: via parameters in LISTEN.TCP and LISTEN.SCTP.</t>
            <t indent="0" pn="section-a.1-4.7.5">
                                Implementation over TCP: with TCP, this allows
                                configuring Master Key Tuples (MKTs) to
                                authenticate complete segments (including the
                                TCP IPv4 pseudoheader, TCP header, and TCP
                                data).  With SCTP, this allows specifying
                                which chunk types must always be
                                authenticated.  Authenticating only certain
                                chunk types creates a reduced level of
                                security that is not supported by TCP; to be
                                compatible, this should therefore only allow
                                to authenticate all chunk types.  Key material
                                must be provided in a way that is compatible
                                with both <xref target="RFC4895" format="default" sectionFormat="of" derivedContent="RFC4895"/> and <xref target="RFC5925" format="default" sectionFormat="of" derivedContent="RFC5925"/>.</t>
            <t indent="0" pn="section-a.1-4.7.6">
                                Implementation over UDP: not possible. (UDP does not offer authentication.)
            </t>
            <t indent="0" pn="section-a.1-4.7.7"/>
          </li>
          <li pn="section-a.1-4.8">
            <t indent="0" pn="section-a.1-4.8.1">Obtain requested number of streams</t>
            <t indent="0" pn="section-a.1-4.8.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-4.8.3">
                                Automatable because using multi-streaming does
                                not require application-specific
                                knowledge.</t>
            <t indent="0" pn="section-a.1-4.8.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-4.8.5"/>
          </li>
          <li pn="section-a.1-4.9">
            <t indent="0" pn="section-a.1-4.9.1">Limit the number of inbound streams</t>
            <t indent="0" pn="section-a.1-4.9.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-4.9.3">
                                Automatable because using multi-streaming does
                                not require application-specific
                                knowledge.</t>
            <t indent="0" pn="section-a.1-4.9.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-4.9.5"/>
          </li>
          <li pn="section-a.1-4.10">
            <t indent="0" pn="section-a.1-4.10.1">Indicate (and/or obtain upon completion) an Adaptation Layer via an adaptation code point</t>
            <t indent="0" pn="section-a.1-4.10.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-4.10.3">
                                Functional because it allows sending extra
                                data for the sake of identifying an adaptation
                                layer, which by itself is
                                application specific.</t>
            <t indent="0" pn="section-a.1-4.10.4">
                                Implementation: via a parameter in LISTEN.SCTP.</t>
            <t indent="0" pn="section-a.1-4.10.5">
                                Implementation over TCP: not possible. (TCP does not offer this functionality.)</t>
            <t indent="0" pn="section-a.1-4.10.6">
                                Implementation over UDP: not possible. (UDP does not offer this functionality.)
            </t>
            <t indent="0" pn="section-a.1-4.10.7"/>
          </li>
          <li pn="section-a.1-4.11">
            <t indent="0" pn="section-a.1-4.11.1">Request to negotiate interleaving of user messages</t>
            <t indent="0" pn="section-a.1-4.11.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-4.11.3">
                                Automatable because it requires using multiple
                                streams, but requesting multiple streams in
                                the CONNECTION.ESTABLISHMENT category is
                                automatable.</t>
            <t indent="0" pn="section-a.1-4.11.4">
                                Implementation: via a parameter in LISTEN.SCTP.</t>
            <t indent="0" pn="section-a.1-4.11.5"/>
          </li>
        </ul>
        <t indent="0" pn="section-a.1-5">MAINTENANCE: 
                        
        </t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-6">
          <li pn="section-a.1-6.1">
            <t indent="0" pn="section-a.1-6.1.1">Change timeout for aborting connection (using retransmit limit or time value)</t>
            <t indent="0" pn="section-a.1-6.1.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-6.1.3">
                                Functional because this is closely related to potentially assumed reliable data delivery.</t>
            <t indent="0" pn="section-a.1-6.1.4">
                                Implementation: via CHANGE_TIMEOUT.TCP or
                                CHANGE_TIMEOUT.SCTP.</t>
            <t indent="0" pn="section-a.1-6.1.5">
                                Implementation over UDP: not possible. (UDP is unreliable and there is no connection timeout.)</t>
            <t indent="0" pn="section-a.1-6.1.6"/>
          </li>
          <li pn="section-a.1-6.2">
            <t indent="0" pn="section-a.1-6.2.1">Suggest timeout to the peer</t>
            <t indent="0" pn="section-a.1-6.2.2">
                                Protocols: TCP</t>
            <t indent="0" pn="section-a.1-6.2.3">
                                Functional because this is closely related to
                                potentially assumed reliable data
                                delivery.</t>
            <t indent="0" pn="section-a.1-6.2.4">
                                Implementation: via CHANGE_TIMEOUT.TCP.</t>
            <t indent="0" pn="section-a.1-6.2.5">
                                Implementation over UDP: not possible. (UDP is
                                unreliable and there is no connection
                                timeout.)</t>
            <t indent="0" pn="section-a.1-6.2.6"/>
          </li>
          <li pn="section-a.1-6.3">
            <t indent="0" pn="section-a.1-6.3.1">Disable Nagle algorithm</t>
            <t indent="0" pn="section-a.1-6.3.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-6.3.3">
                                Optimizing because this decision depends on
                                knowledge about the size of future data blocks
                                and the delay between them.</t>
            <t indent="0" pn="section-a.1-6.3.4">
                                Implementation: via DISABLE_NAGLE.TCP and DISABLE_NAGLE.SCTP.</t>
            <t indent="0" pn="section-a.1-6.3.5">
                                Implementation over UDP: do nothing (UDP does not implement the Nagle algorithm).</t>
            <t indent="0" pn="section-a.1-6.3.6"/>
          </li>
          <li pn="section-a.1-6.4">
            <t indent="0" pn="section-a.1-6.4.1">Request an immediate heartbeat, returning success/failure</t>
            <t indent="0" pn="section-a.1-6.4.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.4.3">
                                Automatable because this informs about network-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.4.4"/>
          </li>
          <li pn="section-a.1-6.5">
            <t indent="0" pn="section-a.1-6.5.1">Notification of Excessive Retransmissions (early warning below abortion threshold)</t>
            <t indent="0" pn="section-a.1-6.5.2">
                                Protocols: TCP</t>
            <t indent="0" pn="section-a.1-6.5.3">
                                Optimizing because it is an early warning to
                                the application, informing it of an impending
                                functional event.</t>
            <t indent="0" pn="section-a.1-6.5.4">
                                Implementation: via ERROR.TCP.</t>
            <t indent="0" pn="section-a.1-6.5.5">
                                Implementation over UDP: do nothing (there is no abortion threshold).</t>
            <t indent="0" pn="section-a.1-6.5.6"/>
          </li>
          <li pn="section-a.1-6.6">
            <t indent="0" pn="section-a.1-6.6.1">Add path</t>
            <t indent="0" pn="section-a.1-6.6.2">
                                Protocols: MPTCP, SCTP</t>
            <t indent="0" pn="section-a.1-6.6.3">
                                MPTCP Parameters: source-IP; source-Port; destination-IP; destination-Port</t>
            <t indent="0" pn="section-a.1-6.6.4">
                                SCTP Parameters: local IP address</t>
            <t indent="0" pn="section-a.1-6.6.5">
                                Automatable because the choice of paths to communicate between the same end hosts relates to
                                knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.6.6"/>
          </li>
          <li pn="section-a.1-6.7">
            <t indent="0" pn="section-a.1-6.7.1">Remove path</t>
            <t indent="0" pn="section-a.1-6.7.2">
                                Protocols: MPTCP, SCTP</t>
            <t indent="0" pn="section-a.1-6.7.3">
                                MPTCP Parameters: source-IP; source-Port; destination-IP; destination-Port</t>
            <t indent="0" pn="section-a.1-6.7.4">
                                SCTP Parameters: local IP address</t>
            <t indent="0" pn="section-a.1-6.7.5">
                                Automatable because the choice of paths to communicate between the same end host relates to
                                knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.7.6"/>
          </li>
          <li pn="section-a.1-6.8">
            <t indent="0" pn="section-a.1-6.8.1">Set primary path</t>
            <t indent="0" pn="section-a.1-6.8.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.8.3">
                                Automatable because the choice of paths to communicate between the same end hosts relates to
                                knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.8.4"/>
          </li>
          <li pn="section-a.1-6.9">
            <t indent="0" pn="section-a.1-6.9.1">Suggest primary path to the peer</t>
            <t indent="0" pn="section-a.1-6.9.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.9.3">
                                Automatable because the choice of paths to communicate between the same end hosts relates to
                                knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.9.4"/>
          </li>
          <li pn="section-a.1-6.10">
            <t indent="0" pn="section-a.1-6.10.1">Configure Path Switchover</t>
            <t indent="0" pn="section-a.1-6.10.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.10.3">
                                Automatable because the choice of paths to communicate between the same end hosts relates to
                                knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.10.4"/>
          </li>
          <li pn="section-a.1-6.11">
            <t indent="0" pn="section-a.1-6.11.1">Obtain status (query or notification)</t>
            <t indent="0" pn="section-a.1-6.11.2">
                                Protocols: SCTP, MPTCP</t>
            <t indent="0" pn="section-a.1-6.11.3">
                                SCTP parameters: association connection state;
                                destination transport address list;
                                destination transport address reachability
                                states; current local and peer receiver window
                                size; current local congestion window sizes;
                                number of unacknowledged DATA chunks; number
                                of DATA chunks pending receipt; primary path;
                                most recent SRTT on primary path; RTO on
                                primary path; SRTT and RTO on other
                                destination addresses; MTU per path;
                                interleaving supported yes/no</t>
            <t indent="0" pn="section-a.1-6.11.4">
                                MPTCP parameters: subflow-list (identified by source-IP; source-Port; destination-IP; destination-Port)</t>
            <t indent="0" pn="section-a.1-6.11.5">
                                Automatable because these parameters relate to knowledge about
                                the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.11.6"/>
          </li>
          <li pn="section-a.1-6.12">
            <t indent="0" pn="section-a.1-6.12.1">Specify DSCP field</t>
            <t indent="0" pn="section-a.1-6.12.2">
                                Protocols: TCP, SCTP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.12.3">
                                Optimizing because choosing a suitable DSCP value requires application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.12.4">
                                Implementation: via SET_DSCP.TCP / SET_DSCP.SCTP / SET_DSCP.UDP(-Lite).</t>
            <t indent="0" pn="section-a.1-6.12.5"/>
          </li>
          <li pn="section-a.1-6.13">
            <t indent="0" pn="section-a.1-6.13.1">Notification of ICMP error message arrival</t>
            <t indent="0" pn="section-a.1-6.13.2">
                                Protocols: TCP, UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.13.3">
                                Optimizing because these messages can inform
                                about success or failure of functional
                                transport features (e.g., host unreachable
                                relates to "Connect").</t>
            <t indent="0" pn="section-a.1-6.13.4">
                                Implementation: via ERROR.TCP or ERROR.UDP(-Lite.)</t>
            <t indent="0" pn="section-a.1-6.13.5"/>
          </li>
          <li pn="section-a.1-6.14">
            <t indent="0" pn="section-a.1-6.14.1">Obtain information about interleaving support</t>
            <t indent="0" pn="section-a.1-6.14.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.14.3">
                                Automatable because it requires using multiple
                                streams, but requesting multiple streams in
                                the CONNECTION.ESTABLISHMENT category is
                                automatable.</t>
            <t indent="0" pn="section-a.1-6.14.4">
                                Implementation: via STATUS.SCTP.</t>
            <t indent="0" pn="section-a.1-6.14.5"/>
          </li>
          <li pn="section-a.1-6.15">
            <t indent="0" pn="section-a.1-6.15.1">Change authentication parameters</t>
            <t indent="0" pn="section-a.1-6.15.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-6.15.3">
                                Functional because this has a direct influence on security.</t>
            <t indent="0" pn="section-a.1-6.15.4">
                                Implementation: via SET_AUTH.TCP and SET_AUTH.SCTP.</t>
            <t indent="0" pn="section-a.1-6.15.5">
                                Implementation over TCP: with SCTP, this
                                allows adjusting key_id, key, and hmac_id.
                                With TCP, this allows changing the preferred
                                outgoing MKT (current_key) and the preferred
                                incoming MKT (rnext_key), respectively, for a
                                segment that is sent on the connection.  Key
                                material must be provided in a way that is
                                compatible with both <xref target="RFC4895" format="default" sectionFormat="of" derivedContent="RFC4895"/> and <xref target="RFC5925" format="default" sectionFormat="of" derivedContent="RFC5925"/>.</t>
            <t indent="0" pn="section-a.1-6.15.6">
                                Implementation over UDP: not possible. (UDP does not offer authentication.)</t>
            <t indent="0" pn="section-a.1-6.15.7"/>
          </li>
          <li pn="section-a.1-6.16">
            <t indent="0" pn="section-a.1-6.16.1">Obtain authentication information</t>
            <t indent="0" pn="section-a.1-6.16.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.16.3">
                                Functional because authentication decisions
                                may have been made by the peer, and this has
                                an influence on the necessary
                                application-level measures to provide a
                                certain level of security.</t>
            <t indent="0" pn="section-a.1-6.16.4">
                                Implementation: via GET_AUTH.SCTP.</t>
            <t indent="0" pn="section-a.1-6.16.5">
                                Implementation over TCP: with SCTP, this
                                allows obtaining key_id and a chunk list.
                                With TCP, this allows obtaining current_key
                                and rnext_key from a previously received
                                segment.  Key material must be provided in a
                                way that is compatible with both <xref target="RFC4895" format="default" sectionFormat="of" derivedContent="RFC4895"/> and <xref target="RFC5925" format="default" sectionFormat="of" derivedContent="RFC5925"/>.</t>
            <t indent="0" pn="section-a.1-6.16.6">
                                Implementation over UDP: not possible. (UDP does not offer authentication.)</t>
            <t indent="0" pn="section-a.1-6.16.7"/>
          </li>
          <li pn="section-a.1-6.17">
            <t indent="0" pn="section-a.1-6.17.1">Reset Stream</t>
            <t indent="0" pn="section-a.1-6.17.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.17.3">
                                Automatable because using multi-streaming does not require application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.17.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-6.17.5"/>
          </li>
          <li pn="section-a.1-6.18">
            <t indent="0" pn="section-a.1-6.18.1">Notification of Stream Reset</t>
            <t indent="0" pn="section-a.1-6.18.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.18.3">
                                Automatable because using multi-streaming does not require application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.18.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-6.18.5"/>
          </li>
          <li pn="section-a.1-6.19">
            <t indent="0" pn="section-a.1-6.19.1">Reset Association</t>
            <t indent="0" pn="section-a.1-6.19.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.19.3">
                                Automatable because deciding to reset an association does not require application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.19.4">
                                Implementation: via RESET_ASSOC.SCTP.</t>
            <t indent="0" pn="section-a.1-6.19.5"/>
          </li>
          <li pn="section-a.1-6.20">
            <t indent="0" pn="section-a.1-6.20.1">Notification of Association Reset</t>
            <t indent="0" pn="section-a.1-6.20.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.20.3">
                                Automatable because this notification does not relate to application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.20.4"/>
          </li>
          <li pn="section-a.1-6.21">
            <t indent="0" pn="section-a.1-6.21.1">Add Streams</t>
            <t indent="0" pn="section-a.1-6.21.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.21.3">
                                Automatable because using multi-streaming does not require application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.21.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-6.21.5"/>
          </li>
          <li pn="section-a.1-6.22">
            <t indent="0" pn="section-a.1-6.22.1">Notification of Added Stream</t>
            <t indent="0" pn="section-a.1-6.22.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.22.3">
                                Automatable because using multi-streaming does not require application-specific knowledge.</t>
            <t indent="0" pn="section-a.1-6.22.4">
                                Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
            </t>
            <t indent="0" pn="section-a.1-6.22.5"/>
          </li>
          <li pn="section-a.1-6.23">
            <t indent="0" pn="section-a.1-6.23.1">Choose a scheduler to operate between streams of an association</t>
            <t indent="0" pn="section-a.1-6.23.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.23.3">
                                Optimizing because the scheduling decision
                                requires application-specific knowledge.
                                However, if a transport system would not use
                                this, or wrongly configure it on its own, this
                                would only affect the performance of data
                                transfers; the outcome would still be correct
                                within the "best effort" service model.</t>
            <t indent="0" pn="section-a.1-6.23.4">
                                Implementation: using SET_STREAM_SCHEDULER.SCTP.</t>
            <t indent="0" pn="section-a.1-6.23.5">
                                Implementation over TCP: do nothing (streams
                                are not available in TCP, but no guarantee is
                                given that this transport feature has any
                                effect).</t>
            <t indent="0" pn="section-a.1-6.23.6">
                                Implementation over UDP: do nothing (streams
                                are not available in UDP, but no guarantee is
                                given that this transport feature has any
                                effect).</t>
            <t indent="0" pn="section-a.1-6.23.7"/>
          </li>
          <li pn="section-a.1-6.24">
            <t indent="0" pn="section-a.1-6.24.1">Configure priority or weight for a scheduler</t>
            <t indent="0" pn="section-a.1-6.24.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.24.3">
                                Optimizing because the priority or weight
                                requires application-specific knowledge.
                                However, if a transport system would not use
                                this, or wrongly configure it on its own, this
                                would only affect the performance of data
                                transfers; the outcome would still be correct
                                within the "best effort" service model.</t>
            <t indent="0" pn="section-a.1-6.24.4">
                                Implementation: using CONFIGURE_STREAM_SCHEDULER.SCTP.</t>
            <t indent="0" pn="section-a.1-6.24.5">
                                Implementation over TCP: do nothing (streams
                                are not available in TCP, but no guarantee is
                                given that this transport feature has any
                                effect).</t>
            <t indent="0" pn="section-a.1-6.24.6">
                                Implementation over UDP: do nothing (streams
                                are not available in UDP, but no guarantee is
                                given that this transport feature has any
                                effect).</t>
            <t indent="0" pn="section-a.1-6.24.7"/>
          </li>
          <li pn="section-a.1-6.25">
            <t indent="0" pn="section-a.1-6.25.1">Configure send buffer size</t>
            <t indent="0" pn="section-a.1-6.25.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.25.3">
                                Automatable because this decision relates to
                                knowledge about the network and the Operating
                                System, not the application (see also the
                                discussion in <xref target="rundry" format="default" sectionFormat="of" derivedContent="Section 5.4"/>).</t>
            <t indent="0" pn="section-a.1-6.25.4"/>
          </li>
          <li pn="section-a.1-6.26">
            <t indent="0" pn="section-a.1-6.26.1">Configure receive buffer (and rwnd) size</t>
            <t indent="0" pn="section-a.1-6.26.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.26.3">
                                Automatable because this decision relates to
                                knowledge about the network and the Operating
                                System, not the application.</t>
            <t indent="0" pn="section-a.1-6.26.4"/>
          </li>
          <li pn="section-a.1-6.27">
            <t indent="0" pn="section-a.1-6.27.1">Configure message fragmentation</t>
            <t indent="0" pn="section-a.1-6.27.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.27.3">
                                Automatable because this relates to knowledge
                                about the network and the Operating System,
                                not the application. Note that this SCTP
                                feature does not control IP-level
                                fragmentation, but decides on fragmentation of
                                messages by SCTP, in the end system.</t>
            <t indent="0" pn="section-a.1-6.27.4">
                                Implementation: done by always enabling it with
                                CONFIG_FRAGMENTATION.SCTP and auto-setting the
                                fragmentation size based on network or
                                Operating System conditions.</t>
            <t indent="0" pn="section-a.1-6.27.5"/>
          </li>
          <li pn="section-a.1-6.28">
            <t indent="0" pn="section-a.1-6.28.1">Configure PMTUD</t>
            <t indent="0" pn="section-a.1-6.28.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.28.3">
                                Automatable because Path MTU Discovery relates
                                to knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-6.28.4"/>
          </li>
          <li pn="section-a.1-6.29">
            <t indent="0" pn="section-a.1-6.29.1">Configure delayed SACK timer</t>
            <t indent="0" pn="section-a.1-6.29.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.29.3">
                                Automatable because the receiver-side decision
                                to delay sending SACKs relates to knowledge
                                about the network, not the application (it can
                                be relevant for a sending application to
                                request not to delay the SACK of a message,
                                but this is a different transport
                                feature).</t>
            <t indent="0" pn="section-a.1-6.29.4"/>
          </li>
          <li pn="section-a.1-6.30">
            <t indent="0" pn="section-a.1-6.30.1">Set Cookie life value</t>
            <t indent="0" pn="section-a.1-6.30.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.30.3">
                                Functional because it relates to security
                                (possibly weakened by keeping a cookie very
                                long) versus the time between connection
                                establishment attempts. Knowledge about both
                                issues can be application specific.</t>
            <t indent="0" pn="section-a.1-6.30.4">
                                Implementation over TCP: the closest specified
                                TCP functionality is the cookie in TCP Fast
                                Open; for this, <xref target="RFC7413" format="default" sectionFormat="of" derivedContent="RFC7413"/> states that the server "can
                                expire the cookie at any time to enhance
                                security", and <xref target="RFC7413" sectionFormat="of" section="4.1.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7413#section-4.1.2" derivedContent="RFC7413"/> describes an
                                example implementation where updating the key
                                on the server side causes the cookie to
                                expire.  Alternatively, for implementations
                                that do not support TCP Fast Open, this
                                transport feature could also affect the
                                validity of SYN cookies (see <xref target="RFC4987" section="3.6" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4987#section-3.6" derivedContent="RFC4987"/>).
            </t>
            <t indent="0" pn="section-a.1-6.30.5">
                                Implementation over UDP: not possible. (UDP does not offer this functionality.)</t>
            <t indent="0" pn="section-a.1-6.30.6"/>
          </li>
          <li pn="section-a.1-6.31">
            <t indent="0" pn="section-a.1-6.31.1">Set maximum burst</t>
            <t indent="0" pn="section-a.1-6.31.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.31.3">
                                Automatable because it relates to knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-6.31.4"/>
          </li>
          <li pn="section-a.1-6.32">
            <t indent="0" pn="section-a.1-6.32.1">Configure size where messages are broken up for partial delivery</t>
            <t indent="0" pn="section-a.1-6.32.2">
                                Protocols: SCTP</t>
            <t indent="0" pn="section-a.1-6.32.3">
                                Functional because this is closely tied to
                                properties of the data that an application
                                sends or expects to receive.</t>
            <t indent="0" pn="section-a.1-6.32.4">
                                Implementation over TCP: not possible. (TCP does not offer identification of message boundaries.)</t>
            <t indent="0" pn="section-a.1-6.32.5">
                                Implementation over UDP: not possible. (UDP does not fragment messages.)</t>
            <t indent="0" pn="section-a.1-6.32.6"/>
          </li>
          <li pn="section-a.1-6.33">
            <t indent="0" pn="section-a.1-6.33.1">Disable checksum when sending</t>
            <t indent="0" pn="section-a.1-6.33.2">
                                Protocols: UDP</t>
            <t indent="0" pn="section-a.1-6.33.3">
                                Functional because application-specific
                                knowledge is necessary to decide whether 
                                it can be acceptable to lose data integrity
                                with respect to random corruption.</t>
            <t indent="0" pn="section-a.1-6.33.4">
                                Implementation: via SET_CHECKSUM_ENABLED.UDP.</t>
            <t indent="0" pn="section-a.1-6.33.5">
                                Implementation over TCP: do nothing (TCP does
                                not offer to disable the checksum, but
                                transmitting data with an intact checksum will
                                not yield a semantically wrong result).
            </t>
            <t indent="0" pn="section-a.1-6.33.6"/>
          </li>
          <li pn="section-a.1-6.34">
            <t indent="0" pn="section-a.1-6.34.1">Disable checksum requirement when receiving</t>
            <t indent="0" pn="section-a.1-6.34.2">
                                Protocols: UDP</t>
            <t indent="0" pn="section-a.1-6.34.3">
                                Functional because application-specific
                                knowledge is necessary to decide whether 
                                it can be acceptable to lose data
                                integrity with respect to random
                                corruption.</t>
            <t indent="0" pn="section-a.1-6.34.4">
                                Implementation: via SET_CHECKSUM_REQUIRED.UDP.</t>
            <t indent="0" pn="section-a.1-6.34.5">
                                Implementation over TCP: do nothing (TCP does
                                not offer to disable the checksum, but
                                transmitting data with an intact checksum will
                                not yield a semantically wrong result).
            </t>
            <t indent="0" pn="section-a.1-6.34.6"/>
          </li>
          <li pn="section-a.1-6.35">
            <t indent="0" pn="section-a.1-6.35.1">Specify checksum coverage used by the sender</t>
            <t indent="0" pn="section-a.1-6.35.2">
                                Protocols: UDP-Lite</t>
            <t indent="0" pn="section-a.1-6.35.3">
                                Functional because application-specific
                                knowledge is necessary to decide for which
                                parts of the data it can be acceptable to lose
                                data integrity with respect to random
                                corruption.</t>
            <t indent="0" pn="section-a.1-6.35.4">
                                Implementation: via SET_CHECKSUM_COVERAGE.UDP-Lite.</t>
            <t indent="0" pn="section-a.1-6.35.5">
                                Implementation over TCP: do nothing (TCP does
                                not offer to limit the checksum length, but
                                transmitting data with an intact checksum will
                                not yield a semantically wrong result).</t>
            <t indent="0" pn="section-a.1-6.35.6">
                                Implementation over UDP: if checksum coverage
                                is set to cover payload data, do nothing.
                                Else, either do nothing (transmitting data
                                with an intact checksum will not yield a
                                semantically wrong result), or use the
                                transport feature "Disable checksum when
                                sending".
            </t>
            <t indent="0" pn="section-a.1-6.35.7"/>
          </li>
          <li pn="section-a.1-6.36">
            <t indent="0" pn="section-a.1-6.36.1">Specify minimum checksum coverage required by receiver</t>
            <t indent="0" pn="section-a.1-6.36.2">
                                Protocols: UDP-Lite</t>
            <t indent="0" pn="section-a.1-6.36.3">
                                Functional because application-specific knowledge is necessary to decide for which
                                parts of the data it can be acceptable to lose data integrity with respect to random corruption.</t>
            <t indent="0" pn="section-a.1-6.36.4">
                                Implementation: via SET_MIN_CHECKSUM_COVERAGE.UDP-Lite.</t>
            <t indent="0" pn="section-a.1-6.36.5">
                                Implementation over TCP: do nothing (TCP does
                                not offer to limit the checksum length, but
                                transmitting data with an intact checksum will
                                not yield a semantically wrong result).</t>
            <t indent="0" pn="section-a.1-6.36.6">
                                Implementation over UDP: if checksum coverage
                                is set to cover payload data, do nothing.
                                Else, either do nothing (transmitting data
                                with an intact checksum will not yield a
                                semantically wrong result), or use the
                                transport feature "Disable checksum
                                requirement when receiving".
            </t>
            <t indent="0" pn="section-a.1-6.36.7"/>
          </li>
          <li pn="section-a.1-6.37">
            <t indent="0" pn="section-a.1-6.37.1">Specify DF field </t>
            <t indent="0" pn="section-a.1-6.37.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.37.3">
                                Optimizing because the DF field can be used to
                                carry out Path MTU Discovery, which can lead
                                an application to choose message sizes that
                                can be transmitted more efficiently.</t>
            <t indent="0" pn="section-a.1-6.37.4">
                                Implementation: via MAINTENANCE.SET_DF.UDP(-Lite) and SEND_FAILURE.UDP(-Lite).</t>
            <t indent="0" pn="section-a.1-6.37.5">
                                Implementation over TCP: do nothing (with TCP,
                                the sending application is not in control of
                                transport message sizes, making this
                                functionality irrelevant).
            </t>
            <t indent="0" pn="section-a.1-6.37.6"/>
          </li>
          <li pn="section-a.1-6.38">
            <t indent="0" pn="section-a.1-6.38.1">Get max. transport-message size that may be sent using a non-fragmented IP packet from the configured interface</t>
            <t indent="0" pn="section-a.1-6.38.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.38.3">
                                Optimizing because this can lead an
                                application to choose message sizes that can
                                be transmitted more efficiently.</t>
            <t indent="0" pn="section-a.1-6.38.4">
                                Implementation over TCP: do nothing (this information is not available with TCP).</t>
            <t indent="0" pn="section-a.1-6.38.5"/>
          </li>
          <li pn="section-a.1-6.39">
            <t indent="0" pn="section-a.1-6.39.1">Get max. transport-message size that may be received from the configured interface</t>
            <t indent="0" pn="section-a.1-6.39.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.39.3">
                                Optimizing because this can, for example,
                                influence an application's memory
                                management.</t>
            <t indent="0" pn="section-a.1-6.39.4">
                                Implementation over TCP: do nothing (this information is not available with TCP).</t>
            <t indent="0" pn="section-a.1-6.39.5"/>
          </li>
          <li pn="section-a.1-6.40">
            <t indent="0" pn="section-a.1-6.40.1">Specify TTL/Hop count field</t>
            <t indent="0" pn="section-a.1-6.40.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.40.3">
                                Automatable because a transport system can use
                                a large enough system default to avoid
                                communication failures.  Allowing an
                                application to configure it differently can
                                produce notifications of ICMP error message
                                arrivals that yield information that only
                                relates to knowledge about the network, not
                                the application.</t>
            <t indent="0" pn="section-a.1-6.40.4"/>
          </li>
          <li pn="section-a.1-6.41">
            <t indent="0" pn="section-a.1-6.41.1">Obtain TTL/Hop count field</t>
            <t indent="0" pn="section-a.1-6.41.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.41.3">
                                Automatable because the TTL/Hop count field relates to knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.41.4"/>
          </li>
          <li pn="section-a.1-6.42">
            <t indent="0" pn="section-a.1-6.42.1">Specify ECN field</t>
            <t indent="0" pn="section-a.1-6.42.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.42.3">
                                Automatable because the ECN field relates to knowledge about the network, not the application.</t>
            <t indent="0" pn="section-a.1-6.42.4"/>
          </li>
          <li pn="section-a.1-6.43">
            <t indent="0" pn="section-a.1-6.43.1">Obtain ECN field</t>
            <t indent="0" pn="section-a.1-6.43.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.43.3">
                                Optimizing because this information can be
                                used by an application to better carry out
                                congestion control (this is relevant when
                                choosing a data transmission Transport Service
                                that does not already do congestion
                                control).</t>
            <t indent="0" pn="section-a.1-6.43.4">
                                Implementation over TCP: do nothing (this information is not available with TCP).</t>
            <t indent="0" pn="section-a.1-6.43.5"/>
          </li>
          <li pn="section-a.1-6.44">
            <t indent="0" pn="section-a.1-6.44.1">Specify IP Options</t>
            <t indent="0" pn="section-a.1-6.44.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.44.3">
                                Automatable because IP Options relate to
                                knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-6.44.4"/>
          </li>
          <li pn="section-a.1-6.45">
            <t indent="0" pn="section-a.1-6.45.1">Obtain IP Options</t>
            <t indent="0" pn="section-a.1-6.45.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-6.45.3">
                                Automatable because IP Options relate to
                                knowledge about the network, not the
                                application.</t>
            <t indent="0" pn="section-a.1-6.45.4"/>
          </li>
          <li pn="section-a.1-6.46">
            <t indent="0" pn="section-a.1-6.46.1">Enable and configure a "Low Extra Delay Background Transfer"</t>
            <t indent="0" pn="section-a.1-6.46.2">
                                Protocols: a protocol implementing the LEDBAT congestion control mechanism</t>
            <t indent="0" pn="section-a.1-6.46.3">
                                Optimizing because whether this feature is
                                appropriate or not depends on
                                application-specific knowledge. However,
                                wrongly using this will only affect the speed
                                of data transfers (albeit including other
                                transfers that may compete with the transport
                                system's transfer in the network), so it is
                                still correct within the "best effort" service
                                model.</t>
            <t indent="0" pn="section-a.1-6.46.4">
                                Implementation: via CONFIGURE.LEDBAT and/or SET_DSCP.TCP / SET_DSCP.SCTP / SET_DSCP.UDP(-Lite) <xref target="RFC8622" format="default" sectionFormat="of" derivedContent="RFC8622"/>.</t>
            <t indent="0" pn="section-a.1-6.46.5">
                                Implementation over TCP: do nothing (TCP does
                                not support LEDBAT congestion control, but not
                                implementing this functionality will not yield
                                a semantically wrong behavior).</t>
            <t indent="0" pn="section-a.1-6.46.6">
                                Implementation over UDP: do nothing (UDP does not offer congestion control).</t>
            <t indent="0" pn="section-a.1-6.46.7"/>
          </li>
        </ul>
        <t indent="0" pn="section-a.1-7">TERMINATION: 
                        
        </t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-8">
          <li pn="section-a.1-8.1">
            <t indent="0" pn="section-a.1-8.1.1">Close after reliably delivering all remaining data, causing an
            event informing the application on the other side</t>
            <t indent="0" pn="section-a.1-8.1.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-8.1.3">
                                Functional because the notion of a connection
                                is often reflected in applications as an
                                expectation to have all outstanding data
                                delivered and no longer be able to communicate
                                after a "Close" succeeded, with a
                                communication sequence relating to this
                                transport feature that is defined by the
                                application protocol.</t>
            <t indent="0" pn="section-a.1-8.1.4">
                                Implementation: via CLOSE.TCP and CLOSE.SCTP.</t>
            <t indent="0" pn="section-a.1-8.1.5">
                                Implementation over UDP: not possible. (UDP is
                                unreliable and hence does not know when all
                                remaining data is delivered; it does also not
                                offer to cause an event related to closing at
                                the peer.)</t>
            <t indent="0" pn="section-a.1-8.1.6"/>
          </li>
          <li pn="section-a.1-8.2">
            <t indent="0" pn="section-a.1-8.2.1">Abort without delivering remaining data, causing an event informing the application on the other side</t>
            <t indent="0" pn="section-a.1-8.2.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-8.2.3">
                                Functional because the notion of a connection
                                is often reflected in applications as an
                                expectation to potentially not have all
                                outstanding data delivered and no longer be
                                able to communicate after an "Abort"
                                succeeded. On both sides of a connection, an
                                application protocol may define a
                                communication sequence relating to this
                                transport feature.</t>
            <t indent="0" pn="section-a.1-8.2.4">
                                Implementation: via ABORT.TCP and ABORT.SCTP.</t>
            <t indent="0" pn="section-a.1-8.2.5">
                                Implementation over UDP: not possible. (UDP
                                does not offer to cause an event related to
                                aborting at the peer.)</t>
            <t indent="0" pn="section-a.1-8.2.6"/>
          </li>
          <li pn="section-a.1-8.3">
            <t indent="0" pn="section-a.1-8.3.1">Abort without delivering remaining data, not causing an event informing the application on the other side</t>
            <t indent="0" pn="section-a.1-8.3.2">
                                Protocols: UDP(-Lite)</t>
            <t indent="0" pn="section-a.1-8.3.3">
                                Functional because the notion of a connection
                                is often reflected in applications as an
                                expectation to potentially not have all
                                outstanding data delivered and no longer be
                                able to communicate after an "Abort"
                                succeeded. On both sides of a connection, an
                                application protocol may define a
                                communication sequence relating to this
                                transport feature.</t>
            <t indent="0" pn="section-a.1-8.3.4">
                                Implementation: via ABORT.UDP(-Lite).</t>
            <t indent="0" pn="section-a.1-8.3.5">
                                Implementation over TCP: stop using the connection, wait for a timeout.</t>
            <t indent="0" pn="section-a.1-8.3.6"/>
          </li>
          <li pn="section-a.1-8.4">
            <t indent="0" pn="section-a.1-8.4.1">Timeout event when data could not be delivered for too long</t>
            <t indent="0" pn="section-a.1-8.4.2">
                                Protocols: TCP, SCTP</t>
            <t indent="0" pn="section-a.1-8.4.3">
                                Functional because this notifies that
                                potentially assumed reliable data delivery is
                                no longer provided.</t>
            <t indent="0" pn="section-a.1-8.4.4">
                                Implementation: via TIMEOUT.TCP and TIMEOUT.SCTP.</t>
            <t indent="0" pn="section-a.1-8.4.5">
                                Implementation over UDP: do nothing (this event will not occur with UDP).</t>
            <t indent="0" pn="section-a.1-8.4.6"/>
          </li>
        </ul>
      </section>
      <section anchor="data-pass3" numbered="true" toc="include" removeInRFC="false" pn="section-a.2">
        <name slugifiedName="name-data-transfer-related-transp">DATA-Transfer-Related Transport Features</name>
        <section anchor="data-sending-pass3" numbered="true" toc="include" removeInRFC="false" pn="section-a.2.1">
          <name slugifiedName="name-sending-data-3">Sending Data</name>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.2.1-1">
            <li pn="section-a.2.1-1.1">
              <t indent="0" pn="section-a.2.1-1.1.1">Reliably transfer data, with congestion control</t>
              <t indent="0" pn="section-a.2.1-1.1.2">
                                Protocols: TCP, SCTP</t>
              <t indent="0" pn="section-a.2.1-1.1.3">
                                Functional because this is closely tied to
                                properties of the data that an application
                                sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.1-1.1.4">
                                Implementation: via SEND.TCP and SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.1.5">
                                Implementation over UDP: not possible. (UDP is unreliable.)</t>
              <t indent="0" pn="section-a.2.1-1.1.6"/>
            </li>
            <li pn="section-a.2.1-1.2">
              <t indent="0" pn="section-a.2.1-1.2.1">Reliably transfer a message, with congestion control</t>
              <t indent="0" pn="section-a.2.1-1.2.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.2.3">
                                Functional because this is closely tied to
                                properties of the data that an application
                                sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.1-1.2.4">
                                Implementation: via SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.2.5">
                                Implementation over TCP: via SEND.TCP. With
                                SEND.TCP, message boundaries will not be
                                identifiable by the receiver, because TCP
                                provides a byte-stream service.</t>
              <t indent="0" pn="section-a.2.1-1.2.6">
                                Implementation over UDP: not possible. (UDP is unreliable.)</t>
              <t indent="0" pn="section-a.2.1-1.2.7"/>
            </li>
            <li pn="section-a.2.1-1.3">
              <t indent="0" pn="section-a.2.1-1.3.1">Unreliably transfer a message</t>
              <t indent="0" pn="section-a.2.1-1.3.2">
                                Protocols: SCTP, UDP(-Lite)</t>
              <t indent="0" pn="section-a.2.1-1.3.3">
                                Optimizing because only applications know
                                about the time criticality of their
                                communication, and reliably transferring a
                                message is never incorrect for the receiver of
                                a potentially unreliable data transfer, it is
                                just slower.</t>
              <t indent="0" pn="section-a.2.1-1.3.4">
                                CHANGED FROM RFC 8303. This differs from the 2
                                automatable transport features below in that
                                it leaves the choice of congestion control
                                open.</t>
              <t indent="0" pn="section-a.2.1-1.3.5">
                                Implementation: via SEND.SCTP or SEND.UDP(-Lite).</t>
              <t indent="0" pn="section-a.2.1-1.3.6">
                                Implementation over TCP: use SEND.TCP. With
                                SEND.TCP, messages will be sent reliably, and
                                message boundaries will not be identifiable by
                                the receiver.</t>
              <t indent="0" pn="section-a.2.1-1.3.7"/>
            </li>
            <li pn="section-a.2.1-1.4">
              <t indent="0" pn="section-a.2.1-1.4.1">Unreliably transfer a message, with congestion control</t>
              <t indent="0" pn="section-a.2.1-1.4.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.4.3">
                                Automatable because congestion control relates to knowledge about the network, not the application.</t>
              <t indent="0" pn="section-a.2.1-1.4.4"/>
            </li>
            <li pn="section-a.2.1-1.5">
              <t indent="0" pn="section-a.2.1-1.5.1">Unreliably transfer a message, without congestion control</t>
              <t indent="0" pn="section-a.2.1-1.5.2">
                                Protocols: UDP(-Lite)</t>
              <t indent="0" pn="section-a.2.1-1.5.3">
                                Automatable because congestion control relates to knowledge about the network, not the application.</t>
              <t indent="0" pn="section-a.2.1-1.5.4"/>
            </li>
            <li pn="section-a.2.1-1.6">
              <t indent="0" pn="section-a.2.1-1.6.1">Configurable Message Reliability</t>
              <t indent="0" pn="section-a.2.1-1.6.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.6.3">
                                Optimizing because only applications know
                                about the time criticality of their
                                communication, and reliably transferring a
                                message is never incorrect for the receiver of
                                a potentially unreliable data transfer, it is
                                just slower.</t>
              <t indent="0" pn="section-a.2.1-1.6.4">
                                Implementation: via SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.6.5">
                                Implementation over TCP: done by using SEND.TCP and
                                ignoring this configuration. Based on the
                                assumption of the best-effort service model,
                                unnecessarily delivering data does not violate
                                application expectations. Moreover, it is not
                                possible to associate the requested
                                reliability to a "message" in TCP anyway.</t>
              <t indent="0" pn="section-a.2.1-1.6.6">
                                Implementation over UDP: not possible. (UDP is unreliable.)</t>
              <t indent="0" pn="section-a.2.1-1.6.7"/>
            </li>
            <li pn="section-a.2.1-1.7">
              <t indent="0" pn="section-a.2.1-1.7.1">Choice of stream</t>
              <t indent="0" pn="section-a.2.1-1.7.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.7.3">
                                Automatable because it requires using multiple
                                streams, but requesting multiple streams in
                                the CONNECTION.ESTABLISHMENT category is
                                automatable. 
              </t>
              <t indent="0" pn="section-a.2.1-1.7.4">
 Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
              </t>
              <t indent="0" pn="section-a.2.1-1.7.5"/>
            </li>
            <li pn="section-a.2.1-1.8">
              <t indent="0" pn="section-a.2.1-1.8.1">Choice of path (destination address)</t>
              <t indent="0" pn="section-a.2.1-1.8.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.8.3">
                                Automatable because it requires using multiple sockets, but
                                obtaining multiple sockets in the CONNECTION.ESTABLISHMENT category is
                                automatable.</t>
              <t indent="0" pn="section-a.2.1-1.8.4"/>
            </li>
            <li pn="section-a.2.1-1.9">
              <t indent="0" pn="section-a.2.1-1.9.1">Ordered message delivery (potentially slower than unordered)</t>
              <t indent="0" pn="section-a.2.1-1.9.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.9.3">
                                Functional because this is closely tied to
                                properties of the data that an application
                                sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.1-1.9.4">
                                Implementation: via SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.9.5">
                                Implementation over TCP: done by using
                                SEND.TCP. With SEND.TCP, messages will not be
                                identifiable by the receiver.</t>
              <t indent="0" pn="section-a.2.1-1.9.6">
                                Implementation over UDP: not possible. (UDP
                                does not offer any guarantees regarding
                                ordering.)</t>
              <t indent="0" pn="section-a.2.1-1.9.7"/>
            </li>
            <li pn="section-a.2.1-1.10">
              <t indent="0" pn="section-a.2.1-1.10.1">Unordered message delivery (potentially faster than ordered)</t>
              <t indent="0" pn="section-a.2.1-1.10.2">
                                Protocols: SCTP, UDP(-Lite)</t>
              <t indent="0" pn="section-a.2.1-1.10.3">
                                Functional because this is closely tied to properties of the data that an application
                                sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.1-1.10.4">
                                Implementation: via SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.10.5">
                                Implementation over TCP: done by using
                                SEND.TCP and always sending data ordered.
                                Based on the assumption of the best-effort
                                service model, ordered delivery may just be
                                slower and does not violate application
                                expectations. Moreover, it is not possible to
                                associate the requested delivery order to a
                                "message" in TCP anyway.</t>
              <t indent="0" pn="section-a.2.1-1.10.6"/>
            </li>
            <li pn="section-a.2.1-1.11">
              <t indent="0" pn="section-a.2.1-1.11.1">Request not to bundle messages</t>
              <t indent="0" pn="section-a.2.1-1.11.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.11.3">
                                Optimizing because this decision depends on
                                knowledge about the size of future data blocks
                                and the delay between them.</t>
              <t indent="0" pn="section-a.2.1-1.11.4">
                                Implementation: via SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.11.5">
                                Implementation over TCP: done by using SEND.TCP and
                                DISABLE_NAGLE.TCP to disable the Nagle
                                algorithm when the request is made and enable
                                it again when the request is no longer
                                made. Note that this is not fully equivalent
                                because it relates to the time of issuing the
                                request rather than a specific message.</t>
              <t indent="0" pn="section-a.2.1-1.11.6">
                                Implementation over UDP: do nothing (UDP never bundles messages).</t>
              <t indent="0" pn="section-a.2.1-1.11.7"/>
            </li>
            <li pn="section-a.2.1-1.12">
              <t indent="0" pn="section-a.2.1-1.12.1">Specifying a "payload protocol-id" (handed over as such by the receiver)</t>
              <t indent="0" pn="section-a.2.1-1.12.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.12.3">
                                Functional because it allows sending extra
                                application data with every message, for the
                                sake of identification of data, which by
                                itself is application specific.</t>
              <t indent="0" pn="section-a.2.1-1.12.4">
                                Implementation: SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.12.5">
                                Implementation over TCP: not possible. (This functionality is not available in TCP.)</t>
              <t indent="0" pn="section-a.2.1-1.12.6">
                                Implementation over UDP: not possible. (This functionality is not available in UDP.)</t>
              <t indent="0" pn="section-a.2.1-1.12.7"/>
            </li>
            <li pn="section-a.2.1-1.13">
              <t indent="0" pn="section-a.2.1-1.13.1">Specifying a key id to be used to authenticate a message</t>
              <t indent="0" pn="section-a.2.1-1.13.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.13.3">
                                Functional because this has a direct influence on security.</t>
              <t indent="0" pn="section-a.2.1-1.13.4">
                                Implementation: via a parameter in SEND.SCTP.</t>
              <t indent="0" pn="section-a.2.1-1.13.5">
                                Implementation over TCP: this could be
                                emulated by using SET_AUTH.TCP before and
                                after the message is sent.  Note that this is
                                not fully equivalent because it relates to the
                                time of issuing the request rather than a
                                specific message.</t>
              <t indent="0" pn="section-a.2.1-1.13.6">
                                Implementation over UDP: not possible. (UDP does not offer authentication.)</t>
              <t indent="0" pn="section-a.2.1-1.13.7"/>
            </li>
            <li pn="section-a.2.1-1.14">
              <t indent="0" pn="section-a.2.1-1.14.1">Request not to delay the acknowledgement (SACK) of a message</t>
              <t indent="0" pn="section-a.2.1-1.14.2">
                                Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.1-1.14.3">
                                Optimizing because only an application knows for which message it wants to quickly be informed
                                about success/failure of its delivery.</t>
              <t indent="0" pn="section-a.2.1-1.14.4">
                                Implementation over TCP: do nothing (TCP does
                                not offer this functionality, but ignoring
                                this request from the application will not
                                yield a semantically wrong behavior).</t>
              <t indent="0" pn="section-a.2.1-1.14.5">
                                Implementation over UDP: do nothing (UDP does not offer this functionality, but ignoring
                                this request from the application will not yield a semantically wrong behavior).</t>
              <t indent="0" pn="section-a.2.1-1.14.6"/>
            </li>
          </ul>
        </section>
        <section anchor="data-receiving-pass3" numbered="true" toc="include" removeInRFC="false" pn="section-a.2.2">
          <name slugifiedName="name-receiving-data-3">Receiving Data</name>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.2.2-1">
            <li pn="section-a.2.2-1.1">
              <t indent="0" pn="section-a.2.2-1.1.1">Receive data (with no message delimiting)</t>
              <t indent="0" pn="section-a.2.2-1.1.2">
                                    Protocols: TCP</t>
              <t indent="0" pn="section-a.2.2-1.1.3">
                                    Functional because a transport system must be able to send and receive data.</t>
              <t indent="0" pn="section-a.2.2-1.1.4">
                                    Implementation: via RECEIVE.TCP.</t>
              <t indent="0" pn="section-a.2.2-1.1.5">
                                    Implementation over UDP: do nothing (UDP only works on messages; these can be handed over,
                                    the application can still ignore the message boundaries).</t>
              <t indent="0" pn="section-a.2.2-1.1.6"/>
            </li>
            <li pn="section-a.2.2-1.2">
              <t indent="0" pn="section-a.2.2-1.2.1">Receive a message</t>
              <t indent="0" pn="section-a.2.2-1.2.2">
                                    Protocols: SCTP, UDP(-Lite)</t>
              <t indent="0" pn="section-a.2.2-1.2.3">
                                    Functional because this is closely tied to
                                    properties of the data that an application
                                    sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.2-1.2.4">
                                    Implementation: via RECEIVE.SCTP and RECEIVE.UDP(-Lite).</t>
              <t indent="0" pn="section-a.2.2-1.2.5">
                                    Implementation over TCP: not possible. (TCP does not support identification of message boundaries.)</t>
              <t indent="0" pn="section-a.2.2-1.2.6"/>
            </li>
            <li pn="section-a.2.2-1.3">
              <t indent="0" pn="section-a.2.2-1.3.1">Choice of stream to receive from</t>
              <t indent="0" pn="section-a.2.2-1.3.2">
                                    Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.2-1.3.3">
                                    Automatable because it requires using multiple streams, but
                                    requesting multiple streams in the CONNECTION.ESTABLISHMENT category is
                                    automatable.</t>
              <t indent="0" pn="section-a.2.2-1.3.4">
                                    Implementation: see <xref target="nostream" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.
              </t>
              <t indent="0" pn="section-a.2.2-1.3.5"/>
            </li>
            <li pn="section-a.2.2-1.4">
              <t indent="0" pn="section-a.2.2-1.4.1">Information about partial message arrival</t>
              <t indent="0" pn="section-a.2.2-1.4.2">
                                    Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.2-1.4.3">
                                    Functional because this is closely tied to
                                    properties of the data that an application
                                    sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.2-1.4.4">
                                    Implementation: via RECEIVE.SCTP.</t>
              <t indent="0" pn="section-a.2.2-1.4.5">
                                    Implementation over TCP: do nothing (this
                                    information is not available with
                                    TCP).</t>
              <t indent="0" pn="section-a.2.2-1.4.6">
                                    Implementation over UDP: do nothing (this information is not available with UDP).</t>
              <t indent="0" pn="section-a.2.2-1.4.7"/>
            </li>
          </ul>
        </section>
        <section anchor="data-errors-pass3" numbered="true" toc="include" removeInRFC="false" pn="section-a.2.3">
          <name slugifiedName="name-errors-2">Errors</name>
          <t indent="0" pn="section-a.2.3-1">This section describes sending failures that are associated with
          a specific call to in the "Sending Data" category (<xref target="data-sending-pass3" format="default" sectionFormat="of" derivedContent="Appendix A.2.1"/>).</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.2.3-2">
            <li pn="section-a.2.3-2.1">
              <t indent="0" pn="section-a.2.3-2.1.1">Notification of send failures</t>
              <t indent="0" pn="section-a.2.3-2.1.2">
                                    Protocols: SCTP, UDP(-Lite)</t>
              <t indent="0" pn="section-a.2.3-2.1.3">
                                    Functional because this notifies that
                                    potentially assumed reliable data delivery
                                    is no longer provided.</t>
              <t indent="0" pn="section-a.2.3-2.1.4">
                                    CHANGED FROM RFC 8303. This differs from
                                    the 2 automatable transport features below
                                    in that it does not distinguish between
                                    unsent and unacknowledged messages.</t>
              <t indent="0" pn="section-a.2.3-2.1.5">
                                    Implementation: via SENDFAILURE-EVENT.SCTP and SEND_FAILURE.UDP(-Lite).</t>
              <t indent="0" pn="section-a.2.3-2.1.6">
                                    Implementation over TCP: do nothing (this
                                    notification is not available and will
                                    therefore not occur with TCP).</t>
              <t indent="0" pn="section-a.2.3-2.1.7"/>
            </li>
            <li pn="section-a.2.3-2.2">
              <t indent="0" pn="section-a.2.3-2.2.1">Notification of an unsent (part of a) message</t>
              <t indent="0" pn="section-a.2.3-2.2.2">
                                    Protocols: SCTP, UDP(-Lite)</t>
              <t indent="0" pn="section-a.2.3-2.2.3">
                                    Automatable because the distinction
                                    between unsent and unacknowledged does not
                                    relate to application-specific
                                    knowledge. </t>
              <t indent="0" pn="section-a.2.3-2.2.4"/>
            </li>
            <li pn="section-a.2.3-2.3">
              <t indent="0" pn="section-a.2.3-2.3.1">Notification of an unacknowledged (part of a) message</t>
              <t indent="0" pn="section-a.2.3-2.3.2">
                                    Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.3-2.3.3">
                                    Automatable because the distinction
                                    between unsent and unacknowledged does not
                                    relate to application-specific
                                    knowledge. </t>
              <t indent="0" pn="section-a.2.3-2.3.4"/>
            </li>
            <li pn="section-a.2.3-2.4">
              <t indent="0" pn="section-a.2.3-2.4.1">Notification that the stack has no more user data to send</t>
              <t indent="0" pn="section-a.2.3-2.4.2">
                                    Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.3-2.4.3">
                                    Optimizing because reacting to this
                                    notification requires the application to
                                    be involved, and ensuring that the stack
                                    does not run dry of data (for too long)
                                    can improve performance.</t>
              <t indent="0" pn="section-a.2.3-2.4.4">
                                    Implementation over TCP: do nothing (see
                                    the discussion in <xref target="rundry" format="default" sectionFormat="of" derivedContent="Section 5.4"/>).</t>
              <t indent="0" pn="section-a.2.3-2.4.5">
                                    Implementation over UDP: do nothing (this
                                    notification is not available and will
                                    therefore not occur with UDP).</t>
              <t indent="0" pn="section-a.2.3-2.4.6"/>
            </li>
            <li pn="section-a.2.3-2.5">
              <t indent="0" pn="section-a.2.3-2.5.1">Notification to a receiver that a partial message delivery
              has been aborted</t>
              <t indent="0" pn="section-a.2.3-2.5.2">
                                    Protocols: SCTP</t>
              <t indent="0" pn="section-a.2.3-2.5.3">
                                    Functional because this is closely tied to
                                    properties of the data that an application
                                    sends or expects to receive.</t>
              <t indent="0" pn="section-a.2.3-2.5.4">
                                    Implementation over TCP: do nothing (this
                                    notification is not available and will
                                    therefore not occur with TCP).</t>
              <t indent="0" pn="section-a.2.3-2.5.5">
                                    Implementation over UDP: do nothing (this notification is not available and will therefore not occur with UDP).</t>
              <t indent="0" pn="section-a.2.3-2.5.6"/>
            </li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="Acknowledgements" numbered="false" toc="include" removeInRFC="false" pn="section-appendix.b">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.b-1">The authors would like to thank all the participants of the TAPS
      Working Group and the NEAT and MAMI research projects for valuable input
      to this document. We especially thank <contact fullname="Michael       Tüxen"/> for help with connection establishment/teardown,
      <contact fullname="Gorry Fairhurst"/> for his suggestions regarding
      fragmentation and packet sizes, and <contact fullname="Spencer Dawkins"/>
      for his extremely detailed and constructive review.  This work has
      received funding from the European Union's Horizon 2020 research and
      innovation program under grant agreement No. 644334 (NEAT).

      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author fullname="Michael Welzl" initials="M." surname="Welzl">
        <organization showOnFrontPage="true">University of Oslo</organization>
        <address>
          <postal>
            <pobox>PO Box 1080 Blindern</pobox>
            <code>N-0316</code>
            <city>Oslo</city>
            <country>Norway</country>
          </postal>
          <phone>+47 22 85 24 20</phone>
          <email>michawe@ifi.uio.no</email>
        </address>
      </author>
      <author fullname="Stein Gjessing" initials="S." surname="Gjessing">
        <organization showOnFrontPage="true">University of Oslo</organization>
        <address>
          <postal>
            <pobox>PO Box 1080 Blindern</pobox>
            <code>N-0316</code>
            <city>Oslo</city>
            <country>Norway</country>
          </postal>
          <phone>+47 22 85 24 44</phone>
          <email>steing@ifi.uio.no</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
