<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" ipr="trust200902" docName="draft-iab-protocol-maintenance-12" number="9413" submissionType="IAB" category="info" consensus="true" tocInclude="true" sortRefs="true" symRefs="true" updates="" obsoletes="" xml:lang="en" prepTime="2023-06-27T15:55:19" indexInclude="true" scripts="Common,Latin" tocDepth="3">
  <link href="https://datatracker.ietf.org/doc/draft-iab-protocol-maintenance-12" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9413" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title>Maintaining Robust Protocols</title>
    <seriesInfo name="RFC" value="9413" stream="IAB"/>
    <author initials="M." surname="Thomson" fullname="Martin Thomson">
      <organization showOnFrontPage="true"/>
      <address>
        <email>mt@lowentropy.net</email>
      </address>
    </author>
    <author initials="D." surname="Schinazi" fullname="David Schinazi">
      <organization showOnFrontPage="true"/>
      <address>
        <email>dschinazi.ietf@gmail.com</email>
      </address>
    </author>
    <date month="06" year="2023"/>
    <keyword>robustness</keyword>
    <keyword>postel</keyword>
    <keyword>principle</keyword>
    <keyword>law</keyword>
    <keyword>wrong</keyword>
    <keyword>tolerance</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">The main goal of the networking standards process is to enable the long-term
interoperability of protocols. This document describes active protocol
maintenance, a means to accomplish that goal. By evolving specifications and
implementations, it is possible to reduce ambiguity over time and create a
healthy ecosystem.</t>
      <t indent="0" pn="section-abstract-2">The robustness principle, often phrased as "be conservative in what you send,
and liberal in what you accept", has long guided the design and implementation
of Internet protocols. However, it has been interpreted in a variety of ways.
While some interpretations help ensure the health of the Internet, others can
negatively affect interoperability over time. When a protocol is actively
maintained, protocol designers and implementers can avoid these pitfalls.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for informational purposes.  
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Architecture Board
            (IAB) and represents information that the IAB has deemed valuable
            to provide for permanent record.  It represents the consensus of the Internet
            Architecture Board (IAB).  Documents approved for publication
            by the IAB are not candidates for any level of Internet Standard; see
            Section 2 of RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9413" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2023 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-protocol-robustness">Protocol Robustness</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-fallibility-of-specificatio">Fallibility of Specifications</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-extensibility">Extensibility</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-flexible-protocols">Flexible Protocols</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-applicability">Applicability</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-harmful-consequences-of-tol">Harmful Consequences of Tolerating the Unexpected</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-protocol-decay">Protocol Decay</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ecosystem-effects">Ecosystem Effects</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-active-protocol-maintenance">Active Protocol Maintenance</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-virtuous-intolerance">Virtuous Intolerance</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-exclusion">Exclusion</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-iab-members-at-the-time-of-">IAB Members at the Time of Approval</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgments">Acknowledgments</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">There is good evidence to suggest that many important protocols are routinely
maintained beyond their inception. In particular, a sizable proportion of IETF
activity is dedicated to the stewardship of existing protocols. This document
first discusses hazards in applying the robustness principle too broadly (see
<xref target="robustness" format="default" sectionFormat="of" derivedContent="Section 2"/>) and offers an alternative strategy for handling interoperability
problems in deployments (see <xref target="active" format="default" sectionFormat="of" derivedContent="Section 5"/>).</t>
      <t indent="0" pn="section-1-2">Ideally, protocol implementations can be actively maintained so that unexpected
conditions are proactively identified and resolved. Some deployments might still
need to apply short-term mitigations for deployments that cannot be easily
updated, but such cases need not be permanent. This is discussed further in
<xref target="active" format="default" sectionFormat="of" derivedContent="Section 5"/>.</t>
    </section>
    <section anchor="robustness" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-protocol-robustness">Protocol Robustness</name>
      <t indent="0" pn="section-2-1">The robustness principle has been hugely influential in shaping the design of
the Internet. As stated in the IAB document "Architectural Principles of the
Internet" <xref target="RFC1958" format="default" sectionFormat="of" derivedContent="RFC1958"/>, the robustness principle advises to:</t>
      <blockquote pn="section-2-2">Be strict when sending and tolerant when receiving.  Implementations must
  follow specifications precisely when sending to the network, and tolerate
  faulty input from the network.  When in doubt, discard faulty input silently,
  without returning an error message unless this is required by the
  specification.
      </blockquote>
      <t indent="0" pn="section-2-3">This simple statement captures a significant concept in the design of
interoperable systems.  Many consider the application of the robustness
principle to be instrumental in the success of the Internet as well as the
design of interoperable protocols in general.</t>
      <t indent="0" pn="section-2-4">There are three main aspects to the robustness principle:</t>
      <dl indent="3" newline="false" spacing="normal" pn="section-2-5">
        <dt pn="section-2-5.1">Robustness to software defects:</dt>
        <dd pn="section-2-5.2">
          <t indent="0" pn="section-2-5.2.1">No software is perfect, and failures can lead to unexpected behavior.
Well-designed software strives to be resilient to such issues, whether they
occur in the local software or in software that it communicates with. In
particular, it is critical for software to gracefully recover from these issues
without aborting unrelated processing.</t>
        </dd>
        <dt pn="section-2-5.3">Robustness to attacks:</dt>
        <dd pn="section-2-5.4">
          <t indent="0" pn="section-2-5.4.1">Since not all actors on the Internet are benevolent, networking software needs
to be resilient to input that is intentionally crafted to cause unexpected
consequences. For example, software must ensure that invalid input doesn't allow
the sender to access data, change data, or perform actions that it would otherwise not be allowed to.</t>
        </dd>
        <dt pn="section-2-5.5">Robustness to the unexpected:</dt>
        <dd pn="section-2-5.6">
          <t indent="0" pn="section-2-5.6.1">It can be possible for an implementation to receive inputs that the
specification did not prepare it for. This scenario excludes those cases where a
the specification explicitly defines how a faulty message is handled. Instead,
this refers to cases where handling is not defined or where there is some
ambiguity in the specification. In this case, some interpretations of the
robustness principle advocate that the implementation tolerate the faulty input
and silently discard it. 
Some interpretations even suggest that a faulty or
ambiguous message be processed according to the inferred intent of the sender.</t>
        </dd>
      </dl>
      <t indent="0" pn="section-2-6">The facets of the robustness principle that protect against defects or attacks
are understood to be necessary guiding principles for the design and
implementation of networked systems. However, an interpretation that advocates
for tolerating unexpected inputs is no longer considered best practice in all
scenarios.</t>
      <t indent="0" pn="section-2-7">Time and experience show that negative consequences to interoperability
accumulate over time if implementations silently accept faulty input. This
problem originates from an implicit assumption that it is not possible to effect
change in a system the size of the Internet. When one assumes that changes to
existing implementations are not presently feasible, tolerating flaws feels
inevitable.</t>
      <t indent="0" pn="section-2-8">Many problems that this third aspect of the robustness principle was intended to
solve can instead be better addressed by active maintenance. Active protocol
maintenance is where a community of protocol designers, implementers, and
deployers work together to continuously improve and evolve protocol
specifications alongside implementations and deployments of those protocols. A
community that takes an active role in the maintenance of protocols will no
longer need to rely on the robustness principle to avoid interoperability issues.</t>
      <section anchor="fallibility-of-specifications" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-fallibility-of-specificatio">Fallibility of Specifications</name>
        <t indent="0" pn="section-2.1-1">The context from which the robustness principle was developed provides valuable
insights into its intent and purpose. The earliest form of the principle in the
RFC Series (the Internet Protocol specification <xref target="RFC0760" format="default" sectionFormat="of" derivedContent="RFC0760"/>) is preceded by a
sentence that reveals a motivation for the principle:</t>
        <blockquote pn="section-2.1-2">While the goal of this specification is to be explicit about the protocol
  there is the possibility of differing interpretations.  In general, an
  implementation should be conservative in its sending behavior, and liberal in
  its receiving behavior.</blockquote>
        <t indent="0" pn="section-2.1-3">This formulation of the principle expressly recognizes the possibility that the
specification could be imperfect. This contextualizes the principle in an
important way.</t>
        <t indent="0" pn="section-2.1-4">Imperfect specifications are unavoidable, largely because it is more important
to proceed to implementation and deployment than it is to perfect a
specification. A protocol benefits greatly from experience with its use. A
deployed protocol is immeasurably more useful than a perfect protocol
specification. This is particularly true in early phases of system design, to
which the robustness principle is best suited.</t>
        <t indent="0" pn="section-2.1-5">As demonstrated by the IAB document "What Makes for a Successful
        Protocol?" <xref target="RFC5218" format="default" sectionFormat="of" derivedContent="RFC5218"/>, success or failure of a protocol
        depends far more on factors like usefulness than on technical
        excellence. Timely publication of protocol specifications, even with
        the potential for flaws, likely contributed significantly to the
        eventual success of the Internet.</t>
        <t indent="0" pn="section-2.1-6">This premise that specifications will be imperfect is correct. However, ignoring
faulty or ambiguous input is almost always the incorrect solution to the problem.</t>
      </section>
      <section anchor="extensibility" numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-extensibility">Extensibility</name>
        <t indent="0" pn="section-2.2-1">Good extensibility <xref target="RFC6709" format="default" sectionFormat="of" derivedContent="EXT"/> can make it easier to respond to new use
cases or changes in the environment in which the protocol is deployed.</t>
        <t indent="0" pn="section-2.2-2">The ability to extend a protocol is sometimes mistaken for an application of the
robustness principle. After all, if one party wants to start using a new feature
before another party is prepared to receive it, it might be assumed that the
receiving party is being tolerant of new types of input.</t>
        <t indent="0" pn="section-2.2-3">A well-designed extensibility mechanism establishes clear rules for the handling
of elements like new messages or parameters. This depends on specifying the
handling of malformed or illegal inputs so that implementations behave
consistently in all cases that might affect interoperation. New messages or
parameters thereby become entirely expected. If extension mechanisms and error
handling are designed and implemented correctly, new protocol features can be
deployed with confidence in the understanding of the effect they have on
existing implementations.</t>
        <t indent="0" pn="section-2.2-4">In contrast, relying on implementations to consistently handle unexpected input
is not a good strategy for extensibility. Using undocumented or
accidental features of a protocol as the basis of an extensibility mechanism can
be extremely difficult, as is demonstrated by the case study in <xref section="A.3" sectionFormat="of" target="RFC6709" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6709#appendix-A.3" derivedContent="EXT"/>.  It is better and easier to design a protocol for extensibility
initially than to retrofit the capability (see also <xref target="RFC6891" format="default" sectionFormat="of" derivedContent="EDNS0"/>).</t>
      </section>
      <section anchor="flexibility" numbered="true" removeInRFC="false" toc="include" pn="section-2.3">
        <name slugifiedName="name-flexible-protocols">Flexible Protocols</name>
        <t indent="0" pn="section-2.3-1">A protocol could be designed to permit a narrow set of valid inputs, or it could be designed to treat a wide range of inputs as valid.</t>
        <t indent="0" pn="section-2.3-2">A more flexible protocol is more complex to specify and implement; variations, especially those that are not commonly used, can create potential
interoperability hazards. In the absence of strong reasons to be flexible, a
simpler protocol is more likely to successfully interoperate.</t>
        <t indent="0" pn="section-2.3-3">Where input is provided by users, allowing flexibility might serve to make the
protocol more accessible, especially for non-expert users. HTML authoring
<xref target="HTML" format="default" sectionFormat="of" derivedContent="HTML"/> is an example of this sort of design.</t>
        <t indent="0" pn="section-2.3-4">In protocols where there are many participants that might generate messages
based on data from other participants, some flexibility might contribute to
resilience of the system. A routing protocol is a good example of where this
might be necessary.</t>
        <t indent="0" pn="section-2.3-5">In BGP <xref target="RFC4271" format="default" sectionFormat="of" derivedContent="BGP"/>, a peer generates UPDATE messages
based on messages it receives from other peers. Peers can copy
attributes without validation, potentially propagating invalid
values. RFC 4271 <xref target="RFC4271" format="default" sectionFormat="of" derivedContent="BGP"/> mandated a session reset for
invalid UPDATE messages, a requirement that was not widely
implemented.  In many deployments, peers would treat a malformed
UPDATE in less stringent ways, such as by treating the affected route
as having been withdrawn.  Ultimately, RFC 7606 <xref target="RFC7606" format="default" sectionFormat="of" derivedContent="BGP-REH"/> documented this practice and provided precise
rules, including mandatory actions for different error conditions.</t>
        <t indent="0" pn="section-2.3-6">A protocol can explicitly allow for a range of valid expressions of the same
semantics, with precise definitions for error handling. This is distinct from a
protocol that relies on the application of the robustness principle. With the
former, interoperation depends on specifications that capture all relevant
details, whereas interoperation in the latter
depends more extensively on implementations making compatible decisions, as noted in <xref target="ecosystem" format="default" sectionFormat="of" derivedContent="Section 4.2"/>.</t>
      </section>
    </section>
    <section anchor="applicability" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-applicability">Applicability</name>
      <t indent="0" pn="section-3-1">The guidance in this document is intended for protocols that are deployed to the
Internet. There are some situations in which this guidance might not apply to a
protocol due to conditions on its implementation or deployment.</t>
      <t indent="0" pn="section-3-2">In particular, this guidance depends on an ability to update and deploy
implementations. Being able to rapidly update implementations that are deployed
to the Internet helps manage security risks, but in reality, some software
deployments have lifecycles that make software updates either rare or altogether impossible.</t>
      <t indent="0" pn="section-3-3">Where implementations are not updated, there is no opportunity to apply the
practices that this document recommends. In particular, some practices -- such as
those described in <xref target="intolerance" format="default" sectionFormat="of" derivedContent="Section 5.1"/> -- only exist to support the development of
protocol maintenance and evolution. Employing this guidance is therefore only
applicable where there is the possibility of improving deployments through
timely updates of their implementations.</t>
    </section>
    <section anchor="harmful-consequences-of-tolerating-the-unexpected" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-harmful-consequences-of-tol">Harmful Consequences of Tolerating the Unexpected</name>
      <t indent="0" pn="section-4-1">Problems in other implementations can create an unavoidable need to temporarily
tolerate unexpected inputs. However, this course of action carries risks.</t>
      <section anchor="decay" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-protocol-decay">Protocol Decay</name>
        <t indent="0" pn="section-4.1-1">Tolerating unexpected input might be an expedient tool for systems in early
phases of deployment, which was the case for the early Internet. Being lenient
in this way defers the effort of dealing with interoperability problems and
prioritizes progress. However, this deferral can amplify the ultimate cost of
handling interoperability problems.</t>
        <t indent="0" pn="section-4.1-2">Divergent implementations of a specification emerge over time. When variations
occur in the interpretation or expression of semantic components,
implementations cease to be perfectly interoperable.</t>
        <t indent="0" pn="section-4.1-3">Implementation bugs are often identified as the cause of variation, though it is
often a combination of factors. Using a protocol in ways that were not
anticipated in the original design or ambiguities and errors in the
specification are often contributing factors. Disagreements on the
interpretation of specifications should be expected over the lifetime of a
protocol.</t>
        <t indent="0" pn="section-4.1-4">Even with the best intentions to maintain protocol correctness, the pressure to
interoperate can be significant. No implementation can hope to avoid having to
trade correctness for interoperability indefinitely.</t>
        <t indent="0" pn="section-4.1-5">An implementation that reacts to variations in the manner recommended in the
robustness principle enters a pathological feedback cycle. Over time:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1-6">
          <li pn="section-4.1-6.1">Implementations progressively add logic to constrain how data is
          transmitted or to permit variations in what is received.</li>
          <li pn="section-4.1-6.2">Errors in implementations or confusion about semantics are permitted or
ignored.</li>
          <li pn="section-4.1-6.3">These errors can become entrenched, forcing other implementations to be
tolerant of those errors.</li>
        </ul>
        <t indent="0" pn="section-4.1-7">A flaw can become entrenched as a de facto standard. Any implementation of the
protocol is required to replicate the aberrant behavior, or it is not
interoperable. This is both a consequence of tolerating the unexpected and a
product of a natural reluctance to avoid fatal error conditions. Ensuring
interoperability in this environment is often referred to as aiming to be "bug-for-bug compatible".</t>
        <t indent="0" pn="section-4.1-8">For example, in TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="TLS"/>, extensions use a tag-length-value format
and can be added to messages in any order. 
However, some server implementations
terminated connections if they encountered a TLS ClientHello message that ends
with an empty extension. To maintain interoperability with these servers, which
were widely deployed, client implementations were required to be aware of this
bug and ensure that a ClientHello message ends in a non-empty extension.</t>
        <t indent="0" pn="section-4.1-9">Overapplication of the robustness principle therefore encourages a chain
reaction that can create interoperability problems over time. In particular,
tolerating unexpected behavior is particularly deleterious for early
implementations of new protocols, as quirks in early implementations can affect
all subsequent deployments.</t>
      </section>
      <section anchor="ecosystem" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-ecosystem-effects">Ecosystem Effects</name>
        <t indent="0" pn="section-4.2-1">From observing widely deployed protocols, it appears there are two stable points
on the spectrum between being strict versus permissive in the presence of
protocol errors:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.2-2">
          <li pn="section-4.2-2.1">If implementations predominantly enforce strict compliance with
specifications, newer implementations will experience failures if they do not
comply with protocol requirements. Newer implementations need to fix
compliance issues in order to be successfully deployed. This ensures that most
deployments are compliant over time.</li>
          <li pn="section-4.2-2.2">Conversely, if non-compliance is tolerated by existing implementations,
non-compliant implementations can be deployed successfully. Newer
implementations then have a strong incentive to tolerate any existing
non-compliance in order to be successfully deployed. This ensures that most
deployments are tolerant of the same non-compliant behavior.</li>
        </ul>
        <t indent="0" pn="section-4.2-3">This happens because interoperability requirements for protocol
implementations are set by other deployments. Specifications and test
suites -- where they exist -- can guide the initial development of
implementations.  Ultimately, the need to interoperate with deployed
implementations is a de facto conformance test suite that can
supersede any formal protocol definition.</t>
        <t indent="0" pn="section-4.2-4">For widely used protocols, the massive scale of the Internet makes large-scale
interoperability testing infeasible for all but a privileged few. The cost of
building a new implementation using reverse engineering increases as the number
of implementations and bugs increases. Worse, the set of tweaks necessary for
wide interoperability can be difficult to discover. In the worst case, a new
implementer might have to choose between deployments that have diverged so far
as to no longer be interoperable.</t>
        <t indent="0" pn="section-4.2-5">Consequently, new implementations might be forced into niche uses, where the
problems arising from interoperability issues can be more closely managed.
However, restricting new implementations into limited deployments risks causing
forks in the protocol. If implementations do not interoperate, little prevents
those implementations from diverging more over time.</t>
        <t indent="0" pn="section-4.2-6">This has a negative impact on the ecosystem of a protocol. New implementations
are key to the continued viability of a protocol. New protocol implementations
are also more likely to be developed for new and diverse use cases and are often
the origin of features and capabilities that can be of benefit to existing users.</t>
        <t indent="0" pn="section-4.2-7">The need to work around interoperability problems also reduces the ability of
established implementations to change. An accumulation of mitigations for
interoperability issues makes implementations more difficult to maintain and can
constrain extensibility (see also the IAB document "Long-Term Viability of
Protocol Extension Mechanisms" <xref target="RFC9170" format="default" sectionFormat="of" derivedContent="RFC9170"/>).</t>
        <t indent="0" pn="section-4.2-8">Sometimes, what appear to be interoperability problems are symptomatic of issues
in protocol design. A community that is willing to make changes to the protocol,
by revising or extending specifications and then deploying those changes,
makes the protocol better.
Tolerating unexpected input instead conceals problems, making it harder, if not
impossible, to fix them later.</t>
      </section>
    </section>
    <section anchor="active" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-active-protocol-maintenance">Active Protocol Maintenance</name>
      <t indent="0" pn="section-5-1">The robustness principle can be highly effective in safeguarding against flaws
in the implementation of a protocol by peers. Especially when a specification
remains unchanged for an extended period of time, the incentive to be tolerant of
errors accumulates over time. Indeed, when faced with divergent interpretations
of an immutable specification, the only way for an implementation to remain
interoperable is to be tolerant of differences in interpretation and
implementation errors. However, when official specifications fail to be
updated, then deployed implementations -- including their quirks -- often become
a substitute standard.</t>
      <t indent="0" pn="section-5-2">Tolerating unexpected inputs from another implementation might seem logical, even necessary. However, that conclusion relies on an assumption that existing
specifications and implementations cannot change. Applying the robustness
principle in this way disproportionately values short-term gains over the
negative effects on future implementations and the protocol as a whole.</t>
      <t indent="0" pn="section-5-3">For a protocol to have sustained viability, it is necessary for both
specifications and implementations to be responsive to changes, in addition to
handling new and old problems that might arise over time. For example, when an
implementer discovers a scenario where a specification defines some input as
faulty but does not define how to handle that input, the implementer can provide
significant value to the ecosystem by reporting the issue and helping to evolve the
specification.</t>
      <t indent="0" pn="section-5-4">When a discrepancy is found between a specification and its implementation, a
maintenance discussion inside the standards process allows reaching consensus on
how best to evolve the specification. Subsequently, updating implementations to
match evolved specifications ensures that implementations are consistently
interoperable and removes needless barriers for new implementations. Maintenance
also enables continued improvement of the protocol. New use cases are an
indicator that the protocol could be successful <xref target="RFC5218" format="default" sectionFormat="of" derivedContent="RFC5218"/>.</t>
      <t indent="0" pn="section-5-5">Protocol designers are strongly encouraged to continue to maintain and evolve
protocol specifications beyond their initial inception and definition. This
might require the development of revised specifications, extensions, or other
supporting material that evolves in concert with implementations. Involvement of
those who implement and deploy the protocol is a critical part of this process,
as they provide input on their experience with how the protocol is used.</t>
      <t indent="0" pn="section-5-6">Most interoperability problems do not require revision of protocols or protocol
specifications, as software defects can happen even when the specification is
unambiguous. For instance, the most effective means of dealing with a
defective implementation in a peer could be to contact the developer
responsible. It is far more efficient in the long term to fix one isolated bug
than it is to deal with the consequences of workarounds.</t>
      <t indent="0" pn="section-5-7">Early implementations of protocols have a stronger obligation to closely follow
specifications, as their behavior will affect all subsequent implementations. In
addition to specifications, later implementations will be guided by what
existing deployments accept. Tolerance of errors in early deployments is most
likely to result in problems. Protocol specifications might need more frequent
revision during early deployments to capture feedback from early rounds of
deployment.</t>
      <t indent="0" pn="section-5-8">Neglect can quickly produce the negative consequences this document describes.
Restoring the protocol to a state where it can be maintained involves first
discovering the properties of the protocol as it is deployed rather than the
protocol as it was originally documented. This can be difficult and
time-consuming, particularly if the protocol has a diverse set of
implementations. Such a process was undertaken for HTTP <xref target="RFC9110" format="default" sectionFormat="of" derivedContent="HTTP"/> after
a period of minimal maintenance. Restoring HTTP specifications to relevance took
significant effort.</t>
      <t indent="0" pn="section-5-9">Maintenance is most effective if it is responsive, which is greatly affected by
how rapidly protocol changes can be deployed. For protocol deployments that
operate on longer time scales, temporary workarounds following the spirit of the
robustness principle might be necessary. For this, improvements in software
update mechanisms ensure that the cost of reacting to changes is much lower than
it was in the past. Alternatively, if specifications can be updated more readily
than deployments, details of the workaround can be documented, including the
desired form of the protocols once the need for workarounds no longer exists and
plans for removing the workaround.</t>
      <section anchor="intolerance" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-virtuous-intolerance">Virtuous Intolerance</name>
        <t indent="0" pn="section-5.1-1">A well-specified protocol includes rules for consistent handling of aberrant
conditions. This increases the chances that implementations will have consistent
and interoperable handling of unusual conditions.</t>
        <t indent="0" pn="section-5.1-2">Choosing to generate fatal errors for unspecified conditions instead of
attempting error recovery can ensure that faults receive attention. This
intolerance can be harnessed to reduce occurrences of aberrant implementations.</t>
        <t indent="0" pn="section-5.1-3">Intolerance toward violations of specification improves feedback for new
implementations in particular. When a new implementation encounters a peer that
is intolerant of an error, it receives strong feedback that allows the problem
to be discovered quickly.</t>
        <t indent="0" pn="section-5.1-4">To be effective, intolerant implementations need to be sufficiently widely
deployed so that they are encountered by new implementations with high probability.
This could depend on multiple implementations deploying strict checks.</t>
        <t indent="0" pn="section-5.1-5">Interoperability problems also need to be made known to those in a position to
address them. In particular, systems with human operators, such as user-facing
clients, are ideally suited to surfacing errors.  Other systems might need to
use less direct means of making errors known.</t>
        <t indent="0" pn="section-5.1-6">This does not mean that intolerance of errors in early deployments of protocols
has the effect of preventing interoperability. On the contrary, when existing
implementations follow clearly specified error handling, new implementations or
features can be introduced more readily, as the effect on existing
implementations can be easily predicted; see also <xref target="extensibility" format="default" sectionFormat="of" derivedContent="Section 2.2"/>.</t>
        <t indent="0" pn="section-5.1-7">Any intolerance also needs to be strongly supported by specifications; otherwise,
they encourage fracturing of the protocol community or proliferation of
workarounds. See <xref target="exclusion" format="default" sectionFormat="of" derivedContent="Section 5.2"/>.</t>
        <t indent="0" pn="section-5.1-8">Intolerance can be used to motivate compliance with any protocol requirement.
For instance, the INADEQUATE_SECURITY error code and associated requirements in
HTTP/2 <xref target="RFC9113" format="default" sectionFormat="of" derivedContent="HTTP/2"/> resulted in improvements in the security of the
deployed base.</t>
        <t indent="0" pn="section-5.1-9">A notification for a fatal error is best sent as explicit error messages to the
entity that made the error. Error messages benefit from being able to carry
arbitrary information that might help the implementer of the sender of the
faulty input understand and fix the issue in their software. QUIC error frames
<xref target="RFC9000" format="default" sectionFormat="of" derivedContent="QUIC"/> are an example of a fatal error mechanism that helped
implementers improve software quality throughout the protocol lifecycle.
Similarly, the use of Extended DNS Errors <xref target="RFC8914" format="default" sectionFormat="of" derivedContent="EDE"/> has been
effective in providing better descriptions of DNS resolution errors to clients.</t>
        <t indent="0" pn="section-5.1-10">Stateless protocol endpoints might generate denial-of-service attacks if they
send an error message in response to every message that is received from an
unauthenticated sender. These implementations might need to silently discard
these messages.</t>
      </section>
      <section anchor="exclusion" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-exclusion">Exclusion</name>
        <t indent="0" pn="section-5.2-1">Any protocol participant that is affected by changes arising from maintenance
might be excluded if they are unwilling or unable to implement or deploy changes
that are made to the protocol.</t>
        <t indent="0" pn="section-5.2-2">Deliberate exclusion of problematic implementations is an important tool that
can ensure that the interoperability of a protocol remains viable. While
backward-compatible changes are always preferable to incompatible ones, it is
not always possible to produce a design that protects the ability of all current
and future protocol participants to interoperate.</t>
        <t indent="0" pn="section-5.2-3">Accidentally excluding unexpected participants is not usually a good outcome.
When developing and deploying changes, it is best to first understand the extent
to which the change affects existing deployments.  This ensures that any
exclusion that occurs is intentional.</t>
        <t indent="0" pn="section-5.2-4">In some cases, existing deployments might need to change in order to avoid being
excluded.  Though it might be preferable to avoid forcing deployments to change,
this might be considered necessary.  To avoid unnecessarily excluding
deployments that might take time to change, developing a migration plan can be
prudent.</t>
        <t indent="0" pn="section-5.2-5">Exclusion is a direct goal when choosing to be intolerant of errors (see
<xref target="intolerance" format="default" sectionFormat="of" derivedContent="Section 5.1"/>). Exclusionary actions are employed with the deliberate intent
of protecting future interoperability.</t>
        <t indent="0" pn="section-5.2-6">Excluding implementations or deployments can lead to a fracturing of the
protocol system that could be more harmful than any divergence that might arise
from tolerating the unexpected. The IAB document "Uncoordinated Protocol
Development Considered Harmful" <xref target="RFC5704" format="default" sectionFormat="of" derivedContent="RFC5704"/> describes how conflict or
competition in the maintenance of protocols can lead to similar problems.</t>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-6-1">Careless implementations, lax interpretations of specifications, and
      uncoordinated extrapolation of requirements to cover gaps in
      specification can result in security problems. Hiding the consequences
      of protocol variations encourages the hiding of issues, which can
      conceal bugs and make them difficult to discover.</t>
      <t indent="0" pn="section-6-2">The consequences of the problems described in this document are
      especially acute for any protocol where security depends on agreement
      about semantics of protocol elements. For instance, weak primitives
      <xref target="RFC6151" format="default" sectionFormat="of" derivedContent="MD5"/> and obsolete mechanisms <xref target="RFC7568" format="default" sectionFormat="of" derivedContent="SSL3"/> are good examples of the use of unsafe security
      practices where forcing exclusion (<xref target="exclusion" format="default" sectionFormat="of" derivedContent="Section 5.2"/>) can be
      desirable.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-7-1">This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <displayreference target="RFC9113" to="HTTP/2"/>
    <displayreference target="RFC6709" to="EXT"/>
    <displayreference target="RFC6891" to="EDNS0"/>
    <displayreference target="RFC4271" to="BGP"/>
    <displayreference target="RFC7606" to="BGP-REH"/>
    <displayreference target="RFC8446" to="TLS"/>
    <displayreference target="RFC9110" to="HTTP"/>
    <displayreference target="RFC9000" to="QUIC"/>
    <displayreference target="RFC8914" to="EDE"/>
    <displayreference target="RFC6151" to="MD5"/>
    <displayreference target="RFC7568" to="SSL3"/>
    <references pn="section-8">
      <name slugifiedName="name-informative-references">Informative References</name>
      <reference anchor="RFC4271" target="https://www.rfc-editor.org/info/rfc4271" quoteTitle="true" derivedAnchor="BGP">
        <front>
          <title>A Border Gateway Protocol 4 (BGP-4)</title>
          <author fullname="Y. Rekhter" initials="Y." role="editor" surname="Rekhter"/>
          <author fullname="T. Li" initials="T." role="editor" surname="Li"/>
          <author fullname="S. Hares" initials="S." role="editor" surname="Hares"/>
          <date month="January" year="2006"/>
          <abstract>
            <t indent="0">This document discusses the Border Gateway Protocol (BGP), which is an inter-Autonomous System routing protocol.</t>
            <t indent="0">The primary function of a BGP speaking system is to exchange network reachability information with other BGP systems. This network reachability information includes information on the list of Autonomous Systems (ASes) that reachability information traverses. This information is sufficient for constructing a graph of AS connectivity for this reachability from which routing loops may be pruned, and, at the AS level, some policy decisions may be enforced.</t>
            <t indent="0">BGP-4 provides a set of mechanisms for supporting Classless Inter-Domain Routing (CIDR). These mechanisms include support for advertising a set of destinations as an IP prefix, and eliminating the concept of network "class" within BGP. BGP-4 also introduces mechanisms that allow aggregation of routes, including aggregation of AS paths.</t>
            <t indent="0">This document obsoletes RFC 1771. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="4271"/>
        <seriesInfo name="DOI" value="10.17487/RFC4271"/>
      </reference>
      <reference anchor="RFC7606" target="https://www.rfc-editor.org/info/rfc7606" quoteTitle="true" derivedAnchor="BGP-REH">
        <front>
          <title>Revised Error Handling for BGP UPDATE Messages</title>
          <author fullname="E. Chen" initials="E." role="editor" surname="Chen"/>
          <author fullname="J. Scudder" initials="J." role="editor" surname="Scudder"/>
          <author fullname="P. Mohapatra" initials="P." surname="Mohapatra"/>
          <author fullname="K. Patel" initials="K." surname="Patel"/>
          <date month="August" year="2015"/>
          <abstract>
            <t indent="0">According to the base BGP specification, a BGP speaker that receives an UPDATE message containing a malformed attribute is required to reset the session over which the offending attribute was received. This behavior is undesirable because a session reset would impact not only routes with the offending attribute but also other valid routes exchanged over the session. This document partially revises the error handling for UPDATE messages and provides guidelines for the authors of documents defining new attributes. Finally, it revises the error handling procedures for a number of existing attributes.</t>
            <t indent="0">This document updates error handling for RFCs 1997, 4271, 4360, 4456, 4760, 5543, 5701, and 6368.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7606"/>
        <seriesInfo name="DOI" value="10.17487/RFC7606"/>
      </reference>
      <reference anchor="RFC8914" target="https://www.rfc-editor.org/info/rfc8914" quoteTitle="true" derivedAnchor="EDE">
        <front>
          <title>Extended DNS Errors</title>
          <author fullname="W. Kumari" initials="W." surname="Kumari"/>
          <author fullname="E. Hunt" initials="E." surname="Hunt"/>
          <author fullname="R. Arends" initials="R." surname="Arends"/>
          <author fullname="W. Hardaker" initials="W." surname="Hardaker"/>
          <author fullname="D. Lawrence" initials="D." surname="Lawrence"/>
          <date month="October" year="2020"/>
          <abstract>
            <t indent="0">This document defines an extensible method to return additional information about the cause of DNS errors.  Though created primarily to extend SERVFAIL to provide additional information about the cause of DNS and DNSSEC failures, the Extended DNS Errors option defined in this document allows all response types to contain extended error information.  Extended DNS Error information does not change the processing of RCODEs.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8914"/>
        <seriesInfo name="DOI" value="10.17487/RFC8914"/>
      </reference>
      <reference anchor="RFC6891" target="https://www.rfc-editor.org/info/rfc6891" quoteTitle="true" derivedAnchor="EDNS0">
        <front>
          <title>Extension Mechanisms for DNS (EDNS(0))</title>
          <author fullname="J. Damas" initials="J." surname="Damas"/>
          <author fullname="M. Graff" initials="M." surname="Graff"/>
          <author fullname="P. Vixie" initials="P." surname="Vixie"/>
          <date month="April" year="2013"/>
          <abstract>
            <t indent="0">The Domain Name System's wire protocol includes a number of fixed fields whose range has been or soon will be exhausted and does not allow requestors to advertise their capabilities to responders. This document describes backward-compatible mechanisms for allowing the protocol to grow.</t>
            <t indent="0">This document updates the Extension Mechanisms for DNS (EDNS(0)) specification (and obsoletes RFC 2671) based on feedback from deployment experience in several implementations. It also obsoletes RFC 2673 ("Binary Labels in the Domain Name System") and adds considerations on the use of extended labels in the DNS.</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="75"/>
        <seriesInfo name="RFC" value="6891"/>
        <seriesInfo name="DOI" value="10.17487/RFC6891"/>
      </reference>
      <reference anchor="RFC6709" target="https://www.rfc-editor.org/info/rfc6709" quoteTitle="true" derivedAnchor="EXT">
        <front>
          <title>Design Considerations for Protocol Extensions</title>
          <author fullname="B. Carpenter" initials="B." surname="Carpenter"/>
          <author fullname="B. Aboba" initials="B." role="editor" surname="Aboba"/>
          <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
          <date month="September" year="2012"/>
          <abstract>
            <t indent="0">This document discusses architectural issues related to the extensibility of Internet protocols, with a focus on design considerations.  It is intended to assist designers of both base protocols and extensions.  Case studies are included.  A companion document, RFC 4775 (BCP 125), discusses procedures relating to the extensibility of IETF protocols.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6709"/>
        <seriesInfo name="DOI" value="10.17487/RFC6709"/>
      </reference>
      <reference anchor="HTML" target="https://html.spec.whatwg.org/" quoteTitle="true" derivedAnchor="HTML">
        <front>
          <title>HTML - Living Standard</title>
          <author>
            <organization showOnFrontPage="true">WHATWG</organization>
          </author>
        </front>
      </reference>
      <reference anchor="RFC9110" target="https://www.rfc-editor.org/info/rfc9110" quoteTitle="true" derivedAnchor="HTTP">
        <front>
          <title>HTTP Semantics</title>
          <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
          <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
          <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
          <date month="June" year="2022"/>
          <abstract>
            <t indent="0">The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
            <t indent="0">This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="97"/>
        <seriesInfo name="RFC" value="9110"/>
        <seriesInfo name="DOI" value="10.17487/RFC9110"/>
      </reference>
      <reference anchor="RFC9113" target="https://www.rfc-editor.org/info/rfc9113" quoteTitle="true" derivedAnchor="HTTP/2">
        <front>
          <title>HTTP/2</title>
          <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
          <author fullname="C. Benfield" initials="C." role="editor" surname="Benfield"/>
          <date month="June" year="2022"/>
          <abstract>
            <t indent="0">This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced latency by introducing field compression and allowing multiple concurrent exchanges on the same connection.</t>
            <t indent="0">This document obsoletes RFCs 7540 and 8740.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9113"/>
        <seriesInfo name="DOI" value="10.17487/RFC9113"/>
      </reference>
      <reference anchor="RFC6151" target="https://www.rfc-editor.org/info/rfc6151" quoteTitle="true" derivedAnchor="MD5">
        <front>
          <title>Updated Security Considerations for the MD5 Message-Digest and the HMAC-MD5 Algorithms</title>
          <author fullname="S. Turner" initials="S." surname="Turner"/>
          <author fullname="L. Chen" initials="L." surname="Chen"/>
          <date month="March" year="2011"/>
          <abstract>
            <t indent="0">This document updates the security considerations for the MD5 message digest algorithm.  It also updates the security considerations for HMAC-MD5.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6151"/>
        <seriesInfo name="DOI" value="10.17487/RFC6151"/>
      </reference>
      <reference anchor="RFC9000" target="https://www.rfc-editor.org/info/rfc9000" quoteTitle="true" derivedAnchor="QUIC">
        <front>
          <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
          <author fullname="J. Iyengar" initials="J." role="editor" surname="Iyengar"/>
          <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
          <date month="May" year="2021"/>
          <abstract>
            <t indent="0">This document defines the core of the QUIC transport protocol.  QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration.  QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances.  Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9000"/>
        <seriesInfo name="DOI" value="10.17487/RFC9000"/>
      </reference>
      <reference anchor="RFC0760" target="https://www.rfc-editor.org/info/rfc760" quoteTitle="true" derivedAnchor="RFC0760">
        <front>
          <title>DoD standard Internet Protocol</title>
          <author fullname="J. Postel" initials="J." surname="Postel"/>
          <date month="January" year="1980"/>
        </front>
        <seriesInfo name="RFC" value="760"/>
        <seriesInfo name="DOI" value="10.17487/RFC0760"/>
      </reference>
      <reference anchor="RFC1958" target="https://www.rfc-editor.org/info/rfc1958" quoteTitle="true" derivedAnchor="RFC1958">
        <front>
          <title>Architectural Principles of the Internet</title>
          <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
          <date month="June" year="1996"/>
          <abstract>
            <t indent="0">The Internet and its architecture have grown in evolutionary fashion from modest beginnings, rather than from a Grand Plan.  While this process of evolution is one of the main reasons for the technology's success, it nevertheless seems useful to record a snapshot of the current principles of the Internet architecture.  This is intended for general guidance and general interest, and is in no way intended to be a formal or invariant reference model.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="1958"/>
        <seriesInfo name="DOI" value="10.17487/RFC1958"/>
      </reference>
      <reference anchor="RFC3117" target="https://www.rfc-editor.org/info/rfc3117" quoteTitle="true" derivedAnchor="RFC3117">
        <front>
          <title>On the Design of Application Protocols</title>
          <author fullname="M. Rose" initials="M." surname="Rose"/>
          <date month="November" year="2001"/>
          <abstract>
            <t indent="0">This memo describes the design principles for the Blocks eXtensible eXchange Protocol (BXXP).  This memo provides information for the Internet community.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="3117"/>
        <seriesInfo name="DOI" value="10.17487/RFC3117"/>
      </reference>
      <reference anchor="RFC5218" target="https://www.rfc-editor.org/info/rfc5218" quoteTitle="true" derivedAnchor="RFC5218">
        <front>
          <title>What Makes for a Successful Protocol?</title>
          <author fullname="D. Thaler" initials="D." surname="Thaler"/>
          <author fullname="B. Aboba" initials="B." surname="Aboba"/>
          <date month="July" year="2008"/>
          <abstract>
            <t indent="0">The Internet community has specified a large number of protocols to date, and these protocols have achieved varying degrees of success.  Based on case studies, this document attempts to ascertain factors that contribute to or hinder a protocol's success.  It is hoped that these observations can serve as guidance for future protocol work.  This memo provides information for the Internet community.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="5218"/>
        <seriesInfo name="DOI" value="10.17487/RFC5218"/>
      </reference>
      <reference anchor="RFC5704" target="https://www.rfc-editor.org/info/rfc5704" quoteTitle="true" derivedAnchor="RFC5704">
        <front>
          <title>Uncoordinated Protocol Development Considered Harmful</title>
          <author fullname="S. Bryant" initials="S." role="editor" surname="Bryant"/>
          <author fullname="M. Morrow" initials="M." role="editor" surname="Morrow"/>
          <author>
            <organization abbrev="IAB" showOnFrontPage="true">Internet Architecture Board</organization>
          </author>
          <date month="November" year="2009"/>
          <abstract>
            <t indent="0">This document identifies problems that may result from the absence of formal coordination and joint development on protocols of mutual interest between standards development organizations (SDOs). Some of these problems may cause significant harm to the Internet. The document suggests that a robust procedure is required prevent this from occurring in the future. The IAB has selected a number of case studies, such as Transport MPLS (T-MPLS), as recent examples to describe the hazard to the Internet architecture that results from uncoordinated adaptation of a protocol.</t>
            <t indent="0">This experience has resulted in a considerable improvement in the relationship between the IETF and the ITU-T. In particular, this was achieved via the establishment of the "Joint working team on MPLS-TP". In addition, the leadership of the two organizations agreed to improve inter-organizational working practices so as to avoid conflict in the future between ITU-T Recommendations and IETF RFCs.</t>
            <t indent="0">Whilst we use ITU-T - IETF interactions in these case studies, the scope of the document extends to all SDOs that have an overlapping protocol interest with the IETF. This memo provides information for the Internet community.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="5704"/>
        <seriesInfo name="DOI" value="10.17487/RFC5704"/>
      </reference>
      <reference anchor="RFC9170" target="https://www.rfc-editor.org/info/rfc9170" quoteTitle="true" derivedAnchor="RFC9170">
        <front>
          <title>Long-Term Viability of Protocol Extension Mechanisms</title>
          <author fullname="M. Thomson" initials="M." surname="Thomson"/>
          <author fullname="T. Pauly" initials="T." surname="Pauly"/>
          <date month="December" year="2021"/>
          <abstract>
            <t indent="0">The ability to change protocols depends on exercising the extension and version-negotiation mechanisms that support change.  This document explores how regular use of new protocol features can ensure that it remains possible to deploy changes to a protocol.  Examples are given where lack of use caused changes to be more difficult or costly.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9170"/>
        <seriesInfo name="DOI" value="10.17487/RFC9170"/>
      </reference>
      <reference anchor="RFC7568" target="https://www.rfc-editor.org/info/rfc7568" quoteTitle="true" derivedAnchor="SSL3">
        <front>
          <title>Deprecating Secure Sockets Layer Version 3.0</title>
          <author fullname="R. Barnes" initials="R." surname="Barnes"/>
          <author fullname="M. Thomson" initials="M." surname="Thomson"/>
          <author fullname="A. Pironti" initials="A." surname="Pironti"/>
          <author fullname="A. Langley" initials="A." surname="Langley"/>
          <date month="June" year="2015"/>
          <abstract>
            <t indent="0">The Secure Sockets Layer version 3.0 (SSLv3), as specified in RFC 6101, is not sufficiently secure. This document requires that SSLv3 not be used. The replacement versions, in particular, Transport Layer Security (TLS) 1.2 (RFC 5246), are considerably more secure and capable protocols.</t>
            <t indent="0">This document updates the backward compatibility section of RFC 5246 and its predecessors to prohibit fallback to SSLv3.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7568"/>
        <seriesInfo name="DOI" value="10.17487/RFC7568"/>
      </reference>
      <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="TLS">
        <front>
          <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
          <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
          <date month="August" year="2018"/>
          <abstract>
            <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
            <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8446"/>
        <seriesInfo name="DOI" value="10.17487/RFC8446"/>
      </reference>
    </references>
    <section numbered="false" anchor="iab-members-at-the-time-of-approval" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-iab-members-at-the-time-of-">IAB Members at the Time of Approval</name>
      <t indent="0" pn="section-appendix.a-1">Internet Architecture Board members at the time this document was approved
for publication were:</t>
      <ul empty="true" spacing="compact" bare="false" indent="3" pn="section-appendix.a-2">
        <li pn="section-appendix.a-2.1">
          <t indent="0" pn="section-appendix.a-2.1.1"><contact fullname="Jari Arkko"/></t>
        </li>
        <li pn="section-appendix.a-2.2">
          <t indent="0" pn="section-appendix.a-2.2.1"><contact fullname="Deborah Brungard"/></t>
        </li>
        <li pn="section-appendix.a-2.3">
          <t indent="0" pn="section-appendix.a-2.3.1"><contact fullname="Lars Eggert"/></t>
        </li>
        <li pn="section-appendix.a-2.4">
          <t indent="0" pn="section-appendix.a-2.4.1"><contact fullname="Wes Hardaker"/></t>
        </li>
        <li pn="section-appendix.a-2.5">
          <t indent="0" pn="section-appendix.a-2.5.1"><contact fullname="Cullen Jennings"/></t>
        </li>
        <li pn="section-appendix.a-2.6">
          <t indent="0" pn="section-appendix.a-2.6.1"><contact fullname="Mallory Knodel"/></t>
        </li>
        <li pn="section-appendix.a-2.7">
          <t indent="0" pn="section-appendix.a-2.7.1"><contact fullname="Mirja Kühlewind"/></t>
        </li>
        <li pn="section-appendix.a-2.8">
          <t indent="0" pn="section-appendix.a-2.8.1"><contact fullname="Zhenbin Li"/></t>
        </li>
        <li pn="section-appendix.a-2.9">
          <t indent="0" pn="section-appendix.a-2.9.1"><contact fullname="Tommy Pauly"/></t>
        </li>
        <li pn="section-appendix.a-2.10">
          <t indent="0" pn="section-appendix.a-2.10.1"><contact fullname="David Schinazi"/></t>
        </li>
        <li pn="section-appendix.a-2.11">
          <t indent="0" pn="section-appendix.a-2.11.1"><contact fullname="Russ White"/></t>
        </li>
        <li pn="section-appendix.a-2.12">
          <t indent="0" pn="section-appendix.a-2.12.1"><contact fullname="Qin Wu"/></t>
        </li>
        <li pn="section-appendix.a-2.13">
          <t indent="0" pn="section-appendix.a-2.13.1"><contact fullname="Jiankang Yao"/></t>
        </li>
      </ul>
      <t indent="0" pn="section-appendix.a-3">The document had broad but not unanimous approval within the IAB, reflecting
that while the guidance is valid, concerns were expressed in the IETF community
about how broadly it applies in all situations.</t>
    </section>
    <section numbered="false" anchor="acknowledgments" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-acknowledgments">Acknowledgments</name>
      <t indent="0" pn="section-appendix.b-1">Constructive feedback on this document has been provided by a
      surprising number of people including, but not limited to, the following: <contact fullname="Bernard Aboba"/>, <contact fullname="Brian Carpenter"/>,
      <contact fullname="Stuart Cheshire"/>, <contact fullname="Joel Halpern"/>, <contact fullname="Wes                               Hardaker"/>, <contact fullname="Russ       Housley"/>, <contact fullname="Cullen Jennings"/>, <contact fullname="Mallory Knodel"/>, <contact fullname="Mirja Kühlewind"/>,
      <contact fullname="Mark Nottingham"/>, <contact fullname="Eric       Rescorla"/>, <contact fullname="Henning Schulzrinne"/>, <contact fullname="Job Snijders"/>, <contact fullname="Robert Sparks"/>, <contact fullname="Dave Thaler"/>, <contact fullname="Brian Trammell"/>, and
      <contact fullname="Anne van Kesteren"/>.  Some of the properties of
      protocols described in <xref target="decay" format="default" sectionFormat="of" derivedContent="Section 4.1"/> were observed by <contact fullname="Marshall Rose"/> in <xref section="4.5" sectionFormat="of" target="RFC3117" format="default" derivedLink="https://rfc-editor.org/rfc/rfc3117#section-4.5" derivedContent="RFC3117"/>.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="M." surname="Thomson" fullname="Martin Thomson">
        <organization showOnFrontPage="true"/>
        <address>
          <email>mt@lowentropy.net</email>
        </address>
      </author>
      <author initials="D." surname="Schinazi" fullname="David Schinazi">
        <organization showOnFrontPage="true"/>
        <address>
          <email>dschinazi.ietf@gmail.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
