<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="info" consensus="true" docName="draft-ietf-detnet-bounded-latency-10" indexInclude="true" ipr="trust200902" number="9320" prepTime="2022-11-30T17:51:13" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="4" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-detnet-bounded-latency-10" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9320" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="DetNet Bounded Latency">Deterministic Networking (DetNet) Bounded Latency</title>
    <seriesInfo name="RFC" value="9320" stream="IETF"/>
    <author initials="N" surname="Finn" fullname="Norman Finn">
      <organization showOnFrontPage="true">Huawei Technologies Co. Ltd</organization>
      <address>
        <postal>
          <street>3101 Rio Way</street>
          <city>Spring Valley</city>
          <region>California</region>
          <code>91977</code>
          <country>United States of America</country>
        </postal>
        <phone>+1 925 980 6430</phone>
        <email>nfinn@nfinnconsulting.com</email>
      </address>
    </author>
    <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
      <organization showOnFrontPage="true">EPFL</organization>
      <address>
        <postal>
          <street>IC Station 14</street>
          <city>Lausanne</city>
          <code>1015</code>
          <country>Switzerland</country>
        </postal>
        <email>jean-yves.leboudec@epfl.ch</email>
      </address>
    </author>
    <author initials="E" surname="Mohammadpour" fullname="Ehsan Mohammadpour">
      <organization showOnFrontPage="true">EPFL</organization>
      <address>
        <postal>
          <street>IC Station 14</street>
          <city>Lausanne</city>
          <code>1015</code>
          <country>Switzerland</country>
        </postal>
        <email>ehsan.mohammadpour@epfl.ch</email>
      </address>
    </author>
    <author initials="J" surname="Zhang" fullname="Jiayi Zhang">
      <organization showOnFrontPage="true">Huawei Technologies Co. Ltd</organization>
      <address>
        <postal>
          <street>Q27, No.156 Beiqing Road</street>
          <city>Beijing</city>
          <code>100095</code>
          <country>China</country>
        </postal>
        <email>zhangjiayi11@huawei.com</email>
      </address>
    </author>
    <author fullname="Balázs Varga" initials="B." surname="Varga">
      <organization showOnFrontPage="true">Ericsson</organization>
      <address>
        <postal>
          <street>Konyves Kálmán krt. 11/B</street>
          <city>Budapest</city>
          <country>Hungary</country>
          <code>1097</code>
        </postal>
        <email>balazs.a.varga@ericsson.com</email>
      </address>
    </author>
    <date month="11" year="2022"/>
    <area>rtg</area>
    <workgroup>detnet</workgroup>
    <keyword>DetNet</keyword>
    <keyword>bounded latency</keyword>
    <keyword>zero congestion loss</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">
        This document presents a timing model for sources, destinations, and Deterministic Networking (DetNet) transit nodes. Using the model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing methods. The methodology can be used by the management and control planes and by resource reservation algorithms to provide bounded latency and zero congestion loss for the DetNet service. 
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for informational purposes.  
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by the
            Internet Engineering Steering Group (IESG).  Not all documents
            approved by the IESG are candidates for any level of Internet
            Standard; see Section 2 of RFC 7841. 
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9320" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2022 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology-and-definitions">Terminology and Definitions</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-detnet-bounded-latency-mode">DetNet Bounded Latency Model</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-flow-admission">Flow Admission</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.1.2">
                  <li pn="section-toc.1-1.3.2.1.2.1">
                    <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.2.1.2.1.1"><xref derivedContent="3.1.1" format="counter" sectionFormat="of" target="section-3.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-static-latency-calculation">Static Latency Calculation</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.3.2.1.2.2.1"><xref derivedContent="3.1.2" format="counter" sectionFormat="of" target="section-3.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dynamic-latency-calculation">Dynamic Latency Calculation</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-relay-node-model">Relay Node Model</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-computing-end-to-end-delay-">Computing End-to-End Delay Bounds</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-non-queuing-delay-bound">Non-queuing Delay Bound</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-queuing-delay-bound">Queuing Delay Bound</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.2.2">
                  <li pn="section-toc.1-1.4.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.1.1"><xref derivedContent="4.2.1" format="counter" sectionFormat="of" target="section-4.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-per-flow-queuing-mechanisms">Per-Flow Queuing Mechanisms</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.2.1"><xref derivedContent="4.2.2" format="counter" sectionFormat="of" target="section-4.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-aggregate-queuing-mechanism">Aggregate Queuing Mechanisms</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.3">
                <t indent="0" pn="section-toc.1-1.4.2.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ingress-considerations">Ingress Considerations</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.4">
                <t indent="0" pn="section-toc.1-1.4.2.4.1"><xref derivedContent="4.4" format="counter" sectionFormat="of" target="section-4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-interspersed-detnet-unaware">Interspersed DetNet-Unaware Transit Nodes</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-achieving-zero-congestion-l">Achieving Zero Congestion Loss</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-queuing-techniques">Queuing Techniques</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-queuing-data-model">Queuing Data Model</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-frame-preemption">Frame Preemption</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-time-aware-shaper">Time-Aware Shaper</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.4">
                <t indent="0" pn="section-toc.1-1.6.2.4.1"><xref derivedContent="6.4" format="counter" sectionFormat="of" target="section-6.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-credit-based-shaper-with-as">Credit-Based Shaper with Asynchronous Traffic Shaping</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2.4.2">
                  <li pn="section-toc.1-1.6.2.4.2.1">
                    <t indent="0" pn="section-toc.1-1.6.2.4.2.1.1"><xref derivedContent="6.4.1" format="counter" sectionFormat="of" target="section-6.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-delay-bound-calculation">Delay Bound Calculation</xref></t>
                  </li>
                  <li pn="section-toc.1-1.6.2.4.2.2">
                    <t indent="0" pn="section-toc.1-1.6.2.4.2.2.1"><xref derivedContent="6.4.2" format="counter" sectionFormat="of" target="section-6.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-flow-admission-2">Flow Admission</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.6.2.5">
                <t indent="0" pn="section-toc.1-1.6.2.5.1"><xref derivedContent="6.5" format="counter" sectionFormat="of" target="section-6.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-guaranteed-service">Guaranteed Service</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.6">
                <t indent="0" pn="section-toc.1-1.6.2.6.1"><xref derivedContent="6.6" format="counter" sectionFormat="of" target="section-6.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cyclic-queuing-and-forwardi">Cyclic Queuing and Forwarding</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-application-on-detn">Example Application on DetNet IP Network</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t indent="0" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgments">Acknowledgments</xref></t>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-contributors">Contributors</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">The ability for IETF Deterministic Networking (DetNet) or IEEE 802.1 Time-Sensitive
        Networking <xref target="IEEE8021TSN" format="default" sectionFormat="of" derivedContent="IEEE8021TSN"/> to provide the DetNet services of bounded latency and zero congestion
        loss depends upon </t>
      <ol spacing="normal" type="A" indent="adaptive" start="1" pn="section-1-2">
        <li pn="section-1-2.1" derivedCounter="A.">configuring and allocating network resources for the exclusive use of DetNet flows; </li>
        <li pn="section-1-2.2" derivedCounter="B.">identifying, in the data plane, the resources to be utilized by any given packet; and</li>
        <li pn="section-1-2.3" derivedCounter="C.">the detailed behavior of those resources, especially transmission queue selection, so that latency bounds can be reliably assured.</li>
      </ol>
      <t indent="0" pn="section-1-3">
        As explained in <xref target="RFC8655" format="default" sectionFormat="of" derivedContent="RFC8655"/>, DetNet
        flows are notably characterized by 
      </t>
      <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-1-4">
	<li pn="section-1-4.1" derivedCounter="1.">a maximum bandwidth, guaranteed either by the transmitter or by strict input metering, and </li>
        <li pn="section-1-4.2" derivedCounter="2.">a requirement for a guaranteed worst-case end-to-end latency.</li>
      </ol>
      <t indent="0" pn="section-1-5">  That latency guarantee,
        in turn, provides the opportunity for the network to supply enough buffer
        space to guarantee zero congestion loss.
        In this document, it is assumed  that the paths of DetNet flows are fixed. Before the transmission of a DetNet flow, it is possible to calculate 
        end-to-end latency bounds and the amount of buffer space required at each hop to ensure zero congestion loss; this can be used by the applications identified in <xref target="RFC8578" format="default" sectionFormat="of" derivedContent="RFC8578"/>.
      </t>
      <t indent="0" pn="section-1-6">
        This document presents a timing model for sources, destinations, and the
        DetNet transit nodes; using this model, it provides a methodology to compute end-to-end latency and backlog bounds for various queuing mechanisms that can be used by the management and control planes to provide DetNet qualities of service. The methodology used in this document accounts for the possibility of packet reordering within a DetNet node. The bounds on the amount of packet reordering is out of the scope of this document and can be found in <xref target="PacketReorderingBounds" format="default" sectionFormat="of" derivedContent="PacketReorderingBounds"/>. Moreover, this document references specific queuing mechanisms, mentioned in <xref target="RFC8655" format="default" sectionFormat="of" derivedContent="RFC8655"/>, as proofs of concept that can be used to control packet transmission at each output port and achieve the DetNet quality of service (QoS). 
      </t>
      <t indent="0" pn="section-1-7">
        Using the model presented in this document, it is possible for an
        implementer, user, or standards development organization to select
        a set of queuing mechanisms for each device in a DetNet network
        and to select a resource reservation algorithm for that network so that
        those elements can work together to provide the DetNet service. <xref target="example" format="default" sectionFormat="of" derivedContent="Section 7"/> provides an example application of the timing model introduced in this document on a DetNet IP network with a combination of different queuing mechanisms.
      </t>
      <t indent="0" pn="section-1-8">
        This document does not specify any resource reservation protocol or control plane function.
        It does not describe all of the requirements for that protocol or control plane function.
        It does describe requirements for such resource reservation methods
        and for queuing mechanisms that, if met, will enable them to work together.
      </t>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-terminology-and-definitions">Terminology and Definitions</name>
      <t indent="0" pn="section-2-1">
    This document uses the terms defined in <xref target="RFC8655" format="default" sectionFormat="of" derivedContent="RFC8655"/>. Moreover, the following terms are used in this document:
      </t>
      <dl newline="true" spacing="normal" indent="3" pn="section-2-2">
        <dt pn="section-2-2.1">T-SPEC</dt>
        <dd pn="section-2-2.2">TrafficSpecification, as defined in <xref target="RFC9016" section="5.5" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9016#section-5.5" derivedContent="RFC9016"/>.
            </dd>
        <dt pn="section-2-2.3">arrival curve</dt>
        <dd pn="section-2-2.4">An arrival curve function alpha(t) is an upper bound on the number of bits seen at an observation point within any time interval t.
            </dd>
        <dt pn="section-2-2.5">CQF</dt>
        <dd pn="section-2-2.6">Cyclic Queuing and Forwarding.
            </dd>
        <dt pn="section-2-2.7">CBS</dt>
        <dd pn="section-2-2.8">Credit-Based Shaper.
            </dd>
        <dt pn="section-2-2.9">TSN</dt>
        <dd pn="section-2-2.10">Time-Sensitive Networking.
            </dd>
        <dt pn="section-2-2.11">PREOF</dt>
        <dd pn="section-2-2.12">A collective name for Packet Replication, Elimination, and Ordering Functions.
            </dd>
        <dt pn="section-2-2.13">POF</dt>
        <dd pn="section-2-2.14">A Packet Ordering Function is a function that reorders packets within a DetNet flow that are received out of order.  This function can be implemented by a DetNet edge node, a DetNet relay node, or an end system.
            </dd>
      </dl>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-detnet-bounded-latency-mode">DetNet Bounded Latency Model</name>
      <section anchor="flow-admission" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-flow-admission">Flow Admission</name>
        <t indent="0" pn="section-3.1-1">
            This document assumes that the following paradigm is used to admit DetNet flows:
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-3.1-2">
	  <li pn="section-3.1-2.1" derivedCounter="1.">
                    Perform any configuration required by the DetNet transit nodes in the network for aggregates of DetNet flows.
                    This configuration is done beforehand and not tied to any particular DetNet flow.
                </li>
          <li pn="section-3.1-2.2" derivedCounter="2.">
                    Characterize the new DetNet flow, particularly in terms of required bandwidth.
                </li>
          <li pn="section-3.1-2.3" derivedCounter="3.">
                    Establish the path that the DetNet flow will take through the network
                    from the source to the destination(s).  This can be a point-to-point
                    or a point-to-multipoint path.
                </li>
          <li pn="section-3.1-2.4" derivedCounter="4.">
                    Compute the worst-case end-to-end latency for the DetNet flow using one
                    of the methods below (Sections <xref target="static-calculation" format="counter" sectionFormat="of" derivedContent="3.1.1"/> and
                    <xref target="dynamic-calculation" format="counter" sectionFormat="of" derivedContent="3.1.2"/>).  In the process,
                    determine whether sufficient resources are available for the DetNet flow to
                    guarantee the required latency and to provide zero congestion loss.
                </li>
          <li pn="section-3.1-2.5" derivedCounter="5.">
                    Assuming that the resources are available, commit those resources to the
                    DetNet flow.  This may require adjusting the parameters that control
                    the filtering and/or queuing mechanisms at each hop along the DetNet flow's path.
                </li>
        </ol>
        <t indent="0" pn="section-3.1-3">
            This paradigm can be implemented using peer-to-peer protocols or using a
            central controller.  In some situations, a lack of resources can require
            backtracking and recursing through the above list.
        </t>
        <t indent="0" pn="section-3.1-4">
            Issues, such as service preemption of a DetNet flow in favor of another, when
            resources are scarce, are not considered here. Also not addressed is the question of
            how to choose the path to be taken by a DetNet flow.
        </t>
        <section anchor="static-calculation" numbered="true" toc="include" removeInRFC="false" pn="section-3.1.1">
          <name slugifiedName="name-static-latency-calculation">Static Latency Calculation</name>
          <dl newline="true" spacing="normal" indent="8" pn="section-3.1.1-1">
            <dt pn="section-3.1.1-1.1">The static problem:</dt>
            <dd pn="section-3.1.1-1.2">
                        Given a network and a set of DetNet flows, compute an
                        end-to-end latency bound (if computable) for each DetNet flow and compute
                        the resources, particularly buffer space, required in each DetNet transit node
                        to achieve zero congestion loss.
                    </dd>
          </dl>
          <t indent="0" pn="section-3.1.1-2">
                In this calculation, all of the DetNet flows are known before the
                calculation commences.  This problem is of interest to relatively
                static networks or static parts of larger networks. It provides 
                bounds on latency and buffer size.  The calculations can be extended
                to provide global optimizations, such as altering the path of one
                DetNet flow in order to make resources available to another DetNet
                flow with tighter constraints.
          </t>
          <t indent="0" pn="section-3.1.1-3">
                This calculation may be more difficult to perform than the
                dynamic calculation (<xref target="dynamic-calculation" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>) because the
                DetNet flows passing through one port on a DetNet transit node affect each other's
                latency.  The effects can even be circular, from node A to B to C
                and back to A.  On the other hand, the static calculation can often
                accommodate queuing methods, such as transmission selection by
                strict priority, that are unsuitable for the dynamic calculation.
          </t>
        </section>
        <section anchor="dynamic-calculation" numbered="true" toc="include" removeInRFC="false" pn="section-3.1.2">
          <name slugifiedName="name-dynamic-latency-calculation">Dynamic Latency Calculation</name>
          <dl newline="true" spacing="normal" indent="8" pn="section-3.1.2-1">
            <dt pn="section-3.1.2-1.1">The dynamic problem:</dt>
            <dd pn="section-3.1.2-1.2">
                        Given a network whose maximum capacity for DetNet flows is
                        bounded by a set of static configuration parameters applied to the
                        DetNet transit nodes and given just one DetNet flow, compute the worst-case
                        end-to-end latency that can be experienced by that flow, no
                        matter what other DetNet flows (within the network's configured parameters)
                        might be created or deleted in the future.  Also, compute the resources,
                        particularly buffer space, required in each DetNet transit node
                        to achieve zero congestion loss.
                    </dd>
          </dl>
          <t indent="0" pn="section-3.1.2-2">
                This calculation is dynamic, in the sense that DetNet flows can be added or deleted
                at any time, with a minimum of computation effort and without affecting
                the guarantees already given to other DetNet flows.
          </t>
          <t indent="0" pn="section-3.1.2-3">
                Dynamic latency calculation can be done based on the static one described in <xref target="static-calculation" format="default" sectionFormat="of" derivedContent="Section 3.1.1"/>;
                when a new DetNet flow is created or deleted, the entire calculation for all DetNet flows is
                repeated.  If an already-established DetNet flow would be pushed beyond its latency
                requirements by the new DetNet flow request, then the new DetNet flow request can be refused
                or some other suitable action can be taken.
          </t>
          <t indent="0" pn="section-3.1.2-4">
                The choice of queuing methods is critical to the applicability of the
                dynamic calculation.  Some queuing methods (e.g., CQF, <xref target="cqf" format="default" sectionFormat="of" derivedContent="Section 6.6"/>) make
                it easy to configure bounds on the network's capacity and to make
                independent calculations for each DetNet flow. Some other queuing methods (e.g., strict priority with the credit-based shaper
                defined in Section 8.6.8.2 of <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>) can be used for dynamic DetNet flow creation
                but yield poorer latency and buffer space guarantees than when that same
                queuing method is used for static DetNet flow creation
                (<xref target="static-calculation" format="default" sectionFormat="of" derivedContent="Section 3.1.1"/>).
          </t>
        </section>
      </section>
      <section anchor="relay_model" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-relay-node-model">Relay Node Model</name>
        <t indent="0" pn="section-3.2-1">A model for the operation of a DetNet transit node is required in order to
            define the latency and buffer calculations.
            In <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>, we see a breakdown of the per-hop latency experienced by a packet passing through a DetNet transit node in
        terms that are suitable for computing both hop-by-hop latency and per-hop buffer requirements.</t>
        <figure anchor="fig_timing_model" align="left" suppress-title="false" pn="figure-1">
          <name slugifiedName="name-timing-model-for-detnet-or-">Timing Model for DetNet or TSN</name>
          <artwork align="center" name="" type="" alt="" pn="section-3.2-2.1">
      DetNet transit node A            DetNet transit node B
   +-------------------------+       +------------------------+
   |              Queuing    |       |              Queuing   |
   |   Regulator subsystem   |       |   Regulator subsystem  |
   |   +-+-+-+-+ +-+-+-+-+   |       |   +-+-+-+-+ +-+-+-+-+  |
--&gt;+   | | | | | | | | | +   +------&gt;+   | | | | | | | | | +  +---&gt;
   |   +-+-+-+-+ +-+-+-+-+   |       |   +-+-+-+-+ +-+-+-+-+  |
   |                         |       |                        |
   +-------------------------+       +------------------------+
   |&lt;-&gt;|&lt;------&gt;|&lt;-------&gt;|&lt;-&gt;|&lt;----&gt;|&lt;-&gt;|&lt;------&gt;|&lt;------&gt;|&lt;-&gt;|&lt;--
2,3  4      5        6      1    2,3   4      5        6     1   2,3
          1: Output delay             4: Processing delay
          2: Link delay               5: Regulation delay
          3: Frame preemption delay   6: Queuing subsystem delay
</artwork>
        </figure>
        <t indent="0" pn="section-3.2-3">In <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>, we see two DetNet transit nodes that are connected via a link. In this model, the only queues that we deal
                with explicitly are attached to the output port; other queues are modeled as variations
                in the other delay times (e.g., an input queue could be modeled as either a variation
                in the link delay (2) or the processing delay (4)).  There are six delays that a packet
                can experience from hop to hop.</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-3.2-4">
          <li pn="section-3.2-4.1" derivedCounter="1.">
            <t indent="0" pn="section-3.2-4.1.1">Output delay</t>
            <t indent="0" pn="section-3.2-4.1.2">
            This is the time taken from the selection of a packet for output from
	    a queue to the
                    transmission of the first bit of the packet on the physical link.  If the
                    queue is directly attached to the physical port, output delay can be a constant.
		    However, in many implementations, a multiplexed connection separates the queuing mechanism from a multi-port Network Interface Card (NIC).
                    This causes variations in the output delay that are hard for the forwarding node
                    to predict or control.
            </t>
          </li>
          <li pn="section-3.2-4.2" derivedCounter="2.">
            <t indent="0" pn="section-3.2-4.2.1">Link delay</t>
            <t indent="0" pn="section-3.2-4.2.2">
            This is the time taken from the transmission of the first bit of the
	    packet to the
                    reception of the last bit, assuming that the transmission is not suspended by
                    a frame preemption event.  This delay has two components: the first-bit-out to first-bit-in delay and the first-bit-in to last-bit-in delay that varies with packet  size.  The former is typically constant.  However,
                    a virtual "link" could exhibit a variable link delay.</t>
          </li>
          <li pn="section-3.2-4.3" derivedCounter="3.">
            <t indent="0" pn="section-3.2-4.3.1">Frame preemption delay</t>
            <t indent="0" pn="section-3.2-4.3.2">
            If the packet is interrupted in order to transmit another packet or packets
	    (e.g., frame preemption, as in <xref target="IEEE8023" format="default" sectionFormat="of" derivedContent="IEEE8023"/>, clause 99),
                    an arbitrary delay can result.</t>
          </li>
          <li pn="section-3.2-4.4" derivedCounter="4.">
            <t indent="0" pn="section-3.2-4.4.1">Processing delay</t>
            <t indent="0" pn="section-3.2-4.4.2">
                    This delay covers the time from the reception of the last bit of the packet to the
                    time the packet is enqueued in the regulator (queuing subsystem if there is no regulator), as shown in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>.
                    This delay can be variable and depends on the details of the operation of the forwarding node.</t>
          </li>
          <li pn="section-3.2-4.5" derivedCounter="5.">
            <t indent="0" pn="section-3.2-4.5.1">Regulator queuing delay</t>
            <t indent="0" pn="section-3.2-4.5.2">
                    A regulator, also known as shaper in <xref target="RFC2475" format="default" sectionFormat="of" derivedContent="RFC2475"/>, delays some or all of the packets in a traffic stream in order to bring the stream into compliance with an arrival curve; an arrival curve 'alpha(t)' is an upper bound on the number of bits observed within any interval t. The regulator delay is the time spent from the insertion of the last bit of a packet into a regulation queue until the time the packet is declared eligible according to its regulation constraints. We assume that this time can be calculated based on the details of regulation policy. If there is no regulation, this time is zero.</t>
          </li>
          <li pn="section-3.2-4.6" derivedCounter="6.">
            <t indent="0" pn="section-3.2-4.6.1">Queuing subsystem delay</t>
            <t indent="0" pn="section-3.2-4.6.2">
                    This is the time spent for a packet from being declared eligible until being
                    selected for output on the next link.  We assume that this time is
                    calculable based on the details of the queuing mechanism. If there is no regulation, this time is from the insertion 
                    of the packet into a queue until it is selected for output on the next link.
            </t>
          </li>
        </ol>
        <t indent="0" pn="section-3.2-5">Not shown in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/> are the other output queues that we
                presume are also attached to that same output port as the queue shown, and against
                which this shown queue competes for transmission opportunities.</t>
        <t indent="0" pn="section-3.2-6">In this analysis, the measurement is from the point at which a packet is selected for output in a node to the point at which it is selected for output in the next downstream node (i.e., the definition of a "hop").  In general,
                any queue selection method that is suitable for use in a DetNet network includes
                a detailed specification as to exactly when packets are selected for transmission.
                Any variations in any of the delay times 1-4 result in a need for additional
                buffers in the queue.  If all delays 1-4 are constant, then any variation in the
                time at which packets are inserted into a queue depends entirely on the timing
                of packet selection in the previous node.  If delays 1-4 are not constant,
                then additional buffers are required in the queue to absorb these variations.
                Thus:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.2-7">
          <li pn="section-3.2-7.1">Variations in the output delay (1) require buffers to absorb that variation
                        in the next hop, so the output delay variations of the previous hop (on each
                        input port) must be known in order to calculate the buffer space required
                        on this hop.</li>
          <li pn="section-3.2-7.2">Variations in the processing delay (4) require additional output buffers
                        in the queues of that same DetNet transit node.  Depending on the details
                        of the queuing subsystem delay (6) calculations, these variations need not be
                        visible outside the DetNet transit node.
                    </li>
        </ul>
      </section>
    </section>
    <section anchor="e2eLatency" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-computing-end-to-end-delay-">Computing End-to-End Delay Bounds</name>
      <section anchor="nonqueuing" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-non-queuing-delay-bound">Non-queuing Delay Bound</name>
        <t indent="0" pn="section-4.1-1">End-to-end latency bounds can be computed using the delay model in <xref target="relay_model" format="default" sectionFormat="of" derivedContent="Section 3.2"/>. Here, it is important
        to be aware that, for several queuing mechanisms, the end-to-end latency bound is less than the sum of the
        per-hop latency bounds.
        An end-to-end latency bound for one DetNet flow
        can be computed as
        </t>
        <t indent="3" pn="section-4.1-2"> end_to_end_delay_bound = non_queuing_delay_bound + queuing_delay_bound
        </t>
        <t indent="0" pn="section-4.1-3">The two terms in the above formula are computed as follows. </t>
        <t indent="0" pn="section-4.1-4">
        First, at the h-th hop along the path of this DetNet flow, obtain an upper-bound
        per-hop_non_queuing_delay_bound[h] on the sum of the bounds over delays
        1, 2, 3, and 4
        of  <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>. These upper bounds are expected to
        depend on the specific technology of the DetNet transit node at the h-th hop but not on
        the T-SPEC of this DetNet flow <xref target="RFC9016" format="default" sectionFormat="of" derivedContent="RFC9016"/>. Then, set non_queuing_delay_bound = the sum
        of per-hop_non_queuing_delay_bound[h] over all hops h. 
        </t>
        <t indent="0" pn="section-4.1-5">
        Second, compute queuing_delay_bound as an upper bound to the sum of the
        queuing delays along the path. The value of queuing_delay_bound depends
        on the information on the arrival curve of this DetNet flow and possibly
        of other flows in the network, as well as the specifics of the queuing
        mechanisms deployed along the path of this DetNet flow. Note that arrival curve of the DetNet flow at the source is immediately specified by the T-SPEC of this flow. The computation of queuing_delay_bound 
        is described in <xref target="queuing" format="default" sectionFormat="of" derivedContent="Section 4.2"/> as a separate section.
        </t>
      </section>
      <section anchor="queuing" numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-queuing-delay-bound">Queuing Delay Bound</name>
        <t indent="0" pn="section-4.2-1">
        For several queuing mechanisms, queuing_delay_bound is less than the sum of upper bounds on the queuing delays (5 and 6)
        at every hop.  This occurs with (1) per-flow queuing and (2) aggregate queuing with regulators, as explained in Sections <xref target="perflow" format="counter" sectionFormat="of" derivedContent="4.2.1"/>, <xref target="perclass" format="counter" sectionFormat="of" derivedContent="4.2.2"/>, and <xref target="queue_model" format="counter" sectionFormat="of" derivedContent="6"/>. For other queuing mechanisms, the only available value of queuing_delay_bound
        is the sum of the per-hop queuing delay bounds.
        </t>
        <t indent="0" pn="section-4.2-2">
        The computation of per-hop queuing delay bounds must account for the fact that the arrival curve of a DetNet flow is no longer satisfied at the ingress of a hop, since burstiness increases as one flow traverses one DetNet transit node. If a regulator is placed at a hop, an arrival curve of a DetNet flow at the entrance of the queuing subsystem of this hop is the one configured at the regulator (also called shaping curve in <xref target="NetCalBook" format="default" sectionFormat="of" derivedContent="NetCalBook"/>); otherwise, an arrival curve of the flow can be derived using the delay jitter of the flow from the last regulation point (the last regulator in the path of the flow if there is any, otherwise the source of the flow) to the ingress of the hop; more formally, assume a DetNet flow has an arrival curve at the last regulation point equal to 'alpha(t)' and the delay jitter from the last regulation point to the ingress of the hop is 'V'. Then, the arrival curve at the ingress of the hop is 'alpha(t+V)'. 
        </t>
        <t indent="0" pn="section-4.2-3">
        For example, consider a DetNet flow with T-SPEC "Interval: tau, MaxPacketsPerInterval: K, MaxPayloadSize: L" at the source. Then, a leaky-bucket arrival curve for such flow at the source is alpha(t)=r * t+ b, t&gt;0; alpha(0)=0, where r is the rate and b is the bucket size, computed as
        </t>
        <t indent="3" pn="section-4.2-4">r =  K * (L+L') / tau,
        </t>
        <t indent="3" pn="section-4.2-5">b = K * (L+L').
        </t>
        <t indent="0" pn="section-4.2-6"> 
        where L' is the size of any added networking technology-specific encapsulation (e.g., MPLS label(s), UDP, or IP headers). Now, if the flow has a delay jitter of 'V' from the last regulation point to the ingress of a hop, an arrival curve at this point is r * t + b + r * V, implying that the burstiness is increased by r*V. More detailed information on arrival curves is available in <xref target="NetCalBook" format="default" sectionFormat="of" derivedContent="NetCalBook"/>.
        </t>
        <section anchor="perflow" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.1">
          <name slugifiedName="name-per-flow-queuing-mechanisms">Per-Flow Queuing Mechanisms</name>
          <t indent="0" pn="section-4.2.1-1">
            With such mechanisms, each flow uses a separate queue inside every node. The service for each queue is abstracted with a guaranteed rate and a latency. For every DetNet flow, a per-node latency bound, as well as an end-to-end latency bound, can be computed from the traffic specification of this DetNet flow at its source and from the values of rates and latencies at all nodes along its path. An instance of per-flow queuing is Guaranteed Service <xref target="RFC2212" format="default" sectionFormat="of" derivedContent="RFC2212"/>, for which the details of latency bound calculation are presented in <xref target="intserv" format="default" sectionFormat="of" derivedContent="Section 6.5"/>.
          </t>
        </section>
        <section anchor="perclass" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.2">
          <name slugifiedName="name-aggregate-queuing-mechanism">Aggregate Queuing Mechanisms</name>
          <t indent="0" pn="section-4.2.2-1">
                With such mechanisms, multiple flows are aggregated into macro-flows and there is one FIFO queue per macro-flow. A practical example is the credit-based shaper defined in Section 8.6.8.2 of <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>, where a macro-flow is called a "class".  One key issue in this context is how to deal with the burstiness cascade; individual flows that share a resource dedicated to a macro-flow may see their burstiness increase, which may in turn cause increased burstiness to other flows downstream of this resource. Computing delay upper bounds for such cases is difficult and, in some conditions, impossible <xref target="CharnyDelay" format="default" sectionFormat="of" derivedContent="CharnyDelay"/> <xref target="BennettDelay" format="default" sectionFormat="of" derivedContent="BennettDelay"/>. Also, when bounds are obtained, they depend on the complete configuration and must be recomputed when one flow is added (i.e., the dynamic calculation in <xref target="dynamic-calculation" format="default" sectionFormat="of" derivedContent="Section 3.1.2"/>).
          </t>
          <t indent="0" pn="section-4.2.2-2">
                A solution to deal with this issue for the DetNet flows is to reshape them at every hop. This can be done with per-flow regulators (e.g., leaky-bucket shapers), but this requires per-flow queuing and defeats the purpose of aggregate queuing. An alternative is the interleaved regulator, which reshapes individual DetNet flows without per-flow queuing <xref target="SpechtUBS" format="default" sectionFormat="of" derivedContent="SpechtUBS"/> <xref target="IEEE8021Qcr" format="default" sectionFormat="of" derivedContent="IEEE8021Qcr"/>. With  an interleaved regulator, the packet at the head of the queue is regulated based on
its (flow) regulation constraints; it is released at the earliest time at which this is possible without violating the constraint. One key feature of a per-flow or interleaved regulator is that it does not increase worst-case latency bounds <xref target="LeBoudecTheory" format="default" sectionFormat="of" derivedContent="LeBoudecTheory"/>. Specifically, when an interleaved regulator is appended to a FIFO subsystem, it does not increase the worst-case delay of the latter. In <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>, when the order of packets from the output of a queuing subsystem at node A to the entrance of a regulator at node B is preserved, then the regulator does not increase the worst-case latency bounds. This is made possible if all the systems are FIFO or a DetNet Packet Ordering Function (POF) is implemented just before the regulator. This property does not hold if packet reordering occurs from the output of a queuing subsystem to the entrance of the next downstream interleaved regulator, e.g., at a non-FIFO switching fabric.
          </t>
          <t indent="0" pn="section-4.2.2-3">
                <xref target="fig_detnet_e2e_example" format="default" sectionFormat="of" derivedContent="Figure 2"/> shows an example of a network with 5 nodes, an aggregate queuing mechanism, and interleaved regulators, as in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>. 
                An end-to-end delay bound for DetNet flow f, traversing nodes 1 to 5, is calculated as follows:
          </t>
          <t indent="3" pn="section-4.2.2-4"> end_to_end_latency_bound_of_flow_f = C12 + C23 + C34 + S4
          </t>
          <t indent="0" pn="section-4.2.2-5">
                In the above formula, Cij is a bound on the delay of the queuing subsystem in node i and interleaved regulator of node j, 
                and S4 is a bound on the delay of the queuing subsystem in node 4 for DetNet flow f. In fact, using the delay definitions in 
                <xref target="relay_model" format="default" sectionFormat="of" derivedContent="Section 3.2"/>, Cij is a bound on a sum of delays 1, 2, 3, and 6 of node i and delays 4 and 5 of node j. Similarly, S4 is a bound on 
                sum of delays 1, 2, 3, and 6 of node 4. A practical example of the queuing model and delay calculation is presented <xref target="TSNwithATSmodel" format="default" sectionFormat="of" derivedContent="Section 6.4"/>. 
          </t>
          <figure anchor="fig_detnet_e2e_example" align="left" suppress-title="false" pn="figure-2">
            <name slugifiedName="name-end-to-end-delay-computatio">End-to-End Delay Computation Example</name>
            <artwork align="center" name="" type="" alt="" pn="section-4.2.2-6.1">
            f
  -----------------------------&gt;
+---+   +---+   +---+   +---+   +---+
| 1 |---| 2 |---| 3 |---| 4 |---| 5 |
+---+   +---+   +---+   +---+   +---+
   \__C12_/\__C23_/\__C34_/\_S4_/
</artwork>
          </figure>
          <t indent="0" pn="section-4.2.2-7">
                If packet reordering does not occur, the end-to-end latency bound calculation provided here gives a tighter latency upper bound than would be obtained by adding the latency bounds of each node in the path of a DetNet flow <xref target="TSNwithATS" format="default" sectionFormat="of" derivedContent="TSNwithATS"/>.
          </t>
        </section>
      </section>
      <section anchor="ingress" numbered="true" toc="include" removeInRFC="false" pn="section-4.3">
        <name slugifiedName="name-ingress-considerations">Ingress Considerations</name>
        <t indent="0" pn="section-4.3-1">
            A sender can be a DetNet node that uses exactly the same queuing methods as its adjacent DetNet transit node so that the latency and buffer bounds calculations at the first hop are indistinguishable from those at a later hop within the DetNet domain. On the other hand, the sender may be DetNet unaware; in which case, some conditioning of the DetNet flow may be necessary at the ingress DetNet transit node. The ingress conditioning typically consists of the regulators described in <xref target="relay_model" format="default" sectionFormat="of" derivedContent="Section 3.2"/>.
        </t>
      </section>
      <section anchor="non-detnet-nodes" numbered="true" toc="include" removeInRFC="false" pn="section-4.4">
        <name slugifiedName="name-interspersed-detnet-unaware">Interspersed DetNet-Unaware Transit Nodes</name>
        <t indent="0" pn="section-4.4-1">
            It is sometimes desirable to build a network that has both DetNet-aware
            transit nodes and DetNet-unaware transit nodes and for a DetNet flow to
            traverse an island of DetNet-unaware transit nodes while still allowing the
            network to offer delay and congestion loss guarantees.  This is possible
            under certain conditions.
        </t>
        <t indent="0" pn="section-4.4-2">
            In general, when passing through a DetNet-unaware island, the island may cause
            delay variation in excess of what would be caused by DetNet nodes.  That
            is, the DetNet flow might be "lumpier" after traversing the DetNet-unaware island.
            DetNet guarantees for delay and buffer requirements can still be
            calculated and met if and only if the following are true:
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-4.4-3">
	  <li pn="section-4.4-3.1" derivedCounter="1.">
                    The latency variation across the DetNet-unaware island must be
                    bounded and calculable.
                </li>
          <li pn="section-4.4-3.2" derivedCounter="2.">
                    An ingress conditioning function (<xref target="ingress" format="default" sectionFormat="of" derivedContent="Section 4.3"/>)
                    is required at the reentry to the DetNet-aware domain.
                    This will, at least, require some extra buffering to accommodate
                    the additional delay variation and thus further increases the
                    latency bound.
                </li>
        </ol>
        <t indent="0" pn="section-4.4-4">
            The ingress conditioning is exactly the same problem as that of a sender
            at the edge of the DetNet domain.  The requirement for bounds on the
            latency variation across the DetNet-unaware island is typically the most
            difficult to achieve.  Without such a bound, it is obvious that DetNet
            cannot deliver its guarantees, so a DetNet-unaware island that cannot
            offer bounded latency variation cannot be used to carry a DetNet flow.
        </t>
      </section>
    </section>
    <section anchor="achieving" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-achieving-zero-congestion-l">Achieving Zero Congestion Loss</name>
      <t indent="0" pn="section-5-1">
        When the input rate to an output queue exceeds the output rate for a sufficient
        length of time, the queue must overflow.  This is congestion loss, and this is
        what DetNet seeks to avoid.
      </t>
      <t indent="0" pn="section-5-2">
        To avoid congestion losses, an upper bound on the backlog present in the regulator and queuing subsystem of <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>
    must be computed during resource reservation. This bound depends on the set of flows that use these queues, 
    the details of the specific queuing mechanism, and an 
    upper bound on the processing delay (4). The queue must contain the packet in transmission, plus all other packets that
    are waiting to be selected for output. A conservative backlog  bound that applies to all systems can be derived as follows.  
      </t>
      <t indent="0" pn="section-5-3">
    The backlog bound is counted in data units (bytes or words of multiple bytes) that are relevant for buffer allocation.
    For every flow or an aggregate of flows, we need one buffer space for the packet in transmission, plus space for the packets that are waiting to be selected for output.
      </t>
      <t indent="0" pn="section-5-4">Let 
      </t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5-5">
        <li pn="section-5-5.1"> total_in_rate be the sum of the line rates of all input ports that send traffic to this output port. The value of total_in_rate
    is in data units (e.g., bytes) per second. 
    </li>
        <li pn="section-5-5.2">nb_input_ports be the number of input ports that send traffic to this output port.</li>
        <li pn="section-5-5.3">max_packet_length be the maximum packet size for packets that may be sent to this output port. This is counted in data units.
    </li>
        <li pn="section-5-5.4">max_delay456 be an upper bound, in seconds, on the sum of the processing delay (4) and the queuing delays (5 and 6) for any packet
     at this output port.
    </li>
      </ul>
      <t indent="0" pn="section-5-6">Then, a bound on the backlog of traffic in the queue at this output port is</t>
      <t indent="3" pn="section-5-7"> backlog_bound = (nb_input_ports *  max_packet_length)  + (total_in_rate * max_delay456)
      </t>
      <t indent="0" pn="section-5-8">The above bound is over the backlog caused by the traffic entering the queue from the input ports of a DetNet node. If the DetNet node also generates packets (e.g., creation of new packets or replication of arriving packets), the bound must accordingly incorporate the introduced backlog.</t>
    </section>
    <section anchor="queue_model" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-queuing-techniques">Queuing Techniques</name>
      <t indent="0" pn="section-6-1">In this section, we present a general queuing data model, as well as some examples of queuing mechanisms. For simplicity of latency bound computation, we assume a leaky-bucket arrival curve for each DetNet flow at the source.
     Also, at each DetNet transit node, the service for each queue is abstracted with a minimum guaranteed rate and a latency <xref target="NetCalBook" format="default" sectionFormat="of" derivedContent="NetCalBook"/>.</t>
      <section anchor="data_model" numbered="true" toc="include" removeInRFC="false" pn="section-6.1">
        <name slugifiedName="name-queuing-data-model">Queuing Data Model</name>
        <t indent="0" pn="section-6.1-1">Sophisticated queuing mechanisms are available in Layer 3 (L3) (e.g., see <xref target="RFC7806" format="default" sectionFormat="of" derivedContent="RFC7806"/> for an overview).
        In general, we assume that "Layer 3" queues, shapers, meters, etc., are precisely the "regulators"
        shown in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The "queuing subsystems" in this figure are FIFO. They are not the province solely of bridges;
        they are an essential part of any DetNet transit node.  As illustrated by numerous implementation examples, some of the
        "Layer 3" mechanisms described in documents, such as <xref target="RFC7806" format="default" sectionFormat="of" derivedContent="RFC7806"/>, are often integrated
        in an implementation, with the "Layer 2" mechanisms also implemented in the same node.  An integrated model
        is needed in order to successfully predict the interactions among the different queuing mechanisms
        needed in a network carrying both DetNet flows and non-DetNet flows.
        </t>
        <t indent="0" pn="section-6.1-2"><xref target="fig_8021Q_data_model" format="default" sectionFormat="of" derivedContent="Figure 3"/> shows the general model for the flow of packets through
    the queues of a DetNet transit node. The DetNet packets are mapped to a number of regulators. Here, we assume that the Packet Replication, Elimination, and Ordering Functions (PREOF) are performed before the DetNet packets enter the regulators.
     All packets are assigned to a set of queues.  Packets compete for the selection to be passed to queues in the queuing subsystem. Packets again are selected for output from the
    queuing subsystem.
        </t>
        <figure anchor="fig_8021Q_data_model" align="left" suppress-title="false" pn="figure-3">
          <name slugifiedName="name-ieee-8021q-queuing-model-da">IEEE 802.1Q Queuing Model: Data Flow</name>
          <artwork align="center" name="" type="" alt="" pn="section-6.1-3.1">
                                 |
+--------------------------------V----------------------------------+
|                          Queue assignment                         |
+--+------+----------+---------+-----------+-----+-------+-------+--+
   |      |          |         |           |     |       |       |
+--V-+ +--V-+     +--V--+   +--V--+     +--V--+  |       |       |
|Flow| |Flow|     |Flow |   |Flow |     |Flow |  |       |       |
|  0 | |  1 | ... |  i  |   | i+1 | ... |  n  |  |       |       |
| reg| | reg|     | reg |   | reg |     | reg |  |       |       |
+--+-+ +--+-+     +--+--+   +--+--+     +--+--+  |       |       |
   |      |          |         |           |     |       |       |
+--V------V----------V--+   +--V-----------V--+  |       |       |
|  Trans.  selection    |   | Trans. select.  |  |       |       |
+----------+------------+   +-----+-----------+  |       |       |
           |                      |              |       |       |
        +--V--+                +--V--+        +--V--+ +--V--+ +--V--+
        | out |                | out |        | out | | out | | out |
        |queue|                |queue|        |queue| |queue| |queue|
        |  1  |                |  2  |        |  3  | |  4  | |  5  |
        +--+--+                +--+--+        +--+--+ +--+--+ +--+--+
           |                      |              |       |       |
+----------V----------------------V--------------V-------V-------V--+
|                      Transmission selection                       |
+---------------------------------+---------------------------------+
                                  |
                                  V
</artwork>
        </figure>
        <t indent="0" pn="section-6.1-4">Some relevant mechanisms are hidden in this figure and are performed in the
        queue boxes:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.1-5">
          <li pn="section-6.1-5.1">discarding packets because a queue is full
        </li>
          <li pn="section-6.1-5.2">
            discarding packets marked "yellow" by a metering function in preference
            to discarding "green" packets <xref target="RFC2697" format="default" sectionFormat="of" derivedContent="RFC2697"/>
          </li>
        </ul>
        <t indent="0" pn="section-6.1-6">
        Ideally, neither of these actions are performed on DetNet packets.  Full queues
        for DetNet packets occur only when a DetNet flow is misbehaving, and the DetNet
        QoS does not include "yellow" service for packets in excess
	of a committed rate.
        </t>
        <t indent="0" pn="section-6.1-7">
        The queue assignment function can be quite complex, even in a
        bridge <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>, because of the
        introduction of per-stream filtering and policing (<xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>, clause 8.6.5.1).
        In addition to the Layer 2 priority
        expressed in the 802.1Q VLAN tag, a DetNet transit node can utilize the information from the non-exhaustive list below to assign a packet to a particular queue:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.1-8">
          <li pn="section-6.1-8.1">
                input port
            </li>
          <li pn="section-6.1-8.2">
                selector based on a rotating schedule that starts at regular, time-synchronized
                intervals and has nanosecond precision
            </li>
          <li pn="section-6.1-8.3">
                MAC addresses, VLAN ID, IP addresses, Layer 4 port numbers, and Differentiated Services Code Point (DSCP) <xref target="RFC8939" format="default" sectionFormat="of" derivedContent="RFC8939"/> <xref target="RFC8964" format="default" sectionFormat="of" derivedContent="RFC8964"/>
          </li>
          <li pn="section-6.1-8.4">
                the queue assignment function can contain metering and policing
                functions
            </li>
          <li pn="section-6.1-8.5">
                MPLS and/or pseudowire labels <xref target="RFC6658" format="default" sectionFormat="of" derivedContent="RFC6658"/>
          </li>
        </ul>
        <t indent="0" pn="section-6.1-9">
        The "Transmission selection" function decides which queue is to transfer its
        oldest packet to the output port when a transmission opportunity arises.
        </t>
      </section>
      <section anchor="preempt_intro" numbered="true" toc="include" removeInRFC="false" pn="section-6.2">
        <name slugifiedName="name-frame-preemption">Frame Preemption</name>
        <t indent="0" pn="section-6.2-1">
    In <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/> and <xref target="IEEE8023" format="default" sectionFormat="of" derivedContent="IEEE8023"/>, the transmission of a frame
    can be interrupted by one or more "express" frames; then, the interrupted frame can
    continue transmission.  The frame preemption is modeled as
    consisting of two MAC/PHY stacks: one for packets that
    can be interrupted and one for packets that can interrupt the interruptible packets.
    Only one layer of frame preemption is supported -- a transmitter cannot have more than one
    interrupted frame in progress.  DetNet flows typically pass through the interrupting
    MAC. For those DetNet flows with T-SPEC, latency bounds can be 
    calculated by the methods provided in the following sections that account for the effect of frame preemption, according to the specific 
    queuing mechanism that is used in DetNet nodes. Best-effort queues pass through the 
    interruptible MAC and can thus be preempted.
        </t>
      </section>
      <section anchor="time_schedule_intro" numbered="true" toc="include" removeInRFC="false" pn="section-6.3">
        <name slugifiedName="name-time-aware-shaper">Time-Aware Shaper</name>
        <t indent="0" pn="section-6.3-1">
            In <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>, the notion of time-scheduling queue gates is
            described in Section 8.6.8.4. On each node, the transmission selection for packets 
            is controlled by time-synchronized gates; each output queue is associated with a gate.
            The gates can be either open or closed. The states of the gates are
            determined by the gate control list (GCL). The GCL specifies the opening and closing
            times of the gates. The design of the GCL must satisfy the requirement of 
            latency upper bounds of all DetNet flows; therefore, those DetNet flows that traverse a 
            network that uses this kind of shaper must have bounded latency if the traffic and nodes are conformant.
        </t>
        <t indent="0" pn="section-6.3-2">
            Note that scheduled traffic service relies on a synchronized
            network and coordinated GCL configuration. Synthesis of the GCL on multiple
            nodes in a network is a scheduling problem considering all DetNet flows
            traversing the network, which is a nondeterministic polynomial-time hard
            (NP-hard) problem <xref target="Sch8021Qbv" format="default" sectionFormat="of" derivedContent="Sch8021Qbv"/>. Also, at the time of writing, scheduled traffic service
            supports no more than eight traffic queues, typically using up to seven
            priority queues and at least one best effort.
        </t>
      </section>
      <section anchor="TSNwithATSmodel" numbered="true" toc="include" removeInRFC="false" pn="section-6.4">
        <name slugifiedName="name-credit-based-shaper-with-as">Credit-Based Shaper with Asynchronous Traffic Shaping</name>
        <t indent="0" pn="section-6.4-1">
            In this queuing model, it is assumed that the DetNet nodes are FIFO. We consider the four traffic classes (Definition 3.268 of <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>): control-data traffic (CDT),
            class A, class B, and best effort (BE) in decreasing order of priority. Flows of classes A and B are DetNet flows that are less critical than CDT (such as studio audio and video traffic, as in IEEE 802.1BA Audio-Video-Bridging). This model is a subset of Time-Sensitive Networking, as described next.
        </t>
        <t indent="0" pn="section-6.4-2">
            Based on the timing model described in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>, contention occurs only at the output port of a DetNet transit node; therefore, the focus of the rest of this subsection is on the regulator and queuing subsystem in the output port of a DetNet transit node. The input flows are identified using the information in (<xref target="RFC8939" section="5.1" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8939#section-5.1" derivedContent="RFC8939"/>). Then, they are aggregated into eight macro-flows based
            on their service requirements; we refer to each macro-flow as a class.
             The output port performs aggregate scheduling with eight queues (queuing subsystems): one for CDT, one for class A flows, one for class B flows, and five for BE traffic denoted as BE0-BE4. The queuing policy for each queuing subsystem is FIFO. In addition, each node output port also performs per-flow regulation for 
            class A and B flows using an interleaved regulator (IR). This regulation is called 
   asynchronous traffic shaping <xref target="IEEE8021Qcr" format="default" sectionFormat="of" derivedContent="IEEE8021Qcr"/>. Thus, at each output port of a node, there is one interleaved regulator per input 
            port and per class; the interleaved regulator is mapped to the regulator depicted in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The detailed picture of scheduling and regulation architecture at a node output port is given by <xref target="fig_TSN_node" format="default" sectionFormat="of" derivedContent="Figure 4"/>. The packets received at a node input port for a given class are enqueued in the respective interleaved regulator at the output port.
            Then, the packets from all the flows, including CDT and BE flows, are enqueued in a queuing subsystem; there is no regulator for CDT and BE flows.
        </t>
        <figure anchor="fig_TSN_node" align="left" suppress-title="false" pn="figure-4">
          <name slugifiedName="name-the-architecture-of-an-outp">The Architecture of an Output Port inside a Relay Node with Interleaved Regulators (IRs) and a Credit-Based Shaper (CBS)</name>
          <artwork name="" type="" align="left" alt="" pn="section-6.4-3.1">
      +--+   +--+ +--+   +--+
      |  |   |  | |  |   |  |
      |IR|   |IR| |IR|   |IR|
      |  |   |  | |  |   |  |
      +-++XXX++-+ +-++XXX++-+
        |     |     |     |
        |     |     |     |
+---+ +-v-XXX-v-+ +-v-XXX-v-+ +-----+ +-----+ +-----+ +-----+ +-----+
|   | |         | |         | |Class| |Class| |Class| |Class| |Class|
|CDT| | Class A | | Class B | | BE4 | | BE3 | | BE2 | | BE1 | | BE0 |
|   | |         | |         | |     | |     | |     | |     | |     |
+-+-+ +----+----+ +----+----+ +--+--+ +--+--+ +--+--+ +--+--+ +--+--+
  |        |           |         |       |       |       |       |
  |      +-v-+       +-v-+       |       |       |       |       |
  |      |CBS|       |CBS|       |       |       |       |       |
  |      +-+-+       +-+-+       |       |       |       |       |
  |        |           |         |       |       |       |       |
+-v--------v-----------v---------v-------V-------v-------v-------v--+
|                     Strict Priority selection                     |
+--------------------------------+----------------------------------+
                                 |
                                 V
</artwork>
        </figure>
        <t indent="0" pn="section-6.4-4">
            Each of the queuing subsystems for classes A and B contains a credit-based shaper (CBS). The CBS serves a packet from a class according to the available credit
            for that class. As described in Section 8.6.8.2 and Annex L.1 of <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>, the credit for each class A or B increases based on the idle slope (as guaranteed rate) and decreases based on the sendslope (typically equal to the difference between the guaranteed and the output link rates), both of which 
            are parameters of the CBS. The CDT and BE0-BE4 flows are served by separate queuing subsystems. Then, packets from all flows are
            served by a transmission selection subsystem that serves packets from each class based on its priority. All subsystems are non-preemptive.
            Guarantees for class A and B traffic can be provided only if CDT is bounded. It is assumed that the CDT has a leaky-bucket arrival curve with two parameters: r_h as rate and b_h as bucket size. That is, the amount of bits entering a node within a time interval t is bounded by r_h * t + b_h. 
        </t>
        <t indent="0" pn="section-6.4-5">
            Additionally, it is assumed that the class A and B flows are also regulated at their source according to a leaky-bucket arrival curve. At the source, the traffic satisfies its regulation constraint, i.e., the delay due to interleaved regulator at the source is ignored.
        </t>
        <t indent="0" pn="section-6.4-6">
            At each DetNet transit node implementing an interleaved regulator, packets of multiple flows are processed in one FIFO queue. The packet at the head
            of the queue is regulated based on its leaky-bucket parameters. It is released at the earliest time at which this is possible without violating 
            the constraint. 
        </t>
        <t indent="0" pn="section-6.4-7">
                The regulation parameters for a flow (leaky-bucket rate and bucket size) are the same at its source and at all DetNet transit nodes along its path in the case where all clocks are perfect. However, in reality, there is clock non-ideality throughout the DetNet domain, even with clock synchronization. This phenomenon causes inaccuracy in the rates configured at the regulators that may lead to network instability. To avoid instability, the rates are set as the source rates with some positive margin when configuring regulators. <xref target="ThomasTime" format="default" sectionFormat="of" derivedContent="ThomasTime"/> describes and provides solutions to this issue.
        </t>
        <section anchor="delayTSNwithATS" numbered="true" toc="include" removeInRFC="false" pn="section-6.4.1">
          <name slugifiedName="name-delay-bound-calculation">Delay Bound Calculation</name>
          <t indent="0" pn="section-6.4.1-1">
                A delay bound of the queuing subsystem ((4) in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>) of a given DetNet node for a flow of class A or B can be computed if the following condition holds:
          </t>
          <t indent="3" pn="section-6.4.1-2">The sum of leaky-bucket rates of all flows of this class at this transit node &lt;= R, where R is given below for every class
          </t>
          <t indent="0" pn="section-6.4.1-3">If the condition holds, the delay bounds for a flow of class X (A or B) is d_X and calculated as:</t>
          <t indent="3" pn="section-6.4.1-4"> d_X = T_X + (b_t_X-L_min_X)/R_X - L_min_X/c</t>
          <t indent="0" pn="section-6.4.1-5">
                where L_min_X is the minimum packet lengths of class X (A or B); c is the output link transmission rate; and b_t_X is the sum of the b term (bucket size) for all the flows of the class X. Parameters R_X and T_X are calculated as follows for class A and B, separately.
          </t>
          <t indent="0" pn="section-6.4.1-6">If the flow is of class A:</t>
          <t indent="3" pn="section-6.4.1-7"> R_A = I_A * (c-r_h)/ c</t>
          <t indent="3" pn="section-6.4.1-8">T_A = (L_nA + b_h + r_h * L_n/c)/(c-r_h)</t>
          <t indent="0" pn="section-6.4.1-9">where I_A is the idle slope for class A; L_nA is the maximum packet length of class B and BE packets; L_n is the maximum packet length of classes A, B, and BE; and r_h is the rate and b_h is the bucket size of CDT leaky-bucket arrival curve. </t>
          <t indent="0" pn="section-6.4.1-10">If the flow is of class B:</t>
          <t indent="3" pn="section-6.4.1-11">R_B = I_B * (c-r_h)/ c</t>
          <t indent="3" pn="section-6.4.1-12">T_B = (L_BE + L_A + L_nA * I_A/(c_h-I_A) + b_h + r_h * L_n/c)/(c-r_h)</t>
          <t indent="0" pn="section-6.4.1-13">
                where I_B is the idle slope for class B; L_A is the maximum packet length of class A; and L_BE is the maximum packet length of class BE.
          </t>
          <t indent="0" pn="section-6.4.1-14">Then, as discussed in <xref target="perclass" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>, an interleaved regulator does not increase the delay bound of the upstream queuing subsystem; therefore, an end-to-end delay bound for a DetNet flow of class X (A or B) is the sum of d_X_i for all node i in the path of the flow, where d_X_i is the delay bound of queuing subsystem in node i, which is computed as above. According to the notation in <xref target="perclass" format="default" sectionFormat="of" derivedContent="Section 4.2.2"/>, the delay bound of the queuing subsystem in a node i and interleaved regulator in node j, i.e., Cij, is:</t>
          <t indent="3" pn="section-6.4.1-15">Cij = d_X_i</t>
          <t indent="0" pn="section-6.4.1-16">More information of delay analysis in such a DetNet transit node is described in <xref target="TSNwithATS" format="default" sectionFormat="of" derivedContent="TSNwithATS"/>.</t>
        </section>
        <section anchor="admissionTSNwithATS" numbered="true" toc="include" removeInRFC="false" pn="section-6.4.2">
          <name slugifiedName="name-flow-admission-2">Flow Admission</name>
          <t indent="0" pn="section-6.4.2-1"> 
                The delay bound calculation requires some information about each node. For each node, it is required to know the idle slope of the CBS for each class A and B (I_A and I_B), as well as the transmission rate of the output link (c). Besides, it is necessary to have the information on each class, i.e., maximum packet length of classes A, B, and BE. Moreover, the leaky-bucket parameters of CDT (r_h, b_h) must be known. To admit a flow or flows of classes A and B, their delay requirements must be guaranteed not to be violated. As described in <xref target="flow-admission" format="default" sectionFormat="of" derivedContent="Section 3.1"/>, the two problems (static and dynamic) are addressed separately. In either of the problems, the rate and delay must be guaranteed. Thus,
          </t>
          <dl newline="true" spacing="normal" indent="8" pn="section-6.4.2-2">
            <dt pn="section-6.4.2-2.1">The static admission control:</dt>
            <dd pn="section-6.4.2-2.2">
                    The leaky-bucket parameters of all class A or B flows are known; therefore, for each flow f of either class A or B, a delay bound
           can be calculated.  The computed delay bound for every flow
           of class A or B must not be more than its delay requirement. Moreover, the sum of the rate of each flow (r_f) must not be more than the rate allocated to each class (R). If these two conditions hold, the configuration is declared admissible.
                    </dd>
            <dt pn="section-6.4.2-2.3">The dynamic admission control:</dt>
            <dd pn="section-6.4.2-2.4">
              <dl newline="true" spacing="normal" indent="3" pn="section-6.4.2-2.4.1">
                <dt pn="section-6.4.2-2.4.1.1">  For dynamic admission control, we allocate 
          a static value for rate (R) and a maximum bucket
          size (b_t) to every node and each class A or B.  
          In addition, for every node and each class A
          or B, two counters are maintained:
                </dt>
                <dd pn="section-6.4.2-2.4.1.2">
                  <t indent="0" pn="section-6.4.2-2.4.1.2.1">R_acc is equal to the sum of the leaky-bucket rates of all flows of this class already admitted at this node; at all times, we must have:</t>
                  <t indent="0" pn="section-6.4.2-2.4.1.2.2">R_acc &lt;= R, (Eq. 1)</t>
                  <t indent="0" pn="section-6.4.2-2.4.1.2.3">b_acc is equal to the sum of the bucket sizes of all flows of this class already admitted at this node; at all times, we must have:</t>
                  <t indent="0" pn="section-6.4.2-2.4.1.2.4">b_acc &lt;= b_t.  (Eq. 2)</t>
                </dd>
              </dl>
              <t indent="0" pn="section-6.4.2-2.4.2">
              A new class A or B flow is admitted at this node if Eqs. (1) and (2) continue to be satisfied after adding its leaky-bucket rate and bucket size to R_acc and b_acc. A class A or B flow is admitted in the network if it is admitted at all nodes along its path. When this happens, all variables R_acc and b_acc along its path must be incremented to reflect the addition of the flow. Similarly, when a class A or B flow leaves the network, all variables R_acc and b_acc along its path must be decremented to reflect the removal of the flow.
              </t>
            </dd>
          </dl>
          <t indent="0" pn="section-6.4.2-3">
                The choice of the static values of R and b_t at all nodes and classes must be done in a prior configuration phase: R controls the bandwidth allocated to this class at this node, and b_t affects the delay bound and the buffer requirement. The value of R must be set such that
          </t>
          <t indent="3" pn="section-6.4.2-4">R &lt;= I_X*(c-r_h)/c</t>
          <t indent="0" pn="section-6.4.2-5">
                where I_X is the idleslope of credit-based shaper for class X={A,B}, c is the transmission rate of the output link, and r_h is the leaky-bucket rate of the CDT class.
          </t>
        </section>
      </section>
      <section anchor="intserv" numbered="true" toc="include" removeInRFC="false" pn="section-6.5">
        <name slugifiedName="name-guaranteed-service">Guaranteed Service</name>
        <t indent="0" pn="section-6.5-1">The Guaranteed Service is defined in <xref target="RFC2212" format="default" sectionFormat="of" derivedContent="RFC2212"/>. The flow, at the source, has a leaky-bucket arrival curve with two parameters: r as rate and b as bucket size, i.e., the amount of bits entering a node within a time interval t is bounded by r * t + b. </t>
        <t indent="0" pn="section-6.5-2">If a resource reservation on a path is applied, a node provides a guaranteed rate R and maximum service latency of T. This can be interpreted in a way that the bits might have to wait up to T before being served with a rate greater or equal to R. The delay bound of the flow traversing the node is T + b / R.</t>
        <t indent="0" pn="section-6.5-3">Consider a Guaranteed Service <xref target="RFC2212" format="default" sectionFormat="of" derivedContent="RFC2212"/> path including a sequence of nodes, where the i-th node provides a guaranteed rate R_i and maximum service latency of T_i. 
 Then, the end-to-end delay bound for a flow on this can be calculated as sum(T_i) + b / min(R_i).
        </t>
        <t indent="0" pn="section-6.5-4">The provided delay bound is based on a simple case of Guaranteed Service, where only a guaranteed rate and maximum service latency and a leaky-bucket arrival curve are available.  If more information about the flow is known, e.g., the peak rate, the delay bound is more complicated; the details are available in <xref target="RFC2212" format="default" sectionFormat="of" derivedContent="RFC2212"/> and Section 1.4.1 of <xref target="NetCalBook" format="default" sectionFormat="of" derivedContent="NetCalBook"/>.
        </t>
      </section>
      <section anchor="cqf" numbered="true" toc="include" removeInRFC="false" pn="section-6.6">
        <name slugifiedName="name-cyclic-queuing-and-forwardi">Cyclic Queuing and Forwarding</name>
        <t indent="0" pn="section-6.6-1">
         Annex T of <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/> describes Cyclic Queuing
         and Forwarding (CQF), which provides bounded latency and zero congestion loss using
         the time-scheduled gates of Section 8.6.8.4 of <xref target="IEEE8021Q" format="default" sectionFormat="of" derivedContent="IEEE8021Q"/>.  For a given class of DetNet
         flows, a set of two or more buffers is provided at the output queue layer of
         <xref target="fig_8021Q_data_model" format="default" sectionFormat="of" derivedContent="Figure 3"/>.  A cycle time T_c is configured for each class of DetNet
         flows c, and all of the buffer sets in a class of DetNet
         flows swap buffers simultaneously throughout the DetNet domain
         at that cycle rate, all in phase. In such a mechanism, the regulator, as mentioned in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>, is not required.
        </t>
        <t indent="0" pn="section-6.6-2">
        In the case of two-buffer CQF, each class of DetNet flows c has two buffers, namely buffer1 and buffer2. In a cycle (i) when buffer1 accumulates received packets from the node's reception ports, buffer2 transmits the already stored packets from the previous cycle (i-1). In the next cycle (i+1), buffer2 stores the received packets and buffer1 transmits the packets received in cycle (i). The duration of each cycle is T_c.
        </t>
        <t indent="0" pn="section-6.6-3">
        The cycle time T_c must be carefully chosen; it needs to be large enough to accommodate all the DetNet traffic, plus at least one maximum packet (or fragment) size from lower priority queues, which might be received within a cycle. 
        Also, the value of T_c includes a time interval, called dead time (DT), which is the sum of delays 1, 2, 3, and 4 defined in <xref target="fig_timing_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>. The value of DT guarantees that the last packet of one cycle in a node is fully delivered to a buffer of the next node in the same cycle. A two-buffer CQF is recommended if DT is small compared to T_c. For a large DT, CQF with more buffers can be used, and a cycle identification label can be added to the packets.
        </t>
        <t indent="0" pn="section-6.6-4">
        The per-hop latency is determined by the cycle time T_c: a packet transmitted from a node at a cycle (i) is transmitted from the next node at cycle (i+1). Then, if the packet traverses h hops, the maximum latency experienced by the packet is from 
         the beginning of cycle (i) to the end of cycle (i+h); also, the minimum latency is from the end of cycle (i), before the DT, to the beginning of cycle (i+h). Then, the maximum latency is:
        </t>
        <t indent="3" pn="section-6.6-5">(h+1) T_c</t>
        <t indent="0" pn="section-6.6-6"> and the minimum latency is:</t>
        <t indent="3" pn="section-6.6-7">(h-1) T_c + DT.</t>
        <t indent="0" pn="section-6.6-8">
         Ingress conditioning (<xref target="ingress" format="default" sectionFormat="of" derivedContent="Section 4.3"/>) may be required if the source of a DetNet flow does not itself employ CQF. Since there are no per-flow parameters in the CQF technique, per-hop configuration is not required in the CQF forwarding nodes.
        </t>
      </section>
    </section>
    <section anchor="example" numbered="true" toc="include" removeInRFC="false" pn="section-7">
      <name slugifiedName="name-example-application-on-detn">Example Application on DetNet IP Network</name>
      <t indent="0" pn="section-7-1">
        This section provides an example application of the timing model presented in this document to control the admission of a DetNet flow on a DetNet-enabled IP network. Consider <xref target="fig_ip_detnet_simple" format="default" sectionFormat="of" derivedContent="Figure 5"/>, taken from <xref target="RFC8939" section="3" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8939#section-3" derivedContent="RFC8939"/>, which shows a simple IP network:
      </t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7-2">
        <li pn="section-7-2.1">
          End system 1 implements Guaranteed Service <xref target="RFC2212" format="default" sectionFormat="of" derivedContent="RFC2212"/>, as in <xref target="intserv" format="default" sectionFormat="of" derivedContent="Section 6.5"/>, between itself and relay node 1. 
        </li>
        <li pn="section-7-2.2">
                Sub-network 1 is a TSN network. The nodes in sub-network 1 implement credit-based shapers with asynchronous traffic shaping, as in <xref target="TSNwithATSmodel" format="default" sectionFormat="of" derivedContent="Section 6.4"/>.
            </li>
        <li pn="section-7-2.3">
                Sub-network 2 is a TSN network. The nodes in sub-network 2 implement Cyclic Queuing and Forwarding with two buffers, as in <xref target="cqf" format="default" sectionFormat="of" derivedContent="Section 6.6"/>.
            </li>
        <li pn="section-7-2.4">
                The relay nodes 1 and 2 implement credit-based shapers with asynchronous traffic shaping, as in <xref target="TSNwithATSmodel" format="default" sectionFormat="of" derivedContent="Section 6.4"/>. They also perform the aggregation and mapping of IP DetNet flows to TSN streams (<xref target="RFC9023" section="4.4" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9023#section-4.4" derivedContent="RFC9023"/>).
            </li>
      </ul>
      <figure anchor="fig_ip_detnet_simple" align="left" suppress-title="false" pn="figure-5">
        <name slugifiedName="name-a-simple-detnet-enabled-ip-">A Simple DetNet-Enabled IP Network, Taken from RFC 8939</name>
        <artwork name="" type="" align="left" alt="" pn="section-7-3.1">
 DetNet IP       Relay                        Relay       DetNet IP
 End System      Node 1                       Node 2      End System
     1                                                        2
+----------+                                             +----------+
|   Appl.  |&lt;------------ End-to-End Service -----------&gt;|   Appl.  |
+----------+  ............                 ...........   +----------+
| Service  |&lt;-: Service  :-- DetNet flow --: Service  :-&gt;| Service  |
+----------+  +----------+                 +----------+  +----------+
|Forwarding|  |Forwarding|                 |Forwarding|  |Forwarding|
+--------.-+  +-.------.-+                 +-.---.----+  +-------.--+
         : Link :       \      ,-----.      /     \   ,-----.   /
         +......+        +----[  Sub- ]----+       +-[  Sub- ]-+
                              [Network]              [Network]
                               `--1--'                `--2--'

         |&lt;--------------------- DetNet IP ---------------------&gt;|
             
|&lt;--- d1 ---&gt;|&lt;--------------- d2_p ---------------&gt;|&lt;-- d3_p --&gt;|        
</artwork>
      </figure>
      <t indent="0" pn="section-7-4">Consider a fully centralized control plane for the network of <xref target="fig_ip_detnet_simple" format="default" sectionFormat="of" derivedContent="Figure 5"/>, as described in <xref target="I-D.ietf-detnet-controller-plane-framework" section="3.2" sectionFormat="of" format="default" derivedLink="https://datatracker.ietf.org/doc/html/draft-ietf-detnet-controller-plane-framework-02#section-3.2" derivedContent="DETNET-CONTROL-PLANE"/>. Suppose end system 1 wants to create a DetNet flow with a traffic specification destined to end system 2 with end-to-end delay bound requirement D. Therefore, the control plane receives a flow establishment request and calculates a number of valid paths through the network (<xref target="I-D.ietf-detnet-controller-plane-framework" section="3.2" sectionFormat="of" format="default" derivedLink="https://datatracker.ietf.org/doc/html/draft-ietf-detnet-controller-plane-framework-02#section-3.2" derivedContent="DETNET-CONTROL-PLANE"/>). To select a proper path, the control plane needs to compute an end-to-end delay bound at every node of each selected path p. 
</t>
      <t indent="0" pn="section-7-5">
    The end-to-end delay bound is d1 + d2_p + d3_p, where d1 is the delay bound from end system 1 to the entrance of relay node 1, d2_p is the delay bound for path p from relay node 1 to the entrance of the first node in sub-network 2, and d3_p is the delay bound of path p from the first node in sub-network 2 to end system 2. The computation of d1 is explained in <xref target="intserv" format="default" sectionFormat="of" derivedContent="Section 6.5"/>. Since the relay node 1, sub-network 1, and relay node 2 implement aggregate queuing, we use the results in Sections <xref target="perclass" format="counter" sectionFormat="of" derivedContent="4.2.2"/> and <xref target="TSNwithATSmodel" format="counter" sectionFormat="of" derivedContent="6.4"/> to compute d2_p for the path p. Finally, d3_p is computed using the delay bound computation of <xref target="cqf" format="default" sectionFormat="of" derivedContent="Section 6.6"/>. Any path p, such that d1 + d2_p + d3_p &lt;= D, satisfies the delay bound requirement of the flow. If there is no such path, the control plane may compute a new set of valid paths and redo the delay bound computation or reject the DetNet flow.
</t>
      <t indent="0" pn="section-7-6">
    As soon as the control plane selects a path that satisfies the delay bound constraint, it allocates and reserves the resources in the path for the DetNet flow (<xref target="I-D.ietf-detnet-controller-plane-framework" format="default" sectionFormat="of" section="4.2" derivedLink="https://datatracker.ietf.org/doc/html/draft-ietf-detnet-controller-plane-framework-02#section-4.2" derivedContent="DETNET-CONTROL-PLANE"/>).
</t>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-8">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-8-1">
    Detailed security considerations for DetNet are cataloged in <xref target="RFC9055" format="default" sectionFormat="of" derivedContent="RFC9055"/>, and more general security considerations are described in <xref target="RFC8655" format="default" sectionFormat="of" derivedContent="RFC8655"/>.
      </t>
      <t indent="0" pn="section-8-2">
        Security aspects that are unique to DetNet are those whose aim is to provide the specific QoS aspects of DetNet, specifically bounded end-to-end delivery latency and zero congestion loss. Achieving such loss rates and bounded latency may not be possible in the face of a highly capable adversary, such as the one envisioned by the Internet Threat Model of BCP 72 <xref target="RFC3552" format="default" sectionFormat="of" derivedContent="RFC3552"/>, which can arbitrarily drop or delay any or all traffic. In order to present meaningful security considerations, we consider a somewhat weaker attacker who does not control the physical links of the DetNet domain but may have the ability to control or change the behavior of some resources within the boundary of the DetNet domain.
      </t>
      <t indent="0" pn="section-8-3">
        Latency bound calculations use parameters that reflect physical quantities. If an attacker finds a way to change the physical quantities, unknown to the control and management planes, the latency calculations fail and may result in latency violation and/or congestion losses. An example of such attacks is to make some traffic sources under the control of the attacker send more traffic than their assumed T-SPECs. This type of attack is typically avoided by ingress conditioning at the edge of a DetNet domain. However, it must be insured that such ingress conditioning is done per flow and that the buffers are segregated such that if one flow exceeds its T-SPEC, it does not cause buffer overflow for other flows.
      </t>
      <t indent="0" pn="section-8-4">
        Some queuing mechanisms require time synchronization and operate correctly only if the time synchronization works correctly. In the case of CQF, the correct alignments of cycles can fail if an attack against time synchronization fools a node into having an incorrect offset. Some of these attacks can be prevented by cryptographic authentication as in Annex K of <xref target="IEEE1588" format="default" sectionFormat="of" derivedContent="IEEE1588"/> for the Precision Time Protocol (PTP). However, the attacks that change the physical latency of the links used by the time synchronization protocol are still possible even if the time synchronization protocol is protected by authentication and cryptography <xref target="DelayAttack" format="default" sectionFormat="of" derivedContent="DelayAttack"/>. Such attacks can be detected only by their effects on latency bound violations and congestion losses, which do not occur in normal DetNet operation.
      </t>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA considerations</name>
      <t indent="0" pn="section-9-1">
	This document has no IANA actions.
      </t>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-detnet-controller-plane-framework" to="DETNET-CONTROL-PLANE"/>
    <references pn="section-10">
      <name slugifiedName="name-references">References</name>
      <references pn="section-10.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="IEEE8021Q" target="https://ieeexplore.ieee.org/document/8403927" quoteTitle="true" derivedAnchor="IEEE8021Q">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks--Bridges and Bridged Networks</title>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2018" month="July"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.1Q-2018"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8403927"/>
        </reference>
        <reference anchor="RFC2212" target="https://www.rfc-editor.org/info/rfc2212" quoteTitle="true" derivedAnchor="RFC2212">
          <front>
            <title>Specification of Guaranteed Quality of Service</title>
            <author fullname="S. Shenker" initials="S." surname="Shenker"/>
            <author fullname="C. Partridge" initials="C." surname="Partridge"/>
            <author fullname="R. Guerin" initials="R." surname="Guerin"/>
            <date month="September" year="1997"/>
            <abstract>
              <t indent="0">This memo describes the network element behavior required to deliver a guaranteed service (guaranteed delay and bandwidth) in the Internet. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2212"/>
          <seriesInfo name="DOI" value="10.17487/RFC2212"/>
          <format target="https://www.rfc-editor.org/info/rfc2212" type="TXT"/>
        </reference>
        <reference anchor="RFC2475" target="https://www.rfc-editor.org/info/rfc2475" quoteTitle="true" derivedAnchor="RFC2475">
          <front>
            <title>An Architecture for Differentiated Services</title>
            <author fullname="S. Blake" initials="S." surname="Blake"/>
            <author fullname="D. Black" initials="D." surname="Black"/>
            <author fullname="M. Carlson" initials="M." surname="Carlson"/>
            <author fullname="E. Davies" initials="E." surname="Davies"/>
            <author fullname="Z. Wang" initials="Z." surname="Wang"/>
            <author fullname="W. Weiss" initials="W." surname="Weiss"/>
            <date month="December" year="1998"/>
            <abstract>
              <t indent="0">This document defines an architecture for implementing scalable service differentiation in the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2475"/>
          <seriesInfo name="DOI" value="10.17487/RFC2475"/>
          <format target="https://www.rfc-editor.org/info/rfc2475" type="TXT"/>
        </reference>
        <reference anchor="RFC6658" target="https://www.rfc-editor.org/info/rfc6658" quoteTitle="true" derivedAnchor="RFC6658">
          <front>
            <title>Packet Pseudowire Encapsulation over an MPLS PSN</title>
            <author fullname="S. Bryant" initials="S." role="editor" surname="Bryant"/>
            <author fullname="L. Martini" initials="L." surname="Martini"/>
            <author fullname="G. Swallow" initials="G." surname="Swallow"/>
            <author fullname="A. Malis" initials="A." surname="Malis"/>
            <date month="July" year="2012"/>
            <abstract>
              <t indent="0">This document describes a pseudowire mechanism that is used to transport a packet service over an MPLS PSN in the case where the client Label Switching Router (LSR) and the server Provider Edge equipments are co-resident in the same equipment.  This pseudowire mechanism may be used to carry all of the required layer 2 and layer 3 protocols between the pair of client LSRs. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6658"/>
          <seriesInfo name="DOI" value="10.17487/RFC6658"/>
          <format target="https://www.rfc-editor.org/info/rfc6658" type="TXT"/>
        </reference>
        <reference anchor="RFC7806" target="https://www.rfc-editor.org/info/rfc7806" quoteTitle="true" derivedAnchor="RFC7806">
          <front>
            <title>On Queuing, Marking, and Dropping</title>
            <author fullname="F. Baker" initials="F." surname="Baker"/>
            <author fullname="R. Pan" initials="R." surname="Pan"/>
            <date month="April" year="2016"/>
            <abstract>
              <t indent="0">This note discusses queuing and marking/dropping algorithms.  While these algorithms may be implemented in a coupled manner, this note argues that specifications, measurements, and comparisons should decouple the different algorithms and their contributions to system behavior.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7806"/>
          <seriesInfo name="DOI" value="10.17487/RFC7806"/>
          <format target="https://www.rfc-editor.org/info/rfc7806" type="TXT"/>
        </reference>
        <reference anchor="RFC8655" target="https://www.rfc-editor.org/info/rfc8655" quoteTitle="true" derivedAnchor="RFC8655">
          <front>
            <title>Deterministic Networking Architecture</title>
            <author fullname="N. Finn" initials="N." surname="Finn"/>
            <author fullname="P. Thubert" initials="P." surname="Thubert"/>
            <author fullname="B. Varga" initials="B." surname="Varga"/>
            <author fullname="J. Farkas" initials="J." surname="Farkas"/>
            <date month="October" year="2019"/>
            <abstract>
              <t indent="0">This document provides the overall architecture for Deterministic Networking (DetNet), which provides a capability to carry specified unicast or multicast data flows for real-time applications with extremely low data loss rates and bounded latency within a network domain.  Techniques used include 1) reserving data-plane resources for individual (or aggregated) DetNet flows in some or all of the intermediate nodes along the path of the flow, 2) providing explicit routes for DetNet flows that do not immediately change with the network topology, and 3) distributing data from DetNet flow packets over time and/or space to ensure delivery of each packet's data in spite of the loss of a path.  DetNet operates at the IP layer and delivers service over lower-layer technologies such as MPLS and Time- Sensitive Networking (TSN) as defined by IEEE 802.1.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8655"/>
          <seriesInfo name="DOI" value="10.17487/RFC8655"/>
          <format target="https://www.rfc-editor.org/info/rfc8655" type="TXT"/>
        </reference>
        <reference anchor="RFC8939" target="https://www.rfc-editor.org/info/rfc8939" quoteTitle="true" derivedAnchor="RFC8939">
          <front>
            <title>Deterministic Networking (DetNet) Data Plane: IP</title>
            <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
            <author fullname="J. Farkas" initials="J." surname="Farkas"/>
            <author fullname="L. Berger" initials="L." surname="Berger"/>
            <author fullname="D. Fedyk" initials="D." surname="Fedyk"/>
            <author fullname="S. Bryant" initials="S." surname="Bryant"/>
            <date month="November" year="2020"/>
            <abstract>
              <t indent="0">This document specifies the Deterministic Networking (DetNet) data plane operation for IP hosts and routers that provide DetNet service to IP-encapsulated data.  No DetNet-specific encapsulation is defined to support IP flows; instead, the existing IP-layer and higher-layer protocol header information is used to support flow identification and DetNet service delivery.  This document builds on the DetNet architecture (RFC 8655) and data plane framework (RFC 8938).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8939"/>
          <seriesInfo name="DOI" value="10.17487/RFC8939"/>
          <format target="https://www.rfc-editor.org/info/rfc8939" type="TXT"/>
        </reference>
        <reference anchor="RFC8964" target="https://www.rfc-editor.org/info/rfc8964" quoteTitle="true" derivedAnchor="RFC8964">
          <front>
            <title>Deterministic Networking (DetNet) Data Plane: MPLS</title>
            <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
            <author fullname="J. Farkas" initials="J." surname="Farkas"/>
            <author fullname="L. Berger" initials="L." surname="Berger"/>
            <author fullname="A. Malis" initials="A." surname="Malis"/>
            <author fullname="S. Bryant" initials="S." surname="Bryant"/>
            <author fullname="J. Korhonen" initials="J." surname="Korhonen"/>
            <date month="January" year="2021"/>
            <abstract>
              <t indent="0">This document specifies the Deterministic Networking (DetNet) data plane when operating over an MPLS Packet Switched Network.  It leverages existing pseudowire (PW) encapsulations and MPLS Traffic Engineering (MPLS-TE) encapsulations and mechanisms.  This document builds on the DetNet architecture and data plane framework.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8964"/>
          <seriesInfo name="DOI" value="10.17487/RFC8964"/>
          <format target="https://www.rfc-editor.org/info/rfc8964" type="TXT"/>
        </reference>
        <reference anchor="RFC9016" target="https://www.rfc-editor.org/info/rfc9016" quoteTitle="true" derivedAnchor="RFC9016">
          <front>
            <title>Flow and Service Information Model for Deterministic Networking (DetNet)</title>
            <author fullname="B. Varga" initials="B." surname="Varga"/>
            <author fullname="J. Farkas" initials="J." surname="Farkas"/>
            <author fullname="R. Cummings" initials="R." surname="Cummings"/>
            <author fullname="Y. Jiang" initials="Y." surname="Jiang"/>
            <author fullname="D. Fedyk" initials="D." surname="Fedyk"/>
            <date month="March" year="2021"/>
            <abstract>
              <t indent="0">This document describes the flow and service information model for Deterministic Networking (DetNet).  These models are defined for IP and MPLS DetNet data planes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9016"/>
          <seriesInfo name="DOI" value="10.17487/RFC9016"/>
          <format target="https://www.rfc-editor.org/info/rfc9016" type="TXT"/>
        </reference>
      </references>
      <references pn="section-10.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="BennettDelay" target="https://dl.acm.org/citation.cfm?id=581870" quoteTitle="true" derivedAnchor="BennettDelay">
          <front>
            <title>Delay jitter bounds and packet scale rate guarantee for expedited forwarding</title>
            <author initials="J. C. R." surname="Bennett" fullname="Jon C. R. Bennett">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K" surname="Benson" fullname="Kent Benson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A" surname="Charny" fullname="Anna Charny">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="W. F." surname="Courtney" fullname="William F. Courtney">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="August"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/TNET.2002.801404"/>
        </reference>
        <reference anchor="CharnyDelay" target="https://link.springer.com/chapter/10.1007/3-540-39939-9_1" quoteTitle="true" derivedAnchor="CharnyDelay">
          <front>
            <title>Delay Bounds in a Network with Aggregate Scheduling</title>
            <author initials="A" surname="Charny" fullname="Anna Charny">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="September"/>
          </front>
          <seriesInfo name="DOI" value="10.1007/3-540-39939-9_1"/>
        </reference>
        <reference anchor="DelayAttack" target="https://ieeexplore.ieee.org/document/7520408" quoteTitle="true" derivedAnchor="DelayAttack">
          <front>
            <title>Cyber-attack on packet-based time synchronization protocols: The undetectable Delay Box</title>
            <author initials="S" surname="Barreto" fullname="Sergio Barreto">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A" surname="Suresh" fullname="Aswin Suresh">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.-Y." fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2016" month="May"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/I2MTC.2016.7520408"/>
        </reference>
        <reference anchor="I-D.ietf-detnet-controller-plane-framework" quoteTitle="true" target="https://datatracker.ietf.org/doc/html/draft-ietf-detnet-controller-plane-framework-02" derivedAnchor="DETNET-CONTROL-PLANE">
          <front>
            <title>Deterministic Networking (DetNet) Controller Plane Framework</title>
            <author initials="A" surname="Malis" fullname="Andrew G. Malis">
              <organization showOnFrontPage="true">Independent</organization>
            </author>
            <author initials="A" surname="Geng" fullname="Xuesong Geng" role="editor">
              <organization showOnFrontPage="true">Huawei</organization>
            </author>
            <author initials="M" surname="Chen" fullname="Mach (Guoyi) Chen">
              <organization showOnFrontPage="true">Huawei</organization>
            </author>
            <author initials="F" surname="Qin" fullname="Fengwei Qin">
              <organization showOnFrontPage="true">China Mobile</organization>
            </author>
            <author initials="B" surname="Varga" fullname="Balazs Varga">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <date month="June" day="28" year="2022"/>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-detnet-controller-plane-framework-02"/>
          <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-detnet-controller-plane-framework-02.txt"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="IEEE1588" target="https://ieeexplore.ieee.org/document/4579760" quoteTitle="true" derivedAnchor="IEEE1588">
          <front>
            <title>IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems</title>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2008" month="July"/>
          </front>
          <seriesInfo name="IEEE Std" value="1588-2008"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2008.4579760"/>
        </reference>
        <reference anchor="IEEE8021Qcr" target="https://ieeexplore.ieee.org/document/9253013" quoteTitle="true" derivedAnchor="IEEE8021Qcr">
          <front>
            <title>802.1Qcr-2020 - IEEE Standard for Local and Metropolitan Area Networks--Bridges and Bridged Networks Amendment 34:Asynchronous Traffic Shaping</title>
            <author>
              <organization showOnFrontPage="true">IEEE 802.1</organization>
            </author>
            <date year="2020" month="November"/>
          </front>
        </reference>
        <reference anchor="IEEE8021TSN" target="https://1.ieee802.org/tsn/" quoteTitle="true" derivedAnchor="IEEE8021TSN">
          <front>
            <title>802.1 Time-Sensitive Networking (TSN) Task Group</title>
            <author>
              <organization showOnFrontPage="true">IEEE 802.1</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IEEE8023" target="http://ieeexplore.ieee.org/document/8457469" quoteTitle="true" derivedAnchor="IEEE8023">
          <front>
            <title>IEEE Standard for Ethernet</title>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2018" month="August"/>
          </front>
          <seriesInfo name="IEEE Std" value="802.3-2018"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2018.8457469"/>
        </reference>
        <reference anchor="LeBoudecTheory" target="https://ieeexplore.ieee.org/document/8519761" quoteTitle="true" derivedAnchor="LeBoudecTheory">
          <front>
            <title>A Theory of Traffic Regulators for Deterministic Networks With Application to Interleaved Regulators</title>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="November"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/TNET.2018.2875191"/>
        </reference>
        <reference anchor="NetCalBook" target="https://leboudec.github.io/netcal/latex/netCalBook.pdf" quoteTitle="true" derivedAnchor="NetCalBook">
          <front>
            <title>Network Calculus: A Theory of Deterministic Queuing Systems for the Internet</title>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P" surname="Thiran" fullname="Patrick Thiran">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2001"/>
          </front>
          <refcontent>Springer Science &amp; Business Media, vol. 2050</refcontent>
        </reference>
        <reference anchor="PacketReorderingBounds" target="https://ieeexplore.ieee.org/document/9640523" quoteTitle="true" derivedAnchor="PacketReorderingBounds">
          <front>
            <title>On Packet Reordering in Time-Sensitive Networks</title>
            <author initials="E" surname="Mohammadpour" fullname="Ehsan Mohammadpour">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2021" month="December"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/TNET.2021.3129590"/>
        </reference>
        <reference anchor="RFC2697" target="https://www.rfc-editor.org/info/rfc2697" quoteTitle="true" derivedAnchor="RFC2697">
          <front>
            <title>A Single Rate Three Color Marker</title>
            <author fullname="J. Heinanen" initials="J." surname="Heinanen"/>
            <author fullname="R. Guerin" initials="R." surname="Guerin"/>
            <date month="September" year="1999"/>
            <abstract>
              <t indent="0">This document defines a Single Rate Three Color Marker (srTCM), which can be used as component in a Diffserv traffic conditioner.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2697"/>
          <seriesInfo name="DOI" value="10.17487/RFC2697"/>
          <format target="https://www.rfc-editor.org/info/rfc2697" type="TXT"/>
        </reference>
        <reference anchor="RFC3552" target="https://www.rfc-editor.org/info/rfc3552" quoteTitle="true" derivedAnchor="RFC3552">
          <front>
            <title>Guidelines for Writing RFC Text on Security Considerations</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <author fullname="B. Korver" initials="B." surname="Korver"/>
            <date month="July" year="2003"/>
            <abstract>
              <t indent="0">All RFCs are required to have a Security Considerations section.  Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="72"/>
          <seriesInfo name="RFC" value="3552"/>
          <seriesInfo name="DOI" value="10.17487/RFC3552"/>
          <format target="https://www.rfc-editor.org/info/rfc3552" type="TXT"/>
        </reference>
        <reference anchor="RFC8578" target="https://www.rfc-editor.org/info/rfc8578" quoteTitle="true" derivedAnchor="RFC8578">
          <front>
            <title>Deterministic Networking Use Cases</title>
            <author fullname="E. Grossman" initials="E." role="editor" surname="Grossman"/>
            <date month="May" year="2019"/>
            <abstract>
              <t indent="0">This document presents use cases for diverse industries that have in common a need for "deterministic flows". "Deterministic" in this context means that such flows provide guaranteed bandwidth, bounded latency, and other properties germane to the transport of time-sensitive data.  These use cases differ notably in their network topologies and specific desired behavior, providing as a group broad industry context for Deterministic Networking (DetNet).  For each use case, this document will identify the use case, identify representative solutions used today, and describe potential improvements that DetNet can enable.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8578"/>
          <seriesInfo name="DOI" value="10.17487/RFC8578"/>
          <format target="https://www.rfc-editor.org/info/rfc8578" type="TXT"/>
        </reference>
        <reference anchor="RFC9023" target="https://www.rfc-editor.org/info/rfc9023" quoteTitle="true" derivedAnchor="RFC9023">
          <front>
            <title>Deterministic Networking (DetNet) Data Plane: IP over IEEE 802.1 Time-Sensitive Networking (TSN)</title>
            <author fullname="B. Varga" initials="B." role="editor" surname="Varga"/>
            <author fullname="J. Farkas" initials="J." surname="Farkas"/>
            <author fullname="A. Malis" initials="A." surname="Malis"/>
            <author fullname="S. Bryant" initials="S." surname="Bryant"/>
            <date month="June" year="2021"/>
            <abstract>
              <t indent="0">This document specifies the Deterministic Networking IP data plane when operating over a Time-Sensitive Networking (TSN) sub-network.  This document does not define new procedures or processes.  Whenever this document makes statements or recommendations, these are taken from normative text in the referenced RFCs.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9023"/>
          <seriesInfo name="DOI" value="10.17487/RFC9023"/>
          <format target="https://www.rfc-editor.org/info/rfc9023" type="TXT"/>
        </reference>
        <reference anchor="RFC9055" target="https://www.rfc-editor.org/info/rfc9055" quoteTitle="true" derivedAnchor="RFC9055">
          <front>
            <title>Deterministic Networking (DetNet) Security Considerations</title>
            <author fullname="E. Grossman" initials="E." role="editor" surname="Grossman"/>
            <author fullname="T. Mizrahi" initials="T." surname="Mizrahi"/>
            <author fullname="A. Hacker" initials="A." surname="Hacker"/>
            <date month="June" year="2021"/>
            <abstract>
              <t indent="0">A DetNet (deterministic network) provides specific performance guarantees to its data flows, such as extremely low data loss rates and bounded latency (including bounded latency variation, i.e., "jitter"). As a result, securing a DetNet requires that in addition to the best practice security measures taken for any mission-critical network, additional security measures may be needed to secure the intended operation of these novel service properties.</t>
              <t indent="0">This document addresses DetNet-specific security considerations from the perspectives of both the DetNet system-level designer and component designer. System considerations include a taxonomy of relevant threats and attacks, and associations of threats versus use cases and service properties. Component-level considerations include ingress filtering and packet arrival-time violation detection.</t>
              <t indent="0">This document also addresses security considerations specific to the IP and MPLS data plane technologies, thereby complementing the Security Considerations sections of those documents.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9055"/>
          <seriesInfo name="DOI" value="10.17487/RFC9055"/>
          <format target="https://www.rfc-editor.org/info/rfc9055" type="TXT"/>
        </reference>
        <reference anchor="Sch8021Qbv" target="https://dl.acm.org/doi/10.1145/2997465.2997470" quoteTitle="true" derivedAnchor="Sch8021Qbv">
          <front>
            <title>Scheduling Real-Time Communication in IEEE 802.1Qbv Time Sensitive Networks</title>
            <author initials="S" surname="Craciunas" fullname="Silviu S. Craciunas">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R" surname="Oliver" fullname="Ramon Serna Oliver">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M" surname="Chmelik" fullname="Martin Chmelík">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="W" surname="Steiner" fullname="Wilfried Steiner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2016" month="October"/>
          </front>
          <seriesInfo name="DOI" value="10.1145/2997465.2997470"/>
        </reference>
        <reference anchor="SpechtUBS" target="https://ieeexplore.ieee.org/abstract/document/7557870" quoteTitle="true" derivedAnchor="SpechtUBS">
          <front>
            <title>Urgency-Based Scheduler for Time-Sensitive Switched Ethernet Networks</title>
            <author initials="J" surname="Specht" fullname="Johannes Specht">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S" surname="Samii" fullname="Soheil Samii">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2016" month="July"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ECRTS.2016.27"/>
        </reference>
        <reference anchor="ThomasTime" target="https://dl.acm.org/doi/10.1145/3393691.3394206" quoteTitle="true" derivedAnchor="ThomasTime">
          <front>
            <title>On Time Synchronization Issues in Time-Sensitive Networks with Regulators and Nonideal Clocks</title>
            <author initials="L" surname="Thomas" fullname="Ludovic Thomas">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="June"/>
          </front>
          <seriesInfo name="DOI" value="10.1145/3393691.339420"/>
        </reference>
        <reference anchor="TSNwithATS" target="https://ieeexplore.ieee.org/document/8493026" quoteTitle="true" derivedAnchor="TSNwithATS">
          <front>
            <title>Latency and Backlog Bounds in Time-Sensitive Networking with Credit Based Shapers and Asynchronous Traffic Shaping</title>
            <author initials="E" surname="Mohammadpour" fullname="Ehsan Mohammadpour">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E" surname="Stai" fullname="Eleni Stai">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M" surname="Mohiuddin" fullname="Maaz Mohiuddin">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="September"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ITC30.2018.10053"/>
        </reference>
      </references>
    </references>
    <section numbered="false" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgments">Acknowledgments</name>
      <t indent="0" pn="section-appendix.a-1">We would like to thank <contact fullname="Lou Berger"/>, <contact fullname="Tony Przygienda"/>, <contact fullname="John Scudder"/>, <contact fullname="Watson Ladd"/>, <contact fullname="Yoshifumi Nishida"/>, <contact fullname="Ralf Weber"/>, <contact fullname="Robert Sparks"/>, <contact fullname="Gyan Mishra"/>, <contact fullname="Martin Duke"/>, <contact fullname="Éric Vyncke"/>, <contact fullname="Lars Eggert"/>, <contact fullname="Roman Danyliw"/>, and <contact fullname="Paul Wouters"/> for their useful feedback on this document.</t>
    </section>
    <section numbered="false" toc="include" removeInRFC="false" pn="section-appendix.b">
      <name slugifiedName="name-contributors">Contributors</name>
      <t indent="0" pn="section-appendix.b-1">RFC 7322 limits the number of authors listed on the front page to a maximum of 5. The editor wishes to thank and acknowledge the following author for contributing text to this document:</t>
      <contact fullname="Janos Farkas">
        <organization showOnFrontPage="true">Ericsson</organization>
        <address>
          <email>janos.farkas@ericsson.com</email>
        </address>
      </contact>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="N" surname="Finn" fullname="Norman Finn">
        <organization showOnFrontPage="true">Huawei Technologies Co. Ltd</organization>
        <address>
          <postal>
            <street>3101 Rio Way</street>
            <city>Spring Valley</city>
            <region>California</region>
            <code>91977</code>
            <country>United States of America</country>
          </postal>
          <phone>+1 925 980 6430</phone>
          <email>nfinn@nfinnconsulting.com</email>
        </address>
      </author>
      <author initials="J.-Y." surname="Le Boudec" fullname="Jean-Yves Le Boudec">
        <organization showOnFrontPage="true">EPFL</organization>
        <address>
          <postal>
            <street>IC Station 14</street>
            <city>Lausanne</city>
            <code>1015</code>
            <country>Switzerland</country>
          </postal>
          <email>jean-yves.leboudec@epfl.ch</email>
        </address>
      </author>
      <author initials="E" surname="Mohammadpour" fullname="Ehsan Mohammadpour">
        <organization showOnFrontPage="true">EPFL</organization>
        <address>
          <postal>
            <street>IC Station 14</street>
            <city>Lausanne</city>
            <code>1015</code>
            <country>Switzerland</country>
          </postal>
          <email>ehsan.mohammadpour@epfl.ch</email>
        </address>
      </author>
      <author initials="J" surname="Zhang" fullname="Jiayi Zhang">
        <organization showOnFrontPage="true">Huawei Technologies Co. Ltd</organization>
        <address>
          <postal>
            <street>Q27, No.156 Beiqing Road</street>
            <city>Beijing</city>
            <code>100095</code>
            <country>China</country>
          </postal>
          <email>zhangjiayi11@huawei.com</email>
        </address>
      </author>
      <author fullname="Balázs Varga" initials="B." surname="Varga">
        <organization showOnFrontPage="true">Ericsson</organization>
        <address>
          <postal>
            <street>Konyves Kálmán krt. 11/B</street>
            <city>Budapest</city>
            <country>Hungary</country>
            <code>1097</code>
          </postal>
          <email>balazs.a.varga@ericsson.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
