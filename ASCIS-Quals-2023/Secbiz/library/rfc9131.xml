<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" docName="draft-ietf-6man-grand-07" indexInclude="true" ipr="trust200902" number="9131" prepTime="2021-10-01T13:06:21" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" updates="4861" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-6man-grand-07" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9131" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="Gratuitous ND">Gratuitous Neighbor Discovery: Creating Neighbor Cache Entries on First‑Hop Routers</title>
    <seriesInfo name="RFC" value="9131" stream="IETF"/>
    <author fullname="Jen Linkova" initials="J." surname="Linkova">
      <organization showOnFrontPage="true">Google</organization>
      <address>
        <postal>
          <street>1 Darling Island Rd</street>
          <city>Pyrmont</city>
          <region>NSW</region>
          <code>2009</code>
          <country>Australia</country>
        </postal>
        <email>furry@google.com</email>
      </address>
    </author>
    <date month="10" year="2021"/>
    <area>Internet</area>
    <workgroup>IPv6 Maintenance</workgroup>
    <keyword>IPv6</keyword>
    <keyword>SLAAC</keyword>
    <keyword>stateless address autoconfiguration</keyword>
    <keyword>neighbor advertisement</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">
                    Neighbor Discovery (RFC 4861) is used by IPv6 nodes to determine the link-layer addresses of neighboring nodes as well as to discover and maintain reachability information. This document updates RFC 4861 to allow routers to proactively create a Neighbor Cache entry when a new IPv6 address is assigned to a node. It also updates RFC 4861 and recommends that nodes send unsolicited Neighbor Advertisements upon assigning a new IPv6 address. These changes will minimize the delay and packet loss when a node initiates connections to an off-link destination from a new IPv6 address. 
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9131" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2021 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requirements-language">Requirements Language</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-problem-statement">Problem Statement</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-solution-requirements">Solution Requirements</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-changes-to-neighbor-discove">Changes to Neighbor Discovery</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-nodes-sending-gratuitous-ne">Nodes Sending Gratuitous Neighbor Advertisements</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-routers-creating-cache-entr">Routers Creating Cache Entries upon Receiving Unsolicited Neighbor Advertisements</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-avoiding-disruption">Avoiding Disruption</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-neighbor-cache-entry-exists">Neighbor Cache Entry Exists in Any State Other Than INCOMPLETE</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-neighbor-cache-entry-is-in-">Neighbor Cache Entry Is in INCOMPLETE State</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-neighbor-cache-entry-does-n">Neighbor Cache Entry Does Not Exist</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2.3.2">
                  <li pn="section-toc.1-1.5.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.5.2.3.2.1.1"><xref derivedContent="5.3.1" format="counter" sectionFormat="of" target="section-5.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-rightful-owner-is-not-s">The Rightful Owner Is Not Sending Packets from the Address</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.5.2.3.2.2.1"><xref derivedContent="5.3.2" format="counter" sectionFormat="of" target="section-5.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-rightful-owner-has-star">The Rightful Owner Has Started Sending Packets from the Address</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-modifications-to-rfc-mandat">Modifications to RFC-Mandated Behavior</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-modification-to-rfc-4861-ne">Modification to RFC 4861 (Neighbor Discovery for IP version 6 (IPv6))</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2.1.2">
                  <li pn="section-toc.1-1.6.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.6.2.1.2.1.1"><xref derivedContent="6.1.1" format="counter" sectionFormat="of" target="section-6.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-modification-to-section-725">Modification to Section 7.2.5 of RFC 4861</xref></t>
                  </li>
                  <li pn="section-toc.1-1.6.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.6.2.1.2.2.1"><xref derivedContent="6.1.2" format="counter" sectionFormat="of" target="section-6.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-modification-to-section-726">Modification to Section 7.2.6 of RFC 4861</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-solution-limitations">Solution Limitations</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-solutions-considered-but-di">Solutions Considered but Discarded</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2">
              <li pn="section-toc.1-1.8.2.1">
                <t indent="0" pn="section-toc.1-1.8.2.1.1"><xref derivedContent="8.1" format="counter" sectionFormat="of" target="section-8.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-do-nothing">Do Nothing</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.2">
                <t indent="0" pn="section-toc.1-1.8.2.2.1"><xref derivedContent="8.2" format="counter" sectionFormat="of" target="section-8.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-change-to-the-registration-">Change to the Registration-Based Neighbor Discovery</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.3">
                <t indent="0" pn="section-toc.1-1.8.2.3.1"><xref derivedContent="8.3" format="counter" sectionFormat="of" target="section-8.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-host-sending-ns-to-the-rout">Host Sending NS to the Router Address from Its GUA</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.4">
                <t indent="0" pn="section-toc.1-1.8.2.4.1"><xref derivedContent="8.4" format="counter" sectionFormat="of" target="section-8.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-host-sending-router-solicit">Host Sending Router Solicitation from Its GUA</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.5">
                <t indent="0" pn="section-toc.1-1.8.2.5.1"><xref derivedContent="8.5" format="counter" sectionFormat="of" target="section-8.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-routers-populating-their-ca">Routers Populating Their Caches by Gleaning from Neighbor Discovery Packets</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.6">
                <t indent="0" pn="section-toc.1-1.8.2.6.1"><xref derivedContent="8.6" format="counter" sectionFormat="of" target="section-8.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-initiating-host-to-router-c">Initiating Host-to-Router Communication</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.7">
                <t indent="0" pn="section-toc.1-1.8.2.7.1"><xref derivedContent="8.7" format="counter" sectionFormat="of" target="section-8.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-making-the-probing-logic-on">Making the Probing Logic on Hosts More Robust</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.8">
                <t indent="0" pn="section-toc.1-1.8.2.8.1"><xref derivedContent="8.8" format="counter" sectionFormat="of" target="section-8.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-increasing-the-buffer-size-">Increasing the Buffer Size on Routers</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.9">
                <t indent="0" pn="section-toc.1-1.8.2.9.1"><xref derivedContent="8.9" format="counter" sectionFormat="of" target="section-8.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-transit-data-plane-traffic-">Transit Data Plane Traffic from a New Address to Trigger Address Resolution</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
              <li pn="section-toc.1-1.11.2.1">
                <t indent="0" pn="section-toc.1-1.11.2.1.1"><xref derivedContent="11.1" format="counter" sectionFormat="of" target="section-11.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.11.2.2">
                <t indent="0" pn="section-toc.1-1.11.2.2.1"><xref derivedContent="11.2" format="counter" sectionFormat="of" target="section-11.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-address">Author's Address</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section numbered="true" toc="include" anchor="Introduction" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">
                          The Neighbor Discovery state machine defined in  <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> assumes that communications between IPv6 nodes are, in most cases, bidirectional and if a node A is trying to communicate to its neighbor, node B, the return traffic flows could be expected.  So, when node A starts the address resolution process, the target node B would also create an entry containing A's IPv6 and link-layer addresses in its Neighbor Cache. That entry will be used for sending the return traffic to A.
      </t>
      <t indent="0" pn="section-1-2">
                          In particular, <xref target="RFC4861" sectionFormat="of" section="7.2.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.5" derivedContent="RFC4861"/> states:
      </t>
      <blockquote pn="section-1-3">When a valid Neighbor Advertisement is received (either solicited or unsolicited), the Neighbor Cache is searched for the target's entry.
                          If no entry exists, the advertisement <bcp14>SHOULD</bcp14> be silently discarded.
   There is no need to create an entry if none exists, since the recipient has apparently not initiated any communication with the target.</blockquote>
      <t indent="0" pn="section-1-4">
                                  While this approach is perfectly suitable for host-to-host on-link communications, it does not work so well when a host sends traffic to off-link destinations.
                                  After joining the network and receiving a Router Advertisement, the host populates its Neighbor Cache with the default router IPv6 and link-layer addresses and is able to send traffic to off-link destinations.
                                  At the same time, the router does not have any cache entries for the host global addresses yet and only starts address resolution upon receiving the first packet of the return traffic flow.
                                  While waiting for the resolution to complete, routers only keep a very small number of packets in the queue, as recommended in <xref target="RFC4861" sectionFormat="of" section="7.2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.2" derivedContent="RFC4861"/>.
Any additional packets arriving before the resolution process finishes are likely to result in dropped packets.
                                          It can cause packet loss and performance degradation that can be visible to users.
      </t>
      <t indent="0" pn="section-1-5">
This document updates the Neighbor Discovery protocol <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> to avoid packet loss in the scenario described above.
<xref target="changes" format="default" sectionFormat="of" derivedContent="Section 4"/> discusses the changes and analyzes the potential impact, while normative changes to <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> are specified in <xref target="RFC_UPD" format="default" sectionFormat="of" derivedContent="Section 6"/>.
</t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-1.1">
        <name slugifiedName="name-requirements-language">Requirements Language</name>
        <t indent="0" pn="section-1.1-1">The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
       "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
       "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
       "<bcp14>SHOULD NOT</bcp14>",
       "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
       "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
       are to be interpreted as described in BCP 14
       <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only
       when, they appear in all capitals, as shown here.</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-1.2">
        <name slugifiedName="name-terminology">Terminology</name>
        <dl newline="false" spacing="normal" indent="3" pn="section-1.2-1">
          <dt pn="section-1.2-1.1">Node:</dt>
          <dd pn="section-1.2-1.2">A device that implements IP <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.3">Host:</dt>
          <dd pn="section-1.2-1.4">Any node that is not a router <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.5">ND:</dt>
          <dd pn="section-1.2-1.6">Neighbor Discovery <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.7">NC:</dt>
          <dd pn="section-1.2-1.8">Neighbor Cache <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>. The Neighbor Cache entry can be in one of five states, as described in <xref target="RFC4861" sectionFormat="of" section="7.3.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.3.2" derivedContent="RFC4861"/>: INCOMPLETE, REACHABLE, STALE, DELAY, or PROBE.</dd>
          <dt pn="section-1.2-1.9">SLAAC:</dt>
          <dd pn="section-1.2-1.10">IPv6 Stateless Address Autoconfiguration <xref target="RFC4862" format="default" sectionFormat="of" derivedContent="RFC4862"/>.</dd>
          <dt pn="section-1.2-1.11">NS:</dt>
          <dd pn="section-1.2-1.12">Neighbor Solicitation <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.13">NA:</dt>
          <dd pn="section-1.2-1.14">Neighbor Advertisement <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.15">RS:</dt>
          <dd pn="section-1.2-1.16">Router Solicitation <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.17">RA:</dt>
          <dd pn="section-1.2-1.18">Router Advertisement  <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.19">SLLAO:</dt>
          <dd pn="section-1.2-1.20">Source Link-Layer Address Option. An option in the ND packets containing the link-layer address of the sender of the packet <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.21">TLLAO:</dt>
          <dd pn="section-1.2-1.22">Target Link-Layer Address Option. An option in the ND packets containing the link-layer address of the target <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.</dd>
          <dt pn="section-1.2-1.23">GUA:</dt>
          <dd pn="section-1.2-1.24">Global Unicast Address <xref target="RFC4291" format="default" sectionFormat="of" derivedContent="RFC4291"/>.</dd>
          <dt pn="section-1.2-1.25">DAD:</dt>
          <dd pn="section-1.2-1.26">Duplicate Address Detection <xref target="RFC4862" format="default" sectionFormat="of" derivedContent="RFC4862"/>.</dd>
          <dt pn="section-1.2-1.27">Preferred Address:</dt>
          <dd pn="section-1.2-1.28">An address assigned to an interface whose uniqueness has been verified using DAD and whose use by upper-layer protocols is unrestricted <xref target="RFC4862" format="default" sectionFormat="of" derivedContent="RFC4862"/>. Preferred addresses may be used as the source address of packets sent from the interface.</dd>
          <dt pn="section-1.2-1.29">Optimistic DAD:</dt>
          <dd pn="section-1.2-1.30">A modification of DAD <xref target="RFC4429" format="default" sectionFormat="of" derivedContent="RFC4429"/>.</dd>
        </dl>
      </section>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-problem-statement">Problem Statement</name>
      <t indent="0" pn="section-2-1">
                 The most typical scenario when the problem described in this document may arise is a host joining the network, forming a new address, and
 using that address for accessing the Internet:
      </t>
      <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-2-2"><li pn="section-2-2.1" derivedCounter="1.">
                                          A host joins the network and receives a Router Advertisement (RA) packet from the first-hop router (either a periodic unsolicited RA or a response to a Router Solicitation sent by the host).
                                                  The RA contains information the host needs to perform SLAAC and to configure its network stack.
                                                  The RA is sent from the router's link-local address to a link-local destination address and may contain the link-layer address of the router.
                                                  As a result, the host can populate its Neighbor Cache with the router's link-local and link-layer addresses.
                                  </li>
        <li pn="section-2-2.2" derivedCounter="2.">
                                          The host starts opening connections to off-link destinations.
                                          A very common use case is a mobile device sending probes to detect Internet connectivity
and/or the presence of a captive portal on the network.
                                                  To speed up that process, many implementations use Optimistic DAD, which allows them to send probes before the DAD process is completed.
                                                          At that moment, the device's Neighbor Cache contains all information required to send those probes (such as the default router link-local and link-layer addresses).
                                                  The router's Neighbor Cache, however, might contain an entry for the device's link-local
address (if the device has been performing address resolution for the router's link-local address), but there are no entries for any of the device's global addresses.
                                  </li>
        <li pn="section-2-2.3" derivedCounter="3.">
                                          Return traffic is received by the first-hop router.
                As the router does not have any cache entry for the host's global address yet, the router starts the Neighbor Discovery process by creating an INCOMPLETE cache entry and then sending a Neighbor Solicitation to the solicited-node multicast address (<xref target="RFC4861" sectionFormat="of" section="7.3.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.3.2" derivedContent="RFC4861"/>).
                As per <xref target="RFC4861" sectionFormat="of" section="7.2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.2" derivedContent="RFC4861"/>,
 routers <bcp14>MUST</bcp14> buffer at least one data packet and <bcp14>MAY</bcp14> buffer more, while resolving the packet destination address.
                        However, most router implementations limit the buffer size to a few packets only, and some implementations are known to buffer just one packet.
So, any subsequent packets arriving before the address resolution process is completed cause packet loss by replacing older packets in the buffer.
                                  </li>
        <li pn="section-2-2.4" derivedCounter="4.">
                                        If the host sends multiple probes in parallel, in the worst case, it would consider all but one of them failed.
                                        That leads to user-visible delay in connecting to the network, especially if the host implements some form of backoff mechanism and does not retransmit the probes as soon as possible.
                                  </li>
      </ol>
      <t indent="0" pn="section-2-3">
                                  This scenario illustrates the problem occurring when the device connects to the network for the first time or after an inactivity period long enough for the device's address to be removed from the router's Neighbor Cache.
                                  However, the same sequence of events happens when the host starts using a new global address previously unseen by the router, such as a new privacy address <xref target="RFC8981" format="default" sectionFormat="of" derivedContent="RFC8981"/> or if the router's Neighbor Cache has been flushed.
      </t>
      <t indent="0" pn="section-2-4">
                          While in dual-stack networks this problem might be hidden by Happy Eyeballs <xref target="RFC8305" format="default" sectionFormat="of" derivedContent="RFC8305"/>, it manifests quite clearly in IPv6-only environments, especially wireless environments, leading to poor user experience and contributing to a negative perception of IPv6-only solutions as unstable and non-deployable.
      </t>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-solution-requirements">Solution Requirements</name>
      <t indent="0" pn="section-3-1">
                It would be highly desirable to improve the Neighbor Discovery mechanics so routers have a usable cache entry for a host address by the time the router receives the first packet for that address.
                 In particular:

      </t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3-2">
        <li pn="section-3-2.1">
                                 If the router does not have a Neighbor Cache entry for the address, a STALE entry needs to be created proactively, prior to arrival of the first packet intended for that address.
                         </li>
        <li pn="section-3-2.2">
                                 The solution needs to work for Optimistic Addresses as well.
                                 Devices implementing Optimistic DAD usually attempt to minimize the delay in connecting to the network and therefore are more likely to be affected by the problem described in this document.
                         </li>
        <li pn="section-3-2.3">
                                 In the case of duplicate addresses present in the network, the solution should not override the existing entry.
                         </li>
        <li pn="section-3-2.4">
                                 In topologies with multiple first-hop routers, the cache needs to be updated on all of them, as traffic might be asymmetric: outgoing flows leaving the network via one router while the return traffic enters the segment via another one.
                        </li>
      </ul>
      <t indent="0" pn="section-3-3">
                        In addition, the solution must not exacerbate issues described in <xref target="RFC6583" format="default" sectionFormat="of" derivedContent="RFC6583"/> and needs to be compatible with the recommendations provided in <xref target="RFC6583" format="default" sectionFormat="of" derivedContent="RFC6583"/>.
      </t>
    </section>
    <section anchor="changes" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-changes-to-neighbor-discove">Changes to Neighbor Discovery</name>
      <t indent="0" pn="section-4-1">
                      The following changes are required to minimize the delay in creating new entries in a router's Neighbor Cache:
      </t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4-2">
        <li pn="section-4-2.1">
                                     A node sends unsolicited NAs upon assigning a new IPv6 address to its interface.
                              </li>
        <li pn="section-4-2.2">
                                     A router creates a new cache entry upon receiving an unsolicited NA from a host.
                              </li>
      </ul>
      <t indent="0" pn="section-4-3">
                      The following sections discuss these changes in more detail.
    Normative changes are specified in <xref target="RFC_UPD" format="default" sectionFormat="of" derivedContent="Section 6"/>.
      </t>
      <section anchor="hosts" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-nodes-sending-gratuitous-ne">Nodes Sending Gratuitous Neighbor Advertisements</name>
        <t indent="0" pn="section-4.1-1">
                              <xref target="RFC4861" sectionFormat="of" section="7.2.6" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.6" derivedContent="RFC4861"/> discusses using unsolicited Neighbor 
                              Advertisements to inform node neighbors of the new link-layer address quickly. 
                              The same mechanism could be used to notify the node neighbors about the new network-layer
                              address as well: the node can send unsolicited Neighbor Advertisements upon assigning a new IPv6 address to its interface. 
        </t>
        <t indent="0" pn="section-4.1-2">
                              To minimize potential disruption in the case of duplicate addresses, the node should not set the Override flag for a preferred address and must not set the Override flag if the address is in the Optimistic state <xref target="RFC4429" format="default" sectionFormat="of" derivedContent="RFC4429"/>.
        </t>
        <t indent="0" pn="section-4.1-3">
                              As the main purpose of sending unsolicited NAs upon configuring a new address is to proactively create a Neighbor Cache entry on the first-hop routers, the gratuitous NAs are sent to the all-routers multicast address (ff02::2). Limiting the recipients to routers only would help reduce the multicast noise level. 
                              If the link-layer devices are performing Multicast Listener Discovery (MLD) snooping <xref target="RFC4541" format="default" sectionFormat="of" derivedContent="RFC4541"/>, then those unsolicited NAs will only be sent to routers on the given network segment/link, instead of being flooded to all nodes. 
        </t>
        <t indent="0" pn="section-4.1-4">
                              It should be noted that the mechanism discussed here does not cause any significant increase in multicast traffic.
                              The additional multicast unsolicited NAs would proactively create a STALE cache entry on the router, as discussed below.
                              When the router receives the return traffic flows, it does not need to send multicast NSes to the solicited-node multicast address but would send unicast NSes instead.
                              Therefore, this procedure would only produce an increase in the overall amount of multicast traffic if no return traffic arrives for the address that sent the unsolicited NA or if the router does not create a STALE entry upon receiving such an NA. The increase would be negligible, as that additional traffic is a few orders of magnitude less than the usual level of Neighbor Discovery multicast traffic. 
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-routers-creating-cache-entr">Routers Creating Cache Entries upon Receiving Unsolicited Neighbor Advertisements</name>
        <t indent="0" pn="section-4.2-1">
                              <xref target="RFC4861" sectionFormat="of" section="7.2.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.5" derivedContent="RFC4861"/> states:
        </t>
        <blockquote pn="section-4.2-2">When a valid Neighbor Advertisement is received (either solicited or
   unsolicited), the Neighbor Cache is searched for the target's entry.
   If no entry exists, the advertisement <bcp14>SHOULD</bcp14> be silently discarded.
   There is no need to create an entry if none exists, since the
   recipient has apparently not initiated any communication with the
   target.</blockquote>
        <t indent="0" pn="section-4.2-3">
                              The reasoning behind dropping unsolicited Neighbor Advertisements ("the
   recipient has apparently not initiated any communication with the
   target") is valid for on-link host-to-host communication but, as discussed in <xref target="Introduction" format="default" sectionFormat="of" derivedContent="Section 1"/>, 
   it does not really apply to the scenario when the host is announcing its address to routers.
   Therefore, it would be beneficial to allow routers to create new entries upon receiving an unsolicited Neighbor Advertisement.
        </t>
        <t indent="0" pn="section-4.2-4">
                                      This document updates <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> so that routers create a new Neighbor Cache entry upon receiving an unsolicited Neighbor Advertisement for an address that does not already have a Neighbor Cache entry.
                                              These changes do not modify the router behavior specified in <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> for the scenario when the corresponding Neighbor Cache entry already exists.

        </t>
        <t indent="0" pn="section-4.2-5">
The next section analyzes various scenarios of duplicate addresses and discusses the potential impact of creating a STALE entry for a duplicate IPv6 address.
</t>
      </section>
    </section>
    <section anchor="avoid_dis" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-avoiding-disruption">Avoiding Disruption</name>
      <t indent="0" pn="section-5-1">
                                    If nodes following the recommendations in this document are using the DAD mechanism defined in <xref target="RFC4862" format="default" sectionFormat="of" derivedContent="RFC4862"/>, they would send unsolicited NAs as soon as the address changes state from tentative to preferred (after its uniqueness has been verified).
                                            However, nodes willing to minimize network stack configuration delays might be using Optimistic Addresses, which means there is a possibility of the address not being unique on the link.
                                            <xref target="RFC4429" sectionFormat="of" section="2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4429#section-2.2" derivedContent="RFC4429"/> discusses measures to ensure that ND packets from the Optimistic Address do not override any existing Neighbor Cache entries, as it would cause interruption of the rightful address owner's traffic in the case of an address conflict.
                                                    Nodes that are willing to speed up their network stack configuration are most likely to be affected by the problem outlined in this document; therefore, it seems reasonable for such hosts to advertise their Optimistic Addresses by sending unsolicited NAs. 
                                                    The main question to consider is the potential risk of overriding the cache entry for the rightful address owner if the Optimistic Address happens to be a duplicate.  
      </t>
      <t indent="0" pn="section-5-2">
                                    The following sections discuss the address collision scenario when a node sends an unsolicited NA for an address in the Optimistic state, while another node (the rightful owner) already has the same address assigned.
                                    This document uses the term "the rightful owner", as the same terminology is used in <xref target="RFC4429" format="default" sectionFormat="of" derivedContent="RFC4429"/>.
The analysis assumes that the host performs DAD, as <xref target="RFC4862" sectionFormat="of" section="5.4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4862#section-5.4" derivedContent="RFC4862"/> requires that DAD <bcp14>MUST</bcp14> be performed on all unicast
   addresses prior to assigning them to an interface.
      </t>
      <section anchor="avoid_dis_exists" numbered="true" toc="include" removeInRFC="false" pn="section-5.1">
        <name slugifiedName="name-neighbor-cache-entry-exists">Neighbor Cache Entry Exists in Any State Other Than INCOMPLETE</name>
        <t indent="0" pn="section-5.1-1">
                            If the router's Neighbor Cache entry for the target address already exists in any state other than INCOMPLETE, then as per <xref target="RFC4861" sectionFormat="of" section="7.2.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.5" derivedContent="RFC4861"/>, an unsolicited NA with the Override flag cleared would change the entry state from REACHABLE to STALE but would not update the entry in any other way. Therefore, even if the host sends an unsolicited NA from its Optimistic Address, the router's cache entry would not be updated with the new link-layer address, and no impact on the traffic for the rightful address owner is expected.
        </t>
        <t indent="0" pn="section-5.1-2">
The return traffic intended for the host with the Optimistic Address would be sent to the rightful owner. However, this is unavoidable with or without the unsolicited NA mechanism.
</t>
      </section>
      <section anchor="avoid_dis_inc" numbered="true" toc="include" removeInRFC="false" pn="section-5.2">
        <name slugifiedName="name-neighbor-cache-entry-is-in-">Neighbor Cache Entry Is in INCOMPLETE State</name>
        <t indent="0" pn="section-5.2-1">
                            Another corner case is the INCOMPLETE cache entry for the address. 
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.2-2"><li pn="section-5.2-2.1" derivedCounter="1.">
The router receives a packet for the rightful owner of the address.
</li>
          <li pn="section-5.2-2.2" derivedCounter="2.">
The router starts the address resolution process by creating an INCOMPLETE entry and sends the multicast NS.
</li>
          <li pn="section-5.2-2.3" derivedCounter="3.">
More packets arrive at the router for the address in question.
</li>
          <li pn="section-5.2-2.4" derivedCounter="4.">
The host configures an Optimistic Address and sends an unsolicited NA.
</li>
          <li pn="section-5.2-2.5" derivedCounter="5.">
The router creates a STALE entry and sends the buffered packet(s) to the host (while at least some of those packets are actually intended for the rightful owner).
</li>
          <li pn="section-5.2-2.6" derivedCounter="6.">
As the STALE entry was used to send packets, the router changes the entry state to DELAY and waits up to DELAY_FIRST_PROBE_TIME (5 seconds) <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> before sending a unicast NS.
</li>
          <li pn="section-5.2-2.7" derivedCounter="7.">
The rightful owner responds to the multicast NS sent at Step 2 with a solicited NA with the Override flag set.
</li>
          <li pn="section-5.2-2.8" derivedCounter="8.">
The router updates the entry with the TLLAO supplied (the rightful owner's link-layer address) and sets the entry state to REACHABLE (as the NA has the Solicited flag set).
</li>
        </ol>
        <t indent="0" pn="section-5.2-3">
As a result, some packets (packets in the buffer at Step 6 and all packets arriving between Step 6 and Step 8) are delivered to the host with the Optimistic Address, while some of them, if not all, are intended for the rightful owner. 
Without the unsolicited NA, one or more packets that are in the buffer at Step 8 (usually just one packet, but some routers may buffer a few) would have been delivered to the rightful owner and the rest of the packets would have been dropped.
However, the probability of such a scenario is rather low, as it would require the following 
things to happen almost simultaneously (within tens of milliseconds in most cases):
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.2-4">
          <li pn="section-5.2-4.1">
                                                                            One host starts using a new IPv6 address and sending traffic without sending an unsolicited NA first.
                                                            </li>
          <li pn="section-5.2-4.2">
                                                                            Another host configures the same IPv6 address in Optimistic mode before the router completes the address resolution process for the rightful owner.
                                                            </li>
        </ul>
        <t indent="0" pn="section-5.2-5">
It should be noted that in this scenario the rightful owner does not send any unsolicited NAs before sending packets. If the rightful owner implements the functionality described in this document and sends unsolicited NAs upon configuring its address, then the router creates a STALE entry for the address, causing all packets to be delivered to the rightful owner (see <xref target="avoid_dis_exists" format="default" sectionFormat="of" derivedContent="Section 5.1"/>). The rightful owner would experience no disruption but might receive some packets intended for the host with an Optimistic Address.
</t>
        <t indent="0" pn="section-5.2-6">
This section focuses on the scenario when the solicited NA from the rightful owner arrives after the unsolicited one sent from the Optimistic Address (Step 7 and Step 4, respectively).
If the solicited NA arrives first, it changes the NC entry state from INCOMPLETE to REACHABLE. As discussed in <xref target="avoid_dis_exists" format="default" sectionFormat="of" derivedContent="Section 5.1"/>, there will be no disruption for the rightful owner if the router already has a REACHABLE entry for the address when an unsolicited NA is received.
</t>
      </section>
      <section anchor="avoid_dis_nonexists" numbered="true" toc="include" removeInRFC="false" pn="section-5.3">
        <name slugifiedName="name-neighbor-cache-entry-does-n">Neighbor Cache Entry Does Not Exist</name>
        <t indent="0" pn="section-5.3-1">
                                            There are two distinct scenarios that can lead to the situation when the router does not have an NC entry for the IPv6 address:


        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.3-2"><li pn="section-5.3-2.1" derivedCounter="1.">
                                                            The rightful owner of the address has not been using it for off-link communication recently or has never used it at all. 
                                            </li>
          <li pn="section-5.3-2.2" derivedCounter="2.">
                                                            The rightful owner just started sending packets from that address, but the router has not received any return traffic yet. 
                                            </li>
        </ol>
        <t indent="0" pn="section-5.3-3">
                                            The impact on the rightful owner's traffic flows would be different in those cases.
        </t>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-5.3.1">
          <name slugifiedName="name-the-rightful-owner-is-not-s">The Rightful Owner Is Not Sending Packets from the Address</name>
          <t indent="0" pn="section-5.3.1-1">
                                                    In this scenario, the following events are expected to happen:

          </t>
          <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.3.1-2"><li pn="section-5.3.1-2.1" derivedCounter="1.">
                                                                    The host configures the address and sets its state to Optimistic.
                                                    </li>
            <li pn="section-5.3.1-2.2" derivedCounter="2.">
                                                                    The host sends an unsolicited NA with the Override flag set to zero and starts sending traffic from the Optimistic Address.
                                                    </li>
            <li pn="section-5.3.1-2.3" derivedCounter="3.">
                                                                    The router creates a STALE entry for the address and the host link-layer address.
                                                    </li>
            <li pn="section-5.3.1-2.4" derivedCounter="4.">
                                                                    The host starts DAD and detects the address duplication.
                                                    </li>
            <li pn="section-5.3.1-2.5" derivedCounter="5.">
                                                                    The router receives the return traffic for the duplicate address. As the NC entry is STALE, it sends traffic using that entry, changes it to DELAY, and waits up to DELAY_FIRST_PROBE_TIME seconds <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.
                                                            </li>
            <li pn="section-5.3.1-2.6" derivedCounter="6.">
                                                                            The router changes the NC entry state to PROBE and sends up to MAX_UNICAST_SOLICIT unicast NSes <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> separated by RetransTimer milliseconds <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> to the host link-layer address.
                                                    </li>
            <li pn="section-5.3.1-2.7" derivedCounter="7.">
                                                                    As the host has already detected the address conflict, it does not respond to the unicast NSes. (It is unlikely that the host has not completed the DAD process at this stage, as DELAY_FIRST_PROBE_TIME (5 seconds) is much higher than the DAD duration (DupAddrDetectTransmits*RetransTimer*1000 + MAX_RTR_SOLICITATION_DELAY seconds) (<xref target="RFC4862" sectionFormat="of" section="5.4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4862#section-5.4" derivedContent="RFC4862"/>).) The default value for the DAD process would be 1*1*1000 + 1 = 2 seconds <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>. 
If the host has completed DAD but did not detect the address conflict, then there are two hosts with the same address in the preferred state and disruption is inevitable anyway.
                                                    </li>
            <li pn="section-5.3.1-2.8" derivedCounter="8.">
                                                                   As the router receives no response for the unicast NSes, it deletes the NC entry.
                                                    </li>
            <li pn="section-5.3.1-2.9" derivedCounter="9.">
                                                                    If return packets for communication initiated at Step 2 are still arriving, the router buffers a small number of those packets and starts the address resolution process again by sending a multicast NS to the solicited-node multicast address. The rightful owner responds, and the router's NC entry is updated with the rightful owner's link-local address. The buffered packet or packets are sent to that address. Any packets still arriving after the address resolution process has completed are sent to the rightful address owner as well.
                                                    </li>
          </ol>
          <t indent="0" pn="section-5.3.1-3">
                                                    The rightful owner is not experiencing any disruption, as it does not send any traffic.
It would only start receiving packets intended for another host after Step 8 is completed and only if return packets for the communication initiated at Step 2 are still arriving.
</t>
          <t indent="0" pn="section-5.3.1-4">

                                                    However, the same behavior would be observed if the changes specified in this document are not implemented.
                                                    If the host starts sending packets from its Optimistic Address but then detects that the address is a duplicate, the first return packet would trigger the address resolution process and would be buffered until the resolution is completed.

The buffered packet(s) and any packets still arriving after the address is resolved would be forwarded to the rightful owner of the address.
So, the rightful owner might still receive one or more packets from the flows intended for another host.
Therefore, it's safe to conclude that the changes specified in this document do not introduce any disruption for the rightful owner of the duplicated address.
          </t>
        </section>
        <section anchor="dis_start" numbered="true" toc="include" removeInRFC="false" pn="section-5.3.2">
          <name slugifiedName="name-the-rightful-owner-has-star">The Rightful Owner Has Started Sending Packets from the Address</name>
          <t indent="0" pn="section-5.3.2-1">
                                            In this scenario, the following events are happening:

          </t>
          <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.3.2-2"><li pn="section-5.3.2-2.1" derivedCounter="1.">
                                                            The rightful owner starts sending traffic from the address (e.g., the address has just been configured or has not been recently used).
                                            </li>
            <li pn="section-5.3.2-2.2" derivedCounter="2.">
                                                                    The host configures the address and sets its state to Optimistic.
                                                    </li>
            <li pn="section-5.3.2-2.3" derivedCounter="3.">
                                                                    The host sends an unsolicited NA with the Override flag set to zero and starts sending traffic from the Optimistic Address.
                                                    </li>
            <li pn="section-5.3.2-2.4" derivedCounter="4.">
                                                                    The router creates a STALE entry for the address and the host link-layer address.
                                                    </li>
            <li pn="section-5.3.2-2.5" derivedCounter="5.">
                                                                    The host starts DAD and detects the address duplication.
                                                    </li>
            <li pn="section-5.3.2-2.6" derivedCounter="6.">
                                                                    The router receives the return traffic for the IPv6 address in question. Some flows are intended for the rightful owner of the duplicate address, while some are for the new host. As the NC entry is STALE, it sends traffic using that entry, changes it to DELAY, and waits up to DELAY_FIRST_PROBE_TIME seconds <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/>.
                                                            </li>
            <li pn="section-5.3.2-2.7" derivedCounter="7.">
                                                                            The router changes the NC entry state to PROBE and sends up to MAX_UNICAST_SOLICIT unicast NSes <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> separated by RetransTimer milliseconds <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> to the host link-layer address.
                                                    </li>
            <li pn="section-5.3.2-2.8" derivedCounter="8.">
                                                                    As the host has already detected the address conflict, it does not respond to the unicast NSes.
                                                    </li>
            <li pn="section-5.3.2-2.9" derivedCounter="9.">
                                                                   As the router receives no response for the unicast NSes, it deletes the NC entry.
                                                    </li>
            <li pn="section-5.3.2-2.10" derivedCounter="10.">
                                                                    The next packet recreates the entry and triggers the resolution process. The router buffers the packet and sends a multicast NS to the solicited-node multicast address. The rightful owner responds, and the router's NC entry is updated with the rightful owner's link-local address. 
                                                    </li>
          </ol>
          <t indent="0" pn="section-5.3.2-3">
                                                    As a result, the traffic for the address of the rightful owner would be sent to the host with the duplicate address instead.  The duration of the disruption can be estimated as DELAY_FIRST_PROBE_TIME*1000 + (MAX_UNICAST_SOLICIT - 1)*RetransTimer milliseconds.
                                                    As per the constants defined in <xref target="RFC4861" sectionFormat="of" section="10" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-10" derivedContent="RFC4861"/>, this interval is equal to 5*1000 + (3 - 1)*1000 = 7000 milliseconds, or 7 seconds.

          </t>
          <t indent="0" pn="section-5.3.2-4">
                                                            However, it should be noted that the probability of such a scenario is rather low. Similar to the scenario discussed in <xref target="avoid_dis_inc" format="default" sectionFormat="of" derivedContent="Section 5.2"/>, it would require the following things to happen almost simultaneously (within tens of milliseconds in most cases):
          </t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.2-5">
            <li pn="section-5.3.2-5.1">
                                                                            One host starts using a new IPv6 address and sending traffic without sending an unsolicited NA first.
                                                            </li>
            <li pn="section-5.3.2-5.2">
                                                                            Another host configures the same IPv6 address in Optimistic mode before the router receives the return traffic for the first host.
                                                            </li>
          </ul>
          <t indent="0" pn="section-5.3.2-6">
As discussed in <xref target="avoid_dis_inc" format="default" sectionFormat="of" derivedContent="Section 5.2"/>, the disruption for the rightful owner can easily be prevented if that node implements the mechanism described in this document. Sending unsolicited NAs before initiating off-link communication would create a STALE entry in the router's NC and prevent any traffic to that address from being sent to the host with the Optimistic Address (see <xref target="avoid_dis_exists" format="default" sectionFormat="of" derivedContent="Section 5.1"/>).
</t>
        </section>
      </section>
    </section>
    <section anchor="RFC_UPD" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-modifications-to-rfc-mandat">Modifications to RFC-Mandated Behavior</name>
      <t indent="0" pn="section-6-1">
                            All normative text in this memo is contained in this section.
      </t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-6.1">
        <name slugifiedName="name-modification-to-rfc-4861-ne">Modification to RFC 4861 (Neighbor Discovery for IP version 6 (IPv6))</name>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-6.1.1">
          <name slugifiedName="name-modification-to-section-725">Modification to Section 7.2.5 of RFC 4861</name>
          <t indent="0" pn="section-6.1.1-1">
                              This document makes the following changes to <xref target="RFC4861" sectionFormat="of" section="7.2.5" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.5" derivedContent="RFC4861"/>:
          </t>
          <t indent="0" pn="section-6.1.1-2">The text in RFC 4861 is as follows:</t>
          <blockquote pn="section-6.1.1-3">When a valid Neighbor Advertisement is received (either solicited or
   unsolicited), the Neighbor Cache is searched for the target's entry.
   If no entry exists, the advertisement <bcp14>SHOULD</bcp14> be silently discarded.
   There is no need to create an entry if none exists, since the
   recipient has apparently not initiated any communication with the
   target.</blockquote>
          <t indent="0" pn="section-6.1.1-4">This document updates the text as follows:</t>
          <blockquote pn="section-6.1.1-5">
            <t indent="0" pn="section-6.1.1-5.1">When a valid Neighbor Advertisement is received (either solicited or
   unsolicited), the Neighbor Cache is searched for the target's entry.
   If no entry exists:</t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.1.1-5.2">
              <li pn="section-6.1.1-5.2.1"> Hosts <bcp14>SHOULD</bcp14>  silently discard the advertisement.
   There is no need to create an entry if none exists, since the
   recipient has apparently not initiated any communication with the target.
</li>
              <li pn="section-6.1.1-5.2.2"> Routers <bcp14>SHOULD</bcp14> create a new entry for the target address with the link-layer address set to the Target Link-Layer Address Option (if supplied). The entry's reachability state <bcp14>MUST</bcp14> be set to STALE. If the received Neighbor Advertisement does not contain the Target Link-Layer Address Option, the advertisement <bcp14>SHOULD</bcp14> be silently discarded. 
</li>
            </ul>
          </blockquote>
        </section>
        <section anchor="UPD726" numbered="true" toc="include" removeInRFC="false" pn="section-6.1.2">
          <name slugifiedName="name-modification-to-section-726">Modification to Section 7.2.6 of RFC 4861</name>
          <t indent="0" pn="section-6.1.2-1">
                              This document makes the following changes to <xref target="RFC4861" sectionFormat="of" section="7.2.6" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-7.2.6" derivedContent="RFC4861"/>:
          </t>
          <t indent="0" pn="section-6.1.2-2">The text in RFC 4861 is as follows:</t>
          <blockquote pn="section-6.1.2-3">Also, a node belonging to an anycast address <bcp14>MAY</bcp14> multicast
   unsolicited Neighbor Advertisements for the anycast address when the
   node's link-layer address changes.</blockquote>
          <t indent="0" pn="section-6.1.2-4">This document updates the text as follows:</t>
          <blockquote pn="section-6.1.2-5">
            <t indent="0" pn="section-6.1.2-5.1">Also, a node belonging to an anycast address <bcp14>MAY</bcp14> multicast
   unsolicited Neighbor Advertisements for the anycast address when the
   node's link-layer address changes.</t>
            <t indent="0" pn="section-6.1.2-5.2">A node may also wish to notify its first-hop routers when it configures a new global IPv6 address so the routers can proactively populate their Neighbor Caches with the corresponding entries. In such cases, a node <bcp14>SHOULD</bcp14> send up to MAX_NEIGHBOR_ADVERTISEMENT
   Neighbor Advertisement messages. If the address is preferred, then the Override flag <bcp14>SHOULD NOT</bcp14> be set. If the address is in the Optimistic state, then the  Override flag <bcp14>MUST NOT</bcp14> be set. The destination address <bcp14>SHOULD</bcp14> be set to the all-routers multicast address. These advertisements <bcp14>MUST</bcp14> be separated by at
   least RetransTimer seconds. The first advertisement <bcp14>SHOULD</bcp14> be sent as soon as one of the
      following events happens:</t>
            <dl newline="false" spacing="normal" indent="3" pn="section-6.1.2-5.3">
              <dt pn="section-6.1.2-5.3.1">If Optimistic DAD <xref target="RFC4429" format="default" sectionFormat="of" derivedContent="RFC4429"/> is used:</dt>
              <dd pn="section-6.1.2-5.3.2">A new Optimistic Address is assigned
                                              to the node interface.</dd>
              <dt pn="section-6.1.2-5.3.3">If Optimistic DAD is not used:</dt>
              <dd pn="section-6.1.2-5.3.4">An address changes the state from
         tentative to preferred.</dd>
            </dl>
          </blockquote>
        </section>
      </section>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-7">
      <name slugifiedName="name-solution-limitations">Solution Limitations</name>
      <t indent="0" pn="section-7-1">
                              The solution described in this document provides some improvement for a node configuring a new IPv6 address and starting to send traffic from it.
                              However, that approach does not completely eliminate the scenario when a router receives some transit traffic for an address without the corresponding Neighbor Cache entry.
                              For example:
      </t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7-2">
        <li pn="section-7-2.1">If the host starts using an already-configured IPv6 address after a long period of inactivity, the router might not have the NC entry for that address anymore, as old/expired entries are deleted. </li>
        <li pn="section-7-2.2">Clearing the router's Neighbor Cache would trigger packet loss for all actively used addresses removed from the cache.</li>
      </ul>
    </section>
    <section anchor="others" numbered="true" toc="include" removeInRFC="false" pn="section-8">
      <name slugifiedName="name-solutions-considered-but-di">Solutions Considered but Discarded</name>
      <t indent="0" pn="section-8-1">
                      There are other possible approaches to address the problem. For example:
      </t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8-2">
        <li pn="section-8-2.1">
                                      Just do nothing.
                              </li>
        <li pn="section-8-2.2">
                                      Migrate from the "reactive" Neighbor Discovery <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> to the registration-based mechanisms <xref target="RFC8505" format="default" sectionFormat="of" derivedContent="RFC8505"/>.
                              </li>
        <li pn="section-8-2.3">
                                     Create new entries in the router's Neighbor Cache by gleaning from Neighbor Discovery DAD messages.
                              </li>
        <li pn="section-8-2.4">
                                      Initiate bidirectional communication from the host to the router using the host GUA.
                              </li>
        <li pn="section-8-2.5">
                                      Make the probing logic on hosts more robust.
                              </li>
        <li pn="section-8-2.6">
                                      Increase the buffer size on routers.
                              </li>
        <li pn="section-8-2.7">
                                      Transit data plane traffic from an unknown address (an address without the corresponding Neighbor Cache entry) to trigger an address resolution process on the router.
                              </li>
      </ul>
      <t indent="0" pn="section-8-3">
                      It should be noted that some of those options are already implemented by some vendors. The following sections discuss those approaches and the reasons they were discarded.
      </t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.1">
        <name slugifiedName="name-do-nothing">Do Nothing</name>
        <t indent="0" pn="section-8.1-1">
                              One of the possible approaches might be to declare that everything is working as intended and let the upper-layer protocols deal with packet loss. The obvious drawbacks include:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.1-2">
          <li pn="section-8.1-2.1">
                                                      Unhappy users.
                                              </li>
          <li pn="section-8.1-2.2">
                                                      Many support tickets.
                                              </li>
          <li pn="section-8.1-2.3">
                                                      More resistance to deploying IPv6 and IPv6-only networks.
                                              </li>
        </ul>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.2">
        <name slugifiedName="name-change-to-the-registration-">Change to the Registration-Based Neighbor Discovery</name>
        <t indent="0" pn="section-8.2-1">
                                      The most radical approach would be to move away from the reactive ND as defined in <xref target="RFC4861" format="default" sectionFormat="of" derivedContent="RFC4861"/> and expand the registration-based ND <xref target="RFC6775" format="default" sectionFormat="of" derivedContent="RFC6775"/> <xref target="RFC8505" format="default" sectionFormat="of" derivedContent="RFC8505"/> used in IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) to the rest of the IPv6 deployments.
                                              This option requires some investigation and discussion.
                                              However, significant changes to the existing IPv6 implementations would be needed, so an unclear adoption timeline makes this approach less preferable than the approach specified in this document.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.3">
        <name slugifiedName="name-host-sending-ns-to-the-rout">Host Sending NS to the Router Address from Its GUA</name>
        <t indent="0" pn="section-8.3-1">
                              The host could force the creation of a STALE entry for its GUA in the router's Neighbor Cache by sending the following Neighbor Solicitation message:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.3-2">
          <li pn="section-8.3-2.1">
                                              The NS source address is the host GUA.
                                      </li>
          <li pn="section-8.3-2.2">
                                                      The destination address is the default router IPv6 address.
                                      </li>
          <li pn="section-8.3-2.3">
                                              The Source Link-Layer Address Option contains the host link-layer address.
                                      </li>
          <li pn="section-8.3-2.4">
                                              The target address is the host's default router address (the default router address the host received in the RA).
                                      </li>
        </ul>
        <t indent="0" pn="section-8.3-3">
                              The main disadvantages of this approach are as follows:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.3-4">
          <li pn="section-8.3-4.1">
                                              It would not work for Optimistic Addresses, as <xref target="RFC4429" sectionFormat="of" section="2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4429#section-2.2" derivedContent="RFC4429"/> explicitly prohibits sending Neighbor Solicitations from an Optimistic Address.
                                      </li>
          <li pn="section-8.3-4.2">
                                              If first-hop redundancy is deployed in the network, the NS would reach the active router only, so all backup routers (or all active routers except one) would not get their Neighbor Cache updated.
                                      </li>
          <li pn="section-8.3-4.3">
                                                      Some wireless devices are known to alter ND packets and perform various nonobvious forms of ND proxy actions.
                                                     In some cases, unsolicited NAs might not even reach the routers.
                                      </li>
        </ul>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.4">
        <name slugifiedName="name-host-sending-router-solicit">Host Sending Router Solicitation from Its GUA</name>
        <t indent="0" pn="section-8.4-1">
                                      The host could send a Router Solicitation message to the all-routers multicast address, using its GUA as a source.
                                      If the host link-layer address is included in the Source Link-Layer Address Option, the router would create a STALE entry for the host GUA as per <xref target="RFC4861" sectionFormat="of" section="6.2.6" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4861#section-6.2.6" derivedContent="RFC4861"/>.
                                      However, this approach cannot be used if the GUA is in the Optimistic state: <xref target="RFC4429" sectionFormat="of" section="2.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4429#section-2.2" derivedContent="RFC4429"/>  explicitly prohibits using an Optimistic Address as the source address of a Router Solicitation with a SLLAO, as it might cause disruption for the rightful owner of the address in the case of a collision.
                                      So, for the Optimistic Addresses, the host can send an RS without a SLLAO included.
                                      In that case, the router may respond with either a multicast or unicast RA (only the latter would create a cache entry).
        </t>
        <t indent="0" pn="section-8.4-2">
                              This approach has the following drawbacks:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.4-3">
          <li pn="section-8.4-3.1">
                                                      If the address is in the Optimistic state, the RS cannot contain a SLLAO. As a result, the router would only create a cache entry if solicited RAs are sent as unicast.
                                                      Routers sending solicited RAs as multicast would not create a new cache entry, as they do not need to send a unicast packet back to the host.
                                              </li>
          <li pn="section-8.4-3.2">
                                                      There might be a random delay between receiving an RS and sending a unicast RA back (and creating a cache entry), which might undermine the idea of creating the cache entry proactively.
                                              </li>
          <li pn="section-8.4-3.3">
                                                      Some wireless devices are known to intercept ND packets and perform various nonobvious forms of ND proxy actions. In some cases, the RS might not even reach the routers.
                                              </li>
        </ul>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.5">
        <name slugifiedName="name-routers-populating-their-ca">Routers Populating Their Caches by Gleaning from Neighbor Discovery Packets</name>
        <t indent="0" pn="section-8.5-1">
                               Routers may be able to learn about new addresses by gleaning from the DAD Neighbor Solicitation messages.
                               The router could listen to all solicited-node multicast address groups and, upon receiving a Neighbor Solicitation from the unspecified address, search its Neighbor Cache for the solicitation's target address.
                               If no entry exists, the router may create an entry, set its reachability state to INCOMPLETE, and start the address resolution process for that entry.
        </t>
        <t indent="0" pn="section-8.5-2">
                              The same solution was proposed in <xref target="I-D.halpern-6man-nd-pre-resolve-addr" format="default" sectionFormat="of" derivedContent="ND-ADDR-RES"/>. Some routing vendors already support such optimization. However, this approach has a number of drawbacks and therefore should not be used as the only solution:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.5-3">
          <li pn="section-8.5-3.1">
                                                      Routers need to receive all multicast Neighbor Discovery packets; this might negatively impact a router's CPU.
                                              </li>
          <li pn="section-8.5-3.2">
                                                      If the router starts the address resolution process as soon as it receives the DAD Neighbor Solicitation, the host might still be performing DAD and the target address might be tentative.
                                                      In that case, the host <bcp14>SHOULD</bcp14> silently ignore the received Neighbor Solicitation from the router as per <xref target="RFC4862" sectionFormat="of" section="5.4.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4862#section-5.4.3" derivedContent="RFC4862"/>. 
                                                      As a result, the router might not be able to complete the address resolution process before the return traffic arrives.

                                              </li>
        </ul>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.6">
        <name slugifiedName="name-initiating-host-to-router-c">Initiating Host-to-Router Communication</name>
        <t indent="0" pn="section-8.6-1">
                              The host may force the router to start address resolution by sending a data packet such as ping or traceroute to its default router link-local address, using the GUA as a source address.  
                              As the RTT to the default router is lower than the RTT to any off-link destinations, it's quite likely that the router would start the Neighbor Discovery process for the host GUA before the first packet of the returning traffic arrives.
        </t>
        <t indent="0" pn="section-8.6-2"> This approach has the following drawbacks:
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.6-3">
          <li pn="section-8.6-3.1">
                                                      Data packets to the router's link-local address could be blocked by a security policy or control plane protection mechanism.
                                              </li>
          <li pn="section-8.6-3.2">
                                                      It introduces an additional overhead for the router's control plane (in addition to processing ND packets, the data packet needs to be processed as well).
                                              </li>
          <li pn="section-8.6-3.3">
                                                      Unless the data packet is sent to the all-routers ff02::2 multicast address, if the network provides a first-hop redundancy, then only the active router would create a new cache entry.
                                              </li>
        </ul>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.7">
        <name slugifiedName="name-making-the-probing-logic-on">Making the Probing Logic on Hosts More Robust</name>
        <t indent="0" pn="section-8.7-1">
                                      Theoretically, the probing logic on hosts might be modified to better deal with initial packet loss. For example, only one probe can be sent, or probe retransmit intervals can be reduced. However, this approach has a number of drawbacks:

        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.7-2">
          <li pn="section-8.7-2.1">It would require updating all possible applications that perform probing, while the solution described in this document is implemented at the operating-system level.</li>
          <li pn="section-8.7-2.2">
            <t indent="0" pn="section-8.7-2.2.1">Some implementations need to send multiple probes. Examples include but are not limited to:
            </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.7-2.2.2">
              <li pn="section-8.7-2.2.2.1">Sending AAAA and A record DNS probes in parallel.</li>
              <li pn="section-8.7-2.2.2.2">Detecting captive portals, which often requires sending multiple packets.</li>
            </ul>
          </li>
          <li pn="section-8.7-2.3">
            <t indent="0" pn="section-8.7-2.3.1">While it would increase the probability that the probing will complete successfully, there are multiple cases when packet loss would still occur:
            </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.7-2.3.2">
              <li pn="section-8.7-2.3.2.1"> The probe response consists of multiple packets, so all but the first one are dropped. </li>
              <li pn="section-8.7-2.3.2.2"> There are multiple applications on the same host sending traffic, and return packets arrive simultaneously.</li>
              <li pn="section-8.7-2.3.2.3"> There are multiple first-hop routers in the network. The first probe packet creates the NC entry on one of them. The subsequent return traffic flows might cross other routers and still experience the issue.</li>
            </ul>
          </li>
          <li pn="section-8.7-2.4">
                                    Reducing the probe retransmit interval unnecessarily increases network utilization and might cause network congestion.
                              </li>
        </ul>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.8">
        <name slugifiedName="name-increasing-the-buffer-size-">Increasing the Buffer Size on Routers</name>
        <t indent="0" pn="section-8.8-1">
                                              Increasing the buffer size and buffering more packets would exacerbate issues described in <xref target="RFC6583" format="default" sectionFormat="of" derivedContent="RFC6583"/> and make the router more vulnerable to ND-based denial-of-service attacks.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-8.9">
        <name slugifiedName="name-transit-data-plane-traffic-">Transit Data Plane Traffic from a New Address to Trigger Address Resolution</name>
        <t indent="0" pn="section-8.9-1">
                              When a router receives a transit packet sourced by an on-link neighbor node, it might check for the presence of a Neighbor Cache entry for the packet source address and, if the entry does not exist, start the address resolution process.
                              This approach does ensure that a Neighbor Cache entry is proactively created every time a new, previously unseen GUA is used for sending off-link traffic.
However, this approach has a number of limitations. In particular:
</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8.9-2">
          <li pn="section-8.9-2.1">If traffic flows are asymmetrical, the return traffic might not transit the same router as the original traffic that triggered the address resolution process.
So, the Neighbor Cache entry is created on the "wrong" router, not the one that actually needs the Neighbor Cache entry for the host address.
</li>
          <li pn="section-8.9-2.2">
        The functionality needs to be limited to explicitly configured networks/interfaces, as the router needs to distinguish between on-link addresses (addresses for which the router needs to have Neighbor Cache entries) and the rest of the address space. 
        The proactive address resolution process must only be triggered by packets from the prefixes known to be on-link. Otherwise, traffic from spoofed source addresses or any transit traffic could lead to Neighbor Cache exhaustion.
</li>
          <li pn="section-8.9-2.3">
Implementing such functionality is much more complicated than all other solutions, as it would involve complex interactions between the data plane and the control plane.
</li>
        </ul>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="include" removeInRFC="false" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-9-1">
      This document has no IANA actions.
      </t>
    </section>
    <section anchor="Security" numbered="true" toc="include" removeInRFC="false" pn="section-10">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-10-1">
                    One of the potential attack vectors to consider is cache spoofing, where the attacker might try to install a cache entry for the victim's IPv6 address and the attacker's link-layer address. However, it should be noted that this document does not propose any changes for the scenario when the Neighbor Cache for a given IPv6 address already exists.
                    Therefore, there are no new vectors for an attacker to override an existing cache entry.
      </t>
      <t indent="0" pn="section-10-2">
<xref target="avoid_dis" format="default" sectionFormat="of" derivedContent="Section 5"/> describes some corner cases when a host with a duplicate Optimistic Address might get some packets intended for the rightful owner of the address. However, such scenarios do not introduce any new attack vectors: even without the changes discussed in this document, an attacker can easily override the router's Neighbor Cache and redirect the traffic by sending NAs with the Solicited flag set.
As discussed in <xref target="dis_start" format="default" sectionFormat="of" derivedContent="Section 5.3.2"/>, the worst-case scenario might cause a disruption for up to 7 seconds. Because this scenario is highly unlikely, this risk of disruption is considered acceptable. More importantly, for all cases described in <xref target="avoid_dis" format="default" sectionFormat="of" derivedContent="Section 5"/>, the rightful owner can prevent disruption caused by an accidental address duplication just by implementing the mechanism described in this document. If the rightful owner sends unsolicited NAs before using the address, the STALE entry would be created on the router's NC, and any subsequent unsolicited NAs sent from the host with an Optimistic Address would not override the NC entry. 
</t>
      <t indent="0" pn="section-10-3">
                    A malicious host could attempt to exhaust the Neighbor Cache on the router by creating a large number of STALE entries. However, this attack vector is not new, and the mechanism specified in this document does not increase the risk of such an attack: the attacker could do it, for example, by sending an NS or RS packet with a SLLAO included. All recommendations from <xref target="RFC6583" format="default" sectionFormat="of" derivedContent="RFC6583"/> still apply.
      </t>
      <t indent="0" pn="section-10-4">
                    Announcing a new address to the all-routers multicast address may inform an on-link attacker about IPv6 addresses assigned to the host. However, hiding information about the specific IPv6 address should not be considered a security measure, as such information is usually disclosed via DAD to all nodes anyway if MLD snooping is not enabled. Network administrators can also mitigate this issue by enabling MLD snooping on the link-layer devices to prevent IPv6 link-local multicast packets from being flooded to all on-link nodes. 
                            If peer-to-peer on-link communications are not desirable for a given network segment, they should be prevented by proper Layer 2 security mechanisms. Therefore, the risk of allowing hosts to send unsolicited Neighbor Advertisements to the all-routers multicast address is low.
      </t>
      <t indent="0" pn="section-10-5">
                    It should be noted that the mechanism discussed in this document allows hosts to proactively inform their routers about global IPv6 addresses existing on-link. Routers could use that information to distinguish between used and unused addresses to mitigate Neighbor Cache exhaustion DoS attacks as described in <xref target="RFC3756" sectionFormat="of" section="4.3.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc3756#section-4.3.2" derivedContent="RFC3756"/> and in <xref target="RFC6583" format="default" sectionFormat="of" derivedContent="RFC6583"/>.

      </t>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.halpern-6man-nd-pre-resolve-addr" to="ND-ADDR-RES"/>
    <references pn="section-11">
      <name slugifiedName="name-references">References</name>
      <references pn="section-11.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC4291" target="https://www.rfc-editor.org/info/rfc4291" quoteTitle="true" derivedAnchor="RFC4291">
          <front>
            <title>IP Version 6 Addressing Architecture</title>
            <author initials="R." surname="Hinden" fullname="R. Hinden">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Deering" fullname="S. Deering">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="February"/>
            <abstract>
              <t indent="0">This specification defines the addressing architecture of the IP Version 6 (IPv6) protocol.  The document includes the IPv6 addressing model, text representations of IPv6 addresses, definition of IPv6 unicast addresses, anycast addresses, and multicast addresses, and an IPv6 node's required addresses.</t>
              <t indent="0">This document obsoletes RFC 3513, "IP Version 6 Addressing Architecture".   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4291"/>
          <seriesInfo name="DOI" value="10.17487/RFC4291"/>
        </reference>
        <reference anchor="RFC4429" target="https://www.rfc-editor.org/info/rfc4429" quoteTitle="true" derivedAnchor="RFC4429">
          <front>
            <title>Optimistic Duplicate Address Detection (DAD) for IPv6</title>
            <author initials="N." surname="Moore" fullname="N. Moore">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="April"/>
            <abstract>
              <t indent="0">Optimistic Duplicate Address Detection is an interoperable modification of the existing IPv6 Neighbor Discovery (RFC 2461) and Stateless Address Autoconfiguration (RFC 2462) processes.  The intention is to minimize address configuration delays in the successful case, to reduce disruption as far as possible in the failure case, and to remain interoperable with unmodified hosts and routers.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4429"/>
          <seriesInfo name="DOI" value="10.17487/RFC4429"/>
        </reference>
        <reference anchor="RFC4861" target="https://www.rfc-editor.org/info/rfc4861" quoteTitle="true" derivedAnchor="RFC4861">
          <front>
            <title>Neighbor Discovery for IP version 6 (IPv6)</title>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Nordmark" fullname="E. Nordmark">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="W." surname="Simpson" fullname="W. Simpson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Soliman" fullname="H. Soliman">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2007" month="September"/>
            <abstract>
              <t indent="0">This document specifies the Neighbor Discovery protocol for IP Version 6.  IPv6 nodes on the same link use Neighbor Discovery to discover each other's presence, to determine each other's link-layer addresses, to find routers, and to maintain reachability information about the paths to active neighbors.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4861"/>
          <seriesInfo name="DOI" value="10.17487/RFC4861"/>
        </reference>
        <reference anchor="RFC4862" target="https://www.rfc-editor.org/info/rfc4862" quoteTitle="true" derivedAnchor="RFC4862">
          <front>
            <title>IPv6 Stateless Address Autoconfiguration</title>
            <author initials="S." surname="Thomson" fullname="S. Thomson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Jinmei" fullname="T. Jinmei">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2007" month="September"/>
            <abstract>
              <t indent="0">This document specifies the steps a host takes in deciding how to autoconfigure its interfaces in IP version 6.  The autoconfiguration process includes generating a link-local address, generating global addresses via stateless address autoconfiguration, and the Duplicate Address Detection procedure to verify the uniqueness of the addresses on a link.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4862"/>
          <seriesInfo name="DOI" value="10.17487/RFC4862"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references pn="section-11.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="I-D.halpern-6man-nd-pre-resolve-addr" quoteTitle="true" target="https://datatracker.ietf.org/doc/html/draft-halpern-6man-nd-pre-resolve-addr-00" derivedAnchor="ND-ADDR-RES">
          <front>
            <title>Triggering ND Address Resolution on Receiving DAD-NS</title>
            <author initials="I." surname="Chen" fullname="Ing-Wher Chen">
	    </author>
            <author initials="J." surname="Halpern" fullname="Joel M. Halpern">
	    </author>
            <date month="January" day="10" year="2014"/>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-halpern-6man-nd-pre-resolve-addr-00"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="RFC3756" target="https://www.rfc-editor.org/info/rfc3756" quoteTitle="true" derivedAnchor="RFC3756">
          <front>
            <title>IPv6 Neighbor Discovery (ND) Trust Models and Threats</title>
            <author initials="P." surname="Nikander" fullname="P. Nikander" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Kempf" fullname="J. Kempf">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Nordmark" fullname="E. Nordmark">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2004" month="May"/>
            <abstract>
              <t indent="0">The existing IETF standards specify that IPv6 Neighbor Discovery (ND) and Address Autoconfiguration mechanisms may be protected with IPsec Authentication Header (AH).  However, the current specifications limit the security solutions to manual keying due to practical problems faced with automatic key management.  This document specifies three different trust models and discusses the threats pertinent to IPv6 Neighbor Discovery.  The purpose of this discussion is to define the requirements for Securing IPv6 Neighbor Discovery.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3756"/>
          <seriesInfo name="DOI" value="10.17487/RFC3756"/>
        </reference>
        <reference anchor="RFC4541" target="https://www.rfc-editor.org/info/rfc4541" quoteTitle="true" derivedAnchor="RFC4541">
          <front>
            <title>Considerations for Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) Snooping Switches</title>
            <author initials="M." surname="Christensen" fullname="M. Christensen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Kimball" fullname="K. Kimball">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="F." surname="Solensky" fullname="F. Solensky">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="May"/>
            <abstract>
              <t indent="0">This memo describes the recommendations for Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) snooping switches.  These are based on best current practices for IGMPv2, with further considerations for IGMPv3- and MLDv2-snooping.  Additional areas of relevance, such as link layer topology changes and Ethernet-specific encapsulation issues, are also considered.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4541"/>
          <seriesInfo name="DOI" value="10.17487/RFC4541"/>
        </reference>
        <reference anchor="RFC6583" target="https://www.rfc-editor.org/info/rfc6583" quoteTitle="true" derivedAnchor="RFC6583">
          <front>
            <title>Operational Neighbor Discovery Problems</title>
            <author initials="I." surname="Gashinsky" fullname="I. Gashinsky">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Jaeggli" fullname="J. Jaeggli">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="W." surname="Kumari" fullname="W. Kumari">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="March"/>
            <abstract>
              <t indent="0">In IPv4, subnets are generally small, made just large enough to cover the actual number of machines on the subnet.  In contrast, the default IPv6 subnet size is a /64, a number so large it covers trillions of addresses, the overwhelming number of which will be unassigned.  Consequently, simplistic implementations of Neighbor Discovery (ND) can be vulnerable to deliberate or accidental denial of service (DoS), whereby they attempt to perform address resolution for large numbers of unassigned addresses.  Such denial-of-service attacks can be launched intentionally (by an attacker) or result from legitimate operational tools or accident conditions.  As a result of these vulnerabilities, new devices may not be able to "join" a network, it may be impossible to establish new IPv6 flows, and existing IPv6 transported flows may be interrupted.</t>
              <t indent="0">This document describes the potential for DoS in detail and suggests possible implementation improvements as well as operational mitigation techniques that can, in some cases, be used to protect against or at least alleviate the impact of such attacks.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6583"/>
          <seriesInfo name="DOI" value="10.17487/RFC6583"/>
        </reference>
        <reference anchor="RFC6775" target="https://www.rfc-editor.org/info/rfc6775" quoteTitle="true" derivedAnchor="RFC6775">
          <front>
            <title>Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)</title>
            <author initials="Z." surname="Shelby" fullname="Z. Shelby" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Chakrabarti" fullname="S. Chakrabarti">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Nordmark" fullname="E. Nordmark">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Bormann" fullname="C. Bormann">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="November"/>
            <abstract>
              <t indent="0">The IETF work in IPv6 over Low-power Wireless Personal Area Network (6LoWPAN) defines 6LoWPANs such as IEEE 802.15.4.  This and other similar link technologies have limited or no usage of multicast signaling due to energy conservation.  In addition, the wireless network may not strictly follow the traditional concept of IP subnets and IP links.  IPv6 Neighbor Discovery was not designed for non- transitive wireless links, as its reliance on the traditional IPv6 link concept and its heavy use of multicast make it inefficient and sometimes impractical in a low-power and lossy network.  This document describes simple optimizations to IPv6 Neighbor Discovery, its addressing mechanisms, and duplicate address detection for Low- power Wireless Personal Area Networks and similar networks.  The document thus updates RFC 4944 to specify the use of the optimizations defined here.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6775"/>
          <seriesInfo name="DOI" value="10.17487/RFC6775"/>
        </reference>
        <reference anchor="RFC8305" target="https://www.rfc-editor.org/info/rfc8305" quoteTitle="true" derivedAnchor="RFC8305">
          <front>
            <title>Happy Eyeballs Version 2: Better Connectivity Using Concurrency</title>
            <author initials="D." surname="Schinazi" fullname="D. Schinazi">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Pauly" fullname="T. Pauly">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t indent="0">Many communication protocols operating over the modern Internet use hostnames.  These often resolve to multiple IP addresses, each of which may have different performance and connectivity characteristics.  Since specific addresses or address families (IPv4 or IPv6) may be blocked, broken, or sub-optimal on a network, clients that attempt multiple connections in parallel have a chance of establishing a connection more quickly.  This document specifies requirements for algorithms that reduce this user-visible delay and provides an example algorithm, referred to as "Happy Eyeballs".  This document obsoletes the original algorithm description in RFC 6555.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8305"/>
          <seriesInfo name="DOI" value="10.17487/RFC8305"/>
        </reference>
        <reference anchor="RFC8505" target="https://www.rfc-editor.org/info/rfc8505" quoteTitle="true" derivedAnchor="RFC8505">
          <front>
            <title>Registration Extensions for IPv6 over Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery</title>
            <author initials="P." surname="Thubert" fullname="P. Thubert" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Nordmark" fullname="E. Nordmark">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Chakrabarti" fullname="S. Chakrabarti">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Perkins" fullname="C. Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="November"/>
            <abstract>
              <t indent="0">This specification updates RFC 6775 -- the Low-Power Wireless Personal Area Network (6LoWPAN) Neighbor Discovery specification -- to clarify the role of the protocol as a registration technique and simplify the registration operation in 6LoWPAN routers, as well as to provide enhancements to the registration capabilities and mobility detection for different network topologies, including the Routing Registrars performing routing for host routes and/or proxy Neighbor Discovery in a low-power network.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8505"/>
          <seriesInfo name="DOI" value="10.17487/RFC8505"/>
        </reference>
        <reference anchor="RFC8981" target="https://www.rfc-editor.org/info/rfc8981" quoteTitle="true" derivedAnchor="RFC8981">
          <front>
            <title>Temporary Address Extensions for Stateless Address Autoconfiguration in IPv6</title>
            <author initials="F." surname="Gont" fullname="F. Gont">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Krishnan" fullname="S. Krishnan">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Draves" fullname="R. Draves">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2021" month="February"/>
            <abstract>
              <t indent="0">This document describes an extension to IPv6 Stateless Address Autoconfiguration that causes hosts to generate temporary addresses with randomized interface identifiers for each prefix advertised with autoconfiguration enabled. Changing addresses over time limits the window of time during which eavesdroppers and other information collectors may trivially perform address-based network-activity correlation when the same address is employed for multiple transactions by the same host. Additionally, it reduces the window of exposure of a host as being accessible via an address that becomes revealed as a result of active communication. This document obsoletes RFC 4941.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8981"/>
          <seriesInfo name="DOI" value="10.17487/RFC8981"/>
        </reference>
      </references>
    </references>
    <section anchor="Acknowledgements" numbered="false" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">
                    Thanks to the following people (in alphabetical order) for their
                            comments, review, and feedback: <contact fullname="Mikael Abrahamsson"/>, <contact fullname="Stewart Bryant"/>, <contact fullname="Lorenzo Colitti"/>, <contact fullname="Roman Danyliw"/>, <contact fullname="Owen DeLong"/>, <contact fullname="Martin Duke"/>, <contact fullname="Igor Gashinsky"/>, <contact fullname="Carles Gomez"/>, <contact fullname="Fernando Gont"/>, <contact fullname="Tatuya Jinmei"/>, <contact fullname="Benjamin Kaduk"/>, <contact fullname="Scott Kelly"/>, <contact fullname="Erik Kline"/>, <contact fullname="Warren Kumari"/>, <contact fullname="Barry Leiba"/>, <contact fullname="Jordi Palet Martinez"/>, <contact fullname="Erik Nordmark"/>, <contact fullname="Michael Richardson"/>, <contact fullname="Dan Romascanu"/>, <contact fullname="Zaheduzzaman Sarker"/>, <contact fullname="Michael Scharf"/>, <contact fullname="John Scudder"/>, <contact fullname="Mark Smith"/>, <contact fullname="Dave Thaler"/>, <contact fullname="Pascal Thubert"/>, <contact fullname="Loganaden Velvindron"/>, and <contact fullname="Éric Vyncke"/>.
      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-address">Author's Address</name>
      <author fullname="Jen Linkova" initials="J." surname="Linkova">
        <organization showOnFrontPage="true">Google</organization>
        <address>
          <postal>
            <street>1 Darling Island Rd</street>
            <city>Pyrmont</city>
            <region>NSW</region>
            <code>2009</code>
            <country>Australia</country>
          </postal>
          <email>furry@google.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
