<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="bcp" consensus="true" docName="draft-ietf-httpbis-bcp56bis-15" indexInclude="true" ipr="trust200902" number="9205" obsoletes="3205" prepTime="2022-06-08T09:57:04" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-httpbis-bcp56bis-15" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9205" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title>Building Protocols with HTTP</title>
    <seriesInfo name="RFC" value="9205" stream="IETF"/>
    <seriesInfo name="BCP" value="56" stream="IETF"/>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization showOnFrontPage="true"/>
      <address>
        <postal>
          <postalLine>Prahran</postalLine>
          <postalLine>Australia</postalLine>
        </postal>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>
    <date month="06" year="2022"/>
    <area>Applications and Real-Time</area>
    <workgroup>HTTP</workgroup>
    <keyword>HTTP API</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">Applications often use HTTP as a substrate to create HTTP-based APIs. This document specifies best practices for writing specifications that use HTTP to define new application protocols. It is written primarily to guide IETF efforts to define application protocols using HTTP for deployment on the Internet but might be applicable in other situations.</t>
      <t indent="0" pn="section-abstract-2">This document obsoletes RFC 3205.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This memo documents an Internet Best Current Practice.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further information
            on BCPs is available in Section 2 of RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9205" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2022 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notational-conventions">Notational Conventions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-is-http-being-used">Is HTTP Being Used?</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-non-http-protocols">Non-HTTP Protocols</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-whats-important-about-http">What's Important About HTTP</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-generic-semantics">Generic Semantics</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-links">Links</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-rich-functionality">Rich Functionality</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-best-practices-for-specifyi">Best Practices for Specifying the Use of HTTP</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specifying-the-use-of-http">Specifying the Use of HTTP</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specifying-server-behaviour">Specifying Server Behaviour</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.3">
                <t indent="0" pn="section-toc.1-1.4.2.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specifying-client-behaviour">Specifying Client Behaviour</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.4">
                <t indent="0" pn="section-toc.1-1.4.2.4.1"><xref derivedContent="4.4" format="counter" sectionFormat="of" target="section-4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specifying-urls">Specifying URLs</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.4.2">
                  <li pn="section-toc.1-1.4.2.4.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.4.2.1.1"><xref derivedContent="4.4.1" format="counter" sectionFormat="of" target="section-4.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-discovering-an-applications">Discovering an Application's URLs</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.4.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.4.2.2.1"><xref derivedContent="4.4.2" format="counter" sectionFormat="of" target="section-4.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-considering-uri-schemes">Considering URI Schemes</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.4.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.4.2.3.1"><xref derivedContent="4.4.3" format="counter" sectionFormat="of" target="section-4.4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-choosing-transport-ports">Choosing Transport Ports</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.5">
                <t indent="0" pn="section-toc.1-1.4.2.5.1"><xref derivedContent="4.5" format="counter" sectionFormat="of" target="section-4.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-using-http-methods">Using HTTP Methods</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.5.2">
                  <li pn="section-toc.1-1.4.2.5.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.5.2.1.1"><xref derivedContent="4.5.1" format="counter" sectionFormat="of" target="section-4.5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-get">GET</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.5.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.5.2.2.1"><xref derivedContent="4.5.2" format="counter" sectionFormat="of" target="section-4.5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-options">OPTIONS</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.6">
                <t indent="0" pn="section-toc.1-1.4.2.6.1"><xref derivedContent="4.6" format="counter" sectionFormat="of" target="section-4.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-using-http-status-codes">Using HTTP Status Codes</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.6.2">
                  <li pn="section-toc.1-1.4.2.6.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.6.2.1.1"><xref derivedContent="4.6.1" format="counter" sectionFormat="of" target="section-4.6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-redirection">Redirection</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.7">
                <t indent="0" pn="section-toc.1-1.4.2.7.1"><xref derivedContent="4.7" format="counter" sectionFormat="of" target="section-4.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specifying-http-header-fiel">Specifying HTTP Header Fields</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.8">
                <t indent="0" pn="section-toc.1-1.4.2.8.1"><xref derivedContent="4.8" format="counter" sectionFormat="of" target="section-4.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-defining-message-content">Defining Message Content</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.9">
                <t indent="0" pn="section-toc.1-1.4.2.9.1"><xref derivedContent="4.9" format="counter" sectionFormat="of" target="section-4.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-leveraging-http-caching">Leveraging HTTP Caching</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.9.2">
                  <li pn="section-toc.1-1.4.2.9.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.9.2.1.1"><xref derivedContent="4.9.1" format="counter" sectionFormat="of" target="section-4.9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-freshness">Freshness</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.9.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.9.2.2.1"><xref derivedContent="4.9.2" format="counter" sectionFormat="of" target="section-4.9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-stale-responses">Stale Responses</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.9.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.9.2.3.1"><xref derivedContent="4.9.3" format="counter" sectionFormat="of" target="section-4.9.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-caching-and-application-sem">Caching and Application Semantics</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.9.2.4">
                    <t indent="0" pn="section-toc.1-1.4.2.9.2.4.1"><xref derivedContent="4.9.4" format="counter" sectionFormat="of" target="section-4.9.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-varying-content-based-upon-">Varying Content Based Upon the Request</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.10">
                <t indent="0" pn="section-toc.1-1.4.2.10.1"><xref derivedContent="4.10" format="counter" sectionFormat="of" target="section-4.10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-handling-application-state">Handling Application State</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.11">
                <t indent="0" pn="section-toc.1-1.4.2.11.1"><xref derivedContent="4.11" format="counter" sectionFormat="of" target="section-4.11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-making-multiple-requests">Making Multiple Requests</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.12">
                <t indent="0" pn="section-toc.1-1.4.2.12.1"><xref derivedContent="4.12" format="counter" sectionFormat="of" target="section-4.12"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-client-authentication">Client Authentication</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.13">
                <t indent="0" pn="section-toc.1-1.4.2.13.1"><xref derivedContent="4.13" format="counter" sectionFormat="of" target="section-4.13"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-coexisting-with-web-browsin">Coexisting with Web Browsing</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.14">
                <t indent="0" pn="section-toc.1-1.4.2.14.1"><xref derivedContent="4.14" format="counter" sectionFormat="of" target="section-4.14"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-maintaining-application-bou">Maintaining Application Boundaries</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.15">
                <t indent="0" pn="section-toc.1-1.4.2.15.1"><xref derivedContent="4.15" format="counter" sectionFormat="of" target="section-4.15"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-using-server-push">Using Server Push</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.16">
                <t indent="0" pn="section-toc.1-1.4.2.16.1"><xref derivedContent="4.16" format="counter" sectionFormat="of" target="section-4.16"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-allowing-versioning-and-evo">Allowing Versioning and Evolution</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-privacy-considerations">Privacy Considerations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-changes-from-rfc-3205">Changes from RFC 3205</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-address">Author's Address</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">Applications other than Web browsing often use HTTP <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/> as a substrate, a practice sometimes referred to as creating "HTTP-based APIs", "REST APIs", or just "HTTP APIs". This is done for a variety of reasons, including:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1-2">
        <li pn="section-1-2.1">familiarity by implementers, specifiers, administrators, developers, and users;</li>
        <li pn="section-1-2.2">availability of a variety of client, server, and proxy implementations;</li>
        <li pn="section-1-2.3">ease of use;</li>
        <li pn="section-1-2.4">availability of Web browsers;</li>
        <li pn="section-1-2.5">reuse of existing mechanisms like authentication and encryption;</li>
        <li pn="section-1-2.6">presence of HTTP servers and clients in target deployments; and</li>
        <li pn="section-1-2.7">its ability to traverse firewalls.</li>
      </ul>
      <t indent="0" pn="section-1-3">These protocols are often ad hoc, intended for only deployment by one or a few servers and consumption by a limited set of clients. As a result, a body of practices and tools has arisen around defining HTTP-based APIs that favour these conditions.</t>
      <t indent="0" pn="section-1-4">However, when such an application has multiple, separate implementations, is deployed on multiple uncoordinated servers, and is consumed by diverse clients (as is often the case for HTTP APIs defined by standards efforts), tools and practices intended for limited deployment can become unsuitable.</t>
      <t indent="0" pn="section-1-5">This mismatch is largely because the API's clients and servers will implement and evolve at different paces, leading to a need for deployments with different features and versions to coexist. As a result, the designers of HTTP-based APIs intended for such deployments need to more carefully consider how extensibility of the service will be handled and how different deployment requirements will be accommodated.</t>
      <t indent="0" pn="section-1-6">More generally, an application protocol using HTTP faces a number of design decisions, including:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1-7">
        <li pn="section-1-7.1">Should it define a new URI scheme? Use new ports?</li>
        <li pn="section-1-7.2">Should it use standard HTTP methods and status codes or define new ones?</li>
        <li pn="section-1-7.3">How can the maximum value be extracted from the use of HTTP?</li>
        <li pn="section-1-7.4">How does it coexist with other uses of HTTP -- especially Web browsing?</li>
        <li pn="section-1-7.5">How can interoperability problems and "protocol dead ends" be avoided?</li>
      </ul>
      <t indent="0" pn="section-1-8"><xref target="used" format="default" sectionFormat="of" derivedContent="Section 2"/> defines when this document applies, <xref target="overview" format="default" sectionFormat="of" derivedContent="Section 3"/> surveys the properties of HTTP that are important to preserve, and <xref target="bp" format="default" sectionFormat="of" derivedContent="Section 4"/> contains best practices for the specification of applications that use HTTP.</t>
      <t indent="0" pn="section-1-9">It is written primarily to guide IETF efforts to define application protocols using HTTP for deployment on the Internet but might be applicable in other situations. Note that the requirements herein do not necessarily apply to the development of generic HTTP extensions.</t>
      <t indent="0" pn="section-1-10">This document obsoletes <xref target="RFC3205" format="default" sectionFormat="of" derivedContent="RFC3205"/> to reflect the experience and developments regarding HTTP in the intervening time.</t>
      <section anchor="notational-conventions" numbered="true" toc="include" removeInRFC="false" pn="section-1.1">
        <name slugifiedName="name-notational-conventions">Notational Conventions</name>
        <t indent="0" pn="section-1.1-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
      </section>
    </section>
    <section anchor="used" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-is-http-being-used">Is HTTP Being Used?</name>
      <t indent="0" pn="section-2-1">Different applications have different goals when using HTTP. The recommendations in this document apply when a specification defines an application that:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2-2">
        <li pn="section-2-2.1">uses the transport port 80 or 443, or</li>
        <li pn="section-2-2.2">uses the URI scheme "http" or "https", or</li>
        <li pn="section-2-2.3">uses an ALPN protocol ID <xref target="RFC7301" format="default" sectionFormat="of" derivedContent="RFC7301"/> that generically identifies HTTP (e.g., "http/1.1", "h2", "h3"), or</li>
        <li pn="section-2-2.4">makes registrations in or overall modifications to the IANA registries defined for HTTP.</li>
      </ul>
      <t indent="0" pn="section-2-3">Additionally, when a specification is using HTTP, all of the requirements of the HTTP protocol suite are in force (<xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/> in particular but also other specifications such as the specific version of HTTP in use and any extensions in use).</t>
      <t indent="0" pn="section-2-4">Note that this document is intended to apply to applications, not generic extensions to HTTP. Furthermore, while it is intended for IETF-specified applications, other standards organisations are encouraged to adhere to its requirements.</t>
      <section anchor="non-http-protocols" numbered="true" toc="include" removeInRFC="false" pn="section-2.1">
        <name slugifiedName="name-non-http-protocols">Non-HTTP Protocols</name>
        <t indent="0" pn="section-2.1-1">An application can rely upon HTTP without meeting the criteria for using it as defined above.
	For example, an application might wish to avoid re-specifying parts of the message format but might change other aspects of the protocol's operation, or it might want to use application-specific methods.</t>
        <t indent="0" pn="section-2.1-2">Doing so permits more freedom to modify protocol operations, but at least a portion of the benefits outlined in <xref target="overview" format="default" sectionFormat="of" derivedContent="Section 3"/> are lost as most HTTP implementations won't be easily adaptable to these changes. The benefit of mindshare will also be lost.</t>
        <t indent="0" pn="section-2.1-3">Such specifications <bcp14>MUST NOT</bcp14> use HTTP's URI schemes, transport ports, ALPN protocol IDs, or IANA registries; rather, they are encouraged to establish their own.</t>
      </section>
    </section>
    <section anchor="overview" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-whats-important-about-http">What's Important About HTTP</name>
      <t indent="0" pn="section-3-1">This section examines the characteristics of HTTP that are important to consider when using HTTP to define an application protocol.</t>
      <section anchor="generic-semantics" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-generic-semantics">Generic Semantics</name>
        <t indent="0" pn="section-3.1-1">Much of the value of HTTP is in its generic semantics -- that is, the protocol elements defined by HTTP are potentially applicable to every resource and are not specific to a particular context. Application-specific semantics are best expressed in message content and header fields, not status codes or methods (although status codes and methods do have generic semantics that relate to application state).</t>
        <t indent="0" pn="section-3.1-2">This split between generic and application-specific semantics allows an HTTP message to be handled by common software (e.g., HTTP servers, intermediaries, client implementations, and caches) without requiring those implementations to understand the application in use. It also allows people to leverage their knowledge of HTTP semantics without needing specialised knowledge of a particular application.</t>
        <t indent="0" pn="section-3.1-3">Therefore, applications that use HTTP <bcp14>MUST NOT</bcp14> redefine, refine, or overlay the semantics of generic protocol elements such as methods, status codes, or existing header fields. Instead, they should focus their specifications on protocol elements that are specific to that application -- namely, their HTTP resources.</t>
        <t indent="0" pn="section-3.1-4">When writing a specification, it's often tempting to specify exactly how HTTP is to be implemented, supported, and used. However, this can easily lead to an unintended profile of HTTP behaviour. For example, it's common to see specifications with language like this:</t>
        <blockquote pn="section-3.1-5">
          <t indent="0" pn="section-3.1-5.1">A POST request MUST result in a 201 (Created) response.</t>
        </blockquote>
        <t indent="0" pn="section-3.1-6">This forms an expectation in the client that the response will always be 201 (Created) when in fact there are a number of reasons why the status code might differ in a real deployment; for example, there might be a proxy that requires authentication, or a server-side error, or a redirection. If the client does not anticipate this, the application's deployment is brittle.</t>
        <t indent="0" pn="section-3.1-7">See <xref target="resource" format="default" sectionFormat="of" derivedContent="Section 4.2"/> for more details.</t>
      </section>
      <section anchor="links" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-links">Links</name>
        <t indent="0" pn="section-3.2-1">Another common practice is assuming that the HTTP server's namespace (or a portion thereof) is exclusively for the use of a single application. This effectively overlays special, application-specific semantics onto that space and precludes other applications from using it.</t>
        <t indent="0" pn="section-3.2-2">As explained in <xref target="BCP190" format="default" sectionFormat="of" derivedContent="BCP190"/>, such "squatting" on a part of the URL space by a standard usurps the server's authority over its own resources, can cause deployment issues, and is therefore bad practice in standards.</t>
        <t indent="0" pn="section-3.2-3">Instead of statically defining URI components like paths, it is <bcp14>RECOMMENDED</bcp14> that applications using HTTP define and use links <xref target="WEB-LINKING" format="default" sectionFormat="of" derivedContent="WEB-LINKING"/> to allow flexibility in deployment.</t>
        <t indent="0" pn="section-3.2-4">Using runtime links in this fashion has a number of other benefits -- especially when an application is to have multiple implementations and/or deployments (as is often the case for those that are standardised).</t>
        <t indent="0" pn="section-3.2-5">For example, navigating with a link allows a request to be routed to a different server without the overhead of a redirection, thereby supporting deployment across machines well.</t>
        <t indent="0" pn="section-3.2-6">By using links, it also becomes possible to "mix and match" different applications on the same server. The use of links also offers a natural mechanism for extensibility, versioning, and capability management because the document containing the links can also contain information about their targets.</t>
        <t indent="0" pn="section-3.2-7">Using links also offers a form of cache invalidation that's seen on the Web; when a resource's state changes, the application can change the affected links so that a fresh copy is always fetched.</t>
        <t indent="0" pn="section-3.2-8">See <xref target="specifying-urls" format="default" sectionFormat="of" derivedContent="Section 4.4"/> for more details.</t>
      </section>
      <section anchor="rich-functionality" numbered="true" toc="include" removeInRFC="false" pn="section-3.3">
        <name slugifiedName="name-rich-functionality">Rich Functionality</name>
        <t indent="0" pn="section-3.3-1">HTTP offers a number of features to applications, such as:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3-2">
          <li pn="section-3.3-2.1">Message framing</li>
          <li pn="section-3.3-2.2">Multiplexing (in HTTP/2 <xref target="HTTP2" format="default" sectionFormat="of" derivedContent="HTTP/2"/> and HTTP/3 <xref target="HTTP3" format="default" sectionFormat="of" derivedContent="HTTP/3"/>)</li>
          <li pn="section-3.3-2.3">Integration with TLS</li>
          <li pn="section-3.3-2.4">Support for intermediaries (proxies, gateways, content delivery networks (CDNs))</li>
          <li pn="section-3.3-2.5">Client authentication</li>
          <li pn="section-3.3-2.6">Content negotiation for format, language, and other features</li>
          <li pn="section-3.3-2.7">Caching for server scalability, latency and bandwidth reduction, and reliability</li>
          <li pn="section-3.3-2.8">Granularity of access control (through use of a rich space of URLs)</li>
          <li pn="section-3.3-2.9">Partial content to selectively request part of a response</li>
          <li pn="section-3.3-2.10">The ability to interact with the application easily using a Web browser</li>
        </ul>
        <t indent="0" pn="section-3.3-3">An application that uses HTTP is encouraged to utilise the various features that the protocol offers so that its users receive the maximum benefit from those features and so that the application can be deployed in a variety of situations. This document does not require specific features to be used since the appropriate design trade-offs are highly specific to a given situation. However, following the practices in <xref target="bp" format="default" sectionFormat="of" derivedContent="Section 4"/> is a good starting point.</t>
      </section>
    </section>
    <section anchor="bp" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-best-practices-for-specifyi">Best Practices for Specifying the Use of HTTP</name>
      <t indent="0" pn="section-4-1">This section contains best practices for specifying the use of HTTP by applications, including practices for specific HTTP protocol elements.</t>
      <section anchor="specifying-the-use-of-http" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-specifying-the-use-of-http">Specifying the Use of HTTP</name>
        <t indent="0" pn="section-4.1-1">Specifications should use <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/> as the primary reference for HTTP; it is not necessary to reference all of the specifications in the HTTP suite unless there are specific reasons to do so (e.g., a particular feature is called out).</t>
        <t indent="0" pn="section-4.1-2">Because HTTP is a hop-by-hop protocol, a connection can be handled by implementations that are not controlled by the application; for example, proxies, CDNs, firewalls, and so on. Requiring a particular version of HTTP makes it difficult to use in these situations and harms interoperability. Therefore, it is <bcp14>NOT RECOMMENDED</bcp14> that applications using HTTP specify a minimum version of HTTP to be used.</t>
        <t indent="0" pn="section-4.1-3">However, if an application's deployment benefits from the use of a particular version of HTTP (for example, HTTP/2's multiplexing), this ought be noted.</t>
        <t indent="0" pn="section-4.1-4">Applications using HTTP <bcp14>MUST NOT</bcp14> specify a maximum version, to preserve the protocol's ability to evolve.</t>
        <t indent="0" pn="section-4.1-5">When specifying examples of protocol interactions, applications should document both the request and response messages with complete header sections, preferably in HTTP/1.1 format <xref target="HTTP11" format="default" sectionFormat="of" derivedContent="HTTP/1.1"/>. For example:</t>
        <sourcecode type="http-message" markers="false" pn="section-4.1-6">
GET /thing HTTP/1.1
Host: example.com
Accept: application/things+json
User-Agent: Foo/1.0

</sourcecode>
        <sourcecode type="http-message" markers="false" pn="section-4.1-7">
HTTP/1.1 200 OK
Content-Type: application/things+json
Content-Length: 500
Server: Bar/2.2

[content here]
</sourcecode>
      </section>
      <section anchor="resource" numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-specifying-server-behaviour">Specifying Server Behaviour</name>
        <t indent="0" pn="section-4.2-1">The server-side behaviours of an application are most effectively specified by defining the following protocol elements:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.2-2">
          <li pn="section-4.2-2.1">Media types <xref target="RFC6838" format="default" sectionFormat="of" derivedContent="RFC6838"/>, often based upon a format convention such as JSON <xref target="JSON" format="default" sectionFormat="of" derivedContent="JSON"/>;</li>
          <li pn="section-4.2-2.2">HTTP header fields, per <xref target="headers" format="default" sectionFormat="of" derivedContent="Section 4.7"/>; and</li>
          <li pn="section-4.2-2.3">The behaviour of resources, as identified by link relations <xref target="WEB-LINKING" format="default" sectionFormat="of" derivedContent="WEB-LINKING"/>.</li>
        </ul>
        <t indent="0" pn="section-4.2-3">An application can define its operation by composing these protocol elements to define a set of resources that are identified by link relations and that implement specified behaviours, including:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.2-4">
          <li pn="section-4.2-4.1">retrieval of resource state using GET in one or more formats identified by media type;</li>
          <li pn="section-4.2-4.2">resource creation or update using POST or PUT, with an appropriately identified request content format;</li>
          <li pn="section-4.2-4.3">data processing using POST and identified request and response content format(s); and</li>
          <li pn="section-4.2-4.4">Resource deletion using DELETE.</li>
        </ul>
        <t indent="0" pn="section-4.2-5">For example, an application might specify:</t>
        <blockquote pn="section-4.2-6">
          <t indent="0" pn="section-4.2-6.1">Resources linked to with the "example-widget" link relation type are
Widgets. The state of a Widget can be fetched in the
"application/example-widget+json" format, and can be updated by PUT
to the same link. Widget resources can be deleted.</t>
          <t indent="0" pn="section-4.2-6.2">The Example-Count response header field on Widget representations
indicates how many Widgets are held by the sender.</t>
          <t indent="0" pn="section-4.2-6.3">The "application/example-widget+json" format is a JSON [RFC8259]
format representing the state of a Widget. It contains links to
related information in the link indicated by the Link header field
value with the "example-other-info" link relation type.</t>
        </blockquote>
        <t indent="0" pn="section-4.2-7">Applications can also specify the use of URI Templates <xref target="URI-TEMPLATE" format="default" sectionFormat="of" derivedContent="URI-TEMPLATE"/> to allow clients to generate URLs based upon runtime data.</t>
      </section>
      <section anchor="clients" numbered="true" toc="include" removeInRFC="false" pn="section-4.3">
        <name slugifiedName="name-specifying-client-behaviour">Specifying Client Behaviour</name>
        <t indent="0" pn="section-4.3-1">An application's expectations for client behaviour ought to be closely aligned with those of Web browsers to avoid interoperability issues when they are used.</t>
        <t indent="0" pn="section-4.3-2">One way to do this is to define it in terms of <xref target="FETCH" format="default" sectionFormat="of" derivedContent="FETCH"/> since that is the abstraction that browsers use for HTTP.</t>
        <t indent="0" pn="section-4.3-3">Some client behaviours (e.g., automatic redirect handling) and extensions (e.g., cookies) are not required by HTTP but nevertheless have become very common. If their use is not explicitly specified by applications using HTTP, there may be confusion and interoperability problems. In particular:</t>
        <dl spacing="normal" indent="3" newline="false" pn="section-4.3-4">
          <dt pn="section-4.3-4.1">Redirect handling:</dt>
          <dd pn="section-4.3-4.2">Applications need to specify how redirects are expected to be handled; see <xref target="redirects" format="default" sectionFormat="of" derivedContent="Section 4.6.1"/>.</dd>
          <dt pn="section-4.3-4.3">Cookies:</dt>
          <dd pn="section-4.3-4.4">Applications using HTTP should explicitly reference the Cookie specification <xref target="COOKIES" format="default" sectionFormat="of" derivedContent="COOKIES"/> if they are required.</dd>
          <dt pn="section-4.3-4.5">Certificates:</dt>
          <dd pn="section-4.3-4.6">Applications using HTTP should specify that TLS certificates are to be checked according to <xref section="4.3.4" sectionFormat="of" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-4.3.4" derivedContent="HTTP"/> when HTTPS is used.</dd>
        </dl>
        <t indent="0" pn="section-4.3-5">Applications using HTTP should not require that clients statically support HTTP features that are usually negotiated. For example, requiring that clients support responses with a certain content coding (<xref section="8.4.1" sectionFormat="comma" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-8.4.1" derivedContent="HTTP"/>) instead of negotiating for it (<xref section="12.5.3" sectionFormat="comma" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-12.5.3" derivedContent="HTTP"/>) means that otherwise conformant clients cannot interoperate with the application. Applications can encourage the implementation of such features, though.</t>
      </section>
      <section anchor="specifying-urls" numbered="true" toc="include" removeInRFC="false" pn="section-4.4">
        <name slugifiedName="name-specifying-urls">Specifying URLs</name>
        <t indent="0" pn="section-4.4-1">In HTTP, the resources that clients interact with are identified with URLs <xref target="URL" format="default" sectionFormat="of" derivedContent="URL"/>. As <xref target="BCP190" format="default" sectionFormat="of" derivedContent="BCP190"/> explains, parts of the URL are designed to be under the control of the owner (also known as the "authority") of that server to give them the flexibility in deployment.</t>
        <t indent="0" pn="section-4.4-2">This means that in most cases, specifications for applications that use HTTP won't contain fixed application URLs or paths; while it is common practice for a specification of a single-deployment API to specify the path prefix "/app/v1" (for example), doing so in an IETF specification is inappropriate.</t>
        <t indent="0" pn="section-4.4-3">Therefore, the specification writer needs some mechanism to allow clients to discover an application's URLs. Additionally, they need to specify which URL scheme(s) the application should be used with and whether to use a dedicated port or to reuse HTTP's port(s).</t>
        <section anchor="discovering-an-applications-urls" numbered="true" toc="include" removeInRFC="false" pn="section-4.4.1">
          <name slugifiedName="name-discovering-an-applications">Discovering an Application's URLs</name>
          <t indent="0" pn="section-4.4.1-1">Generally, a client will begin interacting with a given application server by requesting an initial document that contains information about that particular deployment, potentially including links to other relevant resources. Doing so ensures that the deployment is as flexible as possible (potentially spanning multiple servers), allows evolution, and also gives the application the opportunity to tailor the "discovery document" to the client.</t>
          <t indent="0" pn="section-4.4.1-2">There are a few common patterns for discovering that initial URL.</t>
          <t indent="0" pn="section-4.4.1-3">The most straightforward mechanism for URL discovery is to configure the client with (or otherwise convey to it) a full URL. This might be done in a configuration document or through another discovery mechanism.</t>
          <t indent="0" pn="section-4.4.1-4">However, if the client only knows the server's hostname and the identity of the application, there needs to be some way to derive the initial URL from that information.</t>
          <t indent="0" pn="section-4.4.1-5">An application cannot define a fixed prefix for its URL paths; see <xref target="BCP190" format="default" sectionFormat="of" derivedContent="BCP190"/>. Instead, a specification for such an application can use one of the following strategies:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.4.1-6">
            <li pn="section-4.4.1-6.1">Register a well-known URI <xref target="WELL-KNOWN-URI" format="default" sectionFormat="of" derivedContent="WELL-KNOWN-URI"/> as an entry point for that application. This provides a fixed path on every potential server that will not collide with other applications.</li>
            <li pn="section-4.4.1-6.2">Enable the server authority to convey a URI Template <xref target="URI-TEMPLATE" format="default" sectionFormat="of" derivedContent="URI-TEMPLATE"/> or similar mechanism for generating a URL for an entry point. For example, this might be done in a configuration document or other artefact.</li>
          </ul>
          <t indent="0" pn="section-4.4.1-7">Once the discovery document is located, it can be fetched, cached for later reuse (if allowed by its metadata), and used to locate other resources that are relevant to the application using full URIs or URL Templates.</t>
          <t indent="0" pn="section-4.4.1-8">In some cases, an application may not wish to use such a discovery document -- for example, when communication is very brief or when the latency concerns of doing so preclude the use of a discovery document. These situations can be addressed by placing all of the application's resources under a well-known location.</t>
        </section>
        <section anchor="scheme" numbered="true" toc="include" removeInRFC="false" pn="section-4.4.2">
          <name slugifiedName="name-considering-uri-schemes">Considering URI Schemes</name>
          <t indent="0" pn="section-4.4.2-1">Applications that use HTTP will typically employ the "http" and/or "https" URI schemes. "https" is <bcp14>RECOMMENDED</bcp14> to provide authentication, integrity, and confidentiality, as well as to mitigate pervasive monitoring attacks <xref target="RFC7258" format="default" sectionFormat="of" derivedContent="RFC7258"/>.</t>
          <t indent="0" pn="section-4.4.2-2">However, application-specific schemes can also be defined. When defining a URI scheme for an application using HTTP, there are a number of trade-offs and caveats to keep in mind:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.4.2-3">
            <li pn="section-4.4.2-3.1">Unmodified Web browsers will not support the new scheme. While it is possible to register new URI schemes with Web browsers (e.g., registerProtocolHandler() in <xref target="HTML" format="default" sectionFormat="of" derivedContent="HTML"/>, as well as several proprietary approaches), support for these mechanisms is not shared by all browsers, and their capabilities vary.</li>
            <li pn="section-4.4.2-3.2">Existing non-browser clients, intermediaries, servers, and associated software will not recognise the new scheme.  For example, a client library might fail to dispatch the request, a cache might refuse to store the response, and a proxy might fail to forward the request.</li>
            <li pn="section-4.4.2-3.3">Because URLs commonly occur in HTTP artefacts and are often generated automatically (e.g., in the Location response header field), it can be difficult to ensure that the new scheme is used consistently.</li>
            <li pn="section-4.4.2-3.4">The resources identified by the new scheme will still be available using "http" and/or "https" URLs. Those URLs can "leak" into use, which can present security and operability issues. For example, using a new scheme to ensure that requests don't get sent to a "normal" Web site is likely to fail.</li>
            <li pn="section-4.4.2-3.5">Features that rely upon the URL's origin <xref target="RFC6454" format="default" sectionFormat="of" derivedContent="RFC6454"/>, such as the Web's same-origin policy, will be impacted by a change of scheme.</li>
            <li pn="section-4.4.2-3.6">HTTP-specific features such as cookies <xref target="COOKIES" format="default" sectionFormat="of" derivedContent="COOKIES"/>, authentication <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>, caching <xref target="HTTP-CACHING" format="default" sectionFormat="of" derivedContent="HTTP-CACHING"/>, HTTP Strict Transport Security (HSTS) <xref target="RFC6797" format="default" sectionFormat="of" derivedContent="RFC6797"/>, and Cross-Origin Resource Sharing (CORS) <xref target="FETCH" format="default" sectionFormat="of" derivedContent="FETCH"/> might or might not work correctly, depending on how they are defined and implemented. Generally, they are designed and implemented with an assumption that the URL will always be "http" or "https".</li>
            <li pn="section-4.4.2-3.7">Web features that require a secure context <xref target="SECCTXT" format="default" sectionFormat="of" derivedContent="SECCTXT"/> will likely treat a new scheme as insecure.</li>
          </ul>
          <t indent="0" pn="section-4.4.2-4">See <xref target="RFC7595" format="default" sectionFormat="of" derivedContent="RFC7595"/> for more information about minting new URI schemes.</t>
        </section>
        <section anchor="choosing-transport-ports" numbered="true" toc="include" removeInRFC="false" pn="section-4.4.3">
          <name slugifiedName="name-choosing-transport-ports">Choosing Transport Ports</name>
          <t indent="0" pn="section-4.4.3-1">Applications can use the applicable default port (80 for HTTP, 443 for HTTPS), or they can be deployed upon other ports. This decision can be made at deployment time or might be encouraged by the application's specification (e.g., by registering a port for that application).</t>
          <t indent="0" pn="section-4.4.3-2">If a non-default port is used, it needs to be reflected in the authority of all URLs for that resource; the only mechanism for changing a default port is changing the URI scheme (see <xref target="scheme" format="default" sectionFormat="of" derivedContent="Section 4.4.2"/>).</t>
          <t indent="0" pn="section-4.4.3-3">Using a port other than the default has privacy implications (i.e., the protocol can now be distinguished from other traffic), as well as operability concerns (as some networks might block or otherwise interfere with it). Privacy implications (including those stemming from this distinguishability) should be documented in Security Considerations.</t>
          <t indent="0" pn="section-4.4.3-4">See <xref target="RFC7605" format="default" sectionFormat="of" derivedContent="RFC7605"/> for further guidance.</t>
        </section>
      </section>
      <section anchor="using-http-methods" numbered="true" toc="include" removeInRFC="false" pn="section-4.5">
        <name slugifiedName="name-using-http-methods">Using HTTP Methods</name>
        <t indent="0" pn="section-4.5-1">Applications that use HTTP <bcp14>MUST</bcp14> confine themselves to using registered HTTP methods such as GET, POST, PUT, DELETE, and PATCH.</t>
        <t indent="0" pn="section-4.5-2">New HTTP methods are rare; they are required to be registered in the "HTTP Method Registry" with IETF Review (see <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>) and are also required to be generic. That means that they need to be potentially applicable to all resources, not just those of one application.</t>
        <t indent="0" pn="section-4.5-3">While historically some applications (e.g., <xref target="RFC4791" format="default" sectionFormat="of" derivedContent="RFC4791"/>) have defined application-specific methods, <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/> now forbids this.</t>
        <t indent="0" pn="section-4.5-4">When authors believe that a new method is required, they are encouraged to engage with the HTTP community early (e.g., on the <eref target="mailto:ietf-http-wg@w3.org" brackets="angle"/> mailing list) and document their proposal as a separate HTTP extension rather than as part of an application's specification.</t>
        <section anchor="get" numbered="true" toc="include" removeInRFC="false" pn="section-4.5.1">
          <name slugifiedName="name-get">GET</name>
          <t indent="0" pn="section-4.5.1-1">GET is the most common and useful HTTP method; its retrieval semantics allow caching and side-effect free linking and underlie many of the benefits of using HTTP.</t>
          <t indent="0" pn="section-4.5.1-2">Queries can be performed with GET, often using the query component of the URL; this is a familiar pattern from Web browsing, and the results can be cached, improving the efficiency of an often expensive process. In some cases, however, GET might be unwieldy for expressing queries because of the limited syntax of the URI; in particular, if binary data forms part of the query terms, it needs to be encoded to conform to the URI syntax.</t>
          <t indent="0" pn="section-4.5.1-3">While this is not an issue for short queries, it can become one for larger query terms or those that need to sustain a high rate of requests. Additionally, some HTTP implementations limit the size of URLs they support, although modern HTTP software has much more generous limits than previously (typically, considerably more than 8000 octets, as required by <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>).</t>
          <t indent="0" pn="section-4.5.1-4">In these cases, an application using HTTP might consider using POST to express queries in the request's content; doing so avoids encoding overhead and URL length limits in implementations. However, in doing so, it should be noted that the benefits of GET such as caching and linking to query results are lost.  Therefore, applications using HTTP that require support for POST queries ought to consider allowing both methods.</t>
          <t indent="0" pn="section-4.5.1-5">Processing of GET requests should not change the application's state or have other side effects that might be significant to the client since implementations can and do retry HTTP GET requests that fail. Furthermore, some GET requests protected by TLS early data might be vulnerable to replay attacks (see <xref target="RFC8470" format="default" sectionFormat="of" derivedContent="RFC8470"/>). Note that this does not include logging and similar functions; see <xref section="9.2.1" sectionFormat="comma" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-9.2.1" derivedContent="HTTP"/>.</t>
          <t indent="0" pn="section-4.5.1-6">Finally, note that while the generic HTTP syntax allows a GET request message to contain content, the purpose is to allow message parsers to be generic; per <xref section="9.3.1" sectionFormat="comma" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-9.3.1" derivedContent="HTTP"/>, content in a GET is not recommended, has no meaning, and will be either ignored or rejected by generic HTTP software (such as intermediaries, caches, servers, and client libraries).</t>
        </section>
        <section anchor="options" numbered="true" toc="include" removeInRFC="false" pn="section-4.5.2">
          <name slugifiedName="name-options">OPTIONS</name>
          <t indent="0" pn="section-4.5.2-1">The OPTIONS method was defined for metadata retrieval and is used both by Web Distributed Authoring and Versioning (WebDAV) <xref target="RFC4918" format="default" sectionFormat="of" derivedContent="RFC4918"/> and CORS <xref target="FETCH" format="default" sectionFormat="of" derivedContent="FETCH"/>. Because HTTP-based APIs often need to retrieve metadata about resources, it is often considered for their use.</t>
          <t indent="0" pn="section-4.5.2-2">However, OPTIONS does have significant limitations:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.5.2-3">
            <li pn="section-4.5.2-3.1">It isn't possible to link to the metadata with a simple URL because OPTIONS is not the default method.</li>
            <li pn="section-4.5.2-3.2">OPTIONS responses are not cacheable because HTTP caches operate on representations of the resource (i.e., GET and HEAD). If OPTIONS responses are cached separately, their interactions with the HTTP cache expiry, secondary keys, and other mechanisms need to be considered.</li>
            <li pn="section-4.5.2-3.3">OPTIONS is "chatty" -- requesting metadata separately increases the number of requests needed to interact with the application.</li>
            <li pn="section-4.5.2-3.4">Implementation support for OPTIONS is not universal; some servers do not expose the ability to respond to OPTIONS requests without significant effort.</li>
          </ul>
          <t indent="0" pn="section-4.5.2-4">Instead of OPTIONS, one of these alternative approaches might be more appropriate:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.5.2-5">
            <li pn="section-4.5.2-5.1">For server-wide metadata, create a well-known URI <xref target="WELL-KNOWN-URI" format="default" sectionFormat="of" derivedContent="WELL-KNOWN-URI"/> or use an already existing one if appropriate (e.g., host-meta <xref target="RFC6415" format="default" sectionFormat="of" derivedContent="RFC6415"/>).</li>
            <li pn="section-4.5.2-5.2">For metadata about a specific resource, create a separate resource and link to it using a Link response header field or a link serialised into the response's content. See <xref target="WEB-LINKING" format="default" sectionFormat="of" derivedContent="WEB-LINKING"/>. Note that the Link header field is available on HEAD responses, which is useful if the client wants to discover a resource's capabilities before they interact with it.</li>
          </ul>
        </section>
      </section>
      <section anchor="using-http-status-codes" numbered="true" toc="include" removeInRFC="false" pn="section-4.6">
        <name slugifiedName="name-using-http-status-codes">Using HTTP Status Codes</name>
        <t indent="0" pn="section-4.6-1">HTTP status codes convey semantics both for the benefit of generic HTTP components -- such as caches, intermediaries, and clients -- and applications themselves. However, applications can encounter a number of pitfalls in their use.</t>
        <t indent="0" pn="section-4.6-2">First, status codes are often generated by components other than the application itself. This can happen, for example, when network errors are encountered; when a captive portal, proxy, or content delivery network is present; or when a server is overloaded or thinks it is under attack. They can even be generated by generic client software when certain error conditions are encountered. As a result, if an application assigns specific semantics to one of these status codes, a client can be misled about its state because the status code was generated by a generic component, not the application itself.</t>
        <t indent="0" pn="section-4.6-3">Furthermore, mapping application errors to individual HTTP status codes one-to-one often leads to a situation where the finite space of applicable HTTP status codes is exhausted. This, in turn, leads to a number of bad practices -- including minting new, application-specific status codes or using existing status codes even though the link between their semantics and the application's is tenuous at best.</t>
        <t indent="0" pn="section-4.6-4">Instead, applications using HTTP should define their errors to use the most applicable status code, making generous use of the general status codes (200, 400, and 500) when in doubt. Importantly, they should not specify a one-to-one relationship between status codes and application errors, thereby avoiding the exhaustion issue outlined above.</t>
        <t indent="0" pn="section-4.6-5">To distinguish between multiple error conditions that are mapped to the same status code and to avoid the misattribution issue outlined above, applications using HTTP should convey finer-grained error information in the response's message content and/or header fields. <xref target="PROBLEM-DETAILS" format="default" sectionFormat="of" derivedContent="PROBLEM-DETAILS"/> provides one way to do so.</t>
        <t indent="0" pn="section-4.6-6">Because the set of registered HTTP status codes can expand, applications using HTTP should explicitly point out that clients ought to be able to handle all applicable status codes gracefully (i.e., falling back to the generic n00 semantics of a given status code; e.g., 499 can be safely handled as 400 (Bad Request) by clients that don't recognise it). This is preferable to creating a "laundry list" of potential status codes since such a list won't be complete in the foreseeable future.</t>
        <t indent="0" pn="section-4.6-7">Applications using HTTP <bcp14>MUST NOT</bcp14> re-specify the semantics of HTTP status codes, even if it is only by copying their definition. It is <bcp14>NOT RECOMMENDED</bcp14> they require specific reason phrases to be used; the reason phrase has no function in HTTP, is not guaranteed to be preserved by implementations, and is not carried at all in the HTTP/2 <xref target="HTTP2" format="default" sectionFormat="of" derivedContent="HTTP/2"/> message format.</t>
        <t indent="0" pn="section-4.6-8">Applications <bcp14>MUST</bcp14> only use registered HTTP status codes. As with methods, new HTTP status codes are rare and required (by <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>) to be registered with IETF Review. Similarly, HTTP status codes are generic; they are required (by <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>) to be potentially applicable to all resources, not just to those of one application.</t>
        <t indent="0" pn="section-4.6-9">When authors believe that a new status code is required, they are encouraged to engage with the HTTP community early (e.g., on the <eref target="mailto:ietf-http-wg@w3.org" brackets="angle"/> mailing list) and document their proposal as a separate HTTP extension, rather than as part of an application's specification.</t>
        <section anchor="redirects" numbered="true" toc="include" removeInRFC="false" pn="section-4.6.1">
          <name slugifiedName="name-redirection">Redirection</name>
          <t indent="0" pn="section-4.6.1-1">The 3xx series of status codes specified in <xref section="15.4" sectionFormat="of" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-15.4" derivedContent="HTTP"/> directs the user agent to another resource to satisfy the request. The most common of these are 301, 302, 307, and 308, all of which use the Location response header field to indicate where the client should resend the request.</t>
          <t indent="0" pn="section-4.6.1-2">There are two ways that the members of this group of status codes differ:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.6.1-3">
            <li pn="section-4.6.1-3.1">Whether they are permanent or temporary. Permanent redirects can be used to update links stored in the client (e.g., bookmarks), whereas temporary ones cannot. Note that this has no effect on HTTP caching; it is completely separate.</li>
            <li pn="section-4.6.1-3.2">Whether they allow the redirected request to change the request method from POST to GET. Web browsers generally do change POST to GET for 301 and 302; therefore, 308 and 307 were created to allow redirection without changing the method.</li>
          </ul>
          <t indent="0" pn="section-4.6.1-4">This table summarises their relationships:</t>
          <table align="center" pn="table-1">
            <thead>
              <tr>
                <th align="left" colspan="1" rowspan="1"> </th>
                <th align="left" colspan="1" rowspan="1">Permanent</th>
                <th align="left" colspan="1" rowspan="1">Temporary</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left" colspan="1" rowspan="1">Allows change of the request method from POST to GET</td>
                <td align="left" colspan="1" rowspan="1">301</td>
                <td align="left" colspan="1" rowspan="1">302</td>
              </tr>
              <tr>
                <td align="left" colspan="1" rowspan="1">Does not allow change of the request method</td>
                <td align="left" colspan="1" rowspan="1">308</td>
                <td align="left" colspan="1" rowspan="1">307</td>
              </tr>
            </tbody>
          </table>
          <t indent="0" pn="section-4.6.1-6">The 303 (See Other) status code can be used to inform the client that the result of an operation is available at a different location using GET.</t>
          <t indent="0" pn="section-4.6.1-7">As noted in <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>, a user agent is allowed to automatically follow a 3xx redirect that has a Location response header field, even if they don't understand the semantics of the specific status code. However, they aren't required to do so; therefore, if an application using HTTP desires redirects to be automatically followed, it needs to explicitly specify the circumstances when this is required.</t>
          <t indent="0" pn="section-4.6.1-8">Redirects can be cached (when appropriate cache directives are present), but beyond that, they are not "sticky" -- i.e., redirection of a URI will not result in the client assuming that similar URIs (e.g., with different query parameters) will also be redirected.</t>
          <t indent="0" pn="section-4.6.1-9">Applications using HTTP are encouraged to specify that 301 and 302 responses change the subsequent request method from POST (but no other method) to GET to be compatible with browsers.
Generally, when a redirected request is made, its header fields are copied from the original request. However, they can be modified by various mechanisms; e.g., sent Authorization (<xref section="11" sectionFormat="comma" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-11" derivedContent="HTTP"/>) and Cookie (<xref target="COOKIES" format="default" sectionFormat="of" derivedContent="COOKIES"/>) header fields will change if the origin (and sometimes path) of the request changes. An application using HTTP should specify if any request header fields that it defines need to be modified or removed upon a redirect; however, this behaviour cannot be relied upon since a generic client (like a browser) will be unaware of such requirements.</t>
        </section>
      </section>
      <section anchor="headers" numbered="true" toc="include" removeInRFC="false" pn="section-4.7">
        <name slugifiedName="name-specifying-http-header-fiel">Specifying HTTP Header Fields</name>
        <t indent="0" pn="section-4.7-1">Applications often define new HTTP header fields. Typically, using HTTP header fields is appropriate in a few different situations:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.7-2">
          <li pn="section-4.7-2.1">The field is useful to intermediaries (who often wish to avoid parsing message content), and/or</li>
          <li pn="section-4.7-2.2">The field is useful to generic HTTP software (e.g., clients, servers), and/or</li>
          <li pn="section-4.7-2.3">It is not possible to include their values in the message content (usually because a format does not allow it).</li>
        </ul>
        <t indent="0" pn="section-4.7-3">When the conditions above are not met, it is usually better to convey application-specific information in other places -- e.g., the message content or the URL query string.</t>
        <t indent="0" pn="section-4.7-4">New header fields <bcp14>MUST</bcp14> be registered, per <xref section="16.3" sectionFormat="of" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-16.3" derivedContent="HTTP"/>.</t>
        <t indent="0" pn="section-4.7-5">See <xref section="16.3.2" sectionFormat="of" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-16.3.2" derivedContent="HTTP"/> for guidelines to consider when minting new header fields. <xref target="STRUCTURED-FIELDS" format="default" sectionFormat="of" derivedContent="STRUCTURED-FIELDS"/> provides a common structure for new header fields and avoids many issues in their parsing and handling; it is <bcp14>RECOMMENDED</bcp14> that new header fields use it.</t>
        <t indent="0" pn="section-4.7-6">It is <bcp14>RECOMMENDED</bcp14> that header field names be short (even when field compression is used, there is an overhead) but appropriately specific. In particular, if a header field is specific to an application, an identifier for that application can form a prefix to the header field name, separated by a hyphen.</t>
        <t indent="0" pn="section-4.7-7">For example, if the "example" application needs to create three header fields, they might be called "example-foo", "example-bar", and "example-baz". Note that the primary motivation here is to avoid consuming more generic field names, not to reserve a portion of the namespace for the application; see <xref target="RFC6648" format="default" sectionFormat="of" derivedContent="RFC6648"/> for related considerations.</t>
        <t indent="0" pn="section-4.7-8">The semantics of existing HTTP header fields <bcp14>MUST NOT</bcp14> be redefined without updating their registration or defining an extension to them (if allowed). For example, an application using HTTP cannot specify that the Location header field has a special meaning in a certain context.</t>
        <t indent="0" pn="section-4.7-9">See <xref target="caching" format="default" sectionFormat="of" derivedContent="Section 4.9"/> for the interaction between header fields and HTTP caching; in particular, request header fields that are used to choose (per <xref section="4.1" sectionFormat="of" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.1" derivedContent="HTTP-CACHING"/>) a response have impact there and need to be carefully considered.</t>
        <t indent="0" pn="section-4.7-10">See <xref target="state" format="default" sectionFormat="of" derivedContent="Section 4.10"/> for considerations regarding header fields that carry application state (e.g., Cookie).</t>
      </section>
      <section anchor="content" numbered="true" toc="include" removeInRFC="false" pn="section-4.8">
        <name slugifiedName="name-defining-message-content">Defining Message Content</name>
        <t indent="0" pn="section-4.8-1">Common syntactic conventions for message contents include JSON <xref target="JSON" format="default" sectionFormat="of" derivedContent="JSON"/>, XML <xref target="XML" format="default" sectionFormat="of" derivedContent="XML"/>, and Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/>. Best practices for their use are out of scope for this document.</t>
        <t indent="0" pn="section-4.8-2">Applications should register distinct media types for each format they define; this makes it possible to identify them unambiguously and negotiate for their use. See <xref target="RFC6838" format="default" sectionFormat="of" derivedContent="RFC6838"/> for more information.</t>
      </section>
      <section anchor="caching" numbered="true" toc="include" removeInRFC="false" pn="section-4.9">
        <name slugifiedName="name-leveraging-http-caching">Leveraging HTTP Caching</name>
        <t indent="0" pn="section-4.9-1">HTTP caching <xref target="HTTP-CACHING" format="default" sectionFormat="of" derivedContent="HTTP-CACHING"/> is one of the primary benefits of using HTTP for applications; it provides scalability, reduces latency, and improves reliability. Furthermore, HTTP caches are readily available in browsers and other clients, networks as forward and reverse proxies, content delivery networks, and as part of server software.</t>
        <t indent="0" pn="section-4.9-2">Even when an application using HTTP isn't designed to take advantage of caching, it needs to consider how caches will handle its responses to preserve correct behaviour when one is interposed (whether in the network, server, client, or intervening infrastructure).</t>
        <section anchor="freshness" numbered="true" toc="include" removeInRFC="false" pn="section-4.9.1">
          <name slugifiedName="name-freshness">Freshness</name>
          <t indent="0" pn="section-4.9.1-1">Assigning even a short freshness lifetime (<xref section="4.2" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.2" derivedContent="HTTP-CACHING"/>) -- e.g., 5 seconds -- allows a response to be reused to satisfy multiple clients and/or a single client making the same request repeatedly. In general, if it is safe to reuse something, consider assigning a freshness lifetime.</t>
          <t indent="0" pn="section-4.9.1-2">The most common method for specifying freshness is the max-age response directive (<xref section="5.2.2.1" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-5.2.2.1" derivedContent="HTTP-CACHING"/>). The Expires header field (<xref section="5.3" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-5.3" derivedContent="HTTP-CACHING"/>) can also be used, but it is not necessary; all modern cache implementations support the Cache-Control header field, and specifying freshness as a delta is usually more convenient and less error-prone.</t>
          <t indent="0" pn="section-4.9.1-3">It is not necessary to add the public response directive (<xref section="5.2.2.9" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-5.2.2.9" derivedContent="HTTP-CACHING"/>) to cache most responses; it is only necessary when it's desirable to store an authenticated response, or when the status code isn't understood by the cache and there isn't explicit freshness information available.</t>
          <t indent="0" pn="section-4.9.1-4">In some situations, responses without explicit cache freshness directives will be stored and served using a heuristic freshness lifetime; see <xref section="4.2.2" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.2.2" derivedContent="HTTP-CACHING"/>. As the heuristic is not under the control of the application, it is generally preferable to set an explicit freshness lifetime or make the response explicitly uncacheable.</t>
          <t indent="0" pn="section-4.9.1-5">If caching of a response is not desired, the appropriate cache response directive is no-store. Other directives are not necessary, and no-store only needs to be sent in situations where the response might be cached; see <xref section="3" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-3" derivedContent="HTTP-CACHING"/>. Note that the no-cache directive allows a response to be stored, just not reused by a cache without validation; it does not prevent caching (despite its name).</t>
          <t indent="0" pn="section-4.9.1-6">For example, this response cannot be stored or reused by a cache:</t>
          <sourcecode type="http-message" markers="false" pn="section-4.9.1-7">
HTTP/1.1 200 OK
Content-Type: application/example+xml
Cache-Control: no-store

[content]
</sourcecode>
        </section>
        <section anchor="stale-responses" numbered="true" toc="include" removeInRFC="false" pn="section-4.9.2">
          <name slugifiedName="name-stale-responses">Stale Responses</name>
          <t indent="0" pn="section-4.9.2-1">Authors should understand that stale responses (e.g., with Cache-Control: max-age=0) can be reused by caches when disconnected from the origin server; this can be useful for handling network issues.</t>
          <t indent="0" pn="section-4.9.2-2">If doing so is not suitable for a given response, the origin should send the must-revalidate cache directive. See <xref section="4.2.4" sectionFormat="of" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.2.4" derivedContent="HTTP-CACHING"/> and also <xref target="RFC5861" format="default" sectionFormat="of" derivedContent="RFC5861"/> for additional controls over stale content.</t>
          <t indent="0" pn="section-4.9.2-3">Stale responses can be refreshed by assigning a validator, saving both transfer bandwidth and latency for large responses; see <xref section="13" sectionFormat="of" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-13" derivedContent="HTTP"/>.</t>
        </section>
        <section anchor="caching-app-semantics" numbered="true" toc="include" removeInRFC="false" pn="section-4.9.3">
          <name slugifiedName="name-caching-and-application-sem">Caching and Application Semantics</name>
          <t indent="0" pn="section-4.9.3-1">When an application has a need to express a lifetime that's separate from the freshness lifetime, this should be conveyed separately, either in the response's content or in a separate header field. When this happens, the relationship between HTTP caching and that lifetime needs to be carefully considered since the response will be used as long as it is considered fresh.</t>
          <t indent="0" pn="section-4.9.3-2">In particular, application authors need to consider how responses that are not freshly obtained from the origin server should be handled; if they have a concept like a validity period, this will need to be calculated considering the age of the response (see <xref section="4.2.3" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-4.2.3" derivedContent="HTTP-CACHING"/>).</t>
          <t indent="0" pn="section-4.9.3-3">One way to address this is to explicitly specify that responses need to be fresh upon use.</t>
        </section>
        <section anchor="varying-content-based-upon-the-request" numbered="true" toc="include" removeInRFC="false" pn="section-4.9.4">
          <name slugifiedName="name-varying-content-based-upon-">Varying Content Based Upon the Request</name>
          <t indent="0" pn="section-4.9.4-1">If an application uses a request header field to change the response's header fields or content, authors should point out that this has implications for caching; in general, such resources need to either make their responses uncacheable (e.g., with the no-store cache directive defined in <xref section="5.2.2.5" sectionFormat="comma" target="HTTP-CACHING" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9111#section-5.2.2.5" derivedContent="HTTP-CACHING"/>) or send the Vary response header field (<xref section="12.5.5" sectionFormat="comma" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-12.5.5" derivedContent="HTTP"/>) on all responses from that resource (including the "default" response).</t>
          <t indent="0" pn="section-4.9.4-2">For example, this response:</t>
          <sourcecode type="http-message" markers="false" pn="section-4.9.4-3">
HTTP/1.1 200 OK
Content-Type: application/example+xml
Cache-Control: max-age=60
ETag: "sa0f8wf20fs0f"
Vary: Accept-Encoding

[content]
</sourcecode>
          <t indent="0" pn="section-4.9.4-4">can be stored for 60 seconds by both private and shared caches, can be revalidated with If-None-Match, and varies on the Accept-Encoding request header field.</t>
        </section>
      </section>
      <section anchor="state" numbered="true" toc="include" removeInRFC="false" pn="section-4.10">
        <name slugifiedName="name-handling-application-state">Handling Application State</name>
        <t indent="0" pn="section-4.10-1">Applications can use stateful cookies <xref target="COOKIES" format="default" sectionFormat="of" derivedContent="COOKIES"/> to identify a client and/or store client-specific data to contextualise requests.</t>
        <t indent="0" pn="section-4.10-2">When used, it is important to carefully specify the scoping and use of cookies; if the application exposes sensitive data or capabilities (e.g., by acting as an ambient authority), exploits are possible. Mitigations include using a request-specific token to ensure the intent of the client.</t>
      </section>
      <section anchor="multiplex" numbered="true" toc="include" removeInRFC="false" pn="section-4.11">
        <name slugifiedName="name-making-multiple-requests">Making Multiple Requests</name>
        <t indent="0" pn="section-4.11-1">Clients often need to send multiple requests to perform a task.</t>
        <t indent="0" pn="section-4.11-2">In HTTP/1 <xref target="HTTP11" format="default" sectionFormat="of" derivedContent="HTTP/1.1"/>, parallel requests are most often supported by opening multiple connections. Application performance can be impacted when too many simultaneous connections are used because connections' congestion control will not be coordinated. Furthermore, it can be difficult for applications to decide when to issue and which connection to use for a given request, further impacting performance.</t>
        <t indent="0" pn="section-4.11-3">HTTP/2 <xref target="HTTP2" format="default" sectionFormat="of" derivedContent="HTTP/2"/> and HTTP/3 <xref target="HTTP3" format="default" sectionFormat="of" derivedContent="HTTP/3"/> offer multiplexing to applications, removing the need to use multiple connections. However, application performance can still be significantly affected by how the server chooses to prioritize responses. Depending on the application, it might be best for the server to determine the priority of responses or for the client to hint its priorities to the server (see, e.g., <xref target="HTTP-PRIORITY" format="default" sectionFormat="of" derivedContent="HTTP-PRIORITY"/>).</t>
        <t indent="0" pn="section-4.11-4">In all versions of HTTP, requests are made independently -- you can't rely on the relative order of two requests to guarantee their processing order. This is because they might be sent over a multiplexed protocol by an intermediary or sent to different origin servers, or the server might even perform processing in a different order. If two requests need strict ordering, the only reliable way to ensure the outcome is to issue the second request when the final response to the first has begun.</t>
        <t indent="0" pn="section-4.11-5">Applications <bcp14>MUST NOT</bcp14> make assumptions about the relationship between separate requests on a single transport connection; doing so breaks many of the assumptions of HTTP as a stateless protocol and will cause problems in interoperability, security, operability, and evolution.</t>
      </section>
      <section anchor="client-auth" numbered="true" toc="include" removeInRFC="false" pn="section-4.12">
        <name slugifiedName="name-client-authentication">Client Authentication</name>
        <t indent="0" pn="section-4.12-1">Applications can use HTTP authentication (<xref section="11" sectionFormat="of" target="HTTP" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9110#section-11" derivedContent="HTTP"/>) to identify clients. Per <xref target="RFC7617" format="default" sectionFormat="of" derivedContent="RFC7617"/>, the Basic authentication scheme is not suitable for protecting sensitive or valuable information unless the channel is secure (e.g., using the "https" URI scheme). Likewise, <xref target="RFC7616" format="default" sectionFormat="of" derivedContent="RFC7616"/> requires the Digest authentication scheme to be used over a secure channel.</t>
        <t indent="0" pn="section-4.12-2">With HTTPS, clients might also be authenticated using certificates <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, but note that such authentication is intrinsically scoped to the underlying transport connection. As a result, a client has no way of knowing whether the authenticated status was used in preparing the response (though Vary: * and/or the private cache directive can provide a partial indication), and the only way to obtain a specifically unauthenticated response is to open a new connection.</t>
        <t indent="0" pn="section-4.12-3">When used, it is important to carefully specify the scoping and use of authentication; if the application exposes sensitive data or capabilities (e.g., by acting as an ambient authority; see <xref section="8.3" sectionFormat="of" target="RFC6454" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6454#section-8.3" derivedContent="RFC6454"/>), exploits are possible. Mitigations include using a request-specific token to ensure the intent of the client.</t>
      </section>
      <section anchor="browser" numbered="true" toc="include" removeInRFC="false" pn="section-4.13">
        <name slugifiedName="name-coexisting-with-web-browsin">Coexisting with Web Browsing</name>
        <t indent="0" pn="section-4.13-1">Even if there is not an intent for an application to be used with a Web browser, its resources will remain available to browsers and other HTTP clients. This means that all such applications that use HTTP need to consider how browsers will interact with them, particularly regarding security.</t>
        <t indent="0" pn="section-4.13-2">For example, if an application's state can be changed using a POST request, a Web browser can easily be coaxed into cross-site request forgery (CSRF) from arbitrary Web sites.</t>
        <t indent="0" pn="section-4.13-3">Or, if an attacker gains control of content returned from the application's resources (for example, part of the request is reflected in the response, or the response contains external information that the attacker can change), they can inject code into the browser and access data and capabilities as if they were the origin -- a technique known as a cross-site scripting (XSS) attack.</t>
        <t indent="0" pn="section-4.13-4">This is only a small sample of the kinds of issues that applications using HTTP must consider. Generally, the best approach is to actually consider the application as a Web application, and to follow best practices for their secure development.</t>
        <t indent="0" pn="section-4.13-5">A complete enumeration of such practices is out of scope for this document, but some considerations include:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.13-6">
          <li pn="section-4.13-6.1">Using an application-specific media type in the Content-Type header field, and requiring clients to fail if it is not used.</li>
          <li pn="section-4.13-6.2">Using X-Content-Type-Options: nosniff <xref target="FETCH" format="default" sectionFormat="of" derivedContent="FETCH"/> to ensure that content under attacker control can't be coaxed into a form that is interpreted as active content by a Web browser.</li>
          <li pn="section-4.13-6.3">Using Content-Security-Policy <xref target="CSP" format="default" sectionFormat="of" derivedContent="CSP"/> to constrain the capabilities of active content (i.e., that which can execute scripts, such as HTML <xref target="HTML" format="default" sectionFormat="of" derivedContent="HTML"/> and PDF), thereby mitigating XSS attacks.</li>
          <li pn="section-4.13-6.4">Using Referrer-Policy <xref target="REFERRER-POLICY" format="default" sectionFormat="of" derivedContent="REFERRER-POLICY"/> to prevent sensitive data in URLs from being leaked in the Referer request header field.</li>
          <li pn="section-4.13-6.5">Using the 'HttpOnly' flag on Cookies to ensure that cookies are not exposed to browser scripting languages <xref target="COOKIES" format="default" sectionFormat="of" derivedContent="COOKIES"/>.</li>
          <li pn="section-4.13-6.6">Avoiding use of compression on any sensitive information (e.g., authentication tokens, passwords), as the scripting environment offered by Web browsers allows an attacker to repeatedly probe the compression space; if the attacker has access to the network path of the communication, they can use this capability to recover that information.</li>
        </ul>
        <t indent="0" pn="section-4.13-7">Depending on how they are intended to be deployed, specifications for applications using HTTP might require the use of these mechanisms in specific ways or might merely point them out in Security Considerations.</t>
        <t indent="0" pn="section-4.13-8">An example of an HTTP response from an application that does not intend for its content to be treated as active by browsers might look like this:</t>
        <sourcecode type="http-message" markers="false" pn="section-4.13-9">
HTTP/1.1 200 OK
Content-Type: application/example+json
X-Content-Type-Options: nosniff
Content-Security-Policy: default-src 'none'
Cache-Control: max-age=3600
Referrer-Policy: no-referrer

[content]
</sourcecode>
        <t indent="0" pn="section-4.13-10">If an application has browser compatibility as a goal, client interaction ought to be defined in terms of <xref target="FETCH" format="default" sectionFormat="of" derivedContent="FETCH"/> since that is the abstraction that browsers use for HTTP; it enforces many of these best practices.</t>
      </section>
      <section anchor="other-apps" numbered="true" toc="include" removeInRFC="false" pn="section-4.14">
        <name slugifiedName="name-maintaining-application-bou">Maintaining Application Boundaries</name>
        <t indent="0" pn="section-4.14-1">Because many HTTP capabilities are scoped to the origin <xref target="RFC6454" format="default" sectionFormat="of" derivedContent="RFC6454"/>, applications also need to consider how deployments might interact with other applications (including Web browsing) that use the same origin server.</t>
        <t indent="0" pn="section-4.14-2">For example, if cookies <xref target="COOKIES" format="default" sectionFormat="of" derivedContent="COOKIES"/> are used to carry application state, they will be sent with all requests to the origin by default (unless scoped by path), and the application might receive cookies from other applications on the origin server. This can lead to security issues as well as collision in cookie names.</t>
        <t indent="0" pn="section-4.14-3">One solution to these issues is to require a dedicated hostname for the application so that it has a unique origin. However, it is often desirable to allow multiple applications to be deployed on a single hostname; doing so provides the most deployment flexibility and enables them to be "mixed" together (see <xref target="BCP190" format="default" sectionFormat="of" derivedContent="BCP190"/> for details).</t>
        <t indent="0" pn="section-4.14-4">Therefore, applications using HTTP should strive to allow multiple applications on an origin. Specifically, when specifying the use of cookies, HTTP authentication realms <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>, or other origin-wide HTTP mechanisms, applications using HTTP should not mandate the use of a particular name but instead let deployments configure them. Consideration should be given to scoping them to part of the origin, using their specified mechanisms for doing so.</t>
        <t indent="0" pn="section-4.14-5">Modern Web browsers constrain the ability of content from one origin to access resources from another to avoid leaking private information. As a result, applications that wish to expose cross-origin data to browsers will need to implement the CORS protocol; see <xref target="FETCH" format="default" sectionFormat="of" derivedContent="FETCH"/>.</t>
      </section>
      <section anchor="server-push" numbered="true" toc="include" removeInRFC="false" pn="section-4.15">
        <name slugifiedName="name-using-server-push">Using Server Push</name>
        <t indent="0" pn="section-4.15-1">HTTP/2 added the ability for servers to "push" request/response pairs to clients in <xref section="8.4" sectionFormat="comma" target="HTTP2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9113#section-8.4" derivedContent="HTTP/2"/>. While server push seems like a natural fit for many common application semantics (e.g., "fanout" and publish/subscribe), a few caveats should be noted:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.15-2">
          <li pn="section-4.15-2.1">Server push is hop by hop; that is, it is not automatically forwarded by intermediaries. As a result, it might not work easily (or at all) with proxies, reverse proxies, and content delivery networks.</li>
          <li pn="section-4.15-2.2">Server push can have a negative performance impact on HTTP when used incorrectly, particularly if there is contention with resources that have actually been requested by the client.</li>
          <li pn="section-4.15-2.3">Server push is implemented differently in different clients, especially regarding interaction with HTTP caching, and capabilities might vary.</li>
          <li pn="section-4.15-2.4">APIs for server push are currently unavailable in some implementations and vary widely in others. In particular, there is no current browser API for it.</li>
          <li pn="section-4.15-2.5">Server push is not supported in HTTP/1.1 or HTTP/1.0.</li>
          <li pn="section-4.15-2.6">Server push does not form part of the "core" semantics of HTTP and therefore might not be supported by future versions of the protocol.</li>
        </ul>
        <t indent="0" pn="section-4.15-3">Applications wishing to optimise cases where the client can perform work related to requests before the full response is available (e.g., fetching links for things likely to be contained within) might benefit from using the 103 (Early Hints) status code; see <xref target="RFC8297" format="default" sectionFormat="of" derivedContent="RFC8297"/>.</t>
        <t indent="0" pn="section-4.15-4">Applications using server push directly need to enforce the requirements regarding authority in <xref section="8.4" sectionFormat="comma" target="HTTP2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9113#section-8.4" derivedContent="HTTP/2"/> to avoid cross-origin push attacks.</t>
      </section>
      <section anchor="versioning" numbered="true" toc="include" removeInRFC="false" pn="section-4.16">
        <name slugifiedName="name-allowing-versioning-and-evo">Allowing Versioning and Evolution</name>
        <t indent="0" pn="section-4.16-1">It's often necessary to introduce new features into application protocols and change existing ones.</t>
        <t indent="0" pn="section-4.16-2">In HTTP, backwards-incompatible changes can be made using mechanisms such as:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.16-3">
          <li pn="section-4.16-3.1">Using a distinct link relation type <xref target="WEB-LINKING" format="default" sectionFormat="of" derivedContent="WEB-LINKING"/> to identify a URL for a resource that implements the new functionality.</li>
          <li pn="section-4.16-3.2">Using a distinct media type <xref target="RFC6838" format="default" sectionFormat="of" derivedContent="RFC6838"/> to identify formats that enable the new functionality.</li>
          <li pn="section-4.16-3.3">Using a distinct HTTP header field to implement new functionality outside the message content.</li>
        </ul>
      </section>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-5-1">This document has no IANA actions.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-6-1">Applications using HTTP are subject to the security considerations of HTTP itself and any extensions used; <xref target="HTTP" format="default" sectionFormat="of" derivedContent="HTTP"/>, <xref target="HTTP-CACHING" format="default" sectionFormat="of" derivedContent="HTTP-CACHING"/>, and <xref target="WEB-LINKING" format="default" sectionFormat="of" derivedContent="WEB-LINKING"/> are often relevant, amongst others.</t>
      <t indent="0" pn="section-6-2"><xref target="scheme" format="default" sectionFormat="of" derivedContent="Section 4.4.2"/> recommends support for "https" URLs and discourages the use of "http" URLs to provide authentication, integrity, and confidentiality, as well as to mitigate pervasive monitoring attacks. Many applications using HTTP perform authentication and authorization with bearer tokens (e.g., in session cookies). If the transport is unencrypted, an attacker that can eavesdrop upon or modify HTTP communications can often escalate their privilege to perform operations on resources.</t>
      <t indent="0" pn="section-6-3"><xref target="caching-app-semantics" format="default" sectionFormat="of" derivedContent="Section 4.9.3"/> highlights the potential for mismatch between HTTP caching and application-specific storage of responses or information therein.</t>
      <t indent="0" pn="section-6-4"><xref target="state" format="default" sectionFormat="of" derivedContent="Section 4.10"/> discusses the impact of using stateful mechanisms in the protocol as ambient authority and suggests a mitigation.</t>
      <t indent="0" pn="section-6-5"><xref target="browser" format="default" sectionFormat="of" derivedContent="Section 4.13"/> highlights the implications of Web browsers' capabilities on applications that use HTTP.</t>
      <t indent="0" pn="section-6-6"><xref target="other-apps" format="default" sectionFormat="of" derivedContent="Section 4.14"/> discusses the issues that arise when applications are deployed on the same origin as websites (and other applications).</t>
      <t indent="0" pn="section-6-7"><xref target="server-push" format="default" sectionFormat="of" derivedContent="Section 4.15"/> highlights risks of using HTTP/2 server push in a manner other than that specified.</t>
      <t indent="0" pn="section-6-8">Applications that use HTTP in a manner that involves modification of implementations -- for example, requiring support for a new URI scheme or a non-standard method -- risk having those implementations "fork" from their parent HTTP implementations, with the possible result that they do not benefit from patches and other security improvements incorporated upstream.</t>
      <section anchor="privacy-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-6.1">
        <name slugifiedName="name-privacy-considerations">Privacy Considerations</name>
        <t indent="0" pn="section-6.1-1">HTTP clients can expose a variety of information to servers. Besides information that's explicitly sent as part of an application's operation (for example, names and other user-entered data) and "on the wire" (which is one of the reasons "https" is recommended in <xref target="scheme" format="default" sectionFormat="of" derivedContent="Section 4.4.2"/>), other information can be gathered through less obvious means -- often by connecting activities of a user over time.</t>
        <t indent="0" pn="section-6.1-2">This includes session information, tracking the client through fingerprinting, and code execution.</t>
        <t indent="0" pn="section-6.1-3">Session information includes things like the IP address of the client, TLS session tickets, Cookies, ETags stored in the client's cache, and other stateful mechanisms. Applications are advised to avoid using session mechanisms unless they are unavoidable or necessary for operation, in which case these risks need to be documented. When they are used, implementations should be encouraged to allow clearing such state.</t>
        <t indent="0" pn="section-6.1-4">Fingerprinting uses unique aspects of a client's messages and behaviours to connect disparate requests and connections. For example, the User-Agent request header field conveys specific information about the implementation; the Accept-Language request header field conveys the users' preferred language. In combination, a number of these markers can be used to uniquely identify a client, impacting its control over its data. As a result, applications are advised to specify that clients should only emit the information they need to function in requests.</t>
        <t indent="0" pn="section-6.1-5">Finally, if an application exposes the ability to execute code, great care needs to be taken since any ability to observe its environment can be used as an opportunity to both fingerprint the client and to obtain and manipulate private data (including session information). For example, access to high-resolution timers (even indirectly) can be used to profile the underlying hardware, creating a unique identifier for the system. Applications are advised to avoid allowing the use of mobile code where possible; when it cannot be avoided, the resulting system's security properties need be carefully scrutinised.</t>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="HTTP11" to="HTTP/1.1"/>
    <displayreference target="HTTP2" to="HTTP/2"/>
    <displayreference target="HTTP3" to="HTTP/3"/>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="BCP190" quoteTitle="true" target="https://www.rfc-editor.org/rfc/rfc8820" derivedAnchor="BCP190">
          <front>
            <title>URI Design and Ownership</title>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="June" year="2020"/>
          </front>
          <seriesInfo name="BCP" value="190"/>
          <seriesInfo name="RFC" value="8820"/>
          <seriesInfo name="DOI" value="10.17487/RFC8820"/>
        </reference>
        <reference anchor="HTTP" target="https://www.rfc-editor.org/info/rfc9110" quoteTitle="true" derivedAnchor="HTTP">
          <front>
            <title>HTTP Semantics</title>
            <author initials="R" surname="Fielding" fullname="Roy Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M" surname="Nottingham" fullname="Mark Nottingham" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J" surname="Reschke" fullname="Julian Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="June"/>
          </front>
          <seriesInfo name="STD" value="97"/>
          <seriesInfo name="RFC" value="9110"/>
          <seriesInfo name="DOI" value="10.17487/RFC9110"/>
        </reference>
        <reference anchor="HTTP-CACHING" target="https://www.rfc-editor.org/info/rfc9111" quoteTitle="true" derivedAnchor="HTTP-CACHING">
          <front>
            <title>HTTP Caching</title>
            <author initials="R" surname="Fielding" fullname="Roy Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M" surname="Nottingham" fullname="Mark Nottingham" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J" surname="Reschke" fullname="Julian Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="June"/>
          </front>
          <seriesInfo name="STD" value="98"/>
          <seriesInfo name="RFC" value="9111"/>
          <seriesInfo name="DOI" value="10.17487/RFC9111"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC6454" target="https://www.rfc-editor.org/info/rfc6454" quoteTitle="true" derivedAnchor="RFC6454">
          <front>
            <title>The Web Origin Concept</title>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="December"/>
            <abstract>
              <t indent="0">This document defines the concept of an "origin", which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named "Origin", that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6454"/>
          <seriesInfo name="DOI" value="10.17487/RFC6454"/>
        </reference>
        <reference anchor="RFC6648" target="https://www.rfc-editor.org/info/rfc6648" quoteTitle="true" derivedAnchor="RFC6648">
          <front>
            <title>Deprecating the "X-" Prefix and Similar Constructs in Application Protocols</title>
            <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Crocker" fullname="D. Crocker">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="June"/>
            <abstract>
              <t indent="0">Historically, designers and implementers of application protocols have often distinguished between standardized and unstandardized parameters by prefixing the names of unstandardized parameters with the string "X-" or similar constructs.  In practice, that convention causes more problems than it solves.  Therefore, this document deprecates the convention for newly defined parameters with textual (as opposed to numerical) names in application protocols. This memo documents an Internet Best Current Practice.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="178"/>
          <seriesInfo name="RFC" value="6648"/>
          <seriesInfo name="DOI" value="10.17487/RFC6648"/>
        </reference>
        <reference anchor="RFC6838" target="https://www.rfc-editor.org/info/rfc6838" quoteTitle="true" derivedAnchor="RFC6838">
          <front>
            <title>Media Type Specifications and Registration Procedures</title>
            <author initials="N." surname="Freed" fullname="N. Freed">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Klensin" fullname="J. Klensin">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Hansen" fullname="T. Hansen">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="January"/>
            <abstract>
              <t indent="0">This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="13"/>
          <seriesInfo name="RFC" value="6838"/>
          <seriesInfo name="DOI" value="10.17487/RFC6838"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="STRUCTURED-FIELDS" target="https://www.rfc-editor.org/info/rfc8941" quoteTitle="true" derivedAnchor="STRUCTURED-FIELDS">
          <front>
            <title>Structured Field Values for HTTP</title>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="P-H. Kamp" initials="P-H." surname="Kamp">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="February" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8941"/>
          <seriesInfo name="DOI" value="10.17487/RFC8941"/>
        </reference>
        <reference anchor="URL" target="https://www.rfc-editor.org/info/rfc3986" quoteTitle="true" derivedAnchor="URL">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2005"/>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="WEB-LINKING" target="https://www.rfc-editor.org/info/rfc8288" quoteTitle="true" derivedAnchor="WEB-LINKING">
          <front>
            <title>Web Linking</title>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="October" year="2017"/>
          </front>
          <seriesInfo name="RFC" value="8288"/>
          <seriesInfo name="DOI" value="10.17487/RFC8288"/>
        </reference>
        <reference anchor="WELL-KNOWN-URI" target="https://www.rfc-editor.org/info/rfc8615" quoteTitle="true" derivedAnchor="WELL-KNOWN-URI">
          <front>
            <title>Well-Known Uniform Resource Identifiers (URIs)</title>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="May" year="2019"/>
          </front>
          <seriesInfo name="RFC" value="8615"/>
          <seriesInfo name="DOI" value="10.17487/RFC8615"/>
        </reference>
      </references>
      <references pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="COOKIES" target="https://www.rfc-editor.org/info/rfc6265" quoteTitle="true" derivedAnchor="COOKIES">
          <front>
            <title>HTTP State Management Mechanism</title>
            <author fullname="A. Barth" initials="A." surname="Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="April" year="2011"/>
          </front>
          <seriesInfo name="RFC" value="6265"/>
          <seriesInfo name="DOI" value="10.17487/RFC6265"/>
        </reference>
        <reference anchor="CSP" target="https://www.w3.org/TR/2021/WD-CSP3-20210629" quoteTitle="true" derivedAnchor="CSP">
          <front>
            <title>Content Security Policy Level 3</title>
            <author fullname="Mike West" initials="M." surname="West">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="June" year="2021"/>
          </front>
          <refcontent>W3C Working Draft</refcontent>
        </reference>
        <reference anchor="FETCH" target="https://fetch.spec.whatwg.org" quoteTitle="true" derivedAnchor="FETCH">
          <front>
            <title>Fetch - Living Standard</title>
            <author>
              <organization showOnFrontPage="true">WHATWG</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="HTML" target="https://html.spec.whatwg.org" quoteTitle="true" derivedAnchor="HTML">
          <front>
            <title>HTML - Living Standard</title>
            <author>
              <organization showOnFrontPage="true">WHATWG</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="HTTP-PRIORITY" target="https://www.rfc-editor.org/info/rfc9218" quoteTitle="true" derivedAnchor="HTTP-PRIORITY">
          <front>
            <title>Extensible Prioritization Scheme for HTTP</title>
            <author asciiFullname="Kazuho Oku" fullname="奥 一穂">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="L" surname="Pardue" fullname="Lucas Pardue">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="June" year="2022"/>
          </front>
          <seriesInfo name="RFC" value="9218"/>
          <seriesInfo name="DOI" value="10.17487/RFC9218"/>
        </reference>
        <reference anchor="HTTP11" target="https://www.rfc-editor.org/info/rfc9112" quoteTitle="true" derivedAnchor="HTTP/1.1">
          <front>
            <title>HTTP/1.1</title>
            <author initials="R" surname="Fielding" fullname="Roy Fielding" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M" surname="Nottingham" fullname="Mark Nottingham" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J" surname="Reschke" fullname="Julian Reschke" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="June"/>
          </front>
          <seriesInfo name="STD" value="99"/>
          <seriesInfo name="RFC" value="9112"/>
          <seriesInfo name="DOI" value="10.17487/RFC9112"/>
        </reference>
        <reference anchor="HTTP2" target="https://www.rfc-editor.org/info/rfc9113" quoteTitle="true" derivedAnchor="HTTP/2">
          <front>
            <title>HTTP/2</title>
            <author initials="M" surname="Thomson" fullname="Martin Thomson" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C" surname="Benfield" fullname="Cory Benfield" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="June" year="2022"/>
          </front>
          <seriesInfo name="RFC" value="9113"/>
          <seriesInfo name="DOI" value="10.17487/RFC9113"/>
        </reference>
        <reference anchor="HTTP3" target="https://www.rfc-editor.org/info/rfc9114" quoteTitle="true" derivedAnchor="HTTP/3">
          <front>
            <title>HTTP/3</title>
            <author initials="M" surname="Bishop" fullname="Mike Bishop" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="June"/>
          </front>
          <seriesInfo name="RFC" value="9114"/>
          <seriesInfo name="DOI" value="10.17487/RFC9114"/>
        </reference>
        <reference anchor="JSON" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="JSON">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="December" year="2017"/>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="PROBLEM-DETAILS" target="https://www.rfc-editor.org/info/rfc7807" quoteTitle="true" derivedAnchor="PROBLEM-DETAILS">
          <front>
            <title>Problem Details for HTTP APIs</title>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="E. Wilde" initials="E." surname="Wilde">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="March" year="2016"/>
          </front>
          <seriesInfo name="RFC" value="7807"/>
          <seriesInfo name="DOI" value="10.17487/RFC7807"/>
        </reference>
        <reference anchor="REFERRER-POLICY" target="https://www.w3.org/TR/2017/CR-referrer-policy-20170126" quoteTitle="true" derivedAnchor="REFERRER-POLICY">
          <front>
            <title>Referrer Policy</title>
            <author fullname="Jochen Eisinger" initials="J." surname="Eisinger">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="Emily Stark" initials="E." surname="Stark">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2017"/>
          </front>
          <refcontent>W3C Candidate Recommendation CR-referrer-policy-20170126</refcontent>
        </reference>
        <reference anchor="RFC3205" target="https://www.rfc-editor.org/info/rfc3205" quoteTitle="true" derivedAnchor="RFC3205">
          <front>
            <title>On the use of HTTP as a Substrate</title>
            <author initials="K." surname="Moore" fullname="K. Moore">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="February"/>
            <abstract>
              <t indent="0">Recently there has been widespread interest in using Hypertext Transfer Protocol (HTTP) as a substrate for other applications-level protocols. This document recommends technical particulars of such use, including use of default ports, URL schemes, and HTTP security mechanisms.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="56"/>
          <seriesInfo name="RFC" value="3205"/>
          <seriesInfo name="DOI" value="10.17487/RFC3205"/>
        </reference>
        <reference anchor="RFC4791" target="https://www.rfc-editor.org/info/rfc4791" quoteTitle="true" derivedAnchor="RFC4791">
          <front>
            <title>Calendaring Extensions to WebDAV (CalDAV)</title>
            <author initials="C." surname="Daboo" fullname="C. Daboo">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Desruisseaux" fullname="B. Desruisseaux">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="L." surname="Dusseault" fullname="L. Dusseault">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2007" month="March"/>
            <abstract>
              <t indent="0">This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing calendaring and scheduling information based on the iCalendar format.  This document defines the "calendar-access" feature of CalDAV.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4791"/>
          <seriesInfo name="DOI" value="10.17487/RFC4791"/>
        </reference>
        <reference anchor="RFC4918" target="https://www.rfc-editor.org/info/rfc4918" quoteTitle="true" derivedAnchor="RFC4918">
          <front>
            <title>HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</title>
            <author initials="L." surname="Dusseault" fullname="L. Dusseault" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2007" month="June"/>
            <abstract>
              <t indent="0">Web Distributed Authoring and Versioning (WebDAV) consists of a set of methods, headers, and content-types ancillary to HTTP/1.1 for the management of resource properties, creation and management of resource collections, URL namespace manipulation, and resource locking (collision avoidance).</t>
              <t indent="0">RFC 2518 was published in February 1999, and this specification obsoletes RFC 2518 with minor revisions mostly due to interoperability experience.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4918"/>
          <seriesInfo name="DOI" value="10.17487/RFC4918"/>
        </reference>
        <reference anchor="RFC5861" target="https://www.rfc-editor.org/info/rfc5861" quoteTitle="true" derivedAnchor="RFC5861">
          <front>
            <title>HTTP Cache-Control Extensions for Stale Content</title>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="May"/>
            <abstract>
              <t indent="0">This document defines two independent HTTP Cache-Control extensions that allow control over the use of stale responses by caches.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5861"/>
          <seriesInfo name="DOI" value="10.17487/RFC5861"/>
        </reference>
        <reference anchor="RFC6415" target="https://www.rfc-editor.org/info/rfc6415" quoteTitle="true" derivedAnchor="RFC6415">
          <front>
            <title>Web Host Metadata</title>
            <author initials="E." surname="Hammer-Lahav" fullname="E. Hammer-Lahav" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Cook" fullname="B. Cook">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="October"/>
            <abstract>
              <t indent="0">This specification describes a method for locating host metadata as well as information about individual resources controlled by the host.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6415"/>
          <seriesInfo name="DOI" value="10.17487/RFC6415"/>
        </reference>
        <reference anchor="RFC6797" target="https://www.rfc-editor.org/info/rfc6797" quoteTitle="true" derivedAnchor="RFC6797">
          <front>
            <title>HTTP Strict Transport Security (HSTS)</title>
            <author initials="J." surname="Hodges" fullname="J. Hodges">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Jackson" fullname="C. Jackson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="November"/>
            <abstract>
              <t indent="0">This specification defines a mechanism enabling web sites to declare themselves accessible only via secure connections and/or for users to be able to direct their user agent(s) to interact with given sites only over secure connections.  This overall policy is referred to as HTTP Strict Transport Security (HSTS).  The policy is declared by web sites via the Strict-Transport-Security HTTP response header field and/or by other means, such as user agent configuration, for example. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6797"/>
          <seriesInfo name="DOI" value="10.17487/RFC6797"/>
        </reference>
        <reference anchor="RFC7258" target="https://www.rfc-editor.org/info/rfc7258" quoteTitle="true" derivedAnchor="RFC7258">
          <front>
            <title>Pervasive Monitoring Is an Attack</title>
            <author initials="S." surname="Farrell" fullname="S. Farrell">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="May"/>
            <abstract>
              <t indent="0">Pervasive monitoring is a technical attack that should be mitigated in the design of IETF protocols, where possible.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="188"/>
          <seriesInfo name="RFC" value="7258"/>
          <seriesInfo name="DOI" value="10.17487/RFC7258"/>
        </reference>
        <reference anchor="RFC7301" target="https://www.rfc-editor.org/info/rfc7301" quoteTitle="true" derivedAnchor="RFC7301">
          <front>
            <title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
            <author initials="S." surname="Friedl" fullname="S. Friedl">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Popov" fullname="A. Popov">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Langley" fullname="A. Langley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Stephan" fullname="E. Stephan">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2014" month="July"/>
            <abstract>
              <t indent="0">This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7301"/>
          <seriesInfo name="DOI" value="10.17487/RFC7301"/>
        </reference>
        <reference anchor="RFC7595" target="https://www.rfc-editor.org/info/rfc7595" quoteTitle="true" derivedAnchor="RFC7595">
          <front>
            <title>Guidelines and Registration Procedures for URI Schemes</title>
            <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Hansen" fullname="T. Hansen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Hardie" fullname="T. Hardie">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="June"/>
            <abstract>
              <t indent="0">This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="35"/>
          <seriesInfo name="RFC" value="7595"/>
          <seriesInfo name="DOI" value="10.17487/RFC7595"/>
        </reference>
        <reference anchor="RFC7605" target="https://www.rfc-editor.org/info/rfc7605" quoteTitle="true" derivedAnchor="RFC7605">
          <front>
            <title>Recommendations on Using Assigned Transport Port Numbers</title>
            <author initials="J." surname="Touch" fullname="J. Touch">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="August"/>
            <abstract>
              <t indent="0">This document provides recommendations to designers of application and service protocols on how to use the transport protocol port number space and when to request a port assignment from IANA.  It provides designer guidance to requesters or users of port numbers on how to interact with IANA using the processes defined in RFC 6335; thus, this document complements (but does not update) that document.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="165"/>
          <seriesInfo name="RFC" value="7605"/>
          <seriesInfo name="DOI" value="10.17487/RFC7605"/>
        </reference>
        <reference anchor="RFC7616" target="https://www.rfc-editor.org/info/rfc7616" quoteTitle="true" derivedAnchor="RFC7616">
          <front>
            <title>HTTP Digest Access Authentication</title>
            <author initials="R." surname="Shekh-Yusef" fullname="R. Shekh-Yusef" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Ahrens" fullname="D. Ahrens">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Bremer" fullname="S. Bremer">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t indent="0">The Hypertext Transfer Protocol (HTTP) provides a simple challenge- response authentication mechanism that may be used by a server to challenge a client request and by a client to provide authentication information.  This document defines the HTTP Digest Authentication scheme that can be used with the HTTP authentication mechanism.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7616"/>
          <seriesInfo name="DOI" value="10.17487/RFC7616"/>
        </reference>
        <reference anchor="RFC7617" target="https://www.rfc-editor.org/info/rfc7617" quoteTitle="true" derivedAnchor="RFC7617">
          <front>
            <title>The 'Basic' HTTP Authentication Scheme</title>
            <author initials="J." surname="Reschke" fullname="J. Reschke">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t indent="0">This document defines the "Basic" Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7617"/>
          <seriesInfo name="DOI" value="10.17487/RFC7617"/>
        </reference>
        <reference anchor="RFC8297" target="https://www.rfc-editor.org/info/rfc8297" quoteTitle="true" derivedAnchor="RFC8297">
          <front>
            <title>An HTTP Status Code for Indicating Hints</title>
            <author initials="K." surname="Oku" fullname="K. Oku">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="December"/>
            <abstract>
              <t indent="0">This memo introduces an informational HTTP status code that can be used to convey hints that help a client make preparations for processing the final response.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8297"/>
          <seriesInfo name="DOI" value="10.17487/RFC8297"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="RFC8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC8470" target="https://www.rfc-editor.org/info/rfc8470" quoteTitle="true" derivedAnchor="RFC8470">
          <front>
            <title>Using Early Data in HTTP</title>
            <author initials="M." surname="Thomson" fullname="M. Thomson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Nottingham" fullname="M. Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="W." surname="Tarreau" fullname="W. Tarreau">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="September"/>
            <abstract>
              <t indent="0">Using TLS early data creates an exposure to the possibility of a replay attack.  This document defines mechanisms that allow clients to communicate with servers about HTTP requests that are sent in early data.  Techniques are described that use these mechanisms to mitigate the risk of replay.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8470"/>
          <seriesInfo name="DOI" value="10.17487/RFC8470"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949" quoteTitle="true" derivedAnchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author initials="C." surname="Bormann" fullname="C. Bormann">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="P." surname="Hoffman" fullname="P. Hoffman">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="December"/>
            <abstract>
              <t indent="0">The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t indent="0">This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="SECCTXT" target="https://www.w3.org/TR/2021/CRD-secure-contexts-20210918" quoteTitle="true" derivedAnchor="SECCTXT">
          <front>
            <title>Secure Contexts</title>
            <author fullname="Mike West" initials="M." surname="West">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="September" year="2021"/>
          </front>
          <refcontent>W3C Candidate Recommendation</refcontent>
        </reference>
        <reference anchor="URI-TEMPLATE" target="https://www.rfc-editor.org/info/rfc6570" quoteTitle="true" derivedAnchor="URI-TEMPLATE">
          <front>
            <title>URI Template</title>
            <author fullname="J. Gregorio" initials="J." surname="Gregorio">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="M. Hadley" initials="M." surname="Hadley">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="M. Nottingham" initials="M." surname="Nottingham">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="D. Orchard" initials="D." surname="Orchard">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="March" year="2012"/>
          </front>
          <seriesInfo name="RFC" value="6570"/>
          <seriesInfo name="DOI" value="10.17487/RFC6570"/>
        </reference>
        <reference anchor="XML" target="https://www.w3.org/TR/2008/REC-xml-20081126" quoteTitle="true" derivedAnchor="XML">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <author fullname="Tim Bray" initials="T." surname="Bray">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="Jean Paoli" initials="J." surname="Paoli">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="Michael Sperberg-McQueen" initials="M." surname="Sperberg-McQueen">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="Eve Maler" initials="E." surname="Maler">
              <organization showOnFrontPage="true"/>
            </author>
            <author fullname="François Yergeau" initials="F." surname="Yergeau">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="November" year="2008"/>
          </front>
          <seriesInfo name="W3C Recommendation" value="REC-xml-20081126"/>
        </reference>
      </references>
    </references>
    <section anchor="changes-from-rfc-3205" numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-changes-from-rfc-3205">Changes from RFC 3205</name>
      <t indent="0" pn="section-appendix.a-1"><xref target="RFC3205" format="default" sectionFormat="of" derivedContent="RFC3205"/> captured the Best Current Practice in the early 2000s based on the concerns facing protocol designers at the time. Use of HTTP has changed considerably since then; as a result, this document is substantially different. Consequently, the changes are too numerous to list individually.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-address">Author's Address</name>
      <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
        <organization showOnFrontPage="true"/>
        <address>
          <postal>
            <postalLine>Prahran</postalLine>
            <postalLine>Australia</postalLine>
          </postal>
          <email>mnot@mnot.net</email>
          <uri>https://www.mnot.net/</uri>
        </address>
      </author>
    </section>
  </back>
</rfc>
