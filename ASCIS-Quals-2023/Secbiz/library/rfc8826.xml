<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" docName="draft-ietf-rtcweb-security-12" indexInclude="true" ipr="pre5378Trust200902" number="8826" prepTime="2021-01-14T11:01:13" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="4" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-rtcweb-security-12" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc8826" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="WebRTC Security">Security Considerations for WebRTC</title>
    <seriesInfo name="RFC" value="8826" stream="IETF"/>
    <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
      <organization showOnFrontPage="true">Mozilla</organization>
      <address>
        <email>ekr@rtfm.com</email>
      </address>
    </author>
    <date month="01" year="2021"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">
        WebRTC is a protocol suite for use with
        real-time applications that can be deployed in browsers -- "real-time
        communication on the Web".  This document defines the WebRTC threat
        model and analyzes the security threats of WebRTC in that model.
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc8826" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2021 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
        <t indent="0" pn="section-boilerplate.2-3">
            This document may contain material from IETF Documents or IETF
            Contributions published or made publicly available before November
            10, 2008. The person(s) controlling the copyright in some of this
            material may not have granted the IETF Trust the right to allow
            modifications of such material outside the IETF Standards Process.
            Without obtaining an adequate license from the person(s)
            controlling the copyright in such materials, this document may not
            be modified outside the IETF Standards Process, and derivative
            works of it may not be created outside the IETF Standards Process,
            except to format it for publication as an RFC or to translate it
            into languages other than English.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-browser-threat-model">The Browser Threat Model</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-access-to-local-resources">Access to Local Resources</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-same-origin-policy">Same-Origin Policy</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-bypassing-sop-cors-websocke">Bypassing SOP: CORS, WebSockets, and Consent to Communicate</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-for-webrtc-applica">Security for WebRTC Applications</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-access-to-local-devices">Access to Local Devices</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.1.2">
                  <li pn="section-toc.1-1.4.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.1.1"><xref derivedContent="4.1.1" format="counter" sectionFormat="of" target="section-4.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-threats-from-screen-sharing">Threats from Screen Sharing</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.2.1"><xref derivedContent="4.1.2" format="counter" sectionFormat="of" target="section-4.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-calling-scenarios-and-user-">Calling Scenarios and User Expectations</xref></t>
                    <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.1.2.2.2">
                      <li pn="section-toc.1-1.4.2.1.2.2.2.1">
                        <t indent="0" pn="section-toc.1-1.4.2.1.2.2.2.1.1"><xref derivedContent="4.1.2.1" format="counter" sectionFormat="of" target="section-4.1.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dedicated-calling-services">Dedicated Calling Services</xref></t>
                      </li>
                      <li pn="section-toc.1-1.4.2.1.2.2.2.2">
                        <t indent="0" pn="section-toc.1-1.4.2.1.2.2.2.2.1"><xref derivedContent="4.1.2.2" format="counter" sectionFormat="of" target="section-4.1.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-calling-the-site-youre-on">Calling the Site You're On</xref></t>
                      </li>
                    </ul>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.3.1"><xref derivedContent="4.1.3" format="counter" sectionFormat="of" target="section-4.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-origin-based-security">Origin-Based Security</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.1.2.4">
                    <t indent="0" pn="section-toc.1-1.4.2.1.2.4.1"><xref derivedContent="4.1.4" format="counter" sectionFormat="of" target="section-4.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-properties-of-the-">Security Properties of the Calling Page</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-communications-consent-veri">Communications Consent Verification</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.2.2">
                  <li pn="section-toc.1-1.4.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.1.1"><xref derivedContent="4.2.1" format="counter" sectionFormat="of" target="section-4.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ice">ICE</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.2.1"><xref derivedContent="4.2.2" format="counter" sectionFormat="of" target="section-4.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-masking">Masking</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.3.1"><xref derivedContent="4.2.3" format="counter" sectionFormat="of" target="section-4.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-backward-compatibility">Backward Compatibility</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.2.2.4">
                    <t indent="0" pn="section-toc.1-1.4.2.2.2.4.1"><xref derivedContent="4.2.4" format="counter" sectionFormat="of" target="section-4.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ip-location-privacy">IP Location Privacy</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.3">
                <t indent="0" pn="section-toc.1-1.4.2.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-communications-security">Communications Security</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.3.2">
                  <li pn="section-toc.1-1.4.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.3.2.1.1"><xref derivedContent="4.3.1" format="counter" sectionFormat="of" target="section-4.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-protecting-against-retrospe">Protecting Against Retrospective Compromise</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.3.2.2.1"><xref derivedContent="4.3.2" format="counter" sectionFormat="of" target="section-4.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-protecting-against-during-c">Protecting Against During-Call Attack</xref></t>
                    <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.3.2.2.2">
                      <li pn="section-toc.1-1.4.2.3.2.2.2.1">
                        <t indent="0" pn="section-toc.1-1.4.2.3.2.2.2.1.1"><xref derivedContent="4.3.2.1" format="counter" sectionFormat="of" target="section-4.3.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-continuity">Key Continuity</xref></t>
                      </li>
                      <li pn="section-toc.1-1.4.2.3.2.2.2.2">
                        <t indent="0" pn="section-toc.1-1.4.2.3.2.2.2.2.1"><xref derivedContent="4.3.2.2" format="counter" sectionFormat="of" target="section-4.3.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-short-authentication-string">Short Authentication Strings</xref></t>
                      </li>
                      <li pn="section-toc.1-1.4.2.3.2.2.2.3">
                        <t indent="0" pn="section-toc.1-1.4.2.3.2.2.2.3.1"><xref derivedContent="4.3.2.3" format="counter" sectionFormat="of" target="section-4.3.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-third-party-identity">Third-Party Identity</xref></t>
                      </li>
                      <li pn="section-toc.1-1.4.2.3.2.2.2.4">
                        <t indent="0" pn="section-toc.1-1.4.2.3.2.2.2.4.1"><xref derivedContent="4.3.2.4" format="counter" sectionFormat="of" target="section-4.3.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-page-access-to-media">Page Access to Media</xref></t>
                      </li>
                    </ul>
                  </li>
                  <li pn="section-toc.1-1.4.2.3.2.3">
                    <t indent="0" pn="section-toc.1-1.4.2.3.2.3.1"><xref derivedContent="4.3.3" format="counter" sectionFormat="of" target="section-4.3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-malicious-peers">Malicious Peers</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.4.2.4">
                <t indent="0" pn="section-toc.1-1.4.2.4.1"><xref derivedContent="4.4" format="counter" sectionFormat="of" target="section-4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-privacy-considerations">Privacy Considerations</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2.4.2">
                  <li pn="section-toc.1-1.4.2.4.2.1">
                    <t indent="0" pn="section-toc.1-1.4.2.4.2.1.1"><xref derivedContent="4.4.1" format="counter" sectionFormat="of" target="section-4.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-correlation-of-anonymous-ca">Correlation of Anonymous Calls</xref></t>
                  </li>
                  <li pn="section-toc.1-1.4.2.4.2.2">
                    <t indent="0" pn="section-toc.1-1.4.2.4.2.2.1"><xref derivedContent="4.4.2" format="counter" sectionFormat="of" target="section-4.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-browser-fingerprinting">Browser Fingerprinting</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-address">Author's Address</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="sec.introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">
        The Real-Time Communications on the Web (RTCWEB) Working Group has standardized
        protocols for real-time communications between Web browsers, generally
        called "WebRTC" <xref target="RFC8825" format="default" sectionFormat="of" derivedContent="RFC8825"/>. The
        major use cases for WebRTC technology are real-time audio and/or video calls,
        Web conferencing, and direct data transfer. Unlike most conventional real-time systems
        (e.g., SIP-based <xref target="RFC3261" format="default" sectionFormat="of" derivedContent="RFC3261"/> soft
        phones), WebRTC communications are directly controlled by some Web
        server. A simple case is shown below.
      </t>
      <figure anchor="fig.simple" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-a-simple-webrtc-system">A Simple WebRTC System</name>
        <artwork name="" type="" align="left" alt="" pn="section-1-2.1">
                          +----------------+
                          |                |
                          |   Web Server   |
                          |                |
                          +----------------+
                              ^        ^
                             /          \
                    HTTPS   /            \   HTTPS
                      or   /              \   or
               WebSockets /                \ WebSockets
                         v                  v
                      JS API              JS API
                +-----------+            +-----------+
                |           |    Media   |           |
                |  Browser  |&lt;----------&gt;|  Browser  |
                |           |            |           |
                +-----------+            +-----------+
                    Alice                     Bob </artwork>
      </figure>
      <t indent="0" pn="section-1-3">
        In the system shown in <xref target="fig.simple" format="default" sectionFormat="of" derivedContent="Figure 1"/>, Alice and Bob both have
        WebRTC-enabled browsers and they visit some Web server which operates a
        calling service. Each of their browsers exposes standardized JavaScript
        (JS) calling APIs (implemented as browser built-ins)
        which are used by the Web server to set up a call between Alice and Bob.
        The Web server also serves as the signaling channel to transport
        control messages between the browsers.
        While this system is topologically similar to a conventional SIP-based
        system (with the Web server acting as the signaling service and browsers
        acting as softphones), control has moved to the central Web server;
        the browser simply provides API points that are used by the calling service.
        As with any Web application, the Web server can move logic between
        the server and JavaScript in the browser, but regardless of where the
        code is executing, it is ultimately under control of the server.
      </t>
      <t indent="0" pn="section-1-4">
        It should be immediately apparent that this type of system poses new
        security challenges beyond those of a conventional Voice over IP (VoIP) system. In particular,
        it needs to contend with malicious calling services.
        For example, if the calling service
        can cause the browser to make a call at any time to any callee of its
        choice, then this facility can be used to bug a user's computer without
        their knowledge, simply by placing a call to some recording service.
        More subtly, if the exposed APIs allow the server to instruct the
        browser to send arbitrary content, then they can be used to bypass
        firewalls or mount denial-of-service (DoS) attacks. Any successful system
        will need to be resistant to this and other attacks.
      </t>
      <t indent="0" pn="section-1-5">
        A companion document <xref target="RFC8827" format="default" sectionFormat="of" derivedContent="RFC8827"/> describes a security
        architecture intended to address the issues raised in this document.
      </t>
    </section>
    <section anchor="sec-term" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <t indent="0" pn="section-2-1">The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>",
    "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>",
    "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are
    to be interpreted as described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/>
        <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they appear in all capitals,
    as shown here.</t>
    </section>
    <section anchor="sec.web-security" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-the-browser-threat-model">The Browser Threat Model</name>
      <t indent="0" pn="section-3-1">
        The security requirements for WebRTC follow directly from the
        requirement that the browser's job is to protect the user.
        Huang et al. <xref target="huang-w2sp" format="default" sectionFormat="of" derivedContent="huang-w2sp"/> summarize
        the core browser security guarantee as follows:
      </t>
      <t indent="3" pn="section-3-2">Users can safely visit arbitrary web sites and execute scripts provided by those sites.</t>
      <t indent="0" pn="section-3-3">
        It is important to realize that this includes sites hosting arbitrary malicious
        scripts. The motivation for this requirement is simple: it is trivial for attackers
        to divert users to sites of their choice. For instance, an attacker can purchase
        display advertisements which direct the user (either automatically or via user
        clicking) to their site, at which point the browser will execute the attacker's
        scripts. Thus, it is important that it be safe to view arbitrarily malicious pages.
        Of course, browsers inevitably have bugs which cause them to fall short of this
        goal, but any new WebRTC functionality must be designed with the intent to
        meet this standard. The remainder of this section provides more background
        on the existing Web security model.
      </t>
      <t indent="0" pn="section-3-4">
        In this model, then, the browser acts as a Trusted Computing Base (TCB) both
        from the user's perspective and to some extent from the server's. While HTML
        and JavaScript provided by the server can cause the browser to execute a variety of
        actions, those scripts operate in a sandbox that isolates them both from
        the user's computer and from each other, as detailed below.
      </t>
      <t indent="0" pn="section-3-5">
        Conventionally, we refer to either Web attackers, who are able to induce
        you to visit their sites but do not control the network, or network
        attackers, who are able to control your network.
        Network attackers correspond
        to the <xref target="RFC3552" format="default" sectionFormat="of" derivedContent="RFC3552"/> "Internet Threat Model". Note that in some
        cases, a network attacker is also a Web attacker, since transport protocols
        that do not provide integrity protection allow the network to inject traffic
        as if they were any communications peer. TLS, and HTTPS in particular, prevent
        against these attacks, but when analyzing HTTP connections, we must assume
        that traffic is going to the attacker.
      </t>
      <section anchor="sec.resources" numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-access-to-local-resources">Access to Local Resources</name>
        <t indent="0" pn="section-3.1-1">
          While the browser has access to local resources such as keying material,
          files, the camera, and the microphone, it strictly limits or forbids Web
          servers from accessing those same resources. For instance, while it is possible
          to produce an HTML form which will allow file upload, a script cannot do
          so without user consent and in fact cannot even suggest a specific file
          (e.g., /etc/passwd); the user must explicitly select the file and consent
          to its upload. (Note: In many cases, browsers are explicitly designed to
          avoid dialogs with the semantics of "click here to bypass security checks", as
          extensive research <xref target="cranor-wolf" format="default" sectionFormat="of" derivedContent="cranor-wolf"/> shows that users are prone to
          consent under such circumstances.)
        </t>
        <t indent="0" pn="section-3.1-2">
          Similarly, while Flash programs (SWFs) <xref target="SWF" format="default" sectionFormat="of" derivedContent="SWF"/> can access the camera and microphone, they
          explicitly require that the user consent to that access. In addition,
          some resources simply cannot be accessed from the browser at all. For
          instance, there is no real way to run specific executables directly from a
          script (though the user can of course be induced to download executable
          files and run them).
        </t>
      </section>
      <section anchor="sec.same-origin" numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-same-origin-policy">Same-Origin Policy</name>
        <t indent="0" pn="section-3.2-1">
          Many other resources are accessible but isolated.
          For instance,
          while scripts are allowed to make HTTP requests via the fetch() API (see <xref target="fetch" format="default" sectionFormat="of" derivedContent="fetch"/>)
          when requests are made to a server other than from
          the same <strong>origin</strong> from whence the script came <xref target="RFC6454" format="default" sectionFormat="of" derivedContent="RFC6454"/>
          they are not able to read the responses. Cross-Origin Resource Sharing (CORS) <xref target="fetch" format="default" sectionFormat="of" derivedContent="fetch"/> and WebSockets
          <xref target="RFC6455" format="default" sectionFormat="of" derivedContent="RFC6455"/> provide an escape hatch from this restriction,
          as described below.
          This same-origin policy (SOP) prevents server A from mounting attacks
          on server B via the user's browser, which protects both the user
          (e.g., from misuse of their credentials) and server B (e.g., from
          DoS attacks).
        </t>
        <t indent="0" pn="section-3.2-2">
          More generally, SOP forces scripts from each site to run in their own, isolated,
          sandboxes. While there are techniques to allow them to interact, those interactions
          generally must be mutually consensual (by each site) and are limited to certain
          channels. For instance, multiple pages/browser panes from the same origin
          can read each other's JS variables, but pages from different
          origins -- or
          even IFRAMEs from different origins on the same page -- cannot.
        </t>
      </section>
      <section anchor="sec.cors-etc" numbered="true" toc="include" removeInRFC="false" pn="section-3.3">
        <name slugifiedName="name-bypassing-sop-cors-websocke">Bypassing SOP: CORS, WebSockets, and Consent to Communicate</name>
        <t indent="0" pn="section-3.3-1">
          While SOP serves an important security function, it also makes it inconvenient to
          write certain classes of applications. In particular, mash-ups, in which a script
          from origin A uses resources from origin B, can only be achieved via a certain amount of hackery.
          The W3C CORS spec <xref target="fetch" format="default" sectionFormat="of" derivedContent="fetch"/> is a response to this
          demand. In CORS, when a script from origin A executes a potentially unsafe
          cross-origin request, the browser instead contacts the target server to determine
          whether it is willing to allow cross-origin requests from A. If it is so willing,
          the browser then allows the request. This consent verification process is designed
          to safely allow cross-origin requests.
        </t>
        <t indent="0" pn="section-3.3-2">
          While CORS is designed to allow cross-origin HTTP requests, WebSockets <xref target="RFC6455" format="default" sectionFormat="of" derivedContent="RFC6455"/> allows
          cross-origin establishment of transparent channels. Once a WebSockets connection
          has been established from a script to a site, the script can exchange any traffic it
          likes without being required to frame it as a series of HTTP request/response
          transactions. As with CORS, a WebSockets transaction starts with a consent verification
          stage to avoid allowing scripts to simply send arbitrary data to another origin.
        </t>
        <t indent="0" pn="section-3.3-3">
          While consent verification is conceptually simple -- just do a handshake before you
          start exchanging the real data -- experience has shown that designing a
          correct consent verification system is difficult. In particular, Huang et al. <xref target="huang-w2sp" format="default" sectionFormat="of" derivedContent="huang-w2sp"/>
          have shown vulnerabilities in the existing Java and Flash consent verification
          techniques and in a simplified version of the WebSockets handshake. It is important to be wary of CROSS-PROTOCOL attacks in which the attacking script
          generates traffic which is acceptable to some non-Web protocol state machine.
          In order to resist this form of attack, WebSockets incorporates a masking technique
          intended to randomize the bits on the wire, thus making it more difficult to generate
          traffic which resembles a given protocol.
        </t>
      </section>
    </section>
    <section anchor="sec.rtc-web" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-security-for-webrtc-applica">Security for WebRTC Applications</name>
      <section anchor="sec.rtc-dev-access" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-access-to-local-devices">Access to Local Devices</name>
        <t indent="0" pn="section-4.1-1">
          As discussed in <xref target="sec.introduction" format="default" sectionFormat="of" derivedContent="Section 1"/>, allowing arbitrary
          sites to initiate calls violates the core Web security guarantee;
          without some access restrictions on local devices, any malicious site
          could simply bug a user. At minimum, then, it <bcp14>MUST NOT</bcp14> be possible for
          arbitrary sites to initiate calls to arbitrary locations without user
          consent. This immediately raises the question, however, of what should
          be the scope of user consent.
        </t>
        <t indent="0" pn="section-4.1-2">
          In order for the user to
          make an intelligent decision about whether to allow a call
          (and hence their camera and microphone input to be routed somewhere),
          they must understand either who is requesting access, where the media
          is going, or both. As detailed below, there are two basic conceptual
          models:
        </t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-4.1-3">
          <li pn="section-4.1-3.1" derivedCounter="1.">You are sending your media to entity A because you want to
            talk to entity A (e.g., your mother).</li>
          <li pn="section-4.1-3.2" derivedCounter="2.">Entity A (e.g., a calling service) asks to access the user's devices with the assurance
            that it will transfer the media to entity B (e.g., your mother).</li>
        </ol>
        <t indent="0" pn="section-4.1-4">
          In either case, identity is at the heart of any consent decision.
          Moreover, the identity of the party the browser is connecting to is all that the browser can meaningfully enforce;
          if you are calling A, A can simply forward the media to C. Similarly,
          if you authorize A to place a call to B, A can call C instead.
          In either case, all the browser is able to do is verify and check
          authorization for whoever is controlling where the media goes.
          The target of the media can of course advertise a security/privacy
          policy, but this is not something that the browser can
          enforce. Even so, there are a variety of different consent scenarios
          that motivate different technical consent mechanisms.
          We discuss these mechanisms in the sections below.
        </t>
        <t indent="0" pn="section-4.1-5">
          It's important to understand that consent to access local devices
          is largely orthogonal to consent to transmit various kinds of
          data over the network (see <xref target="sec.rtc-comm-consent" format="default" sectionFormat="of" derivedContent="Section 4.2"/>).
          Consent for device access is largely a matter of protecting
          the user's privacy from malicious sites. By contrast,
          consent to send network traffic is about preventing the
          user's browser from being used to attack its local network.
          Thus, we need to ensure communications consent even if the
          site is not able to access the camera and microphone at
          all (hence WebSockets's consent mechanism) and similarly,
          we need to be concerned with the site accessing the
          user's camera and microphone even if the data is to be
          sent back to the site via conventional HTTP-based network
          mechanisms such as HTTP POST.
        </t>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.1">
          <name slugifiedName="name-threats-from-screen-sharing">Threats from Screen Sharing</name>
          <t indent="0" pn="section-4.1.1-1">
            In addition to camera and microphone access, there has been
            demand for screen and/or application sharing functionality.
            Unfortunately, the security implications of this
            functionality are much harder for users to intuitively
            analyze than for camera and microphone access.
            (See <eref brackets="angle" target="https://lists.w3.org/Archives/Public/public-webrtc/2013Mar/0024.html"/>
            for a full analysis.)
          </t>
          <t indent="0" pn="section-4.1.1-2">
            The most obvious threats are simply those of "oversharing".
            I.e., the user may believe they are sharing a window when
            in fact they are sharing an application, or may forget they
            are sharing their whole screen, icons, notifications, and all.
            This is already an issue with existing screen sharing technologies
            and is made somewhat worse if a partially trusted site is responsible for asking
            for the resource to be shared rather than having the user propose it.
          </t>
          <t indent="0" pn="section-4.1.1-3">
            A less obvious threat involves the impact of screen sharing on the
            Web security model. A key part of the Same-Origin Policy is that
            HTML or JS from site A can reference content from site B and cause
            the browser to load it, but (unless explicitly permitted) cannot
            see the result. However, if a Web application from a site is
            screen sharing the browser, then this violates that invariant,
            with serious security consequences. For example, an attacker site
            might request screen sharing and then briefly open up a new
            window to the user's bank or webmail account, using screen sharing
            to read the resulting displayed content. A more sophisticated
            attack would be to open up a source view window to a site and use the
            screen sharing result to view anti-cross-site request forgery tokens.
          </t>
          <t indent="0" pn="section-4.1.1-4">
            These threats suggest that screen/application sharing might need
            a higher level of user consent than access to the camera or
            microphone.
          </t>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.2">
          <name slugifiedName="name-calling-scenarios-and-user-">Calling Scenarios and User Expectations</name>
          <t indent="0" pn="section-4.1.2-1">
            While a large number of possible calling scenarios are possible, the
            scenarios discussed in this section illustrate many of
            the difficulties of identifying the relevant scope of consent.
          </t>
          <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.2.1">
            <name slugifiedName="name-dedicated-calling-services">Dedicated Calling Services</name>
            <t indent="0" pn="section-4.1.2.1-1">
              The first scenario we consider is a dedicated calling service. In this
              case, the user has a relationship with a calling site
              and repeatedly makes calls on it. It is likely
              that rather than having to give permission for each call,
              the user will want to give the calling service long-term
              access to the camera and microphone. This is a natural fit
              for a long-term consent mechanism (e.g., installing an
              app store "application" to indicate permission for the
              calling service).
              A variant of the dedicated calling service is a gaming site
              (e.g., a poker site) which hosts a dedicated calling service
              to allow players to call each other.
            </t>
            <t indent="0" pn="section-4.1.2.1-2">
              With any kind of service where the user may use the same
              service to talk to many different people, there is a question
              about whether the user can know who they are talking to.
              If I grant permission to calling service A to make calls
              on my behalf, then I am implicitly granting it permission
              to bug my computer whenever it wants. This suggests another
              consent model in which a site is authorized to make calls
              but only to certain target entities (identified via
              media-plane cryptographic mechanisms as described in
              <xref target="sec.during-attack" format="default" sectionFormat="of" derivedContent="Section 4.3.2"/> and especially
              <xref target="sec.third-party-id" format="default" sectionFormat="of" derivedContent="Section 4.3.2.3"/>). Note that the
              question of consent here is related to but
              distinct from the question of peer identity: I
              might be willing to allow a calling site to in general
              initiate calls on my behalf but still have some calls
              via that site where I can be sure that the site is not
              listening in.
            </t>
          </section>
          <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.2.2">
            <name slugifiedName="name-calling-the-site-youre-on">Calling the Site You're On</name>
            <t indent="0" pn="section-4.1.2.2-1">
              Another simple scenario is calling the site you're actually visiting.
              The paradigmatic case here is the "click here to talk to a
              representative" windows that appear on many shopping sites.
              In this case, the user's expectation is that they are
              calling the site they're actually visiting. However, it is
              unlikely that they want to provide a general consent to such
              a site; just because I want some information on a car
              doesn't mean that I want the car manufacturer to be able
              to activate my microphone whenever they please. Thus,
              this suggests the need for a second consent mechanism
              where I only grant consent for the duration of a given
              call. As described in <xref target="sec.resources" format="default" sectionFormat="of" derivedContent="Section 3.1"/>,
              great care must be taken in the design of this interface
              to avoid the users just clicking through. Note also
              that the user interface chrome, which is the representation
              through which the user interacts with the user agent itself,
              must clearly display elements
              showing that the call is continuing in order to avoid attacks
              where the calling site just leaves it up indefinitely but
              shows a Web UI that implies otherwise.
            </t>
          </section>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.3">
          <name slugifiedName="name-origin-based-security">Origin-Based Security</name>
          <t indent="0" pn="section-4.1.3-1">
          Now that we have described the calling scenarios, we can start to reason about
          the security requirements.
          </t>
          <t indent="0" pn="section-4.1.3-2">
          As discussed in <xref target="sec.same-origin" format="default" sectionFormat="of" derivedContent="Section 3.2"/>, the basic unit of
          Web sandboxing is the origin, and so it is natural to scope consent
          to the origin. Specifically, a script from origin A <bcp14>MUST</bcp14> only be allowed
          to initiate communications (and hence to access the camera and microphone)
          if the user has specifically authorized access for that origin.
          It is of course technically possible to have coarser-scoped permissions,
          but because the Web model is scoped to the origin, this creates a difficult
          mismatch.
          </t>
          <t indent="0" pn="section-4.1.3-3">
          Arguably, the origin is not fine-grained enough. Consider the situation where
          Alice visits a site and authorizes it to make a single call. If consent is
          expressed solely in terms of the origin, then on any future visit to that
          site (including one induced via a mash-up or ad network), the site can
          bug Alice's computer, use the computer to place bogus calls, etc.
          While in principle Alice could grant and then
          revoke the privilege, in practice privileges accumulate; if we are concerned
          about this attack, something else is needed. There are a number of potential countermeasures to
          this sort of issue.
          </t>
          <dl newline="true" spacing="normal" indent="3" pn="section-4.1.3-4">
            <dt pn="section-4.1.3-4.1">Individual Consent</dt>
            <dd pn="section-4.1.3-4.2">Ask the user for permission for each call.</dd>
            <dt pn="section-4.1.3-4.3">Callee-oriented Consent</dt>
            <dd pn="section-4.1.3-4.4">Only allow calls to a given user.</dd>
            <dt pn="section-4.1.3-4.5">Cryptographic Consent</dt>
            <dd pn="section-4.1.3-4.6">Only allow calls to a given set of peer keying material or
          to a cryptographically established identity.</dd>
          </dl>
          <t indent="0" pn="section-4.1.3-5">
          Unfortunately, none of these approaches is satisfactory for all cases.
          As discussed above, individual consent puts the user's approval
          in the UI flow for every call. Not only does this quickly become annoying
          but it can train the user to simply click "OK", at which point the consent becomes
          useless. Thus, while it may be necessary to have individual consent in some
          cases, this is not a suitable solution for (for instance) the calling
          service case. Where necessary, in-flow user interfaces must be carefully
          designed to avoid the risk of the user blindly clicking through.
          </t>
          <t indent="0" pn="section-4.1.3-6">
          The other two options are designed to restrict calls to a given target.
          Callee-oriented consent provided by the calling site
          would not work well because a malicious site can claim that the
          user is calling any user of their choice. One fix for this is to tie calls to a
          cryptographically established identity. While not suitable for all cases,
          this approach may be useful for some. If we consider the case
          of advertising, it's not particularly convenient
          to require the advertiser to instantiate an IFRAME on the hosting site just
          to get permission; a more convenient approach is to cryptographically tie
          the advertiser's certificate to the communication directly. We're still
          tying permissions to the origin here, but to the media origin (and/or destination)
          rather than to the Web origin. <xref target="RFC8827" format="default" sectionFormat="of" derivedContent="RFC8827"/>
          describes mechanisms which facilitate this sort of consent.
          </t>
          <t indent="0" pn="section-4.1.3-7">
          Another case where media-level cryptographic identity makes sense is when a user
          really does not trust the calling site. For instance, I might be worried that
          the calling service will attempt to bug my computer, but I also want to be
          able to conveniently call my friends. If consent is tied to particular
          communications endpoints, then my risk is limited. Naturally, it
          is somewhat challenging to design UI primitives which express this sort
          of policy. The problem becomes even more challenging in multi-user
          calling cases.
          </t>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.1.4">
          <name slugifiedName="name-security-properties-of-the-">Security Properties of the Calling Page</name>
          <t indent="0" pn="section-4.1.4-1">
          Origin-based security is intended to secure against Web attackers. However, we must
          also consider the case of network attackers. Consider the case where I have
          granted permission to a calling service by an origin that has the HTTP scheme,
          e.g., &lt;http://calling-service.example.com&gt;. If I ever use my computer on
          an unsecured network (e.g., a hotspot or if my own home wireless network
          is insecure), and browse any HTTP site, then an attacker can bug my computer. The attack proceeds
          like this:
          </t>
          <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-4.1.4-2">
            <li pn="section-4.1.4-2.1" derivedCounter="1.">I connect to &lt;http://anything.example.org/&gt;. Note that this site is unaffiliated
            with the calling service.</li>
            <li pn="section-4.1.4-2.2" derivedCounter="2.">The attacker modifies my HTTP connection to inject an IFRAME (or a redirect)
            to &lt;http://calling-service.example.com&gt;.</li>
            <li pn="section-4.1.4-2.3" derivedCounter="3.">The attacker forges the response from &lt;http://calling-service.example.com/&gt; to
            inject JS to initiate a call to themselves.</li>
          </ol>
          <t indent="0" pn="section-4.1.4-3">
          Note that this attack does not depend on the media being insecure. Because the
          call is to the attacker, it is also encrypted to them. Moreover, it need not
          be executed immediately; the attacker can "infect" the origin semi-permanently
          (e.g., with a Web worker or a popped-up window that is hidden under the main window)
          and thus be able to bug me long
          after I have left the infected network. This risk is created by allowing
          calls at all from a page fetched over HTTP.
          </t>
          <t indent="0" pn="section-4.1.4-4">
          Even if calls are only possible from HTTPS <xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818"/> sites,
          if those sites include active content (e.g., JavaScript) from an untrusted
          site, that JavaScript is executed in the security context of the page
          <xref target="finer-grained" format="default" sectionFormat="of" derivedContent="finer-grained"/>. This could lead to compromise of a call
          even if the parent page is safe. Note: This issue is not restricted
          to <strong>pages</strong> which contain untrusted content.
 If any page from a
          given origin ever loads JavaScript from an attacker, then it is
          possible for that attacker to infect the browser's notion of that
          origin semi-permanently.
          </t>
        </section>
      </section>
      <section anchor="sec.rtc-comm-consent" numbered="true" toc="include" removeInRFC="false" pn="section-4.2">
        <name slugifiedName="name-communications-consent-veri">Communications Consent Verification</name>
        <t indent="0" pn="section-4.2-1">
          As discussed in <xref target="sec.cors-etc" format="default" sectionFormat="of" derivedContent="Section 3.3"/>, allowing Web applications unrestricted network access
          via the browser introduces the risk of using the browser as an attack platform against
          machines which would not otherwise be accessible to the malicious
          site, for
          instance, because they are topologically restricted (e.g., behind a firewall or NAT).
          In order to prevent this form of attack as well as cross-protocol attacks, it is
          important to require that the target of traffic explicitly consent to receiving
          the traffic in question. Until that consent has been verified for a given endpoint,
          traffic other than the consent handshake <bcp14>MUST NOT</bcp14> be sent to that endpoint.
        </t>
        <t indent="0" pn="section-4.2-2">
          Note that consent verification is not sufficient to prevent overuse of
          network resources. Because WebRTC allows for a Web site to create
          data flows between two browser instances without user consent, it is
          possible for a malicious site to chew up a significant amount of a user's
          bandwidth without incurring significant costs to themselves by setting
          up such a channel to another user. However, as a practical matter
          there are a large number of Web sites which can act as data sources,
          so an attacker can at least use downlink bandwidth with existing
          Web APIs. However, this potential DoS vector reinforces the need
          for adequate congestion control for WebRTC protocols to ensure that
          they play fair with other demands on the user's bandwidth.
        </t>
        <section anchor="sec.ice" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.1">
          <name slugifiedName="name-ice">ICE</name>
          <t indent="0" pn="section-4.2.1-1">
          Verifying receiver consent requires some sort of explicit handshake, but conveniently
          we already need one in order to do NAT hole-punching. Interactive Connectivity Establishment (ICE)  <xref target="RFC8445" format="default" sectionFormat="of" derivedContent="RFC8445"/> includes a handshake
          designed to verify that the receiving element wishes to receive traffic from the
          sender. It
          is important to remember here that the site initiating ICE is
          presumed malicious; in order for the handshake to be secure, the
          receiving element <bcp14>MUST</bcp14> demonstrate receipt/knowledge of some value
          not available to the site (thus preventing the site from forging
          responses).  In order to achieve this objective with ICE, the
          Session Traversal Utilities for NAT (STUN)
          transaction IDs must be generated by the browser and <bcp14>MUST NOT</bcp14> be made
          available to the initiating script, even via a diagnostic interface.
          Verifying receiver consent also requires verifying the receiver wants
          to receive traffic from a particular sender, and at this time; for
          example, a malicious site may simply attempt ICE to known servers
          that are using ICE for other sessions.  ICE provides this verification
          as well, by using the STUN credentials as a form of per-session shared
          secret.  Those credentials are known to the Web application, but would
          need to also be known and used by the STUN-receiving element to be useful.
          </t>
          <t indent="0" pn="section-4.2.1-2">
            There also needs to be some mechanism for the browser to verify that
            the target of the traffic continues to wish to receive it. Because ICE keepalives are
            indications, they will not work here.
            <xref target="RFC7675" format="default" sectionFormat="of" derivedContent="RFC7675"/> describes the mechanism
            for providing consent freshness.
          </t>
        </section>
        <section anchor="sec.masking" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.2">
          <name slugifiedName="name-masking">Masking</name>
          <t indent="0" pn="section-4.2.2-1">
            Once consent is verified, there still is some concern about misinterpretation
            attacks as described by Huang et al. <xref target="huang-w2sp" format="default" sectionFormat="of" derivedContent="huang-w2sp"/>.
            This does not seem like it is of serious concern with DTLS because
            the ICE handshake enforces receiver consent and there is little evidence
            of passive DTLS proxies of the type studied by Huang. However, because
            RTCWEB can run over TCP there is some concern that attackers might
            control the ciphertext by controlling the plaintext input to SCTP.
            This risk is only partially mitigated by the fact that the SCTP stack controls
            the framing of the packets.
          </t>
          <t indent="0" pn="section-4.2.2-2">
            Note that in principle an attacker could exert some control
            over Secure Real-time Transport Protocol (SRTP) packets by using a combination of the WebAudio API
            and extremely tight timing control.
            The primary risk here seems to be carriage of SRTP over Traversal
            Using Relays around NAT (TURN) TCP.
            However, as SRTP packets have an extremely characteristic packet
            header it seems unlikely that any but the most aggressive
            intermediaries would be confused into thinking that another
            application-layer protocol was in use.
          </t>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.2.3">
          <name slugifiedName="name-backward-compatibility">Backward Compatibility</name>
          <aside pn="section-4.2.3-1">
            <t indent="0" pn="section-4.2.3-1.1">
            Note: The RTCWEB WG ultimately decided to require ICE. This section
            provides context for that decision.
            </t>
          </aside>
          <t indent="0" pn="section-4.2.3-2">
            A requirement to use ICE limits compatibility with legacy non-ICE clients.
            It seems unsafe to completely remove the requirement for some check.
            All proposed checks have the common feature that the browser
            sends some message to the candidate traffic recipient
            and refuses to send other traffic until that message has been
            replied to. The message/reply pair must be generated in such
            a way that an attacker who controls the Web application
            cannot forge them, generally by having the message contain some
            secret value that must be incorporated (e.g., echoed, hashed into,
            etc.). Non-ICE candidates for this role (in cases where the
            legacy endpoint has a public address) include:
          </t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.2.3-3">
            <li pn="section-4.2.3-3.1">STUN checks without using ICE (i.e., the non-RTC-web endpoint sets up a STUN responder).</li>
            <li pn="section-4.2.3-3.2">Use of the RTP Control Protocol (RTCP) as an implicit reachability check.</li>
          </ul>
          <t indent="0" pn="section-4.2.3-4">
            In the RTCP approach, the WebRTC endpoint is allowed to send
            a limited number of RTP packets prior to receiving consent. This
            allows a short window of attack. In addition, some legacy endpoints
            do not support RTCP, so this is a much more expensive solution for
            such endpoints, for which it would likely be easier to implement ICE.
            For these two reasons, an RTCP-based approach does not seem to
            address the security issue satisfactorily.
          </t>
          <t indent="0" pn="section-4.2.3-5">
            In the STUN approach, the WebRTC endpoint is able to verify that
            the recipient is running some kind of STUN endpoint but unless
            the STUN responder is integrated with the ICE username/password
            establishment system, the WebRTC endpoint cannot verify that
            the recipient consents to this particular call. This may be an
            issue if existing STUN servers are operated at addresses that
            are not able to handle bandwidth-based attacks. Thus, this
            approach does not seem satisfactory either.
          </t>
          <t indent="0" pn="section-4.2.3-6">
            If the systems are tightly integrated (i.e., the STUN endpoint responds with
            responses authenticated with ICE credentials), then this issue
            does not exist. However, such a design is very close to an ICE-Lite
            implementation (indeed, arguably is one).
            An intermediate approach would be to have a STUN extension that indicated
            that one was responding to WebRTC checks but not computing
            integrity checks based on the ICE credentials. This would allow the
            use of standalone STUN servers without the risk of confusing them
            with legacy STUN servers. If a non-ICE legacy solution is needed,
            then this is probably the best choice.
          </t>
          <t indent="0" pn="section-4.2.3-7">
            Once initial consent is verified, we also need to verify continuing
            consent, in order to avoid attacks where two people briefly share
            an IP (e.g., behind a NAT in an Internet cafe) and the attacker
            arranges for a large, unstoppable, traffic flow to the
            network and then leaves. The appropriate technologies here are
            fairly similar to those for initial consent, though are perhaps
            weaker since the threats are less severe.
          </t>
        </section>
        <section anchor="sec.ip.location" numbered="true" toc="include" removeInRFC="false" pn="section-4.2.4">
          <name slugifiedName="name-ip-location-privacy">IP Location Privacy</name>
          <t indent="0" pn="section-4.2.4-1">
            Note that as soon as the callee sends their ICE candidates, the
            caller learns the callee's IP addresses. The callee's server-reflexive
            address reveals a lot of information about the callee's location.
            In order to avoid tracking, implementations may wish to suppress
            the start of ICE negotiation until the callee has answered. In
            addition, either side may wish to hide their location from the other
            side entirely by forcing all traffic through a TURN server.
          </t>
          <t indent="0" pn="section-4.2.4-2">
            In ordinary operation, the site learns the browser's IP address,
            though it may be hidden via mechanisms like Tor <eref brackets="angle" target="https://www.torproject.org"/> or a VPN.
            However, because sites can cause the browser to provide
            IP addresses, this provides a mechanism for sites to learn
            about the user's network environment even if the user is behind
            a VPN that masks their IP address. Implementations may wish
            to provide settings which suppress all non-VPN candidates if
            the user is on certain kinds of VPN, especially privacy-oriented
            systems such as Tor.   See <xref target="RFC8828" format="default" sectionFormat="of" derivedContent="RFC8828"/>
            for additional information.
          </t>
        </section>
      </section>
      <section anchor="sec.rtc-comsec" numbered="true" toc="include" removeInRFC="false" pn="section-4.3">
        <name slugifiedName="name-communications-security">Communications Security</name>
        <t indent="0" pn="section-4.3-1">
          Finally, we consider a problem familiar from the SIP world: communications security.
          For obvious reasons, it <bcp14>MUST</bcp14> be possible for the communicating parties to establish
          a channel which is secure against both message recovery and message modification.
          (See <xref target="RFC5479" format="default" sectionFormat="of" derivedContent="RFC5479"/> for more details.)
          This service must be provided for both data and voice/video.
          Ideally the same security mechanisms would be used for both types of content.
          Technology for providing this
          service (for instance, SRTP <xref target="RFC3711" format="default" sectionFormat="of" derivedContent="RFC3711"/>, DTLS <xref target="RFC6347" format="default" sectionFormat="of" derivedContent="RFC6347"/>, and
          DTLS-SRTP <xref target="RFC5763" format="default" sectionFormat="of" derivedContent="RFC5763"/>) is well understood. However, we must
          examine this technology in the WebRTC context, where the threat
          model is somewhat different.
        </t>
        <t indent="0" pn="section-4.3-2">
          In general, it is important to understand that unlike a conventional SIP proxy,
          the calling service (i.e., the Web server) controls not only the channel
          between the communicating endpoints but also the application running on
          the user's browser.
          While in principle it is possible for the browser to cut the calling service
          out of the loop and directly present trusted information (and perhaps get
          consent), practice in modern browsers is to avoid this whenever possible.
          "In‑flow" modal dialogs which require the user to consent to specific
          actions are particularly disfavored as human factors research indicates
          that unless they are made extremely invasive, users simply agree to
          them without actually consciously giving consent <xref target="abarth-rtcweb" format="default" sectionFormat="of" derivedContent="abarth-rtcweb"/>.
          Thus, nearly all the UI will necessarily be rendered by the
          browser but under control of the calling service. This likely includes the
          peer's identity information, which, after all, is only meaningful in
          the context of some calling service.
        </t>
        <t indent="0" pn="section-4.3-3">
          This limitation does not mean that preventing attack by the calling service
          is completely hopeless. However, we need to distinguish between two
          classes of attack:
        </t>
        <dl newline="true" spacing="normal" indent="3" pn="section-4.3-4">
          <dt pn="section-4.3-4.1">Retrospective compromise of calling service:</dt>
          <dd pn="section-4.3-4.2">The calling service
          is non-malicious during a call but subsequently is compromised and wishes to
          attack an older call (often called a "passive attack").</dd>
          <dt pn="section-4.3-4.3">During-call attack by calling service:</dt>
          <dd pn="section-4.3-4.4">The calling service is compromised
          during the call it wishes to attack (often called an "active attack").</dd>
        </dl>
        <t indent="0" pn="section-4.3-5">
          Providing security against the former type of attack is practical using the
          techniques discussed in <xref target="sec.retrospective-compromise" format="default" sectionFormat="of" derivedContent="Section 4.3.1"/>.
          However, it is extremely difficult to prevent a
          trusted but malicious calling service from actively attacking a user's calls,
          either by mounting a Man-in-the-Middle (MITM) attack or by diverting them entirely.
          (Note that this attack applies equally to a network attacker if communications
          to the calling service are not secured.) We discuss some potential approaches
          in <xref target="sec.during-attack" format="default" sectionFormat="of" derivedContent="Section 4.3.2"/>.
        </t>
        <section anchor="sec.retrospective-compromise" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.1">
          <name slugifiedName="name-protecting-against-retrospe">Protecting Against Retrospective Compromise</name>
          <t indent="0" pn="section-4.3.1-1">
            In a retrospective attack, the calling service was uncompromised during
            the call, but an attacker subsequently wants to recover the content of the
            call. We assume that the attacker has access to the protected media stream
            as well as full control of the calling service.
          </t>
          <t indent="0" pn="section-4.3.1-2">
            If the calling service has access to the traffic keying material
            (as in Security Descriptions (SDES) <xref target="RFC4568" format="default" sectionFormat="of" derivedContent="RFC4568"/>), then retrospective attack
            is trivial.
            This form of attack is particularly serious in the Web context because
            it is standard practice in Web services to run extensive logging and monitoring. Thus, it is highly
            likely that if the traffic key is part of any HTTP request it will be logged somewhere and thus
            subject to subsequent compromise. It is this consideration that makes an automatic, public key-based
            key exchange mechanism imperative for WebRTC (this is a good idea for any communications
            security system), and this mechanism <bcp14>SHOULD</bcp14> provide Forward Secrecy (FS).
            The signaling channel/calling service can be used to authenticate this mechanism.
          </t>
          <t indent="0" pn="section-4.3.1-3">
            In addition, if end-to-end keying is used,
            the system <bcp14>MUST NOT</bcp14> provide any APIs to either extract long-term
            keying material or to directly access any stored traffic keys.
            Otherwise, an attacker who subsequently compromised the calling service
            might be able to use those APIs to recover the traffic keys and thus
            compromise the traffic.
          </t>
        </section>
        <section anchor="sec.during-attack" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.2">
          <name slugifiedName="name-protecting-against-during-c">Protecting Against During-Call Attack</name>
          <t indent="0" pn="section-4.3.2-1">
            Protecting against attacks during a call is a more difficult proposition. Even
            if the calling service cannot directly access keying material (as recommended
            in the previous section), it can simply mount a man-in-the-middle attack
            on the connection, telling Alice that she is calling Bob and Bob that
            he is calling Alice, while in fact the calling service is acting as
            a calling bridge and capturing all the traffic. Protecting against
            this form of attack requires positive authentication of the remote
            endpoint such as explicit out-of-band key verification (e.g., by a fingerprint)
            or a third-party identity service as described in
            <xref target="RFC8827" format="default" sectionFormat="of" derivedContent="RFC8827"/>.
          </t>
          <section anchor="sec.key-continuity" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.2.1">
            <name slugifiedName="name-key-continuity">Key Continuity</name>
            <t indent="0" pn="section-4.3.2.1-1">
              One natural approach is to use "key continuity". While a malicious
              calling service can present any identity it chooses to the user,
              it cannot produce a private key that maps to a given public key.
              Thus, it is possible for the browser to note a given user's
              public key and generate an alarm whenever that user's key
              changes. The Secure Shell (SSH) protocol <xref target="RFC4251" format="default" sectionFormat="of" derivedContent="RFC4251"/> uses a similar technique.
              (Note that the need to avoid explicit user consent on every call
              precludes the browser requiring an immediate manual check of the peer's key.)
            </t>
            <t indent="0" pn="section-4.3.2.1-2">
              Unfortunately, this sort of key continuity mechanism is far less
              useful in the WebRTC context. First, much of the virtue of
              WebRTC (and any Web application) is that it is not bound to a
              particular piece of client software. Thus, it will be not only
              possible but routine for a user to use multiple browsers
              on different computers that will of course have different
              keying material (Securely Available Credentials (SACRED) <xref target="RFC3760" format="default" sectionFormat="of" derivedContent="RFC3760"/> notwithstanding).
              Thus, users will frequently be alerted to key mismatches which
              are in fact completely legitimate, with the result that they
              are trained to simply click through them. As it is known that
              users routinely will click through far more dire warnings
              <xref target="cranor-wolf" format="default" sectionFormat="of" derivedContent="cranor-wolf"/>, it seems extremely unlikely that
              any key continuity mechanism will be effective rather than
              simply annoying.
            </t>
            <t indent="0" pn="section-4.3.2.1-3">
              Moreover, it is trivial to bypass even this kind of mechanism.
              Recall that unlike the case of SSH, the browser never directly
              gets the peer's identity from the user. Rather, it is provided
              by the calling service. Even enabling a mechanism of this type
              would require an API to allow the calling service to tell the
              browser "this is a call to user X." All the calling service
              needs to do to avoid triggering a key continuity warning
              is to tell the browser that "this is a call to user Y"
              where Y is confusable with X.
              Even if the user actually checks the other side's name
              (which all available evidence indicates is unlikely),
              this would require (a) the browser to use the trusted UI
              to provide the name and (b) the user to not be fooled by
              similar appearing names.
            </t>
          </section>
          <section anchor="sec.sas" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.2.2">
            <name slugifiedName="name-short-authentication-string">Short Authentication Strings</name>
            <t indent="0" pn="section-4.3.2.2-1">
              ZRTP <xref target="RFC6189" format="default" sectionFormat="of" derivedContent="RFC6189"/> uses a "Short Authentication String" (SAS) which is derived
              from the key agreement protocol.
 This SAS is designed to be compared
              by the users (e.g., read aloud over the voice channel or
              transmitted via an out-of-band channel) and if confirmed by both sides precludes MITM
              attack. The intention is that the SAS is used once and then key
              continuity (though with a different mechanism from that discussed
              above) is used thereafter.
            </t>
            <t indent="0" pn="section-4.3.2.2-2">
              Unfortunately, the SAS does not offer a practical solution to the
              problem of a compromised calling service. "Voice cloning" systems,
              which mimic the voice of a given speaker
              are an active area of research  <xref target="deepfakes-ftc" format="default" sectionFormat="of" derivedContent="deepfakes-ftc"/> and are already being used in
              real-world attacks <xref target="deepfakes-fraud" format="default" sectionFormat="of" derivedContent="deepfakes-fraud"/>.
              These attacks are likely
              to improve in future, especially in an environment where the user just wants
              to get on with the phone call.
              Thus, even if the SAS is effective today, it is likely not to be so for much longer.
            </t>
            <t indent="0" pn="section-4.3.2.2-3">
              Additionally, it is unclear that users will actually use an SAS.
              As discussed above, the browser UI constraints preclude requiring
              the SAS exchange prior to completing the call and so it must be
              voluntary; at most the browser will provide some UI indicator that the
              SAS has not yet been checked. However, it is well known that when
              faced with optional security mechanisms, many users simply
              ignore them <xref target="whitten-johnny" format="default" sectionFormat="of" derivedContent="whitten-johnny"/>.
            </t>
            <t indent="0" pn="section-4.3.2.2-4">
              Once users have checked the SAS once, key continuity
              is required to avoid them needing to check it on every call.
              However, this is problematic for reasons indicated in
              <xref target="sec.key-continuity" format="default" sectionFormat="of" derivedContent="Section 4.3.2.1"/>.
              In principle it is of course possible to render a different
              UI element to indicate that calls are using an unauthenticated
              set of keying material (recall that the attacker can just present
              a slightly different name so that the attack shows the
              same UI as a call to a new device or to someone you haven't
              called before), but as a practical matter, users simply ignore
              such indicators even in the rather more dire case of mixed
              content warnings.
            </t>
          </section>
          <section anchor="sec.third-party-id" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.2.3">
            <name slugifiedName="name-third-party-identity">Third-Party Identity</name>
            <t indent="0" pn="section-4.3.2.3-1">
              The conventional approach to providing communications identity
              has of course been to have some third-party identity system
              (e.g., PKI) to authenticate the endpoints. Such mechanisms
              have proven to be too cumbersome for use by typical users
              (and nearly too cumbersome for administrators).
              However,
              a new generation of Web-based identity providers (BrowserID, Federated Google Login,
              Facebook Connect, OAuth <xref target="RFC6749" format="default" sectionFormat="of" derivedContent="RFC6749"/>, OpenID <xref target="OpenID" format="default" sectionFormat="of" derivedContent="OpenID"/>, WebFinger <xref target="RFC7033" format="default" sectionFormat="of" derivedContent="RFC7033"/>) has been developed
              and use Web technologies to provide lightweight (from the user's
              perspective) third-party authenticated transactions.
              It is possible to use systems of this type to authenticate WebRTC calls,
              linking them to existing user notions of identity
              (e.g., Facebook adjacencies). Specifically, the third-party
              identity system is used to bind the user's identity to
              cryptographic keying material which is then used to
              authenticate the calling endpoints.
              Calls which are authenticated
              in this fashion are naturally resistant even to active MITM attack
              by the calling site.
            </t>
            <t indent="0" pn="section-4.3.2.3-2">
              Note that there is one special case in which PKI-style certificates
              do provide a practical solution: calls from end users to
              large sites. For instance, if you are making a call
              to Amazon.com, then Amazon can easily get a certificate
              to authenticate their media traffic, just as they get
              one to authenticate their Web traffic. This does not provide
              additional security value in cases in which the calling site
              and the media peer are one and the same, but might be useful
              in cases in which third parties (e.g., ad networks or
              retailers) arrange for calls but do not participate in them.
            </t>
          </section>
          <section anchor="sec.page-access" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.2.4">
            <name slugifiedName="name-page-access-to-media">Page Access to Media</name>
            <t indent="0" pn="section-4.3.2.4-1">
              Identifying the identity of the far media endpoint is a
              necessary but not sufficient condition for providing media
              security. In WebRTC, media flows are rendered into
              HTML5 MediaStreams which can be manipulated by the calling
              site. Obviously, if the site can modify or view the media,
              then the user is not getting the level of assurance they
              would expect from being able to authenticate their peer.
              In many cases, this is acceptable because the user values
              site-based special effects over complete security from the
              site. However, there are also cases where users wish to
              know that the site cannot interfere. In order to facilitate
              that, it will be necessary to provide features whereby
              the site can verifiably give up access to the media streams.
              This verification must be possible both from the local
              side and the remote side. I.e., users must be able to verify
              that the person called has engaged a secure media
              mode (see <xref target="sec.malicious" format="default" sectionFormat="of" derivedContent="Section 4.3.3"/>). In order to achieve this, it will be necessary to
              cryptographically bind an indication of the local media
              access policy into the cryptographic authentication
              procedures detailed in the previous sections.
            </t>
            <t indent="0" pn="section-4.3.2.4-2">
              It should be noted that the use of this secure media mode is
              left to the discretion of the site. When such a mode is
              engaged, the browser will need to provide indicia to the user
              that the associated media has been authenticated as coming from
              the identified user.  This allows WebRTC services that wish to
              claim end-to-end security to do so in a way that can be easily
              verified by the user. This model requires that the remote
              party's browser be included in the TCB, as described in
              <xref target="sec.web-security" format="default" sectionFormat="of" derivedContent="Section 3"/>.
            </t>
          </section>
        </section>
        <section anchor="sec.malicious" numbered="true" toc="include" removeInRFC="false" pn="section-4.3.3">
          <name slugifiedName="name-malicious-peers">Malicious Peers</name>
          <t indent="0" pn="section-4.3.3-1">
            One class of attack that we do not generally try to prevent
            is malicious peers. For instance, no matter what confidentiality
            measures you employ the person you are talking to might record
            the call and publish it on the Internet. Similarly, we do
            not attempt to prevent them from using voice or video processing
            technology for hiding or changing their appearance.
            While technologies (Digital Rights Management (DRM), etc.) do exist to attempt to address
            these issues, they are generally not compatible with open
            systems and WebRTC does not address them.
          </t>
          <t indent="0" pn="section-4.3.3-2">
            Similarly, we make no attempt to prevent prank calling or
            other unwanted calls. In general, this is in the scope of the
            calling site, though because WebRTC does offer some forms of
            strong authentication, that may be useful as part of a defense
            against such attacks.
          </t>
        </section>
      </section>
      <section anchor="sec.privacy" numbered="true" toc="include" removeInRFC="false" pn="section-4.4">
        <name slugifiedName="name-privacy-considerations">Privacy Considerations</name>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.4.1">
          <name slugifiedName="name-correlation-of-anonymous-ca">Correlation of Anonymous Calls</name>
          <t indent="0" pn="section-4.4.1-1">
            While persistent endpoint identifiers can be a useful security
            feature (see <xref target="sec.key-continuity" format="default" sectionFormat="of" derivedContent="Section 4.3.2.1"/>), they can
            also represent a privacy threat in settings where the user
            wishes to be anonymous. WebRTC provides a number of possible
            persistent identifiers such as DTLS certificates
            (if they are reused between connections) and RTCP CNAMEs
            (if generated according to <xref target="RFC6222" format="default" sectionFormat="of" derivedContent="RFC6222"/> rather
            than the privacy-preserving mode of <xref target="RFC7022" format="default" sectionFormat="of" derivedContent="RFC7022"/>).
            In order to prevent this type of correlation, browsers need to
            provide mechanisms to reset these identifiers (e.g., with the
            same lifetime as cookies). Moreover, the API should provide
            mechanisms to allow sites intended for anonymous calling
            to force the minting of fresh identifiers. In addition,
            IP addresses can be a source of call linkage
            <xref target="RFC8828" format="default" sectionFormat="of" derivedContent="RFC8828"/>.
          </t>
        </section>
        <section numbered="true" toc="include" removeInRFC="false" pn="section-4.4.2">
          <name slugifiedName="name-browser-fingerprinting">Browser Fingerprinting</name>
          <t indent="0" pn="section-4.4.2-1">
            Any new set of API features adds a risk of browser fingerprinting,
            and WebRTC is no exception. Specifically, sites can use the
            presence or absence of specific devices as a browser fingerprint.
            In general, the API needs to be balanced between functionality
            and the incremental fingerprint risk.  See <xref target="Fingerprinting" format="default" sectionFormat="of" derivedContent="Fingerprinting"/>.
          </t>
        </section>
      </section>
    </section>
    <section anchor="sec.sec_cons" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-5-1">This entire document is about security.</t>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-6-1">This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author initials="B." surname="Leiba" fullname="B. Leiba">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2017" month="May"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="abarth-rtcweb" target="http://rtc-web.alvestrand.com/home/papers/barth-security-prompt.pdf?attredirects=0" quoteTitle="true" derivedAnchor="abarth-rtcweb">
          <front>
            <title>Prompting the user is security failure</title>
            <author initials="A." surname="Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="September" year="2010"/>
          </front>
          <refcontent>RTC-Web Workshop</refcontent>
        </reference>
        <reference anchor="cranor-wolf" target="https://www.usenix.org/legacy/event/sec09/tech/full_papers/sunshine.pdf" quoteTitle="true" derivedAnchor="cranor-wolf">
          <front>
            <title>Crying Wolf: An Empirical Study of SSL Warning Effectiveness</title>
            <author initials="J." surname="Sunshine">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Egelman">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Almuhimedi">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Atri">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="L." surname="Cranor">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="August" year="2009"/>
          </front>
          <refcontent>Proceedings of the 18th USENIX Security Symposium</refcontent>
        </reference>
        <reference anchor="deepfakes-fraud" target="https://www.theverge.com/2019/9/5/20851248/deepfakes-ai-fake-audio-phone-calls-thieves-trick-companies-stealing-money" quoteTitle="true" derivedAnchor="deepfakes-fraud">
          <front>
            <title>Thieves are now using AI deepfakes to trick companies into sending them money</title>
            <author initials="N." surname="Statt">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="September" year="2019"/>
          </front>
        </reference>
        <reference anchor="deepfakes-ftc" target="https://www.theverge.com/2020/1/29/21080553/ftc-deepfakes-audio-cloning-joe-rogan-phone-scams" quoteTitle="true" derivedAnchor="deepfakes-ftc">
          <front>
            <title>FTC says the tech behind audio deepfakes is getting better</title>
            <author initials="K." surname="Lyons">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2020"/>
          </front>
        </reference>
        <reference anchor="fetch" target="https://fetch.spec.whatwg.org/" quoteTitle="true" derivedAnchor="fetch">
          <front>
            <title>Fetch</title>
            <author initials="A." surname="van Kesteren">
              <organization showOnFrontPage="true"/>
            </author>
          </front>
        </reference>
        <reference anchor="finer-grained" quoteTitle="true" derivedAnchor="finer-grained">
          <front>
            <title>Beware of Finer-Grained Origins</title>
            <author initials="C." surname="Jackson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="July" year="2008"/>
          </front>
          <refcontent>Web 2.0 Security and Privacy (W2SP 2008)</refcontent>
        </reference>
        <reference anchor="Fingerprinting" target="https://www.w3.org/TR/fingerprinting-guidance/" quoteTitle="true" derivedAnchor="Fingerprinting">
          <front>
            <title>Mitigating Browser Fingerprinting in Web Specifications</title>
            <author initials="N." surname="Doty" role="editor"/>
            <date month="March" year="2019"/>
          </front>
        </reference>
        <reference anchor="huang-w2sp" quoteTitle="true" derivedAnchor="huang-w2sp">
          <front>
            <title>Talking to Yourself for Fun and Profit</title>
            <author initials="L-S." surname="Huang">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E.Y." surname="Chen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Jackson">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="May" year="2011"/>
          </front>
          <refcontent>Web 2.0 Security and Privacy (W2SP 2011)</refcontent>
        </reference>
        <reference anchor="OpenID" target="https://openid.net/specs/openid-connect-core-1_0.html" quoteTitle="true" derivedAnchor="OpenID">
          <front>
            <title>OpenID Connect Core 1.0</title>
            <author initials="N." surname="Sakimura">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Bradley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="November" year="2014"/>
          </front>
        </reference>
        <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818" quoteTitle="true" derivedAnchor="RFC2818">
          <front>
            <title>HTTP Over TLS</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2000" month="May"/>
            <abstract>
              <t indent="0">This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2818"/>
          <seriesInfo name="DOI" value="10.17487/RFC2818"/>
        </reference>
        <reference anchor="RFC3261" target="https://www.rfc-editor.org/info/rfc3261" quoteTitle="true" derivedAnchor="RFC3261">
          <front>
            <title>SIP: Session Initiation Protocol</title>
            <author initials="J." surname="Rosenberg" fullname="J. Rosenberg">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Schulzrinne" fullname="H. Schulzrinne">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G." surname="Camarillo" fullname="G. Camarillo">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Johnston" fullname="A. Johnston">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Peterson" fullname="J. Peterson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Sparks" fullname="R. Sparks">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Handley" fullname="M. Handley">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Schooler" fullname="E. Schooler">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2002" month="June"/>
            <abstract>
              <t indent="0">This document describes Session Initiation Protocol (SIP), an application-layer control (signaling) protocol for creating, modifying, and terminating sessions with one or more participants.  These sessions include Internet telephone calls, multimedia distribution, and multimedia conferences.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3261"/>
          <seriesInfo name="DOI" value="10.17487/RFC3261"/>
        </reference>
        <reference anchor="RFC3552" target="https://www.rfc-editor.org/info/rfc3552" quoteTitle="true" derivedAnchor="RFC3552">
          <front>
            <title>Guidelines for Writing RFC Text on Security Considerations</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="B." surname="Korver" fullname="B. Korver">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2003" month="July"/>
            <abstract>
              <t indent="0">All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak.  This document provides guidelines to RFC authors on how to write a good Security Considerations section.   This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="72"/>
          <seriesInfo name="RFC" value="3552"/>
          <seriesInfo name="DOI" value="10.17487/RFC3552"/>
        </reference>
        <reference anchor="RFC3711" target="https://www.rfc-editor.org/info/rfc3711" quoteTitle="true" derivedAnchor="RFC3711">
          <front>
            <title>The Secure Real-time Transport Protocol (SRTP)</title>
            <author initials="M." surname="Baugher" fullname="M. Baugher">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="McGrew" fullname="D. McGrew">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Naslund" fullname="M. Naslund">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Carrara" fullname="E. Carrara">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Norrman" fullname="K. Norrman">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2004" month="March"/>
            <abstract>
              <t indent="0">This document describes the Secure Real-time Transport Protocol (SRTP), a profile of the Real-time Transport Protocol (RTP), which can provide confidentiality, message authentication, and replay protection to the RTP traffic and to the control traffic for RTP, the Real-time Transport Control Protocol (RTCP).   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3711"/>
          <seriesInfo name="DOI" value="10.17487/RFC3711"/>
        </reference>
        <reference anchor="RFC3760" target="https://www.rfc-editor.org/info/rfc3760" quoteTitle="true" derivedAnchor="RFC3760">
          <front>
            <title>Securely Available Credentials (SACRED) - Credential Server Framework</title>
            <author initials="D." surname="Gustafson" fullname="D. Gustafson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Just" fullname="M. Just">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Nystrom" fullname="M. Nystrom">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2004" month="April"/>
            <abstract>
              <t indent="0">As the number, and more particularly the number of different types, of devices connecting to the Internet increases, credential mobility becomes an issue for IETF standardization.  This document responds to the requirements on protocols for secure exchange of credentials listed in RFC 3157, by presenting an abstract protocol framework.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3760"/>
          <seriesInfo name="DOI" value="10.17487/RFC3760"/>
        </reference>
        <reference anchor="RFC4251" target="https://www.rfc-editor.org/info/rfc4251" quoteTitle="true" derivedAnchor="RFC4251">
          <front>
            <title>The Secure Shell (SSH) Protocol Architecture</title>
            <author initials="T." surname="Ylonen" fullname="T. Ylonen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Lonvick" fullname="C. Lonvick" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="January"/>
            <abstract>
              <t indent="0">The Secure Shell (SSH) Protocol is a protocol for secure remote login and other secure network services over an insecure network.  This document describes the architecture of the SSH protocol, as well as the notation and terminology used in SSH protocol documents.  It also discusses the SSH algorithm naming system that allows local extensions.  The SSH protocol consists of three major components: The Transport Layer Protocol provides server authentication, confidentiality, and integrity with perfect forward secrecy.  The User Authentication Protocol authenticates the client to the server.  The Connection Protocol multiplexes the encrypted tunnel into several logical channels.  Details of these protocols are described in separate documents.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4251"/>
          <seriesInfo name="DOI" value="10.17487/RFC4251"/>
        </reference>
        <reference anchor="RFC4568" target="https://www.rfc-editor.org/info/rfc4568" quoteTitle="true" derivedAnchor="RFC4568">
          <front>
            <title>Session Description Protocol (SDP) Security Descriptions for Media Streams</title>
            <author initials="F." surname="Andreasen" fullname="F. Andreasen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Baugher" fullname="M. Baugher">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t indent="0">This document defines a Session Description Protocol (SDP) cryptographic attribute for unicast media streams.  The attribute describes a cryptographic key and other parameters that serve to configure security for a unicast media stream in either a single message or a roundtrip exchange.  The attribute can be used with a variety of SDP media transports, and this document defines how to use it for the Secure Real-time Transport Protocol (SRTP) unicast media streams.  The SDP crypto attribute requires the services of a data security protocol to secure the SDP message.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4568"/>
          <seriesInfo name="DOI" value="10.17487/RFC4568"/>
        </reference>
        <reference anchor="RFC5479" target="https://www.rfc-editor.org/info/rfc5479" quoteTitle="true" derivedAnchor="RFC5479">
          <front>
            <title>Requirements and Analysis of Media Security Management Protocols</title>
            <author initials="D." surname="Wing" fullname="D. Wing" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Fries" fullname="S. Fries">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="F." surname="Audet" fullname="F. Audet">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2009" month="April"/>
            <abstract>
              <t indent="0">This document describes requirements for a protocol to negotiate a security context for SIP-signaled Secure RTP (SRTP) media.  In addition to the natural security requirements, this negotiation protocol must interoperate well with SIP in certain ways.  A number of proposals have been published and a summary of these proposals is in the appendix of this document.  This memo provides information  for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5479"/>
          <seriesInfo name="DOI" value="10.17487/RFC5479"/>
        </reference>
        <reference anchor="RFC5763" target="https://www.rfc-editor.org/info/rfc5763" quoteTitle="true" derivedAnchor="RFC5763">
          <front>
            <title>Framework for Establishing a Secure Real-time Transport Protocol (SRTP) Security Context Using Datagram Transport Layer Security (DTLS)</title>
            <author initials="J." surname="Fischl" fullname="J. Fischl">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="May"/>
            <abstract>
              <t indent="0">This document specifies how to use the Session Initiation Protocol (SIP) to establish a Secure Real-time Transport Protocol (SRTP) security context using the Datagram Transport Layer Security (DTLS) protocol.  It describes a mechanism of transporting a fingerprint attribute in the Session Description Protocol (SDP) that identifies the key that will be presented during the DTLS handshake.  The key exchange travels along the media path as opposed to the signaling path.  The SIP Identity mechanism can be used to protect the integrity of the fingerprint attribute from modification by intermediate proxies.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5763"/>
          <seriesInfo name="DOI" value="10.17487/RFC5763"/>
        </reference>
        <reference anchor="RFC6189" target="https://www.rfc-editor.org/info/rfc6189" quoteTitle="true" derivedAnchor="RFC6189">
          <front>
            <title>ZRTP: Media Path Key Agreement for Unicast Secure RTP</title>
            <author initials="P." surname="Zimmermann" fullname="P. Zimmermann">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Johnston" fullname="A. Johnston" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Callas" fullname="J. Callas">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t indent="0">This document defines ZRTP, a protocol for media path Diffie-Hellman exchange to agree on a session key and parameters for establishing unicast Secure Real-time Transport Protocol (SRTP) sessions for Voice over IP (VoIP) applications.  The ZRTP protocol is media path keying because it is multiplexed on the same port as RTP and does not require support in the signaling protocol.  ZRTP does not assume a Public Key Infrastructure (PKI) or require the complexity of certificates in end devices.  For the media session, ZRTP provides confidentiality, protection against man-in-the-middle (MiTM) attacks, and, in cases where the signaling protocol provides end-to-end integrity protection, authentication.  ZRTP can utilize a Session Description Protocol (SDP) attribute to provide discovery and authentication through the signaling channel.  To provide best effort SRTP, ZRTP utilizes normal RTP/AVP (Audio-Visual Profile) profiles. ZRTP secures media sessions that include a voice media stream and can also secure media sessions that do not include voice by using an optional digital signature.  This document is not an Internet  Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6189"/>
          <seriesInfo name="DOI" value="10.17487/RFC6189"/>
        </reference>
        <reference anchor="RFC6222" target="https://www.rfc-editor.org/info/rfc6222" quoteTitle="true" derivedAnchor="RFC6222">
          <front>
            <title>Guidelines for Choosing RTP Control Protocol (RTCP) Canonical Names (CNAMEs)</title>
            <author initials="A." surname="Begen" fullname="A. Begen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Perkins" fullname="C. Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t indent="0">The RTP Control Protocol (RTCP) Canonical Name (CNAME) is a persistent transport-level identifier for an RTP endpoint.  While the Synchronization Source (SSRC) identifier of an RTP endpoint may change if a collision is detected or when the RTP application is restarted, its RTCP CNAME is meant to stay unchanged, so that RTP endpoints can be uniquely identified and associated with their RTP media streams.  For proper functionality, RTCP CNAMEs should be unique within the participants of an RTP session.  However, the existing guidelines for choosing the RTCP CNAME provided in the RTP standard are insufficient to achieve this uniqueness.  This memo updates those guidelines to allow endpoints to choose unique RTCP CNAMEs.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6222"/>
          <seriesInfo name="DOI" value="10.17487/RFC6222"/>
        </reference>
        <reference anchor="RFC6347" target="https://www.rfc-editor.org/info/rfc6347" quoteTitle="true" derivedAnchor="RFC6347">
          <front>
            <title>Datagram Transport Layer Security Version 1.2</title>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Modadugu" fullname="N. Modadugu">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="January"/>
            <abstract>
              <t indent="0">This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6347"/>
          <seriesInfo name="DOI" value="10.17487/RFC6347"/>
        </reference>
        <reference anchor="RFC6454" target="https://www.rfc-editor.org/info/rfc6454" quoteTitle="true" derivedAnchor="RFC6454">
          <front>
            <title>The Web Origin Concept</title>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="December"/>
            <abstract>
              <t indent="0">This document defines the concept of an "origin", which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named "Origin", that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6454"/>
          <seriesInfo name="DOI" value="10.17487/RFC6454"/>
        </reference>
        <reference anchor="RFC6455" target="https://www.rfc-editor.org/info/rfc6455" quoteTitle="true" derivedAnchor="RFC6455">
          <front>
            <title>The WebSocket Protocol</title>
            <author initials="I." surname="Fette" fullname="I. Fette">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Melnikov" fullname="A. Melnikov">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="December"/>
            <abstract>
              <t indent="0">The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6455"/>
          <seriesInfo name="DOI" value="10.17487/RFC6455"/>
        </reference>
        <reference anchor="RFC6749" target="https://www.rfc-editor.org/info/rfc6749" quoteTitle="true" derivedAnchor="RFC6749">
          <front>
            <title>The OAuth 2.0 Authorization Framework</title>
            <author initials="D." surname="Hardt" fullname="D. Hardt" role="editor">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t indent="0">The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6749"/>
          <seriesInfo name="DOI" value="10.17487/RFC6749"/>
        </reference>
        <reference anchor="RFC7022" target="https://www.rfc-editor.org/info/rfc7022" quoteTitle="true" derivedAnchor="RFC7022">
          <front>
            <title>Guidelines for Choosing RTP Control Protocol (RTCP) Canonical Names (CNAMEs)</title>
            <author initials="A." surname="Begen" fullname="A. Begen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Perkins" fullname="C. Perkins">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="September"/>
            <abstract>
              <t indent="0">The RTP Control Protocol (RTCP) Canonical Name (CNAME) is a persistent transport-level identifier for an RTP endpoint.  While the Synchronization Source (SSRC) identifier of an RTP endpoint may change if a collision is detected or when the RTP application is restarted, its RTCP CNAME is meant to stay unchanged, so that RTP endpoints can be uniquely identified and associated with their RTP media streams.</t>
              <t indent="0">For proper functionality, RTCP CNAMEs should be unique within the participants of an RTP session.  However, the existing guidelines for choosing the RTCP CNAME provided in the RTP standard (RFC 3550) are insufficient to achieve this uniqueness.  RFC 6222 was published to update those guidelines to allow endpoints to choose unique RTCP CNAMEs.  Unfortunately, later investigations showed that some parts of the new algorithms were unnecessarily complicated and/or ineffective.  This document addresses these concerns and replaces RFC 6222.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7022"/>
          <seriesInfo name="DOI" value="10.17487/RFC7022"/>
        </reference>
        <reference anchor="RFC7033" target="https://www.rfc-editor.org/info/rfc7033" quoteTitle="true" derivedAnchor="RFC7033">
          <front>
            <title>WebFinger</title>
            <author initials="P." surname="Jones" fullname="P. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G." surname="Salgueiro" fullname="G. Salgueiro">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Smarr" fullname="J. Smarr">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2013" month="September"/>
            <abstract>
              <t indent="0">This specification defines the WebFinger protocol, which can be used to discover information about people or other entities on the Internet using standard HTTP methods.  WebFinger discovers information for a URI that might not be usable as a locator otherwise, such as account or email URIs.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7033"/>
          <seriesInfo name="DOI" value="10.17487/RFC7033"/>
        </reference>
        <reference anchor="RFC7675" target="https://www.rfc-editor.org/info/rfc7675" quoteTitle="true" derivedAnchor="RFC7675">
          <front>
            <title>Session Traversal Utilities for NAT (STUN) Usage for Consent Freshness</title>
            <author initials="M." surname="Perumal" fullname="M. Perumal">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Wing" fullname="D. Wing">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Ravindranath" fullname="R. Ravindranath">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Reddy" fullname="T. Reddy">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Thomson" fullname="M. Thomson">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="October"/>
            <abstract>
              <t indent="0">To prevent WebRTC applications, such as browsers, from launching attacks by sending traffic to unwilling victims, periodic consent to send needs to be obtained from remote endpoints.</t>
              <t indent="0">This document describes a consent mechanism using a new Session Traversal Utilities for NAT (STUN) usage.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7675"/>
          <seriesInfo name="DOI" value="10.17487/RFC7675"/>
        </reference>
        <reference anchor="RFC8445" target="https://www.rfc-editor.org/info/rfc8445" quoteTitle="true" derivedAnchor="RFC8445">
          <front>
            <title>Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal</title>
            <author initials="A." surname="Keranen" fullname="A. Keranen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Holmberg" fullname="C. Holmberg">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J." surname="Rosenberg" fullname="J. Rosenberg">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="July"/>
            <abstract>
              <t indent="0">This document describes a protocol for Network Address Translator (NAT) traversal for UDP-based communication.  This protocol is called Interactive Connectivity Establishment (ICE).  ICE makes use of the Session Traversal Utilities for NAT (STUN) protocol and its extension, Traversal Using Relay NAT (TURN).</t>
              <t indent="0">This document obsoletes RFC 5245.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8445"/>
          <seriesInfo name="DOI" value="10.17487/RFC8445"/>
        </reference>
        <reference anchor="RFC8825" target="https://www.rfc-editor.org/info/rfc8825" quoteTitle="true" derivedAnchor="RFC8825">
          <front>
            <title>Overview: Real-Time Protocols for Browser-Based Applications</title>
            <author initials="H." surname="Alvestrand" fullname="Harald T. Alvestrand">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8825"/>
          <seriesInfo name="DOI" value="10.17487/RFC8825"/>
        </reference>
        <reference anchor="RFC8827" target="https://www.rfc-editor.org/info/rfc8827" quoteTitle="true" derivedAnchor="RFC8827">
          <front>
            <title>WebRTC Security Architecture</title>
            <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8827"/>
          <seriesInfo name="DOI" value="10.17487/RFC8827"/>
        </reference>
        <reference anchor="RFC8828" target="https://www.rfc-editor.org/info/rfc8828" quoteTitle="true" derivedAnchor="RFC8828">
          <front>
            <title>WebRTC IP Address Handling Requirements</title>
            <author initials="J" surname="Uberti" fullname="Justin Uberti">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="G" surname="Shieh" fullname="Guo-wei Shieh">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="January" year="2021"/>
          </front>
          <seriesInfo name="RFC" value="8828"/>
          <seriesInfo name="DOI" value="10.17487/RFC8828"/>
        </reference>
        <reference anchor="SWF" target="https://www.adobe.com/content/dam/acom/en/devnet/pdf/swf-file-format-spec.pdf" quoteTitle="true" derivedAnchor="SWF">
          <front>
            <title>SWF File Format Specification Version 19</title>
            <author/>
            <date month="April" year="2013"/>
          </front>
        </reference>
        <reference anchor="whitten-johnny" target="https://www.usenix.org/legacy/publications/library/proceedings/sec99/whitten.html" quoteTitle="true" derivedAnchor="whitten-johnny">
          <front>
            <title>Why Johnny Can't Encrypt: A Usability Evaluation of PGP 5.0</title>
            <author initials="A." surname="Whitten">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="J.D." surname="Tygar">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="August" year="1999"/>
          </front>
          <refcontent>Proceedings of the 8th USENIX Security Symposium</refcontent>
        </reference>
      </references>
    </references>
    <section numbered="false" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">
            <contact fullname="Bernard Aboba"/>, <contact fullname="Harald             Alvestrand"/>, <contact fullname="Dan Druta"/>,
            <contact fullname="Cullen Jennings"/>, <contact fullname="Alan             Johnston"/>, <contact fullname="Hadriel Kaplan"/> (<xref target="sec.ice" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>), <contact fullname="Matthew Kaufman"/>,
            <contact fullname="Martin Thomson"/>, <contact fullname="Magnus Westerlund"/>.
      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-address">Author's Address</name>
      <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
        <organization showOnFrontPage="true">Mozilla</organization>
        <address>
          <email>ekr@rtfm.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
