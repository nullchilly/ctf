<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="info" consensus="true" docName="draft-ietf-suit-architecture-16" indexInclude="true" ipr="trust200902" number="9019" prepTime="2021-04-30T22:00:00" scripts="Common,Latin" sortRefs="true" submissionType="IETF" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-suit-architecture-16" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9019" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="IoT Firmware Update Architecture">A Firmware Update Architecture for Internet of Things</title>
    <seriesInfo name="RFC" value="9019" stream="IETF"/>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization showOnFrontPage="true">Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization showOnFrontPage="true">Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization showOnFrontPage="true">Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="M." surname="Meriac" fullname="Milosch Meriac">
      <organization showOnFrontPage="true">Consultant</organization>
      <address>
        <email>milosch@meriac.com</email>
      </address>
    </author>
    <date month="04" year="2021"/>
    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>IoT</keyword>
    <keyword>update</keyword>
    <keyword>software</keyword>
    <keyword>firmware</keyword>
    <keyword>constrained</keyword>
    <keyword>Secure</keyword>
    <keyword>Boot</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">Vulnerabilities in Internet of Things (IoT) devices have raised
 the need for a reliable and secure firmware update mechanism
 suitable for devices with resource constraints. Incorporating such an
 update mechanism is a fundamental requirement for fixing vulnerabilities,
 but it also enables other important capabilities such as updating
 configuration settings
 and adding new functionality.</t>
      <t indent="0" pn="section-abstract-2">In addition to the definition of terminology and an architecture,
 this document provides the motivation for the standardization of a manifest format
 as a transport-agnostic means for describing and protecting firmware
 updates.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for informational purposes.  
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by the
            Internet Engineering Steering Group (IESG).  Not all documents
            approved by the IESG are candidates for any level of Internet
            Standard; see Section 2 of RFC 7841. 
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9019" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2021 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Simplified BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Simplified BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-conventions-and-terminology">Conventions and Terminology</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terms">Terms</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-stakeholders">Stakeholders</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-functions">Functions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-architecture">Architecture</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-invoking-the-firmware">Invoking the Firmware</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-bootloader">The Bootloader</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-types-of-iot-devices">Types of IoT Devices</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-single-mcu">Single MCU</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-single-cpu-with-partitionin">Single CPU with Partitioning between Secure Mode and Normal Mode</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-symmetric-multiple-cpus">Symmetric Multiple CPUs</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.4">
                <t indent="0" pn="section-toc.1-1.5.2.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dual-cpu-shared-memory">Dual CPU, Shared Memory</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.5">
                <t indent="0" pn="section-toc.1-1.5.2.5.1"><xref derivedContent="5.5" format="counter" sectionFormat="of" target="section-5.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dual-cpu-other-bus">Dual CPU, Other Bus</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-manifests">Manifests</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-securing-firmware-updates">Securing Firmware Updates</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example">Example</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">Firmware updates can help to fix security vulnerabilities, and
 performing updates is an important building block in securing
 IoT devices. Due to rising concerns about insecure IoT devices, the Internet
 Architecture Board (IAB) organized the Internet of Things Software Update (IoTSU) Workshop <xref target="RFC8240" format="default" sectionFormat="of" derivedContent="RFC8240"/> to take a look at
 the bigger picture. The workshop revealed a number of challenges for developers
 and led to the formation of the IETF
 Software Updates for Internet of Things (SUIT) Working Group.</t>
      <t indent="0" pn="section-1-2">Developing secure IoT devices is not an easy
 task, and supporting a firmware update solution requires skillful
 engineers. Once devices are deployed, firmware updates play a
 critical part in their life-cycle management, particularly when devices have a
 long lifetime or are deployed in remote or inaccessible areas where manual
 intervention is cost prohibitive or otherwise difficult. Firmware updates
 for IoT devices are expected to work automatically, i.e., without user
 involvement. Conversely, non-IoT devices are expected to account for user
 preferences and consent when scheduling updates.
 Automatic updates that do not require human intervention
 are key to a scalable solution for fixing software vulnerabilities.</t>
      <t indent="0" pn="section-1-3">Firmware updates are done not only to fix bugs                                                  but also to add new functionality and to reconfigure
 the device to work in new environments or to behave differently in
 an already-deployed context.</t>
      <t indent="0" pn="section-1-4">The manifest specification has to allow the following:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1-5">
        <li pn="section-1-5.1">The firmware image is authenticated and integrity protected.
 Attempts to flash a maliciously modified firmware image or an image from
 an unknown, untrusted source must be prevented. This document
 uses asymmetric cryptography in examples because it is the preferred approach by
 many IoT deployments. The use of symmetric credentials is also supported
 and can be used by very constrained IoT devices.</li>
        <li pn="section-1-5.2">The firmware image can be confidentiality protected so that
 attempts by an adversary to recover the plaintext binary can
 be mitigated or at least made more difficult. Obtaining the firmware is often one of
 the first steps to mounting an attack since it gives the adversary
 valuable insights into the software libraries used, configuration
 settings, and generic functionality. Even though reverse
 engineering the binary can be a tedious process, modern reverse
 engineering frameworks have made this task a lot easier.</li>
      </ul>
      <t indent="0" pn="section-1-6">Authentication and integrity protection of firmware images must be used in a deployment, but the confidential protection of firmware is optional.</t>
      <t indent="0" pn="section-1-7">While the standardization work has been informed by and optimized for firmware
 update use cases of Class 1 devices (according to the device class
 definitions in RFC 7228 <xref target="RFC7228" format="default" sectionFormat="of" derivedContent="RFC7228"/>), there is nothing in
 the architecture that restricts its use to only these constrained IoT devices.
 Moreover, this architecture is not limited to managing firmware and software updates
 but can also be applied to managing the delivery of arbitrary data, such
 as configuration information and keys. Unlike higher-end devices, like
 laptops and desktop PCs, many IoT devices do not have user interfaces; therefore,
 support for unattended updates is essential for the design
 of a practical solution. Constrained IoT devices often use a
 software engineering model where a developer is responsible for creating
 and compiling all software running on the device into a single, monolithic
 firmware image. On higher-end devices, application software is, on the other
 hand, often downloaded separately and even obtained from developers different
 from the developers of the lower-level software. The details for how to obtain
 those application-layer software binaries then depend heavily on the platform,
 the programming language used, and the sandbox in which the software is executed.</t>
      <t indent="0" pn="section-1-8">While the IETF standardization work has been focused on the
 manifest format, a fully interoperable solution needs more than a standardized
 manifest. For example, protocols for transferring firmware images
 and manifests to the device need to be available, as well as the status tracker
 functionality. Devices also require a mechanism to discover the status
 tracker(s) and/or firmware servers, for example, using preconfigured hostnames
 or DNS-based Service Discovery (DNS-SD) <xref target="RFC6763" format="default" sectionFormat="of" derivedContent="RFC6763"/>.
 These building blocks have been developed by various organizations
 under the umbrella of an IoT device management solution. The Lightweight Machine-to-Machine (LwM2M) protocol <xref target="LwM2M" format="default" sectionFormat="of" derivedContent="LwM2M"/> is one
 IoT device management protocol.</t>
      <t indent="0" pn="section-1-9">However, there are several areas that (partially) fall outside the scope of the IETF
 and other standards organizations but need to be considered by firmware authors
 as well as device and network operators. Here are some of them, as highlighted during
 the IoTSU workshop:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-1-10">
        <li pn="section-1-10.1">Installing firmware updates in a robust fashion so that the
 update does not break the device functionality of the environment
 in which this device operates. This requires proper testing and offering of recovery strategies when a firmware update is unsuccessful.</li>
        <li pn="section-1-10.2">Making firmware updates available in a timely fashion considering the
 complexity of the decision-making process for updating devices,
 potential recertification requirements, the length of a supply chain
 an update needs to go through before it reaches the end customer,
 and the need for user consent to install updates.</li>
        <li pn="section-1-10.3">Ensuring an energy-efficient design of a battery-powered IoT device; a
 firmware update, particularly radio communication and writing the firmware image
 to flash, is an energy-intensive task for a device.</li>
        <li pn="section-1-10.4">Creating incentives for device operators to use a firmware update mechanism and to
 require its integration from IoT device vendors.</li>
        <li pn="section-1-10.5">Ensuring that firmware updates addressing critical flaws can be
 obtained even after a product is discontinued or a vendor goes out of
 business.</li>
      </ul>
      <t indent="0" pn="section-1-11">This document starts with a terminology list followed by a description of the architecture.
 We then explain the bootloader and how it integrates with the firmware update mechanism.
 Subsequently, we offer a categorization of IoT devices in terms of their hardware
 capabilities relevant for firmware updates. Next, we talk about the manifest structure
 and how to use it to secure firmware updates. We conclude with a more detailed example of a message flow for distributing a firmware image to a device.</t>
    </section>
    <section anchor="terminology" numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-conventions-and-terminology">Conventions and Terminology</name>
      <section anchor="terms" numbered="true" toc="include" removeInRFC="false" pn="section-2.1">
        <name slugifiedName="name-terms">Terms</name>
        <t indent="0" pn="section-2.1-1">This document uses the following terms:</t>
        <dl newline="true" indent="3" spacing="normal" pn="section-2.1-2">
          <dt pn="section-2.1-2.1">Firmware Image:</dt>
          <dd pn="section-2.1-2.2">
            <t indent="0" pn="section-2.1-2.2.1">The firmware image, or simply the "image", is a binary
 that may contain the complete software of a device or a subset of
 it. The firmware image may consist of multiple images if
 the device contains more than one microcontroller. Often,
 it is also a compressed archive that contains code,
 configuration data, and even the entire file system. The
 image may consist of a differential update for performance
 reasons.  </t>
            <t indent="0" pn="section-2.1-2.2.2">
 The terms "firmware image", "firmware", and "image" are used in this
 document and are interchangeable. We use the term "application firmware
 image" to differentiate it from a firmware image that
 contains the bootloader. An application firmware image, as the
 name indicates, contains the application program often including
 all the necessary code to run it (such as protocol stacks and
 an embedded operating system (OS)).</t>
          </dd>
          <dt pn="section-2.1-2.3">Manifest:</dt>
          <dd pn="section-2.1-2.4">The manifest contains metadata about the firmware
 image. The manifest is protected against modification and
 provides information about the author.</dd>
          <dt pn="section-2.1-2.5">Microcontroller:</dt>
          <dd pn="section-2.1-2.6">A microcontroller unit (MCU) is a
 compact integrated circuit designed for use in embedded systems.
 A typical microcontroller includes a processor, memory (RAM and
 flash), input/output (I/O) ports, and other features connected via
 some bus on a single chip. The term "system on chip" (SoC) is
 often used interchangeably with MCU, but MCU tends to imply more
 limited peripheral functions.</dd>
          <dt pn="section-2.1-2.7">Rich Execution Environment (REE):</dt>
          <dd pn="section-2.1-2.8"> An environment that is provided
 and governed by a typical OS (e.g., Linux, Windows, Android, iOS),
 potentially in conjunction with other supporting operating systems
 and hypervisors; it is outside of the Trusted Execution Environment (TEE).  This environment and the applications running on it are considered untrusted.</dd>
          <dt pn="section-2.1-2.9">Software:</dt>
          <dd pn="section-2.1-2.10"> Similar to firmware but typically dynamically loaded by an
 OS. Used interchangeably with firmware in this document.</dd>
          <dt pn="section-2.1-2.11">System on Chip (SoC):</dt>
          <dd pn="section-2.1-2.12"> An SoC is an integrated circuit that
 contains all components of a computer, such as the CPU, memory,
 I/O ports, secondary storage, a bus to connect the
 components, and other hardware blocks of logic.</dd>
          <dt pn="section-2.1-2.13">Trust Anchor:</dt>
          <dd pn="section-2.1-2.14"> A trust anchor, as defined in RFC 6024 <xref target="RFC6024" format="default" sectionFormat="of" derivedContent="RFC6024"/>, represents
 an authoritative entity via a public key and associated data.  The
 public key is used to verify digital signatures, and the associated
 data is used to constrain the types of information for which the
 trust anchor is authoritative.</dd>
          <dt pn="section-2.1-2.15">Trust Anchor Store:</dt>
          <dd pn="section-2.1-2.16"> A trust anchor store, as defined in <xref target="RFC6024" format="default" sectionFormat="of" derivedContent="RFC6024"/>,
 is a set of one or more trust anchors stored in a device.  A device
 may have more than one trust anchor store, each of which may be used
 by one or more applications. A trust anchor store must resist
 modification against unauthorized insertion, deletion, and modification.</dd>
          <dt pn="section-2.1-2.17">Trusted Applications (TAs):</dt>
          <dd pn="section-2.1-2.18"> An application component that runs in
 a TEE.</dd>
          <dt pn="section-2.1-2.19">Trusted Execution Environments (TEEs):</dt>
          <dd pn="section-2.1-2.20">An execution environment
 that runs alongside of, but is isolated from, an REE. For more
 information about TEEs, see <xref target="I-D.ietf-teep-architecture" format="default" sectionFormat="of" derivedContent="TEEP-ARCH"/>.</dd>
        </dl>
      </section>
      <section anchor="stakeholders" numbered="true" toc="include" removeInRFC="false" pn="section-2.2">
        <name slugifiedName="name-stakeholders">Stakeholders</name>
        <t indent="0" pn="section-2.2-1">The following stakeholders are used in this document:</t>
        <dl newline="true" indent="3" spacing="normal" pn="section-2.2-2">
          <dt pn="section-2.2-2.1">Author:</dt>
          <dd pn="section-2.2-2.2">The author is the entity that creates the firmware image.
 There may be multiple authors involved in producing firmware running
 on an IoT device. <xref target="device" format="default" sectionFormat="of" derivedContent="Section 5"/> talks about those IoT device deployment cases.</dd>
          <dt pn="section-2.2-2.3">Device Operator:</dt>
          <dd pn="section-2.2-2.4"> The device operator is responsible for the day-to-day operation
 of a fleet of IoT devices. Customers of IoT devices, as the owners of
 IoT devices (such as enterprise customers or end users), interact
 with their IoT devices indirectly through the device operator via
 the Web or smartphone apps.</dd>
          <dt pn="section-2.2-2.5">Network Operator:</dt>
          <dd pn="section-2.2-2.6"> The network operator is responsible for the operation of a
 network to which IoT devices connect.</dd>
          <dt pn="section-2.2-2.7">Trust Provisioning Authority (TPA):</dt>
          <dd pn="section-2.2-2.8">The TPA distributes
 trust anchors and authorization policies to devices and various stakeholders.
 The TPA may also delegate rights to stakeholders. Typically, the
 original equipment manufacturer (OEM) or original design manufacturer
 (ODM) will act as a TPA; however, complex supply chains may require
 a different design. In some cases, the TPA may decide to remain in
 full control over the firmware update process of their products.</dd>
          <dt pn="section-2.2-2.9">User:</dt>
          <dd pn="section-2.2-2.10">The end user of a device. The user may interact with devices
 via the Web or smartphone apps, as well as through direct user interfaces.</dd>
        </dl>
      </section>
      <section anchor="functions" numbered="true" toc="include" removeInRFC="false" pn="section-2.3">
        <name slugifiedName="name-functions">Functions</name>
        <dl newline="true" indent="3" spacing="normal" pn="section-2.3-1">
          <dt pn="section-2.3-1.1">(IoT) Device:</dt>
          <dd pn="section-2.3-1.2"> A device refers to the entire IoT product, which
 consists of one or many MCUs, sensors, and/or actuators. Many IoT
 devices sold today contain multiple MCUs; therefore, a single
 device may need to obtain more than one firmware image and
 manifest to successfully perform an update.</dd>
          <dt pn="section-2.3-1.3">Status Tracker:</dt>
          <dd pn="section-2.3-1.4">
            <t indent="0" pn="section-2.3-1.4.1">The status tracker has a client and a server component
 and performs three tasks:</t>
            <ol type="1" indent="adaptive" spacing="normal" start="1" pn="section-2.3-1.4.2">
 <li pn="section-2.3-1.4.2.1" derivedCounter="1.">It communicates the availability of a new firmware version. This
    information will flow from the server to the client. </li>
              <li pn="section-2.3-1.4.2.2" derivedCounter="2.">It conveys information about the software and hardware characteristics of
    the device. The information flow is from the client to the server. </li>
              <li pn="section-2.3-1.4.2.3" derivedCounter="3.">It can remotely trigger the firmware update process. The
    information flow is from the server to the client.  </li>
            </ol>
            <t indent="0" pn="section-2.3-1.4.3">
 For example, a device operator may want to read the installed firmware
 version number running on the device and information
 about available flash memory. Once an update has been triggered, the device
 operator may want to obtain information about the state of the firmware
 update. If errors occurred, the device operator may want to
 troubleshoot problems by first obtaining diagnostic information (typically
 using a device management protocol).  </t>
            <t indent="0" pn="section-2.3-1.4.4">
 We make no
 assumptions about where the server-side component is deployed.
 The deployment of status trackers is flexible: they may
     be found at cloud-based servers or on-premise servers,
     or they may be embedded in edge computing devices. A status tracker server component may even be
 deployed on an IoT device. For example, if the IoT device contains
 multiple MCUs, then the main MCU may act as a status tracker towards the
 other MCUs. Such deployment is useful when updates have to be
 synchronized across MCUs.  </t>
            <t indent="0" pn="section-2.3-1.4.5">
 The status tracker may be operated by any suitable stakeholder,
 typically the author, device operator, or network operator.</t>
          </dd>
          <dt pn="section-2.3-1.5">Firmware Consumer:</dt>
          <dd pn="section-2.3-1.6"> The firmware consumer is the recipient of the
 firmware image and the manifest. It is responsible for parsing
 and verifying the received manifest and for storing the obtained
 firmware image. The firmware consumer plays the role of the
 update component on the IoT device, typically running in the
 application firmware. It interacts with the firmware server and
 the status tracker client (locally).</dd>
          <dt pn="section-2.3-1.7">Firmware Server:</dt>
          <dd pn="section-2.3-1.8"> The firmware server stores firmware images and
 manifests and distributes them to IoT devices. Some deployments
 may require a store-and-forward concept, which requires storing
 the firmware images and/or manifests on more than one entity before they reach the device. There is typically some interaction between the
 firmware server and the status tracker, and these two entities are often
 physically separated on different devices for scalability reasons.</dd>
          <dt pn="section-2.3-1.9">Bootloader:</dt>
          <dd pn="section-2.3-1.10"> A bootloader is a piece of software that is
 executed once a microcontroller has been reset. It is
 responsible for deciding what code to execute.</dd>
        </dl>
      </section>
    </section>
    <section anchor="architecture" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-architecture">Architecture</name>
      <t indent="0" pn="section-3-1">More devices than ever before are connected to the Internet,
 which drives the need for firmware updates to be provided over the
 Internet rather than through traditional interfaces, such as USB or
 RS-232. Sending updates over the Internet requires the device to fetch
 the new firmware image as well as the manifest.</t>
      <t indent="0" pn="section-3-2">Hence, the following components are necessary on a device for a firmware
 update solution:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3-3">
        <li pn="section-3-3.1">The Internet protocol stack for firmware downloads. 


Firmware images are often multiple kilobytes, sometimes
 exceeding one hundred kilobytes, for low-end IoT devices and can even be
 several megabytes for IoT devices running full-fledged operating systems
 like Linux. The protocol mechanism for retrieving these images needs
 to offer features like congestion control, flow control, fragmentation
 and reassembly, and mechanisms to resume interrupted or corrupted transfers.</li>
        <li pn="section-3-3.2">The capability to write the received firmware image to
 persistent storage (most likely flash memory).</li>
        <li pn="section-3-3.3">A manifest parser with code to verify a digital
 signature or a message authentication code (MAC).</li>
        <li pn="section-3-3.4">The ability to unpack, decompress, and/or decrypt the
 received firmware image.</li>
        <li pn="section-3-3.5">A status tracker.</li>
      </ul>
      <t indent="0" pn="section-3-4">The features listed above are most likely provided by code in the application firmware
 image running
 on the device rather than by the bootloader itself. Note that
 cryptographic algorithms will likely run in a trusted execution
 environment on a separate MCU in a hardware security module or in a secure element
 rather than in the same context as the application code.</t>
      <t indent="0" pn="section-3-5"><xref target="arch-figure" format="default" sectionFormat="of" derivedContent="Figure 1"/> shows the architecture where a
 firmware image is created by an author and made available to a firmware
 server. For security reasons, the author will not have the permissions to
 upload firmware images to the firmware server and to initiate an update directly.
 Instead, authors will make firmware images available to the device operators. Note that
 there may be a longer supply chain involved to pass software updates from the author all
 the way to the authorizing party, which can then finally make a decision to deploy it with IoT devices.</t>
      <t indent="0" pn="section-3-6">As a first step in the firmware update process, the status tracker
 server needs to inform the status tracker client that a new firmware
 update is available. This can be accomplished via polling (client initiated), 
 push notifications (server initiated), or more complex mechanisms (such as a hybrid approach):</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3-7">
        <li pn="section-3-7.1">Client-initiated updates take the form of a status tracker client proactively
 checking (polling) for updates.</li>
        <li pn="section-3-7.2">With server-initiated updates, the server-side component of the status tracker
learns about a new firmware version and determines which devices qualify for a
firmware update. Once the relevant devices have been selected, the
status tracker informs these devices, and the firmware consumers obtain those
images and manifests. Server-initiated updates are important because they allow a quick
response time. Note that in this mode, the client-side status tracker needs to be reachable by the server-side
component. This may require devices to keep reachability information on the
server side up to date and the state at NATs and stateful packet filtering
firewalls alive.</li>
        <li pn="section-3-7.3">Using a hybrid approach, the server side of the status tracker
pushes update availability notifications to the client side and requests that
the firmware consumer pull the manifest and the firmware image from the
firmware server.</li>
      </ul>
      <t indent="0" pn="section-3-8">Once the device operator triggers an update via the status tracker, it will keep
track of the update process on the device. This allows the device operator to know what
devices have received an update and which of them are still pending an update.</t>
      <t indent="0" pn="section-3-9">Firmware images can be conveyed to devices in a variety of ways,
including USB,  Universal Asynchronous Receiver Transmitter (UART), WiFi, Bluetooth Low Energy (BLE), low-power WAN technologies, mesh networks and many more.
At the application layer,
a variety of protocols are also available: Message Queuing Telemetry Transport (MQTT), Constrained Application Protocol (CoAP), and HTTP are the
most popular application-layer protocols used by IoT devices. This architecture
does not make assumptions about how the firmware images are distributed to the
devices and therefore aims to support all these technologies.</t>
      <t indent="0" pn="section-3-10">In some cases, it may be desirable to distribute firmware images using a multicast
or broadcast protocol. This architecture does not make recommendations for any
such protocol. However, given that broadcast may be desirable for some networks,
updates must cause the least disruption possible both in the metadata
and firmware transmission. For an update to be broadcast friendly, it cannot rely on link-layer, network-layer, or transport-layer security. A solution has
to rely on security protection applied to the manifest and firmware image
instead. In addition,
the same manifest must be deliverable to many devices, both those
to which it applies and those to which it does not, without a
chance that the wrong device will accept the update. Considerations
that apply to network broadcasts apply equally to the use of
third-party content distribution networks for payload distribution.</t>
      <figure anchor="arch-figure" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-architecture-2">Architecture</name>
        <artwork name="" type="" align="center" alt="" pn="section-3-11.1">
                                                      +----------+
                                                      |          |
                                                      |  Author  |
                                                      |          |
                                                      +----------+
                       Firmware + Manifest                 |
              +----------------------------------+         | Firmware +
              |                                  |         | Manifest
              |                               ---+-------  |
              |                           ----   |       --|-
              |                         //+----------+     | \\
             -+--                      // |          |     |   \
        ----/ |  ----                |/   | Firmware |&lt;-+  |    \
      //      |      \\              |    | Server   |  |  |     \
     /        |        \             /    |          |  +  +      \
    /         |         \           /     +----------+   \ /       |
   / +--------+--------+ \         /                      |        |
  /  |        v        |  \       /                       v        |
 |   | +------------+  |   |     |          +----------------+      |
 |   | |  Firmware  |  |   |     |          |     Device     |      |
 |   | |  Consumer  |  |   |     |          |     Management |      |
|    | +------------+  |    |    |          |                |      |
|    | +------------+  |    |    |          |    +--------+  |      |
|    | |  Status    |&lt;-+--------------------+-&gt;  |        |  |      |
|    | |  Tracker   |  |    |    |          |    | Status |  |      |
|    | |  Client    |  |    |    |          |    | Tracker|  |     |
 |   | +------------+  |   |     |          |    | Server |  |     |
 |   |    Device       |   |      |         |    +--------+  |     |
 |   +-----------------+   |       \        |                |    /
  \                       /         \       +----------------+   /
   \       Network       /           \                          /
    \     Operator      /             \     Device Operator    /
     \\               //               \\                    //
        ----     ----                     ----           ----
            -----                             -----------
</artwork>
      </figure>
      <t indent="0" pn="section-3-12">Firmware images and manifests may be conveyed as a bundle or detached. The
manifest format must support both approaches.</t>
      <t indent="0" pn="section-3-13">For distribution as a bundle, the firmware image is embedded into the manifest.
This is a useful approach for deployments where devices are not connected
to the Internet and cannot contact a dedicated firmware server for the firmware
download. It is also applicable when the firmware update happens via USB sticks or short-range radio technologies (such as Bluetooth Smart).</t>
      <t indent="0" pn="section-3-14">Alternatively, the manifest is distributed detached from the firmware image.
Using this approach, the firmware consumer is presented with the manifest first
and then needs to obtain one or more firmware images as dictated in the
manifest.</t>
      <t indent="0" pn="section-3-15">The pre-authorization step involves verifying whether the entity
signing the manifest is indeed authorized to perform an update.
The firmware consumer must also determine whether it should fetch and
process a firmware image, which is referenced in a manifest.</t>
      <t indent="0" pn="section-3-16">A dependency resolution phase is needed when more than one
component can be updated or when a differential update is used.
The necessary dependencies must be available prior to installation.</t>
      <t indent="0" pn="section-3-17">The download step is the process of acquiring a local copy of the
firmware image.  When the download is client initiated, this means
that the firmware consumer chooses when a download occurs and initiates
the download process.  When a download is server initiated,
this means that the status tracker tells
the device when to download or that it initiates the transfer
directly to the firmware consumer. For example, a download from an
HTTP/1.1-based firmware server is client initiated. Pushing a manifest
and firmware image to the Package Resource of the LwM2M
Firmware Update Object <xref target="LwM2M" format="default" sectionFormat="of" derivedContent="LwM2M"/> is a server-initiated update.</t>
      <t indent="0" pn="section-3-18">If the firmware consumer has downloaded a new firmware image and is ready to
install it, to initiate the installation, it may</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3-19">
        <li pn="section-3-19.1">need to wait for a trigger from the status tracker,</li>
        <li pn="section-3-19.2">trigger the update automatically, or</li>
        <li pn="section-3-19.3">go through a more complex decision-making process to determine  
      the appropriate timing for an update.</li>
      </ul>
      <t indent="0" pn="section-3-20"> Sometimes the final decision may
require confirmation of the user of the device for safety reasons.</t>
      <t indent="0" pn="section-3-21">Installation is the act of processing the payload into a format that
the IoT device can recognize, and the bootloader is responsible for
then booting from the newly installed firmware image.
This process is different when a bootloader is not involved. For example,
when an application is updated in a full-featured OS, the
updater may halt and restart the application in isolation. 
Devices must not fail when a disruption, such as a power failure or network
interruption, occurs during the update process.</t>
    </section>
    <section anchor="invocation" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-invoking-the-firmware">Invoking the Firmware</name>
      <t indent="0" pn="section-4-1"><xref target="architecture" format="default" sectionFormat="of" derivedContent="Section 3"/> describes the steps for getting the firmware image and the manifest
from the author to the firmware consumer on the IoT device. Once the firmware consumer
has retrieved and successfully processed the manifest and the firmware image, it needs
to invoke the new firmware image. This is managed in many different ways depending
on the type of device, but it typically involves halting the current version of the
firmware, handing over control to firmware with a higher privilege or trust level
(the firmware verifier),
verifying the new firmware's authenticity and integrity, and then invoking it.</t>
      <t indent="0" pn="section-4-2">In an execute-in-place microcontroller, this is often done by rebooting into a
bootloader (simultaneously halting the application and handing over control to the higher
privilege level) then executing a secure boot process (verifying and invoking
the new image).</t>
      <t indent="0" pn="section-4-3">In a rich OS, this may be done by halting one or more processes and then invoking
new applications. In some OSes, this implicitly involves the kernel verifying
the code signatures on the new applications.</t>
      <t indent="0" pn="section-4-4">The invocation process is security sensitive. An attacker will typically try to
retrieve a firmware image from the device for reverse engineering or will try to get
the firmware verifier to execute an attacker-modified firmware image. Therefore,
firmware verifier will have to perform security checks on the
firmware image before it can be invoked. These security checks by the
firmware verifier happen in addition to the security checks that took place
when the firmware image and the manifest were downloaded by the firmware consumer.</t>
      <t indent="0" pn="section-4-5">The overlap between the firmware consumer and the firmware verifier
functionality comes in two forms, namely:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4-6">
        <li pn="section-4-6.1">A firmware verifier must verify the firmware image it boots as
part of the secure boot process. Doing so requires metadata to be
stored alongside the firmware image so that the firmware verifier can
cryptographically verify the firmware image before booting it to
ensure it has not been tampered with or replaced. This metadata
used by the firmware verifier may well be the same manifest obtained with the
firmware image during the update process.</li>
        <li pn="section-4-6.2">An IoT device needs a recovery strategy in case the firmware
update/invocation process fails. The recovery
strategy may include storing two or more application firmware images
on the device or offering the ability to invoke a recovery image to
perform the firmware update process again using firmware updates over
serial, USB, or even wireless connectivity like Bluetooth Smart.
In the latter case, the firmware consumer functionality is contained in the
recovery image and requires the necessary functionality for
executing the firmware update process, including manifest parsing.</li>
      </ul>
      <t indent="0" pn="section-4-7">While this document assumes that the firmware verifier itself is
distinct from the role of the firmware consumer and therefore does not
manage the firmware update process, this is not a requirement, and these
roles may be combined in practice.</t>
      <t indent="0" pn="section-4-8">Using a bootloader as the firmware verifier requires some special
considerations, particularly when the bootloader
implements the robustness requirements identified by the IoTSU workshop <xref target="RFC8240" format="default" sectionFormat="of" derivedContent="RFC8240"/>.</t>
      <section anchor="bootloader" numbered="true" toc="include" removeInRFC="false" pn="section-4.1">
        <name slugifiedName="name-the-bootloader">The Bootloader</name>
        <t indent="0" pn="section-4.1-1">In most cases, the MCU must restart in order to hand over control to the bootloader.
Once the MCU has initiated a restart, the bootloader determines whether a newly available
firmware image should be executed. If the bootloader concludes that the newly available
firmware image is invalid, a recovery strategy is necessary. There are only two
approaches for recovering from invalid firmware: either the bootloader must be able
to select different, valid firmware or it must be able to obtain new, valid firmware.
Both of these approaches have implications for the architecture of the update system.</t>
        <t indent="0" pn="section-4.1-2">Assuming the first approach, there are (at least) three firmware images available
on the device:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1-3">
          <li pn="section-4.1-3.1">First, the bootloader is also firmware. If a bootloader is updatable, then its
firmware image is treated like any other application firmware image.</li>
          <li pn="section-4.1-3.2">Second, the firmware image that has to be replaced is still available on the
device as a backup in case the freshly downloaded firmware image does not
boot or operate correctly.</li>
          <li pn="section-4.1-3.3">Third, there is the newly downloaded firmware image.</li>
        </ul>
        <t indent="0" pn="section-4.1-4">Therefore, the firmware consumer must know where to store the new firmware.
In some cases, this may be implicit (for example, replacing the least recently used
firmware image). In other cases, the storage location of the new firmware must be
explicit, for example, when a device has one or more application firmware images
and a recovery image with limited functionality, sufficient only to perform an update.</t>
        <t indent="0" pn="section-4.1-5">Since many low-end IoT devices do not use position-independent code,
either the bootloader needs to copy the newly downloaded application firmware image
into the location of the old application firmware image and vice versa or
multiple versions of the firmware need to be prepared for different locations.</t>
        <t indent="0" pn="section-4.1-6">In general, it is assumed that the bootloader itself, or a minimal part of it,
will not be updated since a failed update of the bootloader poses a
reliability risk.</t>
        <t indent="0" pn="section-4.1-7">For a bootloader to offer a secure boot functionality, it needs to
implement the following functionality:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1-8">
          <li pn="section-4.1-8.1">The bootloader needs to fetch the manifest
from nonvolatile storage and parse its
contents for subsequent cryptographic verification.</li>
          <li pn="section-4.1-8.2">Cryptographic libraries with hash functions, digital signatures
(for asymmetric crypto), and message authentication codes (for symmetric
crypto) need to be accessible.</li>
          <li pn="section-4.1-8.3">The device needs to have a trust anchor store to verify the
digital signature. Alternatively, access to a key store for use
with the message authentication code may be used.</li>
          <li pn="section-4.1-8.4">There must be an ability to expose boot-process-related data to the application
firmware (such as the status tracker).  This allows
information sharing about the current firmware version and the
status of the firmware update process and whether errors have occurred.</li>
          <li pn="section-4.1-8.5">Produce boot measurements as part of an attestation solution; see
<xref target="I-D.ietf-rats-architecture" format="default" sectionFormat="of" derivedContent="RATS-ARCH"/> for more information (optional).</li>
          <li pn="section-4.1-8.6">The bootloader must be able to decrypt firmware images in case confidentiality protection
was applied. This requires a solution for key management (optional).</li>
        </ul>
      </section>
    </section>
    <section anchor="device" numbered="true" toc="include" removeInRFC="false" pn="section-5">
      <name slugifiedName="name-types-of-iot-devices">Types of IoT Devices</name>
      <t indent="0" pn="section-5-1">Today, there are billions of MCUs used in devices produced by a large
number of silicon manufacturers. While MCUs can vary significantly
in their characteristics, there are a number of similarities that allow us to categorize them into groups.</t>
      <t indent="0" pn="section-5-2">The firmware update architecture, and the manifest format in particular,
needs to offer enough flexibility to cover these common deployment cases.</t>
      <section anchor="single-mcu" numbered="true" toc="include" removeInRFC="false" pn="section-5.1">
        <name slugifiedName="name-single-mcu">Single MCU</name>
        <t indent="0" pn="section-5.1-1">The simplest and currently most common architecture consists of
a single MCU along with its own peripherals.  These SoCs generally
contain some amount of flash memory for code and fixed data, as
well as RAM for working storage.  A notable characteristic of these
SoCs is that the primary code is generally execute in place (XIP).
Due to the non-relocatable nature of the code, the firmware image
needs to be placed in a specific location in flash memory since the code
cannot be executed from an arbitrary location therein. Hence, when
the firmware image is updated, it is necessary to swap the old and
the new image.</t>
      </section>
      <section anchor="single-cpu-with-secure-normal-mode-partitioning" numbered="true" toc="include" removeInRFC="false" pn="section-5.2">
        <name slugifiedName="name-single-cpu-with-partitionin">Single CPU with Partitioning between Secure Mode and Normal Mode</name>
        <t indent="0" pn="section-5.2-1">Another configuration consists of a similar architecture to the
one previously discussed: it contains a single CPU.  However, this CPU supports a security
partitioning scheme that allows memory and other system components to be divided into secure and normal mode.  There will generally be
two images: one for secure mode and one for normal mode.  In this
configuration, firmware upgrades will generally be done by the CPU
in secure mode, which is able to write to both areas of the flash
device. In addition, there are requirements to be able to update
either image independently as well as to update them together
atomically, as specified in the associated manifests.</t>
      </section>
      <section anchor="symmetric-multiple-cpus" numbered="true" toc="include" removeInRFC="false" pn="section-5.3">
        <name slugifiedName="name-symmetric-multiple-cpus">Symmetric Multiple CPUs</name>
        <t indent="0" pn="section-5.3-1">In more complex SoCs with symmetric multiprocessing support, advanced
operating systems, such as Linux, are often used. These SoCs frequently
use an external storage medium, such as raw NAND flash or an embedded Multimedia Card (eMMC). Due to
the higher quantity of resources, these devices are often capable of
storing multiple copies of their firmware images and selecting the most
appropriate one to boot. Many SoCs also support bootloaders that are
capable of updating the firmware image; however, this is typically a last
resort because it requires the device to be held in the bootloader while
the new firmware is downloaded and installed, which results in downtime
for the device. Firmware updates in this class of device are typically
not done in place.</t>
      </section>
      <section anchor="dual-cpu-shared-memory" numbered="true" toc="include" removeInRFC="false" pn="section-5.4">
        <name slugifiedName="name-dual-cpu-shared-memory">Dual CPU, Shared Memory</name>
        <t indent="0" pn="section-5.4-1">This configuration has two or more heterogeneous CPUs in a single SoC that
share memory (flash and RAM).  Generally, there will be a mechanism to prevent
one CPU from unintentionally accessing memory currently allocated to the other.
Upgrades in this case will typically be done by one of the CPUs and is
similar to the single CPU with secure mode.</t>
      </section>
      <section anchor="dual-cpu-other-bus" numbered="true" toc="include" removeInRFC="false" pn="section-5.5">
        <name slugifiedName="name-dual-cpu-other-bus">Dual CPU, Other Bus</name>
        <t indent="0" pn="section-5.5-1">This configuration has two or more heterogeneous CPUs, each having their own memory.
There will be a communication channel between them, but it will be
used as a peripheral, not via shared memory.  In this case, each CPU
will have to be responsible for its own firmware upgrade.  It is
likely that one of the CPUs will be considered the primary CPU and will
direct the other CPU to do the upgrade.  This configuration is
commonly used to offload specific work to other CPUs.  Firmware
dependencies are similar to the other solutions above: sometimes
allowing only one image to be upgraded, other times requiring several
to be upgraded atomically.  Because the updates are happening on
multiple CPUs, upgrading the two images atomically is challenging.</t>
      </section>
    </section>
    <section anchor="manifests" numbered="true" toc="include" removeInRFC="false" pn="section-6">
      <name slugifiedName="name-manifests">Manifests</name>
      <t indent="0" pn="section-6-1">In order for a firmware consumer to apply an update, it has to make several decisions
using manifest-provided information and data available on the device itself. For more
detailed information and a longer list of information elements in the manifest, consult the
information model specification <xref target="I-D.ietf-suit-information-model" format="default" sectionFormat="of" derivedContent="SUIT-INFO-MODEL"/>, which offers justifications
for each element, and the manifest specification <xref target="I-D.ietf-suit-manifest" format="default" sectionFormat="of" derivedContent="SUIT-MANIFEST"/> for details about how this
      information is included in the manifest.</t>
      <table anchor="manifest-info" align="center" pn="table-1">
        <name slugifiedName="name-example-firmware-update-dec">Example Firmware Update Decisions</name>
        <thead>
          <tr>
            <th align="right" colspan="1" rowspan="1">Decision</th>
            <th align="left" colspan="1" rowspan="1">Information Elements</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="right" colspan="1" rowspan="1">Should I trust the author of the firmware?</td>
            <td align="left" colspan="1" rowspan="1">Trust anchors and authorization policies on the device</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">Has the firmware been corrupted?</td>
            <td align="left" colspan="1" rowspan="1">Digital signature and MAC covering the firmware image</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">Does the firmware update apply to this device?</td>
            <td align="left" colspan="1" rowspan="1">Conditions with Vendor ID, Class ID, and Device ID</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">Is the update older than the active firmware?</td>
            <td align="left" colspan="1" rowspan="1">Sequence number in the manifest (1)</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">When should the device apply the update?</td>
            <td align="left" colspan="1" rowspan="1">Wait directive</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">How should the device apply the update?</td>
            <td align="left" colspan="1" rowspan="1">Manifest commands</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">What kind of firmware binary is it?</td>
            <td align="left" colspan="1" rowspan="1">Unpack algorithms to interpret a format</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">Where should the update be obtained?</td>
            <td align="left" colspan="1" rowspan="1">Dependencies on other manifests and firmware image URI in the manifest</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">Where should the firmware be stored?</td>
            <td align="left" colspan="1" rowspan="1">Storage location and component identifier</td>
          </tr>
        </tbody>
      </table>
      <dl indent="6" newline="false" spacing="normal" pn="section-6-3">
        <dt pn="section-6-3.1">(1):</dt>
        <dd pn="section-6-3.2">A device presented with an old but valid manifest and firmware
must not be tricked into installing such firmware since a
vulnerability in the old firmware image may allow an attacker to
gain control of the device.</dd>
      </dl>
      <t indent="0" pn="section-6-4">Keeping the code size and complexity of a manifest parser small is important
for constrained IoT devices. Since the manifest parsing code may
also be used by the bootloader, it can be part of the trusted computing base.</t>
      <t indent="0" pn="section-6-5">A manifest may be used to protect not only firmware images but also
configuration data such as network credentials or personalization data
related to the firmware or software.
Personalization data demonstrates the need for confidentiality to be
maintained between two or more stakeholders that deliver images to
the same device. Personalization data is used with
TEEs, which
benefit from a protocol for managing the life cycle of TAs running inside a TEE. TEEs may obtain TAs
from different authors, and those TAs may require personalization data,
such as payment information, to be securely conveyed to the TEE. The
TA's author does not want to expose the TA's code to any other stakeholder
or third party.
The user does not want to expose the payment information to any other
stakeholder or third party.</t>
    </section>
    <section anchor="securing" numbered="true" toc="include" removeInRFC="false" pn="section-7">
      <name slugifiedName="name-securing-firmware-updates">Securing Firmware Updates</name>
      <t indent="0" pn="section-7-1">Using firmware updates to fix vulnerabilities in devices is important, but securing this
update mechanism is equally important since security problems are
exacerbated by the update mechanism. An update is essentially authorized
remote code execution, so any security problems in the update process
expose that remote code execution system. Failure
to secure the firmware update process will help attackers take control of devices.</t>
      <t indent="0" pn="section-7-2">End-to-end security mechanisms are used to protect the firmware
image and the manifest. The following assumptions are made to allow
the firmware consumer to verify the received firmware image and
manifest before updating the software:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7-3">
        <li pn="section-7-3.1">Authentication ensures that the device can cryptographically identify
the author(s) creating firmware images and manifests. Authenticated
identities may be used as input to the authorization process. Not all
entities creating and signing manifests have the same
permissions. A device needs to determine whether the requested action
is indeed covered by the permission of the party that signed the manifest.
Informing the device about the permissions of the different parties
also happens in an out-of-band fashion and is a duty of the
Trust Provisioning Authority.</li>
        <li pn="section-7-3.2">Integrity protection ensures that no third party can modify the manifest
or the firmware image. To accept an update, a device needs to verify the signature covering
the manifest. There may be one or multiple manifests that need to be
validated, potentially signed by different parties. The device needs
to be in possession of the trust anchors to verify those signatures.
Installing trust anchors to devices via the Trust Provisioning Authority
happens in an out-of-band fashion prior to the firmware update process.</li>
        <li pn="section-7-3.3">

  Confidentiality protection of the firmware image must be done in such a
way that no one aside from the intended firmware consumer(s) and other authorized parties can decrypt it. The information
that is encrypted individually for each device/recipient must be done in a way that is 
usable with Content Distribution Networks (CDNs), bulk storage, and
broadcast protocols. For confidentiality protection of firmware images, the author needs
to be in possession of the certificate/public key or a pre-shared key
of a device. The use of confidentiality protection of firmware images
is optional.</li>
      </ul>
      <t indent="0" pn="section-7-4">A manifest specification must support different cryptographic algorithms
and algorithm extensibility. Moreover, since signature
schemes based on RSA and Elliptic Curve Cryptography (ECC) may become vulnerable to quantum-accelerated key extraction in the
future, unchangeable bootloader code in ROM is recommended to use post-quantum
secure signature schemes such as hash-based signatures <xref target="RFC8778" format="default" sectionFormat="of" derivedContent="RFC8778"/>. A
bootloader author must carefully consider the service lifetime of their
product and the time horizon for quantum-accelerated key extraction.
At the time of writing, the worst-case estimate for the time horizon to key
extraction with quantum acceleration is approximately 2030, based on
current research <xref target="quantum-factorization" format="default" sectionFormat="of" derivedContent="quantum-factorization"/>.</t>
      <t indent="0" pn="section-7-5">When a device obtains a monolithic firmware image from a single author
without any additional approval steps, the authorization flow is
relatively simple. However, there are other cases where more complex
policy decisions need to be made before updating a device.</t>
      <t indent="0" pn="section-7-6">In this architecture, the authorization policy is separated from
the underlying communication architecture. This is accomplished
by separating the entities from their permissions. For example,
an author may not have the authority to install a firmware image
on a device in critical infrastructure without the authorization
of a device operator. In this case, the device may be programmed
to reject firmware updates unless they are signed both by the
      firmware author and by the device operator.</t>
      <t indent="0" pn="section-7-7">Alternatively, a device may trust precisely one entity that
does all permission management and coordination. This entity
allows the device to offload complex permissions
calculations for the device.</t>
    </section>
    <section anchor="example" numbered="true" toc="include" removeInRFC="false" pn="section-8">
      <name slugifiedName="name-example">Example</name>
      <t indent="0" pn="section-8-1"><xref target="firmware-update" format="default" sectionFormat="of" derivedContent="Figure 2"/> illustrates an example message flow
for distributing a firmware image to a device. The firmware
and manifest are stored on the same firmware server and
      distributed in a detached manner.</t>
      <figure anchor="firmware-update" align="left" suppress-title="false" pn="figure-2">
        <name slugifiedName="name-first-example-flow-for-a-fi">First Example Flow for a Firmware Update</name>
        <artwork name="" type="" align="center" alt="" pn="section-8-2.1">
+--------+    +-----------------+    +-----------------------------+
|        |    | Firmware Server |    |         IoT Device          |
| Author |    | Status Tracker  |    | +------------+ +----------+ |
+--------+    | Server          |    | |  Firmware  | |Bootloader| |
  |           +-----------------+    | |  Consumer  | |          | |
  |                   |              | +------------+ +----------+ |
  |                   |              |      |                |     |
  |                   |              |  +-----------------------+  |
  | Create Firmware   |              |  | Status Tracker Client |  |
  |--------------+    |              |  +-----------------------+  |
  |              |    |               `''''''''''''''''''''''''''''
  |&lt;-------------+    |                     |        |       |
  |                   |                     |        |       |
  | Upload Firmware   |                     |        |       |
  |------------------&gt;|                     |        |       |
  |                   |                     |        |       |
  | Create Manifest   |                     |        |       |
  |---------------+   |                     |        |       |
  |               |   |                     |        |       |
  |&lt;--------------+   |                     |        |       |
  |                   |                     |        |       |
  | Sign Manifest     |                     |        |       |
  |-------------+     |                     |        |       |
  |             |     |                     |        |       |
  |&lt;------------+     |                     |        |       |
  |                   |                     |        |       |
  | Upload Manifest   |                     |        |       |
  |------------------&gt;|  Notification of    |        |       |
  |                   |  new firmware image |        |       |
  |                   |-----------------------------&gt;|       |
  |                   |                     |        |       |
  |                   |                     |Initiate|       |
  |                   |                     | Update |       |
  |                   |                     |&lt;-------|       |
  |                   |                     |        |       |
  |                   |   Query Manifest    |        |       |
  |                   |&lt;--------------------|        .       |
  |                   |                     |        .       |
  |                   |   Send Manifest     |        .       |
  |                   |--------------------&gt;|        .       |
  |                   |                     | Validate       |
  |                   |                     | Manifest       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |&lt;-------+       |
  |                   |                     |        .       |
  |                   |  Request Firmware   |        .       |
  |                   |&lt;--------------------|        .       |
  |                   |                     |        .       |
  |                   | Send Firmware       |        .       |
  |                   |--------------------&gt;|        .       |
  |                   |                     | Verify .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |&lt;-------+       |
  |                   |                     |        .       |
  |                   |                     | Store  .       |
  |                   |                     | Firmware       |
  |                   |                     |--------+       |
  |                   |                     |        |       |
  |                   |                     |&lt;-------+       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     | Update |       |
  |                   |                     |Complete|       |
  |                   |                     |-------&gt;|       |
  |                   |                              |       |
  |                   |  Firmware Update Completed   |       |
  |                   |&lt;-----------------------------|       |
  |                   |                              |       |
  |                   |  Reboot                      |       |
  |                   |-----------------------------&gt;|       |
  |                   |                     |        |       |
  |                   |                     |        |       |
  |                   |                     |        |Reboot |
  |                   |                     |        |------&gt;|
  |                   |                     |        |       |
  |                   |                     |        .       |
  |                   |                 +---+----------------+--+
  |                   |                S|   |                |  |
  |                   |                E|   | Verify         |  |
  |                   |                C|   | Firmware       |  |
  |                   |                U|   | +--------------|  |
  |                   |                R|   | |              |  |
  |                   |                E|   | +-------------&gt;|  |
  |                   |                 |   |                |  |
  |                   |                B|   | Activate new   |  |
  |                   |                O|   | Firmware       |  |
  |                   |                O|   | +--------------|  |
  |                   |                T|   | |              |  |
  |                   |                 |   | +-------------&gt;|  |
  |                   |                P|   |                |  |
  |                   |                R|   | Boot new       |  |
  |                   |                O|   | Firmware       |  |
  |                   |                C|   | +--------------|  |
  |                   |                E|   | |              |  |
  |                   |                S|   | +-------------&gt;|  |
  |                   |                S|   |                |  |
  |                   |                 +---+----------------+--+
  |                   |                     |        .       |
  |                   |                     |        |       |
  |                   |                     .        |       |
  |                   |  Device running new firmware |       |
  |                   |&lt;-----------------------------|       |
  |                   |                     .        |       |
  |                   |                              |       |
</artwork>
      </figure>
      <t indent="0" pn="section-8-3"><xref target="firmware-update2" format="default" sectionFormat="of" derivedContent="Figure 3"/> shows an exchange that starts with the
status tracker querying the device for its current firmware version.
Later, a new firmware version becomes available, and since this
device is running an older version, the status tracker server interacts
with the device to initiate an update.</t>
      <t indent="0" pn="section-8-4">The manifest and the firmware are stored on different servers in this
example. When the device processes the manifest, it learns where to
download the new firmware version. The firmware consumer downloads
the firmware image with the newer version X.Y.Z after successful validation
of the manifest. Subsequently, a reboot is initiated, and the secure
boot process starts. Finally, the device reports the successful boot
of the new firmware version.</t>
      <figure anchor="firmware-update2" align="left" suppress-title="false" pn="figure-3">
        <name slugifiedName="name-second-example-flow-for-a-f">Second Example Flow for a Firmware Update</name>
        <artwork name="" type="" align="center" alt="" pn="section-8-5.1">
 +---------+   +-----------------+    +-----------------------------+
 | Status  |   | Firmware Server |    | +------------+ +----------+ |
 | Tracker |   | Status Tracker  |    | |  Firmware  | |Bootloader| |
 | Server  |   | Server          |    | |  Consumer  | |          | |
 +---------+   +-----------------+    | |  +Status   | +----------+ |
      |                |              | |  Tracker   |        |     |
      |                |              | |  Client    |        |     |
      |                |              | +------------+        |     |
      |                |              |      |  IoT Device    |     |
      |                |               `''''''''''''''''''''''''''''
      |                |                     |                |
      |        Query Firmware Version        |                |
      |-------------------------------------&gt;|                |
      |        Firmware Version A.B.C        |                |
      |&lt;-------------------------------------|                |
      |                |                     |                |
      |         &lt;&lt;some time later&gt;&gt;          |                |
      |                |                     |                |
    _,...._         _,...._                  |                |
  ,'       `.     ,'       `.                |                |
 |   New     |   |   New     |               |                |
 \ Manifest  /   \ Firmware  /               |                |
  `.._   _,,'     `.._   _,,'                |                |
      `''             `''                    |                |
      |            Push manifest             |                |
      |----------------+--------------------&gt;|                |
      |                |                     |                |
      |                '                     |                '
      |                |                     | Validate       |
      |                |                     | Manifest       |
      |                |                     |---------+      |
      |                |                     |         |      |
      |                |                     |&lt;--------+      |
      |                | Request firmware    |                |
      |                | X.Y.Z               |                |
      |                |&lt;--------------------|                |
      |                |                     |                |
      |                | Firmware X.Y.Z      |                |
      |                |--------------------&gt;|                |
      |                |                     |                |
      |                |                     | Verify         |
      |                |                     | Firmware       |
      |                |                     |--------------+ |
      |                |                     |              | |
      |                |                     |&lt;-------------+ |
      |                |                     |                |
      |                |                     | Store          |
      |                |                     | Firmware       |
      |                |                     |-------------+  |
      |                |                     |             |  |
      |                |                     |&lt;------------+  |
      |                |                     |                |
      |                |                     |                |
      |                |                     | Trigger Reboot |
      |                |                     |---------------&gt;|
      |                |                     |                |
      |                |                     |                |
      |                |                     | __..-------..._'
      |                |                    ,-'               `-.
      |                |                   |      Secure Boot    |
      |                |                   `-.                 _/
      |                |                     |`--..._____,,.,-'
      |                |                     |                |
      | Device running firmware X.Y.Z        |                |
      |&lt;-------------------------------------|                |
      |                |                     |                |
      |                |                     |                |
</artwork>
      </figure>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-9-1">This document has no IANA actions.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="include" removeInRFC="false" pn="section-10">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-10-1">This document describes the terminology, requirements, and an architecture for
firmware updates of IoT devices. The content of the document is thereby
focused on improving the security of IoT devices via firmware update mechanisms
and informs the standardization of a manifest format.</t>
      <t indent="0" pn="section-10-2">An in-depth examination of the security considerations of the
architecture is presented in <xref target="I-D.ietf-suit-information-model" format="default" sectionFormat="of" derivedContent="SUIT-INFO-MODEL"/>.</t>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-suit-information-model" to="SUIT-INFO-MODEL"/>
    <displayreference target="I-D.ietf-teep-architecture" to="TEEP-ARCH"/>
    <displayreference target="I-D.ietf-suit-manifest" to="SUIT-MANIFEST"/>
    <displayreference target="I-D.ietf-rats-architecture" to="RATS-ARCH"/>
    <references pn="section-11">
      <name slugifiedName="name-informative-references">Informative References</name>
      <reference anchor="LwM2M" target="http://www.openmobilealliance.org/release/LightweightM2M/V1_0_2-20180209-A/OMA-TS-LightweightM2M-V1_0_2-20180209-A.pdf" quoteTitle="true" derivedAnchor="LwM2M">
        <front>
          <title>Lightweight Machine to Machine Technical Specification</title>
          <author>
            <organization showOnFrontPage="true">Open Mobile Alliance</organization>
          </author>
          <date year="2018" month="February"/>
        </front>
        <seriesInfo name="Version" value="1.0.2"/>
      </reference>
      <reference anchor="quantum-factorization" target="https://www.nature.com/articles/s41598-018-36058-z" quoteTitle="true" derivedAnchor="quantum-factorization">
        <front>
          <title>Quantum Annealing for Prime Factorization</title>
          <author initials="S." surname="Jiang" fullname="Shuxian Jiang">
            <organization showOnFrontPage="true">Department of Computer Science, Purdue University</organization>
          </author>
          <author initials="K.A." surname="Britt" fullname="Keith A. Britt">
            <organization showOnFrontPage="true">Quantum Computing Institute, Oak Ridge National Laboratory</organization>
          </author>
          <author initials="A.J." surname="McCaskey" fullname="Alexander J. McCaskey">
            <organization showOnFrontPage="true">Quantum Computing Institute, Oak Ridge National Laboratory</organization>
          </author>
          <author initials="T.S." surname="Humble" fullname="Travis S. Humble">
            <organization showOnFrontPage="true">Quantum Computing Institute, Oak Ridge National Laboratory</organization>
          </author>
          <author initials="S." surname="Kais" fullname="Sabre Kais">
            <organization showOnFrontPage="true">Department of Chemistry, Physics and Birck Nanotechnology Center, Purdue University</organization>
          </author>
          <date year="2018" month="December"/>
        </front>
        <seriesInfo name="Scientific Reports" value="8"/>
      </reference>
      <reference anchor="I-D.ietf-rats-architecture" quoteTitle="true" target="https://tools.ietf.org/html/draft-ietf-rats-architecture-12" derivedAnchor="RATS-ARCH">
        <front>
          <title>Remote Attestation Procedures Architecture</title>
          <author fullname="Henk Birkholz">
            <organization showOnFrontPage="true">Fraunhofer SIT</organization>
          </author>
          <author fullname="Dave Thaler">
            <organization showOnFrontPage="true">Microsoft</organization>
          </author>
          <author fullname="Michael Richardson">
            <organization showOnFrontPage="true">Sandelman Software Works</organization>
          </author>
          <author fullname="Ned Smith">
            <organization showOnFrontPage="true">Intel Corporation</organization>
          </author>
          <author fullname="Wei Pan">
            <organization showOnFrontPage="true">Huawei Technologies</organization>
          </author>
          <date month="April" day="23" year="2021"/>
          <abstract>
            <t indent="0">   In network protocol exchanges it is often useful for one end of a
   communication to know whether the other end is in an intended
   operating state.  This document provides an architectural overview of
   the entities involved that make such tests possible through the
   process of generating, conveying, and evaluating evidentiary claims.
   An attempt is made to provide for a model that is neutral toward
   processor architectures, the content of claims, and protocols.

            </t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-12"/>
        <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-rats-architecture-12.txt"/>
        <refcontent>Work in Progress</refcontent>
      </reference>
      <reference anchor="RFC6024" target="https://www.rfc-editor.org/info/rfc6024" quoteTitle="true" derivedAnchor="RFC6024">
        <front>
          <title>Trust Anchor Management Requirements</title>
          <author initials="R." surname="Reddy" fullname="R. Reddy">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="C." surname="Wallace" fullname="C. Wallace">
            <organization showOnFrontPage="true"/>
          </author>
          <date year="2010" month="October"/>
          <abstract>
            <t indent="0">A trust anchor represents an authoritative entity via a public key and associated data.  The public key is used to verify digital signatures, and the associated data is used to constrain the types of information for which the trust anchor is authoritative.  A relying party uses trust anchors to determine if a digitally signed object is valid by verifying a digital signature using the trust anchor's public key, and by enforcing the constraints expressed in the associated data for the trust anchor.  This document describes some of the problems associated with the lack of a standard trust anchor management mechanism and defines requirements for data formats and push-based protocols designed to address these problems.  This  document is not an Internet Standards Track specification; it is published for informational purposes.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6024"/>
        <seriesInfo name="DOI" value="10.17487/RFC6024"/>
      </reference>
      <reference anchor="RFC6763" target="https://www.rfc-editor.org/info/rfc6763" quoteTitle="true" derivedAnchor="RFC6763">
        <front>
          <title>DNS-Based Service Discovery</title>
          <author initials="S." surname="Cheshire" fullname="S. Cheshire">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="M." surname="Krochmal" fullname="M. Krochmal">
            <organization showOnFrontPage="true"/>
          </author>
          <date year="2013" month="February"/>
          <abstract>
            <t indent="0">This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6763"/>
        <seriesInfo name="DOI" value="10.17487/RFC6763"/>
      </reference>
      <reference anchor="RFC7228" target="https://www.rfc-editor.org/info/rfc7228" quoteTitle="true" derivedAnchor="RFC7228">
        <front>
          <title>Terminology for Constrained-Node Networks</title>
          <author initials="C." surname="Bormann" fullname="C. Bormann">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="M." surname="Ersue" fullname="M. Ersue">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="A." surname="Keranen" fullname="A. Keranen">
            <organization showOnFrontPage="true"/>
          </author>
          <date year="2014" month="May"/>
          <abstract>
            <t indent="0">The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks.  This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7228"/>
        <seriesInfo name="DOI" value="10.17487/RFC7228"/>
      </reference>
      <reference anchor="RFC8240" target="https://www.rfc-editor.org/info/rfc8240" quoteTitle="true" derivedAnchor="RFC8240">
        <front>
          <title>Report from the Internet of Things Software Update (IoTSU) Workshop 2016</title>
          <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="S." surname="Farrell" fullname="S. Farrell">
            <organization showOnFrontPage="true"/>
          </author>
          <date year="2017" month="September"/>
          <abstract>
            <t indent="0">This document provides a summary of the Internet of Things Software Update (IoTSU) Workshop that took place at Trinity College Dublin, Ireland on the 13th and 14th of June, 2016.  The main goal of the workshop was to foster a discussion on requirements, challenges, and solutions for bringing software and firmware updates to IoT devices. This report summarizes the discussions and lists recommendations to the standards community.</t>
            <t indent="0">Note that this document is a report on the proceedings of the workshop.  The views and positions documented in this report are those of the workshop participants and do not necessarily reflect IAB views and positions.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8240"/>
        <seriesInfo name="DOI" value="10.17487/RFC8240"/>
      </reference>
      <reference anchor="RFC8778" target="https://www.rfc-editor.org/info/rfc8778" quoteTitle="true" derivedAnchor="RFC8778">
        <front>
          <title>Use of the HSS/LMS Hash-Based Signature Algorithm with CBOR Object Signing and Encryption (COSE)</title>
          <author initials="R." surname="Housley" fullname="R. Housley">
            <organization showOnFrontPage="true"/>
          </author>
          <date year="2020" month="April"/>
          <abstract>
            <t indent="0">This document specifies the conventions for using the Hierarchical Signature System (HSS) / Leighton-Micali Signature (LMS) hash-based signature algorithm with the CBOR Object Signing and Encryption (COSE) syntax. The HSS/LMS algorithm is one form of hash-based digital signature; it is described in RFC 8554.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8778"/>
        <seriesInfo name="DOI" value="10.17487/RFC8778"/>
      </reference>
      <reference anchor="I-D.ietf-suit-information-model" quoteTitle="true" target="https://tools.ietf.org/html/draft-ietf-suit-information-model-11" derivedAnchor="SUIT-INFO-MODEL">
        <front>
          <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
          <author fullname="Brendan Moran">
            <organization showOnFrontPage="true">Arm Limited</organization>
          </author>
          <author fullname="Hannes Tschofenig">
            <organization showOnFrontPage="true">Arm Limited</organization>
          </author>
          <author fullname="Henk Birkholz">
            <organization showOnFrontPage="true">Fraunhofer SIT</organization>
          </author>
          <date month="April" day="6" year="2021"/>
          <abstract>
            <t indent="0">   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

            </t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-suit-information-model-11"/>
        <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-information-model-11.txt"/>
        <refcontent>Work in Progress</refcontent>
      </reference>
      <reference anchor="I-D.ietf-suit-manifest" quoteTitle="true" target="https://tools.ietf.org/html/draft-ietf-suit-manifest-12" derivedAnchor="SUIT-MANIFEST">
        <front>
          <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
          <author fullname="Brendan Moran">
            <organization showOnFrontPage="true">Arm Limited</organization>
          </author>
          <author fullname="Hannes Tschofenig">
            <organization showOnFrontPage="true">Arm Limited</organization>
          </author>
          <author fullname="Henk Birkholz">
            <organization showOnFrontPage="true">Fraunhofer SIT</organization>
          </author>
          <author fullname="Koen Zandberg">
            <organization showOnFrontPage="true">Inria</organization>
          </author>
          <date month="February" day="22" year="2021"/>
          <abstract>
            <t indent="0">   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

            </t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-12"/>
        <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-12.txt"/>
        <refcontent>Work in Progress</refcontent>
      </reference>
      <reference anchor="I-D.ietf-teep-architecture" quoteTitle="true" target="https://tools.ietf.org/html/draft-ietf-teep-architecture-14" derivedAnchor="TEEP-ARCH">
        <front>
          <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
          <author fullname="Mingliang Pei">
            <organization showOnFrontPage="true">Broadcom</organization>
          </author>
          <author fullname="Hannes Tschofenig">
            <organization showOnFrontPage="true">Arm Limited</organization>
          </author>
          <author fullname="Dave Thaler">
            <organization showOnFrontPage="true">Microsoft</organization>
          </author>
          <author fullname="David Wheeler">
            <organization showOnFrontPage="true">Intel</organization>
          </author>
          <date month="February" day="22" year="2021"/>
          <abstract>
            <t indent="0">   A Trusted Execution Environment (TEE) is an environment that enforces
   that any code within that environment cannot be tampered with, and
   that any data used by such code cannot be read or tampered with by
   any code outside that environment.  This architecture document
   motivates the design and standardization of a protocol for managing
   the lifecycle of trusted applications running inside such a TEE.

            </t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-teep-architecture-14"/>
        <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-teep-architecture-14.txt"/>
        <refcontent>Work in Progress</refcontent>
      </reference>
    </references>
    <section anchor="acknowledgements" numbered="false" toc="include" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">We would like to thank the following individuals for their feedback:</t>
      <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-appendix.a-2">
        <li pn="section-appendix.a-2.1">
          <t indent="0" pn="section-appendix.a-2.1.1"><contact fullname="Geraint Luff"/></t>
        </li>
        <li pn="section-appendix.a-2.2">
          <t indent="0" pn="section-appendix.a-2.2.1"><contact fullname="Amyas Phillips"/></t>
        </li>
        <li pn="section-appendix.a-2.3">
          <t indent="0" pn="section-appendix.a-2.3.1"><contact fullname="Dan Ros"/></t>
        </li>
        <li pn="section-appendix.a-2.4">
          <t indent="0" pn="section-appendix.a-2.4.1"><contact fullname="Thomas Eichinger"/></t>
        </li>
        <li pn="section-appendix.a-2.5">
          <t indent="0" pn="section-appendix.a-2.5.1"><contact fullname="Michael Richardson"/></t>
        </li>
        <li pn="section-appendix.a-2.6">
          <t indent="0" pn="section-appendix.a-2.6.1"><contact fullname="Emmanuel Baccelli"/></t>
        </li>
        <li pn="section-appendix.a-2.7">
          <t indent="0" pn="section-appendix.a-2.7.1"><contact fullname="Ned Smith"/></t>
        </li>
        <li pn="section-appendix.a-2.8">
          <t indent="0" pn="section-appendix.a-2.8.1"><contact fullname="Jim Schaad"/></t>
        </li>
        <li pn="section-appendix.a-2.9">
          <t indent="0" pn="section-appendix.a-2.9.1"><contact fullname="Carsten Bormann"/></t>
        </li>
        <li pn="section-appendix.a-2.10">
          <t indent="0" pn="section-appendix.a-2.10.1"><contact fullname="Cullen Jennings"/></t>
        </li>
        <li pn="section-appendix.a-2.11">
          <t indent="0" pn="section-appendix.a-2.11.1"><contact fullname="Olaf Bergmann"/></t>
        </li>
        <li pn="section-appendix.a-2.12">
          <t indent="0" pn="section-appendix.a-2.12.1"><contact fullname="Suhas Nandakumar"/></t>
        </li>
        <li pn="section-appendix.a-2.13">
          <t indent="0" pn="section-appendix.a-2.13.1"><contact fullname="Phillip Hallam-Baker"/></t>
        </li>
        <li pn="section-appendix.a-2.14">
          <t indent="0" pn="section-appendix.a-2.14.1"><contact fullname="Marti Bolivar"/></t>
        </li>
        <li pn="section-appendix.a-2.15">
          <t indent="0" pn="section-appendix.a-2.15.1"><contact fullname="Andrzej Puzdrowski"/></t>
        </li>
        <li pn="section-appendix.a-2.16">
          <t indent="0" pn="section-appendix.a-2.16.1"><contact fullname="Markus Gueller"/></t>
        </li>
        <li pn="section-appendix.a-2.17">
          <t indent="0" pn="section-appendix.a-2.17.1"><contact fullname="Henk Birkholz"/></t>
        </li>
        <li pn="section-appendix.a-2.18">
          <t indent="0" pn="section-appendix.a-2.18.1"><contact fullname="Jintao Zhu"/></t>
        </li>
        <li pn="section-appendix.a-2.19">
          <t indent="0" pn="section-appendix.a-2.19.1"><contact fullname="Takeshi Takahashi"/></t>
        </li>
        <li pn="section-appendix.a-2.20">
          <t indent="0" pn="section-appendix.a-2.20.1"><contact fullname="Jacob Beningo"/></t>
        </li>
        <li pn="section-appendix.a-2.21">
          <t indent="0" pn="section-appendix.a-2.21.1"><contact fullname="Kathleen Moriarty"/></t>
        </li>
        <li pn="section-appendix.a-2.22">
          <t indent="0" pn="section-appendix.a-2.22.1"><contact fullname="Bob Briscoe"/></t>
        </li>
        <li pn="section-appendix.a-2.23">
          <t indent="0" pn="section-appendix.a-2.23.1"><contact fullname="Roman Danyliw"/></t>
        </li>
        <li pn="section-appendix.a-2.24">
          <t indent="0" pn="section-appendix.a-2.24.1"><contact fullname="Brian Carpenter"/></t>
        </li>
        <li pn="section-appendix.a-2.25">
          <t indent="0" pn="section-appendix.a-2.25.1"><contact fullname="Theresa Enghardt"/></t>
        </li>
        <li pn="section-appendix.a-2.26">
          <t indent="0" pn="section-appendix.a-2.26.1"><contact fullname="Rich Salz"/></t>
        </li>
        <li pn="section-appendix.a-2.27">
          <t indent="0" pn="section-appendix.a-2.27.1"><contact fullname="Mohit Sethi"/></t>
        </li>
        <li pn="section-appendix.a-2.28">
          <t indent="0" pn="section-appendix.a-2.28.1"><contact fullname="Éric Vyncke"/></t>
        </li>
        <li pn="section-appendix.a-2.29">
          <t indent="0" pn="section-appendix.a-2.29.1"><contact fullname="Alvaro Retana"/></t>
        </li>
        <li pn="section-appendix.a-2.30">
          <t indent="0" pn="section-appendix.a-2.30.1"><contact fullname="Barry Leiba"/></t>
        </li>
        <li pn="section-appendix.a-2.31">
          <t indent="0" pn="section-appendix.a-2.31.1"><contact fullname="Benjamin Kaduk"/></t>
        </li>
        <li pn="section-appendix.a-2.32">
          <t indent="0" pn="section-appendix.a-2.32.1"><contact fullname="Martin Duke"/></t>
        </li>
        <li pn="section-appendix.a-2.33">
          <t indent="0" pn="section-appendix.a-2.33.1"><contact fullname="Robert Wilton"/></t>
        </li>
      </ul>
      <t indent="0" pn="section-appendix.a-3">We would also like to thank the WG chairs, <contact fullname="Russ Housley"/>, <contact fullname="David Waltermire"/>, and <contact fullname="Dave Thaler"/> for their support and review.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="B." surname="Moran" fullname="Brendan Moran">
        <organization showOnFrontPage="true">Arm Limited</organization>
        <address>
          <email>Brendan.Moran@arm.com</email>
        </address>
      </author>
      <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization showOnFrontPage="true">Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </author>
      <author initials="D." surname="Brown" fullname="David Brown">
        <organization showOnFrontPage="true">Linaro</organization>
        <address>
          <email>david.brown@linaro.org</email>
        </address>
      </author>
      <author initials="M." surname="Meriac" fullname="Milosch Meriac">
        <organization showOnFrontPage="true">Consultant</organization>
        <address>
          <email>milosch@meriac.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
